<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>C1.Win.C1Document.4</name>
  </assembly>
  <members>
    <member name="T:C1.Win.C1Document.C1Document">
      <summary>１つの ComponentOne ドキュメントを表します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.IRenderObjectOwner">
      <summary>このインタフェースは、RenderObject オブジェクトの所有者として機能するオブジェクトで 実装する必要があります。</summary>
    </member>
    <member name="T:C1.Win.C1Document.IDocumentObjectOwner">
      <summary>
        <see cref="T:C1.Win.C1Document.DocumentObject" />を所有するオブジェクトで実装する必要があります。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1Document.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1Document.FindRenderObject(System.String)">
      <summary>描画オブジェクトを名前で検索します。</summary>
      <param name="name">検索する名前。</param>
      <returns>見つかったオブジェクト、または null。</returns>
    </member>
    <member name="M:C1.Win.C1Document.C1Document.Clear">
      <summary>現在のドキュメントをクリアします。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1Document.Body">
      <summary>ドキュメントの本文を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1Document.DocumentInfo">
      <summary>
        現在のドキュメントに関する情報（作成者、会社名など）を含む
        <see cref="P:C1.Win.C1Document.C1Document.DocumentInfo" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1Document.CompatibilityOptions">
      <summary>
        C1PrintDocument の以前のバージョンとの互換性を判定する
        <see cref="P:C1.Win.C1Document.C1Document.CompatibilityOptions" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1Document.Dictionary">
      <summary>
        現在のドキュメントの辞書を取得します。
        辞書を使用すると、再利用可能なリソース（ドキュメントの複数の場所で使用される画像など）を保持できます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1Document.Outlines">
      <summary>
        現在のドキュメントの
        <see cref="T:C1.Win.C1Document.OutlineNode" />オブジェクトのコレクションを表す
        <see cref="T:C1.Win.C1Document.OutlineNodeCollection" />を 取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.C1HighlightAttrs">
      <summary>ドキュメントの内容を強調表示するために使用される属性を定義します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.C1LinkTarget">
      <summary>別のドキュメントへのリンク、または同じドキュメント内の別の場所へのリンクを定義します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.C1Hyperlink">
      <summary>
        ドキュメント内のハイパーリンクを表します。ハイパーリンクは、
        <see cref="T:C1.Win.C1Document.RenderObject" />の
        <see cref="P:C1.Win.C1Document.RenderObject.Hyperlink" />プロパティ、または
        <see cref="T:C1.Win.C1Document.ParagraphObject" />の
        <see cref="P:C1.Win.C1Document.ParagraphObject.Hyperlink" />プロパティに割り当てることができます。
        この場合、ビューアで該当するオブジェクトをクリックすると、ハイパーリンクの
        <see cref="P:C1.Win.C1Document.C1Hyperlink.LinkTarget" />にジャンプします。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1Hyperlink.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Hyperlink" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1Hyperlink.AssignFrom(C1.Win.C1Document.C1Hyperlink)">
      <summary>指定されたオブジェクトのプロパティを現在のオブジェクトにコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.Win.C1Document.C1Hyperlink.Clone">
      <summary>現在のオブジェクトのコピーを作成します。</summary>
      <returns>新しく作成されたオブジェクト。</returns>
    </member>
    <member name="P:C1.Win.C1Document.C1Hyperlink.StatusText">
      <summary>
        マウスポインタをリンクの上に置いたときに、ステータス行に表示されるテキスト（ドキュメントが
        <b>C1PrintPreview</b>に表示される場合）。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1Hyperlink.LinkTarget">
      <summary>現在のハイパーリンクのリンク先を決定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1Hyperlink.Tag">
      <summary>現在のハイパーリンクに関連付けられた任意のデータを取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.DrawAttrs">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Page" />、
        <see cref="T:C1.Win.C1Document.RenderFragment" />の描画に使用される属性を指定する構造体。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.IC1HighlightingManager">
      <summary>
        このインタフェースは、
        <see cref="T:C1.Win.C1Document.C1Page" />オブジェクトと
        <see cref="T:C1.Win.C1Document.RenderFragment" />オブジェクトによって使用され、強調表示される領域を決定します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.C1Page">
      <summary>C1DocumentView の単一のページを表します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.IPageObject">
      <summary>
        生成されるドキュメントのコンテンツを表すすべてのオブジェクトに共通のインタフェースを定義します。
        このインタフェースは、
        <see cref="T:C1.Win.C1Document.C1Page" />、
        <see cref="T:C1.Win.C1Document.RenderFragment" />などで実装されます。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.ICloneableObject">
      <summary>クローン可能なオブジェクトを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.ICloneableObject.CreateSame">
      <summary>クローンを作成します。</summary>
      <returns>新しく作成されたオブジェクト。</returns>
    </member>
    <member name="M:C1.Win.C1Document.ICloneableObject.AssignFrom(System.Object)">
      <summary>別のオブジェクトからすべてを割り当てます。</summary>
      <param name="source">ソースオブジェクト。</param>
    </member>
    <member name="P:C1.Win.C1Document.C1Page.PageIndex">
      <summary>生成されたドキュメント内のページの論理インデックスを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1Page.HasFragments">
      <summary>
        <see cref="P:C1.Win.C1Document.C1Page.Fragments" />コレクションが空でないかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1Page.Fragments">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.C1Page" />に含まれる
        <see cref="T:C1.Win.C1Document.RenderFragment" />オブジェクトのコレクションを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.C1PageSettings">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />のページ設定を表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1PageSettings.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.C1PageSettings" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1PageSettings.IsLayoutEqual(System.Drawing.Printing.PageSettings)">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.C1PageSettings" />オブジェクトに、指定された
        <see cref="T:System.Drawing.Printing.PageSettings" />オブジェクトと同じレイアウト（同じ用紙サイズおよびマージン）があるかどうかを示す値を取得します。
      </summary>
      <param name="pageSettings">比較する PageSettings オブジェクト。</param>
      <returns>
        レイアウトが同じ場合は
        <b>true</b>、そうでない場合は
        <B>false</B>を返します。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1PageSettings.AssignFrom(System.Drawing.Printing.PageSettings)">
      <summary>
        プロパティを
        <see cref="T:System.Drawing.Printing.PageSettings" />から現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.Win.C1Document.C1PageSettings.ToPageSettings(System.Drawing.Printing.PrinterSettings)">
      <summary>
        <see cref="T:System.Drawing.Printing.PageSettings" />クラスのインスタンスを作成し、現在の
        <see cref="T:C1.Win.C1Document.C1PageSettings" />オブジェクトのプロパティで初期化します。
      </summary>
      <param name="printerSettings">
        結果として得られる
        <see cref="T:System.Drawing.Printing.PageSettings" />の 作成に使用する
        <see cref="T:System.Drawing.Printing.PrinterSettings" />オブジェクト。
        null の場合は、デフォルトのプリンタが使用されます。
      </param>
      <returns>
        新しく作成された
        <see cref="T:System.Drawing.Printing.PageSettings" />オブジェクト。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.C1PageSettings.Landscape">
      <summary>
        横方向を使用するかどうかを示す値を取得または設定します。
        このプロパティを変更すると、ページの高さと幅が入れ替わります。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1PageSettings.PaperSize">
      <summary>
        用紙の種類を取得または設定します。このプロパティを変更すると、
        <see cref="P:C1.Win.C1Document.C1PageSettings.Width" />や
        <see cref="P:C1.Win.C1Document.C1PageSettings.Height" />も変更されます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1PageSettings.Width">
      <summary>用紙の幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1PageSettings.Height">
      <summary>用紙の高さを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1PageSettings.LeftMargin">
      <summary>左マージンを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1PageSettings.TopMargin">
      <summary>上マージンを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1PageSettings.RightMargin">
      <summary>右マージンを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1PageSettings.BottomMargin">
      <summary>下マージンを取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.BordersModeEnum">
      <summary>オブジェクトをドキュメントにレイアウトする際の境界線の太さを考慮する際のさまざまなモードを指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BordersModeEnum.Default">
      <summary>境界線全体がオブジェクトの一部と見なされます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BordersModeEnum.C1Report">
      <summary>
        境界線の太さの内側半分はオブジェクトの一部と見なされ、
        外側半分はオブジェクトのスペースの外側と見なされます。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BordersModeEnum.Rdl">
      <summary>
        オブジェクトのサイズとレイアウトを計算する際に、境界線の太さをまったく考慮に入れません。
        境界線はオブジェクトの境界の中央に描画されます。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.CompatibilityOptions">
      <summary>
        C1PrintDocument の互換性オプションを定義します。
        C1PrintDocument の以前のバージョンとの互換性を指定するプロパティが含まれます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.CompatibilityOptions.AssignFrom(C1.Win.C1Document.CompatibilityOptions)">
      <summary>別のオブジェクトからこのオブジェクトにプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.Win.C1Document.CompatibilityOptions.Reset">
      <summary>このオブジェクトのプロパティをデフォルト値にリセットします。</summary>
    </member>
    <member name="P:C1.Win.C1Document.CompatibilityOptions.BordersMode">
      <summary>
        ドキュメント内で、境界線がオブジェクトのレイアウトにどのように影響するかを指定する値を取得または設定します。
        <para>
          詳細については、
          <see cref="T:C1.Win.C1Document.BordersModeEnum" />を参照してください。
        </para><para>
          デフォルト値は、
          <see cref="F:C1.Win.C1Document.BordersModeEnum.Default" />です。
        </para>
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.CompatibilityOptions.KeepImages">
      <summary>
        ドキュメントの辞書内の画像を
        <b>Image</b>オブジェクトとして保持するかどうかを指定します。
        このプロパティを
        <b>false</b>に設定すると、画像を生データとして保存し、メモリ使用量を最適化できます。
      </summary>
      <para>
        デフォルト値は <b>true</b> です。

      </para>
    </member>
    <member name="P:C1.Win.C1Document.CompatibilityOptions.StretchBarCodesAsImages">
      <summary>
        バーコードを画像として引き伸ばすかどうかを示す値を取得または設定します。
        <para>デフォルト値は false です。これは以前のバージョンと互換性があります。</para>
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.CompatibilityOptions.UseGdiLinesInPdfExport">
      <summary>
        PDF への出力をレンダリングする際に、線の描画に GDI 関数を使用するかどうかを示す値を取得または設定します。
        デフォルト値は false です。
        このプロパティを true に設定すると、多くの破線/点線を含むドキュメントでは、ファイルサイズが大幅に 小さくなる場合があります。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.CompatibilityOptions.ClipPage">
      <summary></summary>
    </member>
    <member name="T:C1.Win.C1Document.DictionaryItem">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />の
        <see cref="T:C1.Win.C1Document.Dictionary" />に挿入できるオブジェクトの型の基本クラスです。
        派生クラスには
        <see cref="T:C1.Win.C1Document.DictionaryImage" />が含まれます。
      </summary>
      <seealso cref="P:C1.Win.C1Document.C1Document.Dictionary" />
    </member>
    <member name="T:C1.Win.C1Document.NamedObject">
      <summary>名前で指定されたオブジェクトを表します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.OwnedObject">
      <summary>オーナーを持つオブジェクトを表す抽象基本クラス。</summary>
    </member>
    <member name="T:C1.Win.C1Document.IOwnedObject">
      <summary>別のオブジェクトによって所有されているオブジェクトが実装する必要があるインタフェースを表します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.IOwnedObject.Owner">
      <summary>オーナーオブジェクトを取得または設定します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.OwnedObject.SetOwner(System.Object)">
      <summary>現在のオブジェクトのオーナーを設定します。</summary>
      <param name="value">設定するオーナー。</param>
    </member>
    <member name="M:C1.Win.C1Document.OwnedObject.CreateSame">
      <summary>現在のオブジェクトのクローンを作成します。</summary>
      <returns>新しく作成されたクローン。</returns>
    </member>
    <member name="M:C1.Win.C1Document.OwnedObject.AssignFrom(System.Object)">
      <summary>別のオブジェクトからすべてを割り当てます。</summary>
      <param name="source">ソースオブジェクト。</param>
    </member>
    <member name="P:C1.Win.C1Document.OwnedObject.Owner">
      <summary>このオブジェクトのオーナーを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.INamedObject">
      <summary>一意の名前を持つオブジェクトを表します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.INamedObject.Name">
      <summary>名前を取得または設定します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.NamedObject.SetName(System.String)">
      <summary>現在のオブジェクトの名前を設定します。</summary>
      <param name="value">オブジェクトの新しい名前。</param>
    </member>
    <member name="M:C1.Win.C1Document.NamedObject.Clone">
      <summary>現在のオブジェクトのクローンを作成します。</summary>
      <returns>新しく作成されたクローン。</returns>
    </member>
    <member name="P:C1.Win.C1Document.NamedObject.Name">
      <summary>
        現在のオブジェクトの一意の名前を取得または設定します。
        指定された名前を持つ項目がオーナーに既に存在する場合は、例外が生成されます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.DictionaryItem.#ctor(System.String)">
      <summary>
        <see cref="T:C1.Win.C1Document.DictionaryItem" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="name">
        <see cref="T:C1.Win.C1Document.DictionaryItem" />の名前。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.DictionaryItem.SetName(System.String)">
      <summary>オーバーライドされます。現在の項目の名前を設定します。</summary>
      <param name="newName">新しい名前。</param>
    </member>
    <member name="P:C1.Win.C1Document.DictionaryItem.Owner">
      <summary>
        現在の項目のオーナーである
        <see cref="T:C1.Win.C1Document.Dictionary" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Dictionary">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />内の１つの辞書を表します。
        辞書に画像やアイコンなどのオブジェクトを格納すると、ドキュメント全体で再利用できます。
        辞書に含まれる項目は、
        <see cref="T:C1.Win.C1Document.DictionaryItem" />から派生された型（たとえば、
        <see cref="T:C1.Win.C1Document.DictionaryImage" />）である必要があります。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.NamedCollection`1">
      <summary>
        一意の名前が付けられた要素の
        <see cref="T:C1.Win.C1Document.OwnedCollection`1" />を表します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.OwnedCollection`1">
      <summary>
        IOwnedObject インタフェースをサポートする項目を含むコレクションの基本クラスです。
        コレクションは、項目の Owner プロパティを更新します。
      </summary>
      <typeparam name="TItem"></typeparam>
    </member>
    <member name="T:C1.Win.C1Document.OwnedCollectionBase`1">
      <summary>IOwnedObject インタフェースを実装する基本コレクションです。</summary>
      <typeparam name="TItem"></typeparam>
    </member>
    <member name="M:C1.Win.C1Document.OwnedCollectionBase`1.SetOwner(System.Object)">
      <summary>現在のオブジェクトのオーナーを設定します。</summary>
      <param name="value">設定するオーナー。</param>
    </member>
    <member name="P:C1.Win.C1Document.OwnedCollectionBase`1.Owner">
      <summary>コレクションのオーナーを取得します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.OwnedCollection`1.CreateSame">
      <summary>現在のオブジェクトのクローンを作成します。</summary>
      <returns>新しく作成されたクローン。</returns>
    </member>
    <member name="M:C1.Win.C1Document.OwnedCollection`1.AssignFrom(C1.Win.C1Document.OwnedCollection{`0})">
      <summary>もう１つのオブジェクトからすべてをコピーします。</summary>
      <param name="source">コピー元のオブジェクト。</param>
    </member>
    <member name="T:C1.Win.C1Document.INamedObjectOwner">
      <summary>名前の変更の通知を受け取るオブジェクトは、このインタフェースを実装する必要があります。</summary>
    </member>
    <member name="M:C1.Win.C1Document.NamedCollection`1.IndexOfName(System.String)">
      <summary>
        現在の
        <see cref="T:C1.Win.C1Document.NamedCollection`1" />にある、指定された名前を持つ INamedObject の０から始まるインデックスを返します。
      </summary>
      <param name="name">検索する項目の名前。</param>
      <returns>指定された項目の０から始まるインデックス。項目が見つからなかった場合は -1。</returns>
    </member>
    <member name="M:C1.Win.C1Document.NamedCollection`1.FindByName(System.String)">
      <summary>指定された名前を持つ項目を返します。</summary>
      <param name="name">検索する項目の名前。</param>
      <returns>指定された項目。</returns>
    </member>
    <member name="M:C1.Win.C1Document.NamedCollection`1.AssignFrom(C1.Win.C1Document.OwnedCollection{`0})">
      <summary>もう１つのオブジェクトからすべてをコピーします。</summary>
      <param name="source">ソースオブジェクト。</param>
    </member>
    <member name="P:C1.Win.C1Document.NamedCollection`1.Item(System.String)">
      <summary>指定された名前を持つ項目を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Dictionary.Document">
      <summary>
        現在の辞書のオーナーである
        <see cref="T:C1.Win.C1Document.C1Document" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.DictionaryImage">
      <summary>
        <see cref="T:C1.Win.C1Document.Dictionary" />に格納されている１つの画像を表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.DictionaryImage.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.DictionaryImage" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.DictionaryImage.#ctor(System.String)">
      <summary>
        <see cref="T:C1.Win.C1Document.DictionaryImage" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="name">現在の項目の名前。</param>
    </member>
    <member name="M:C1.Win.C1Document.DictionaryImage.#ctor(System.String,C1.Win.C1Document.C1Image)">
      <summary>
        <see cref="T:C1.Win.C1Document.DictionaryImage" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="name">現在の項目の名前。</param>
      <param name="image">現在の項目に格納する画像。</param>
    </member>
    <member name="M:C1.Win.C1Document.DictionaryImage.CreateSame">
      <summary>
        <see cref="T:C1.Win.C1Document.DictionaryImage" />の新しい空のインスタンスを作成します。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.DictionaryImage.AssignFrom(System.Object)">
      <summary>
        プロパティを別の
        <see cref="T:C1.Win.C1Document.DictionaryImage" />から現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.Win.C1Document.DictionaryImage.Image">
      <summary>
        現在の
        <see cref="T:C1.Win.C1Document.DictionaryImage" />によって格納される画像を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.IDictionaryItemLinkOwner">
      <summary>
        <para>これは内部使用専用です。</para>
        このインタフェースは、
        <see cref="P:C1.Win.C1Document.IDictionaryItemLinkOwner.Dictionary" /> 内のオブジェクトへのリンク（参照）を保持する必要がある場合、クラスによって実装される必要があります。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.IDictionaryItemLinkOwner.Dictionary">
      <summary>
        <see cref="T:C1.Win.C1Document.DictionaryItem" />が格納されている
        <see cref="P:C1.Win.C1Document.IDictionaryItemLinkOwner.Dictionary" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.DictionaryItemLink`1">
      <summary>
        <see cref="T:C1.Win.C1Document.DictionaryItem" />へのリンク（参照）を記述する基本クラス。基本機能を提供します。
        <see cref="T:C1.Win.C1Document.DictionaryImageLink" />などの派生クラスは、特定の型の辞書項目へのリンクを表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.DictionaryItemLink`1.#ctor(C1.Win.C1Document.IDictionaryItemLinkOwner)">
      <summary>
        <see cref="T:C1.Win.C1Document.DictionaryItemLink`1" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">このインスタンスのオーナー。</param>
    </member>
    <member name="M:C1.Win.C1Document.DictionaryItemLink`1.GetItemData">
      <summary>項目を表すデータを取得します。</summary>
      <returns>項目を表すデータ。</returns>
    </member>
    <member name="M:C1.Win.C1Document.DictionaryItemLink`1.AssignFrom(C1.Win.C1Document.DictionaryItemLink{`0})">
      <summary>
        プロパティを別の
        <see cref="T:C1.Win.C1Document.DictionaryItemLink`1" />から現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source"></param>
    </member>
    <member name="P:C1.Win.C1Document.DictionaryItemLink`1.DataInt">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Document.DictionaryItemLink`1.Owner">
      <summary>現在の辞書項目のオーナーを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.DictionaryItemLink`1.Document">
      <summary>
        現在の辞書項目を含む
        <see cref="T:C1.Win.C1Document.C1Document" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.DictionaryItemLink`1.Data">
      <summary>辞書に格納されているオブジェクトを表すデータを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.DictionaryItemLink`1.ItemName">
      <summary>辞書内の項目の名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.DictionaryItemLink`1.HasData">
      <summary>
        <see cref="T:C1.Win.C1Document.DictionaryItemLink`1" />にデータが含まれるかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.DictionaryImageLink">
      <summary>
        画像へのリンクを表すように
        <see cref="T:C1.Win.C1Document.DictionaryItemLink`1" />クラスを特殊化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.DictionaryImageLink.#ctor(C1.Win.C1Document.IDictionaryItemLinkOwner)">
      <summary>
        <see cref="T:C1.Win.C1Document.DictionaryImageLink" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">このインスタンスのオーナー。</param>
    </member>
    <member name="M:C1.Win.C1Document.DictionaryImageLink.GetItemData">
      <summary>項目を表すデータを取得します。</summary>
      <returns>項目を表すデータ。</returns>
    </member>
    <member name="T:C1.Win.C1Document.DocumentBody">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />のコンテンツを表します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderObject">
      <summary>
        <see cref="!:C1PrintDocument" />のコンテンツを表すすべての描画オブジェクトの抽象基本クラスです。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.DocumentObject">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />内のコンテンツを表す基本クラスです。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.IStyleOwner">
      <summary>
        <b>Style</b>プロパティ（
        <see cref="P:C1.Win.C1Document.IStyleOwner.Style" />型）を公開できるクラスを定義します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.IStyleOwner.GetAmbientParentStyle">
      <summary>アンビエントプロパティの親スタイルを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.IStyleOwner.Style">
      <summary>
        オブジェクトによって所有される
        <see cref="P:C1.Win.C1Document.IStyleOwner.Style" />を取得します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.DocumentObject.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderObject" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.DocumentObject.Document">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.DocumentObject" />を含む
        <see cref="T:C1.Win.C1Document.C1Document" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.DocumentObject.Owner">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.DocumentObject" />オブジェクトを含むオーナーオブジェクト。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.DocumentObject.Style">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.Win.C1Document.DocumentObject.Style" />を取得します。
        このプロパティに値を割り当てることはできません。
        現在のオブジェクトのスタイルの基本として別のスタイルを使用する場合は、Style.Parent をそのスタイルに設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderObject.Owner">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.RenderObject" />オブジェクトを含むオーナーオブジェクト。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderObject.BordersSplitVertMode">
      <summary>オブジェクト の高さが大きすぎて、複数のページに分割される場合に、境界線を描画する方法を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderObject.BordersSplitHorzMode">
      <summary>オブジェクト の幅が広すぎて、水平方向に複数のページに分割される場合に、境界線を描画する方法を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderObject.Tag">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.RenderObject" />に関連付けられているユーザー定義のカスタムデータを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderObject.ToolTip">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.RenderObject" />に関連付けられているツールチップを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderObject.Hyperlink">
      <summary>
        現在のオブジェクトに関連付けられているハイパーリンク（
        <see cref="T:C1.Win.C1Document.C1Hyperlink" />を参照）を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.DocumentBody.Owner">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.DocumentBody" />オブジェクトを含む
        <see cref="T:C1.Win.C1Document.C1Document" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.DocumentBody.Sections">
      <summary>
        ドキュメント本文の内容を表す
        <see cref="T:C1.Win.C1Document.RenderSectionCollection" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.DocumentInfoFields">
      <summary>
        <see cref="T:C1.Win.C1Document.DocumentInfo" />クラスによって格納されるフィールドを列挙します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.DocumentInfoFields.None">
      <summary>フィールドなし。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DocumentInfoFields.Title">
      <summary>ドキュメントのタイトル。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DocumentInfoFields.Author">
      <summary>ドキュメントの作成者。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DocumentInfoFields.Operator">
      <summary>ドキュメントの最終変更者。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DocumentInfoFields.Manager">
      <summary>作成者の管理者。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DocumentInfoFields.Company">
      <summary>作成者の会社名。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DocumentInfoFields.Subject">
      <summary>ドキュメントのサブタイトル。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DocumentInfoFields.Comment">
      <summary>ドキュメントのコメント。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DocumentInfoFields.CreationTime">
      <summary>ドキュメントが作成された日時。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DocumentInfoFields.RevisionTime">
      <summary>ドキュメントが最後に変更された日時。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DocumentInfoFields.Creator">
      <summary>元のドキュメントを作成したアプリケーション。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DocumentInfoFields.Keywords">
      <summary>ドキュメントのキーワード。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DocumentInfoFields.Producer">
      <summary>ドキュメントを作成したアプリケーション。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DocumentInfoFields.All">
      <summary>すべてのフィールド。</summary>
    </member>
    <member name="T:C1.Win.C1Document.DocumentInfo">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />の 作成者、サブタイトル、作成日時などの一般情報を表します。
        ドキュメントの
        <see cref="P:C1.Win.C1Document.C1Document.DocumentInfo" />プロパティからアクセスできます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.DocumentInfo.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.DocumentInfo" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.DocumentInfo.AssignFrom(C1.Win.C1Document.DocumentInfo)">
      <summary>
        プロパティを別の
        <see cref="T:C1.Win.C1Document.DocumentInfo" />から現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.Win.C1Document.DocumentInfo.Clone">
      <summary>
        現在の
        <see cref="T:C1.Win.C1Document.DocumentInfo" />オブジェクトのコピーを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.DocumentInfo" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.DocumentInfo.GetKeywordsAsText">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.Win.C1Document.DocumentInfo.Keywords" />コレクションを スペース区切りの１つの文字列として返します。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.DocumentInfo.SetKeywordsAsText(System.String)">
      <summary>
        スペース区切りのキーワードのリストを含む１つの文字列から、現在のオブジェクトに
        <see cref="P:C1.Win.C1Document.DocumentInfo.Keywords" />コレクション を割り当てます。(
        <see cref="P:C1.Win.C1Document.DocumentInfo.Keywords" />コレクションは、割り当て前にこのメソッドによってクリアされます。)
      </summary>
      <param name="value">スペース区切りのキーワードのリスト。</param>
    </member>
    <member name="P:C1.Win.C1Document.DocumentInfo.Title">
      <summary>ドキュメントのタイトルを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.DocumentInfo.Author">
      <summary>ドキュメントの作成者を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.DocumentInfo.Operator">
      <summary>ドキュメントの最終変更者を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.DocumentInfo.CreationTime">
      <summary>ドキュメントが作成された日時を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.DocumentInfo.RevisionTime">
      <summary>ドキュメントが最終変更された日時を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.DocumentInfo.Subject">
      <summary>ドキュメントのサブタイトルを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.DocumentInfo.Producer">
      <summary>ドキュメントを作成したアプリケーションを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.DocumentInfo.Creator">
      <summary>元のドキュメントを作成したアプリケーションを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.DocumentInfo.Company">
      <summary>ドキュメントの作成者の会社を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.DocumentInfo.Keywords">
      <summary>ドキュメントのキーワードを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.DocumentInfo.Manager">
      <summary>作成者のマネージャーを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.DocumentInfo.Comment">
      <summary>コメントを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.DocumentInfo.UserData">
      <summary>
        ドキュメントに関連付けられているユーザー定義のカスタム文字列キーおよび文字列から成る
        <see cref="T:System.Collections.Generic.Dictionary`2" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.DocumentObjectCollection`1">
      <summary>DocumentObject オブジェクトのコレクションを表します。</summary>
      <typeparam name="TItem"></typeparam>
    </member>
    <member name="P:C1.Win.C1Document.DocumentObjectCollection`1.Owner">
      <summary>現在のコレクションを含むオーナーオブジェクトです。</summary>
    </member>
    <member name="T:C1.Win.C1Document.C1DocumentRange">
      <summary>ドキュメントの範囲を定義する基本クラスです。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentRange.GetPositions(C1.Win.C1Document.C1DocumentTextPosition@,C1.Win.C1Document.C1DocumentTextPosition@)">
      <summary>
        このドキュメント範囲の開始位置および終了位置を定義する２つの
        <see cref="T:C1.Win.C1Document.C1DocumentTextPosition" />オブジェクトを返します。
      </summary>
      <param name="start">
        このドキュメント範囲の開始位置を定義する
        <see cref="T:C1.Win.C1Document.C1DocumentTextPosition" />。
      </param>
      <param name="end">
        このドキュメント範囲の終了位置を定義する
        <see cref="T:C1.Win.C1Document.C1DocumentTextPosition" />。
      </param>
    </member>
    <member name="T:C1.Win.C1Document.C1DocumentTextPosition">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />内のテキスト位置を記述する基本クラスです。
        テキスト位置は常にテキスト段落とその段落内の文字にリンクされ、文字の
        <b>直前</b>の位置を指定します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentTextPosition.op_Equality(C1.Win.C1Document.C1DocumentTextPosition,C1.Win.C1Document.C1DocumentTextPosition)">
      <summary>指定された値どうしが等しいかどうかを判定します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentTextPosition.op_Inequality(C1.Win.C1Document.C1DocumentTextPosition,C1.Win.C1Document.C1DocumentTextPosition)">
      <summary>指定された値どうしが等しくないかかどうかを判定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.C1FoundPosition">
      <summary>ドキュメント内のテキストが見つかった位置を表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1FoundPosition.GetPage">
      <summary>
        見つかったテキスト位置がある
        <see cref="T:C1.Win.C1Document.C1Page" />オブジェクトを返します。
      </summary>
      <returns>
        見つかったテキスト位置がある
        <see cref="T:C1.Win.C1Document.C1Page" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1FoundPosition.GetStart">
      <summary>
        検索されたテキストの開始位置を定義する
        <see cref="T:C1.Win.C1Document.C1DocumentTextPosition" />オブジェクトを返します。
      </summary>
      <returns>
        検索されたテキストの開始位置を定義する
        <see cref="T:C1.Win.C1Document.C1DocumentTextPosition" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1FoundPosition.GetEnd">
      <summary>
        検索されたテキストの終了位置を定義する
        <see cref="T:C1.Win.C1Document.C1DocumentTextPosition" />オブジェクトを返します。
      </summary>
      <returns>
        検索されたテキストの終了位置を定義する
        <see cref="T:C1.Win.C1Document.C1DocumentTextPosition" />オブジェクト。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.C1FoundPosition.NearText">
      <summary>発見位置に近いテキストを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1FoundPosition.PositionInNearText">
      <summary>
        <see cref="P:C1.Win.C1Document.C1FoundPosition.NearText" />内の検索文字列の０から始まる位置を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.C1TextRange">
      <summary>連続するテキスト範囲を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1TextRange.Full">
      <summary>全範囲（すべてを含む範囲）を表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1TextRange.#ctor(System.Int32,System.Int32)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1TextRange" />構造の新しいインスタンスを初期化します。
      </summary>
      <param name="startIndex">テキスト区間内の最初の文字のインデックス。</param>
      <param name="length">テキスト区間の長さ。</param>
    </member>
    <member name="M:C1.Win.C1Document.C1TextRange.Contains(System.Int32)">
      <summary>指定された位置が現在の範囲内に含まれるかどうかをテストします。</summary>
      <param name="position">テストする位置。</param>
      <returns>指定された位置が現在の範囲に含まれる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="P:C1.Win.C1Document.C1TextRange.StartPosition">
      <summary>テキスト範囲内の０から始まる開始位置を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1TextRange.Length">
      <summary>テキスト範囲の長さを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1TextRange.EndPosition">
      <summary>テキスト範囲の終了位置（範囲内の位置）を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.PagesLoadedEventArgs">
      <summary>
        ページがロードされ、ページのコンテンツが利用可能になると発生するイベントのイベントデータを含みます。
        最初のページのインデックスによって定義される連続したページ範囲とその範囲内のページ数を表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.PagesLoadedEventArgs.#ctor(System.Int32)">
      <summary>指定されたページインデックス と１つのページで PagesLoadedEventArgs クラスの新しいインスタンスを初期化します。</summary>
      <param name="startIndex">０から始まる開始ページのインデックス。</param>
    </member>
    <member name="M:C1.Win.C1Document.PagesLoadedEventArgs.#ctor(System.Int32,System.Int32)">
      <summary>指定されたページインデックス とページ数で PagesLoadedEventArgs クラスの新しいインスタンスを初期化します。</summary>
      <param name="startIndex">０から始まる開始ページのインデックス。</param>
      <param name="count">ロードされるページ数。</param>
    </member>
    <member name="P:C1.Win.C1Document.PagesLoadedEventArgs.StartIndex">
      <summary>現在のオブジェクトによって表される範囲の最初のページの０から始まるインデックスを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.PagesLoadedEventArgs.Count">
      <summary>現在のオブジェクトによって表される範囲のページ数を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.PagesLoadedEventHandler">
      <summary>ページがロードされ、ページのコンテンツが利用可能になると発生するイベントのハンドラを定義します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントを記述するデータ。</param>
    </member>
    <member name="T:C1.Win.C1Document.C1DocumentSourceException">
      <summary>
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />で発生した例外を表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSourceException.#ctor(System.String)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1DocumentSourceException" />クラスの新しいインスタンスを、指定されたエラーメッセージを使用して初期化します。
      </summary>
      <param name="message">例外エラーメッセージ。</param>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSourceException.#ctor(System.String,System.Object[])">
      <summary>
        <see cref="T:C1.Win.C1Document.C1DocumentSourceException" />クラスの新しいインスタンスを、書式設定されたエラーメッセージを使用して初期化します。
      </summary>
      <param name="format">例外メッセージ書式設定文字列。</param>
      <param name="args">書式設定文字列に提供されるパラメータのリスト。</param>
    </member>
    <member name="T:C1.Win.C1Document.C1FindTextParams">
      <summary>テキスト検索のパラメータを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1FindTextParams.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1FindTextParams" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="text">検索するテキスト。</param>
      <param name="wholeWord">単語単位のみの検索を行うかどうかを示します。</param>
      <param name="matchCase">大文字小文字を区別するかどうかを示します。</param>
    </member>
    <member name="P:C1.Win.C1Document.C1FindTextParams.Text">
      <summary>検索するテキストを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1FindTextParams.WholeWord">
      <summary>単語単位のみの検索を行うかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1FindTextParams.MatchCase">
      <summary>大文字小文字を区別するかどうかを示す値を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.C1BookmarkPosition">
      <summary>ドキュメント内のブックマークの位置を表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1BookmarkPosition.#ctor(System.Int32,C1.Win.Interop.Rect)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1BookmarkPosition" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="pageIndex">０から始まるページインデックス。</param>
      <param name="pageBounds">ページのブックマークの範囲。</param>
    </member>
    <member name="P:C1.Win.C1Document.C1BookmarkPosition.PageIndex">
      <summary>０から始まるページインデックスを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1BookmarkPosition.PageBounds">
      <summary>ページのブックマークの範囲を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.SecurityException">
      <summary>ドキュメントに接続しようとする際に使用された無効な資格情報によって発生した例外を表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.SecurityException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:C1.Win.C1Document.SecurityException" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="path">例外の原因になった接続パス。</param>
      <param name="ex">
        現在の例外の原因になった内部の例外。
        または、関連する内部の例外がない場合は null 参照（Visual Basic では Nothing）。
      </param>
    </member>
    <member name="P:C1.Win.C1Document.SecurityException.Path">
      <summary>現在の例外の原因になった接続パスを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.SecurityErrorEventArgs">
      <summary>
        <see cref="E:C1.Win.C1Document.C1DocumentSource.SecurityError" />イベントのパラメータを定義します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.SecurityErrorEventArgs.#ctor(System.String,System.Int32)">
      <summary>
        <see cref="T:C1.Win.C1Document.SecurityErrorEventArgs" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="path">アクセスしようとしてセキュリティエラーが発生した接続パス。</param>
      <param name="failedAttemptCount">開こうとして失敗した回数。</param>
    </member>
    <member name="P:C1.Win.C1Document.SecurityErrorEventArgs.Path">
      <summary>アクセスしようとしてセキュリティエラーが発生した接続パスを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.SecurityErrorEventArgs.FailedAttemptCount">
      <summary>開こうとして失敗した回数を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.SecurityErrorEventArgs.Retry">
      <summary>
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />がセキュリティエラーの原因になった操作を再試行するかどうかを示す値を取得または設定します。
        デフォルト値は
        <b>false</b>です。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.SecurityErrorEventHandler">
      <summary>
        <see cref="E:C1.Win.C1Document.C1DocumentSource.SecurityError" />イベントを処理するメソッドを表します。
      </summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.Win.C1Document.SecurityErrorEventArgs" />オブジェクト。
      </param>
    </member>
    <member name="T:C1.Win.C1Document.ExportCompletedEventArgs">
      <summary>
        <see cref="E:C1.Win.C1Document.C1DocumentSource.ExportCompleted" />イベントのパラメータを定義します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.ExportCompletedEventArgs.Exporter">
      <summary>
        エクスポートパラメータを定義する
        <see cref="T:C1.Win.C1Document.Export.Exporter" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.C1DocumentSource">
      <summary>
        ソースから
        <see cref="T:C1.Win.C1Document.C1Document" />オブジェクトを作成および管理できる型の抽象基本クラスです。
        <para>派生クラスは、SSRS レポートなどの特定のソースのための実装を提供します。</para><para>共通の基本クラス（C1DocumentSource）は、さまざまな種類のドキュメントやレポートに対して統一的に作業（プレビュー、印刷など）を行うことを可能にします。</para>
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.Dispose(System.Boolean)">
      <summary>コンポーネントによって使用されるアンマネージリソースを解放し、オプションでマネージリソースも解放します。</summary>
      <param name="disposing">
        マネージリソースとアンマネージリソースの両方を解放する場合は、
        <b>true</b>。アンマネージリソースだけを解放する場合は、
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.Init">
      <summary>オブジェクトを初期化するためにコンストラクタから呼び出されます。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.OnPagesLoaded(System.Int32,System.Int32)">
      <summary>これは内部使用専用です。</summary>
      <param name="startIndex"></param>
      <param name="count"></param>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.OnPagesClear">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.OnDirtyChanged">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.OnPageCountChanged">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.OnGenerateCompleted(System.Exception)">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.OnGetPageCompleted(System.Int32,C1.Win.C1Document.C1Page,System.Exception)">
      <summary>これは内部使用専用です。</summary>
      <param name="pageIndex"></param>
      <param name="page"></param>
      <param name="exception"></param>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.OnSecurityError(System.String,System.Int32)">
      <summary>これは内部使用専用です。</summary>
      <param name="path"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.FirePageCountChanged">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSource.AsyncMethodsUseAwaitPattern">
      <summary>
        現在のドキュメントソースの非同期メソッドを呼び出す際に、呼び出し元コードが async/await パターンを使用することを前提とするかどうかを示す値を取得または設定します。
        このプロパティが true の場合、*Completed イベント（
        <see cref="E:C1.Win.C1Document.C1DocumentSource.OpenCompleted" />、
        <see cref="E:C1.Win.C1Document.C1DocumentSource.GenerateCompleted" />など）は 発生しません。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSource.Dirty">
      <summary>
        現在のコンテンツがダーティで、
        <see cref="P:C1.Win.C1Document.C1DocumentSource.DocumentLocation" />、
        <see cref="P:C1.Win.C1Document.C1DocumentSource.Paginated" />などの現在の値に対応しないかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSource.IsDisposed">
      <summary>現在のドキュメントソースオブジェクトが破棄されたかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSource.Document">
      <summary>
        現在のドキュメントソースによって作成された
        <see cref="T:C1.Win.C1Document.C1Document" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSource.PageCount">
      <summary>既に生成されているページ数を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSource.Parameters">
      <summary>
        コンテンツの生成に使用されるパラメータのコレクションを取得します。このコレクションは、
        <see cref="M:C1.Win.C1Document.C1DocumentSource.Open" />メソッドで初期化されます。
        実際にパラメータとして使用するには、このコレクションで指定されている値に対して、
        <see cref="M:C1.Win.C1Document.C1DocumentSource.ApplyParameterValues" />メソッドを呼び出す必要があります。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSource.Credential">
      <summary>
        ドキュメント生成用のデータへのアクセスに使用される資格情報を指定する
        <see cref="T:System.Net.NetworkCredential" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSource.IsUserInteractive">
      <summary>
        現在のドキュメントソースがユーザーとの対話的な環境で実行中であるかどうかを示す値を取得します。
        サービスや Web アプリケーションなどで実行中の場合、このプロパティは false を返します。
      </summary>
    </member>
    <member name="E:C1.Win.C1Document.C1DocumentSource.DirtyChanged">
      <summary>
        <see cref="P:C1.Win.C1Document.C1DocumentSource.Dirty" />プロパティの値が変更されたときに発生します。
      </summary>
    </member>
    <member name="E:C1.Win.C1Document.C1DocumentSource.LongOperation">
      <summary>
        さまざまなドキュメント操作中に定期的に発生します。
        進捗状況を示すと共に、ドキュメント生成のような時間のかかる処理をキャンセルできるようにします。
      </summary>
    </member>
    <member name="E:C1.Win.C1Document.C1DocumentSource.PageCountChanged">
      <summary>
        <see cref="P:C1.Win.C1Document.C1DocumentSource.PageCount" />プロパティの値が変更されたときに発生します。
      </summary>
    </member>
    <member name="E:C1.Win.C1Document.C1DocumentSource.SecurityError">
      <summary>
        ドキュメントソースの操作中にセキュリティ例外が発生したときに発生します。
        このイベントを使用すると、
        <see cref="T:System.Net.NetworkCredential" />などのセキュリティ関連のプロパティを修正し、新しい資格情報で、失敗した操作を再試行できます。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.IAsyncInfo">
      <summary>非同期アクションと非同期操作をサポートします。</summary>
    </member>
    <member name="M:C1.Win.C1Document.IAsyncInfo.Cancel">
      <summary>非同期操作をキャンセルします。</summary>
    </member>
    <member name="M:C1.Win.C1Document.IAsyncInfo.Close">
      <summary>非同期操作を閉じます。</summary>
    </member>
    <member name="P:C1.Win.C1Document.IAsyncInfo.Status">
      <summary>非同期操作のステータスを示す値を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.IAsyncInfo.ErrorCode">
      <summary>非同期操作で発生した例外を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.IAsyncInfo.Id">
      <summary>非同期操作のハンドルを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.IAsyncActionWithProgress`1">
      <summary>進捗状況の更新を含む非同期アクションを表します。</summary>
      <typeparam name="TProgress">進捗状況データの型。</typeparam>
    </member>
    <member name="M:C1.Win.C1Document.IAsyncActionWithProgress`1.GetResults">
      <summary>アクションの結果を返します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.IAsyncActionWithProgress`1.Progress">
      <summary>プログレスイベントを受け取るメソッドを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.IAsyncActionWithProgress`1.Completed">
      <summary>アクション完了イベントを処理するメソッドを取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.IAsyncOperationWithProgress`2">
      <summary>進捗状況の更新を含む非同期操作を表します。</summary>
      <typeparam name="TProgress">進捗状況データの型。</typeparam>
    </member>
    <member name="M:C1.Win.C1Document.IAsyncOperationWithProgress`2.GetResults">
      <summary>アクションの結果を返します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.IAsyncOperationWithProgress`2.Progress">
      <summary>プログレスイベントを受け取るメソッドを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.IAsyncOperationWithProgress`2.Completed">
      <summary>アクション完了イベントを処理するメソッドを取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.C1RplImportException">
      <summary>RPL インポート時に発生した例外を表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1RplImportException.#ctor(System.String)">
      <summary>C1RplImportException クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
    </member>
    <member name="M:C1.Win.C1Document.C1RplImportException.#ctor(System.String,System.Object[])">
      <summary>C1RplImportException クラスの新しいインスタンスを初期化します。</summary>
      <param name="format">例外メッセージの書式設定に使用される書式文字列。</param>
      <param name="args">書式文字列に渡される引数のリスト。</param>
    </member>
    <member name="T:C1.Win.C1Document.SSRSReportLocationBase">
      <summary>SSRS レポートの場所を表す型の抽象基本クラス。</summary>
    </member>
    <member name="M:C1.Win.C1Document.SSRSReportLocationBase.#ctor(System.String)">
      <summary>
        <see cref="T:C1.Win.C1Document.SSRSReportLocationBase" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="reportServer">SSRS サーバーのアドレス。</param>
    </member>
    <member name="P:C1.Win.C1Document.SSRSReportLocationBase.ReportServer">
      <summary>「http://someaddress/ReportServer」のような、SSRS サーバーのアドレスを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.SSRSReportLocation">
      <summary>サーバー上のレポートの完全パスで指定される SSRS レポートの場所を表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.SSRSReportLocation.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:C1.Win.C1Document.SSRSReportLocation" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="reportServer">SSRS サーバーのアドレス。</param>
      <param name="reportPath">サーバー上のレポートの完全パス。</param>
    </member>
    <member name="M:C1.Win.C1Document.SSRSReportLocation.ToString">
      <summary>現在のレポートの場所を文字列表現に変換します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:C1.Win.C1Document.SSRSReportLocation.GetHashCode">
      <summary>このレポートの場所のハッシュコードを返します。</summary>
      <returns>このレポートの場所のハッシュコード。</returns>
    </member>
    <member name="M:C1.Win.C1Document.SSRSReportLocation.Equals(System.Object)">
      <summary>現在のレポートの場所を別のレポートの場所と比較します。</summary>
      <param name="obj">現在のレポートの場所と比較するもう一方の場所オブジェクト。</param>
      <returns>両方のオブジェクトが同じ場所を表す場合は true、そうでない場合は false。</returns>
    </member>
    <member name="P:C1.Win.C1Document.SSRSReportLocation.ReportPath">
      <summary>サーバー上のレポートの完全パスを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.SSRSReportLocation.TypeConverter">
      <summary>
        <see cref="T:C1.Win.C1Document.SSRSReportLocation" />クラスの
        <see cref="T:C1.Win.C1Document.SSRSReportLocation.TypeConverter" />を提供します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.SSRSReportLocation.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定された型のオブジェクトをこのコンバータの型に変換できるかどうかをテストします。</summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="type">
        変換元の型を表す
        <see cref="T:System.Type" />。
      </param>
      <returns>このコンバータが変換を実行できる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Document.SSRSReportLocation.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>所定の値オブジェクトを指定した型に変換します。</summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。
        null 参照（Visual Basic では Nothing）が渡された場合は、現在のカルチャと見なされます。
      </param>
      <param name="value">変換するオブジェクト。</param>
      <param name="type">
        <i>値</i>パラメータの変換先の
        <see cref="T:System.Type" />。
      </param>
      <returns>
        変換後の値を表す
        <b>オブジェクト</b>。
      </returns>
    </member>
    <member name="T:C1.Win.C1Document.SSRSDrillthroughReportLocation">
      <summary>マスターレポートの実行 ID とドリルスルーレポートの ID によって指定される SSRS レポートの場所を表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.SSRSDrillthroughReportLocation.#ctor(System.String,System.String,System.String)">
      <summary>
        <see cref="T:C1.Win.C1Document.SSRSDrillthroughReportLocation" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="reportServer">サーバーのアドレス。</param>
      <param name="executionID">マスターレポートの実行 ID。</param>
      <param name="drillthroughID">ドリルスルーレポートの ID。</param>
    </member>
    <member name="M:C1.Win.C1Document.SSRSDrillthroughReportLocation.GetHashCode">
      <summary>このレポートの場所のハッシュコードを返します。</summary>
      <returns>このレポートの場所のハッシュコード。</returns>
    </member>
    <member name="M:C1.Win.C1Document.SSRSDrillthroughReportLocation.Equals(System.Object)">
      <summary>現在のレポートの場所を別のレポートの場所と比較します。</summary>
      <param name="obj">現在のレポートの場所と比較するもう一方の場所オブジェクト。</param>
      <returns>両方のオブジェクトが同じ場所を表す場合は true、そうでない場合は false。</returns>
    </member>
    <member name="P:C1.Win.C1Document.SSRSDrillthroughReportLocation.ExecutionID">
      <summary>マスターレポートの実行 ID を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.SSRSDrillthroughReportLocation.DrillthroughID">
      <summary>ドリルスルーレポート ID を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.SSRSDrillthroughReportLocation.TypeConverter">
      <summary>
        <see cref="T:C1.Win.C1Document.SSRSDrillthroughReportLocation" />クラスの
        <see cref="T:C1.Win.C1Document.SSRSDrillthroughReportLocation.TypeConverter" />を提供します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.SSRSDrillthroughReportLocation.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定された型のオブジェクトをこのコンバータの型に変換できるかどうかをテストします。</summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="type">
        変換元の型を表す
        <see cref="T:System.Type" />。
      </param>
      <returns>このコンバータが変換を実行できる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Document.SSRSDrillthroughReportLocation.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>所定の値オブジェクトを指定した型に変換します。</summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。
        null 参照（Visual Basic では Nothing）が渡された場合は、現在のカルチャと見なされます。
      </param>
      <param name="value">変換するオブジェクト。</param>
      <param name="type">
        <i>値</i>パラメータの変換先の
        <see cref="T:System.Type" />。
      </param>
      <returns>
        変換後の値を表す
        <b>オブジェクト</b>。
      </returns>
    </member>
    <member name="T:C1.Win.C1Document.SSRSSessionReportLocation">
      <summary>レポートセッション ID によって指定された SSRS レポートの位置を表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.SSRSSessionReportLocation.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:C1.Win.C1Document.SSRSSessionReportLocation" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="reportServer">サーバーのアドレス。</param>
      <param name="sessionID">レポートのセッション ID。</param>
    </member>
    <member name="M:C1.Win.C1Document.SSRSSessionReportLocation.GetHashCode">
      <summary>このレポートの場所のハッシュコードを返します。</summary>
      <returns>このレポートの場所のハッシュコード。</returns>
    </member>
    <member name="M:C1.Win.C1Document.SSRSSessionReportLocation.Equals(System.Object)">
      <summary>現在のレポートの場所を別のレポートの場所と比較します。</summary>
      <param name="obj">現在のレポートの場所と比較するもう一方の場所オブジェクト。</param>
      <returns>両方のオブジェクトが同じ場所を表す場合は true、そうでない場合は false。</returns>
    </member>
    <member name="P:C1.Win.C1Document.SSRSSessionReportLocation.SessionID">
      <summary>セッション ID を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.SSRSSessionReportLocation.TypeConverter">
      <summary>
        <see cref="T:C1.Win.C1Document.SSRSSessionReportLocation" />クラスの
        <see cref="T:C1.Win.C1Document.SSRSSessionReportLocation.TypeConverter" />を提供します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.SSRSSessionReportLocation.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定された型のオブジェクトをこのコンバータの型に変換できるかどうかをテストします。</summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="type">
        変換元の型を表す
        <see cref="T:System.Type" />。
      </param>
      <returns>このコンバータが変換を実行できる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Document.SSRSSessionReportLocation.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>所定の値オブジェクトを指定した型に変換します。</summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。
        null 参照（Visual Basic では Nothing）が渡された場合は、現在のカルチャと見なされます。
      </param>
      <param name="value">変換するオブジェクト。</param>
      <param name="type">
        <i>値</i>パラメータの変換先の
        <see cref="T:System.Type" />。
      </param>
      <returns>
        変換後の値を表す
        <b>オブジェクト</b>。
      </returns>
    </member>
    <member name="T:C1.Win.C1Document.C1SSRSDocumentSource">
      <summary>SSRS レポートの生成に使用できるドキュメントソースを表します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.PdfExportProvider">
      <summary>PDF エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.CsvExportProvider">
      <summary>CSV エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.BmpExportProvider">
      <summary>BMP エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.EmfExportProvider">
      <summary>EMF エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.GifExportProvider">
      <summary>GIF エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.JpegExportProvider">
      <summary>JPEG エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.PngExportProvider">
      <summary>PNG エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.TiffExportProvider">
      <summary>TIFF エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.ExcelExportProvider">
      <summary>Excel エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.WordExportProvider">
      <summary>Word エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.MhtmlExportProvider">
      <summary>Excel エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.C1SSRSDocumentSource" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.ResetDocumentLocation">
      <summary>DocumentLocation プロパティをデフォルト値にリセットします。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.ShouldSerializeDocumentLocation">
      <summary>
        <see cref="P:C1.Win.C1Document.C1SSRSDocumentSource.DocumentLocation" />プロパティをシリアライズするかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.Win.C1Document.C1SSRSDocumentSource.DocumentLocation" />がシリアライズされる場合は true、そうでない場合は false。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.ShouldSerializeConnectionOptions">
      <summary>
        <see cref="P:C1.Win.C1Document.C1SSRSDocumentSource.ConnectionOptions" />プロパティをシリアライズするかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.Win.C1Document.C1SSRSDocumentSource.ConnectionOptions" />がシリアライズされる場合は true、そうでない場合は false。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.Init">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.Document">
      <summary>
        オーバーライドされます。現在のドキュメントソースに関連付けられている SSRS レポートを表す
        <see cref="T:C1.Win.C1Document.C1Document" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.ReportSession">
      <summary>SSRS レポートのレポートセッションを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.Credential">
      <summary>
        オーバーライドされます。SSRS 接続で使用される資格情報を定義する
        <see cref="T:System.Net.NetworkCredential" />オブジェクトを取得または設定します。
        これは、
        <see cref="P:C1.Win.C1Ssrs.ConnectionOptions.Credential" />のショートカットです。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.DocumentLocation">
      <summary>SSRS レポートの場所を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.ConnectionOptions">
      <summary>
        SSRS に接続するときに使用されるオプションを含む
        <see cref="T:C1.Win.C1Ssrs.ConnectionOptions" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.AlignHorzEnum">
      <summary>
        包含するオブジェクト内のテキストの水平方向の配置を指定します。
        これは、
        <see cref="P:C1.Win.C1Document.Style.TextAlignHorz" />プロパティの型です。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.AlignHorzEnum.Near">
      <summary>テキストは左揃えで配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.AlignHorzEnum.Center">
      <summary>テキストは水平方向の中央に配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.AlignHorzEnum.Far">
      <summary>テキストは右揃えで配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.AlignHorzEnum.Justify">
      <summary>テキストは、テキスト内に存在するホワイトスペースを広げることで、水平方向に均等に配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.AlignHorzEnum.JustifyChars">
      <summary>テキストは、テキスト内のすべての文字間にホワイトスペースを追加することで、水平方向に均等に配置されます。</summary>
    </member>
    <member name="T:C1.Win.C1Document.AlignVertEnum">
      <summary>
        包含するオブジェクト内のテキストの垂直方向の配置を指定します。
        これは、
        <see cref="P:C1.Win.C1Document.Style.TextAlignVert" />プロパティの型です。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.AlignVertEnum.Top">
      <summary>テキストは上揃えで配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.AlignVertEnum.Center">
      <summary>テキストは垂直方向の中央配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.AlignVertEnum.Bottom">
      <summary>テキストは下揃えで配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.AlignVertEnum.Justify">
      <summary>テキストは垂直方向に均等に配置されます。</summary>
    </member>
    <member name="T:C1.Win.C1Document.ImageAlignHorzEnum">
      <summary>
        前景および背景画像の水平方向の配置を指定します。
        これは、
        <see cref="P:C1.Win.C1Document.Style.ImageAlign" />と
        <see cref="P:C1.Win.C1Document.Style.BackgroundImageAlign" />の
        <see cref="P:C1.Win.C1Document.ImageAlign.AlignHorz" />プロパティの型です。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.ImageAlignHorzEnum.Left">
      <summary>画像は左揃えで配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.ImageAlignHorzEnum.Center">
      <summary>画像は水平方向の中央に配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.ImageAlignHorzEnum.Right">
      <summary>画像は右揃えで配置されます。</summary>
    </member>
    <member name="T:C1.Win.C1Document.ImageAlignVertEnum">
      <summary>
        前景および背景画像の垂直方向の配置を指定します。
        これは、
        <see cref="P:C1.Win.C1Document.Style.ImageAlign" />と
        <see cref="P:C1.Win.C1Document.Style.BackgroundImageAlign" />の
        <see cref="P:C1.Win.C1Document.ImageAlign.AlignVert" />プロパティの型です。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.ImageAlignVertEnum.Top">
      <summary>画像は上揃えで配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.ImageAlignVertEnum.Center">
      <summary>画像は垂直方向の中央に配置されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.ImageAlignVertEnum.Bottom">
      <summary>画像は下揃えで配置されます。</summary>
    </member>
    <member name="T:C1.Win.C1Document.TextPositionEnum">
      <summary>
        テキストの下付き文字と上付き文字のプロパティを指定します。
        これは、
        <see cref="P:C1.Win.C1Document.Style.TextPosition" />プロパティの型です。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.TextPositionEnum.Normal">
      <summary>テキストは標準のテキストとして配置およびサイズ変更されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.TextPositionEnum.Subscript">
      <summary>テキストは下付き文字として配置およびサイズ変更されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.TextPositionEnum.Superscript">
      <summary>テキストは上付き文字として配置およびサイズ変更されます。</summary>
    </member>
    <member name="T:C1.Win.C1Document.SplitBehaviorEnum">
      <summary>レンダリングオブジェクトの分割動作を定義します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.SplitBehaviorEnum.Never">
      <summary>
        オブジェクトは複数のページに分割されません（つまり、必ず１ページに一緒に表示されます）。
        １ページに収まらないオブジェクトはカットされます。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.SplitBehaviorEnum.SplitIfNeeded">
      <summary>現在のページに収まらない場合、オブジェクトは分割されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.SplitBehaviorEnum.KeepTogether">
      <summary>
        オブジェクトが大きすぎて空のページに収まらない場合にのみ、オブジェクトが分割されます。
        収まらない場合、オブジェクトは即座に分割されます。
        そうでない場合は、新しいページが開始され、そのページにオブジェクトが分割されずに配置されます。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.WordWrapMode">
      <summary>テキスト行を折り返す場合の単語の分割方法を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.WordWrapMode.Normal">
      <summary>
        デフォルトの設定です。
        単語は、長過ぎてコンテナの境界内に収まらない限り、分割されません。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.WordWrapMode.BreakWord">
      <summary>単語は、必要に応じて任意の位置で分割されます。</summary>
    </member>
    <member name="T:C1.Win.C1Document.WritingMode">
      <summary>連続した文字セットを横書きにするか縦書きにするかを指定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.Exporter">
      <summary>SSRS エクスポータの基本クラスです。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.Exporter.AddValue(System.Text.StringBuilder,System.String,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="sb"></param>
      <param name="tag"></param>
      <param name="value"></param>
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.Exporter.AddValue(System.Text.StringBuilder,System.String,C1.Win.C1Document.Unit)">
      <summary>これは内部使用専用です。</summary>
      <param name="sb"></param>
      <param name="tag"></param>
      <param name="value"></param>
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.Exporter.AddValuePreserve(System.Text.StringBuilder,System.String,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="sb"></param>
      <param name="tag"></param>
      <param name="value"></param>
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.Exporter.GetDevInfo">
      <summary>SSRS の DeviceInfo 文字列を返します。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.Exporter.GetFormat">
      <summary>SSRS の形式識別子を返します。</summary>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.PaginatedExporter">
      <summary>PDF、IMAGE などのページ区切り付きエクスポータの基本クラスです。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.PaginatedExporter.GetDevInfo">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.PaginatedExporter.Columns">
      <summary>
        レポートに設定する列数を取得または設定します。
        <b>Null</b>は、レポートで指定されているデフォルト値を示します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.PaginatedExporter.ColumnSpacing">
      <summary>
        列スペーシングを取得または設定します。
        <b>Null</b>は、レポートで指定されているデフォルト値を示します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.ImageExporter">
      <summary>画像形式へのエクスポートを実行するすべてのエクスポータの基本クラスです。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.ImageExporter.GetFormat">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.ImageExporter.GetDevInfo">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.ImageExporter.GetOutputFormat">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.CsvExportProvider">
      <summary>CSV 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.Ssrs.CsvExporter" />
    </member>
    <member name="T:C1.Win.C1Document.Export.ExportProvider">
      <summary>
        サポートされるエクスポート形式を記述する抽象基本クラスです。
        特定の形式（PDF、HTML など）を記述するエクスポートプロバイダはすべて、このクラスから派生されます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.ExportProvider.NewExporter">
      <summary>
        新しい Exporter オブジェクトを作成します。
        派生クラスでオーバーライドされて、
        <see cref="T:C1.Win.C1Document.Export.Exporter" />から派生された特殊化されたクラスのインスタンスを返します。
      </summary>
      <returns>新しく作成されたエクスポータを返します。</returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportProvider.FormatName">
      <summary>現在のエクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportProvider.DefaultExtension">
      <summary>現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.CsvExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.Ssrs.CsvExporter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.Ssrs.CsvExporter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "csv" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExportProvider.FormatName">
      <summary>CSV エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.CsvExporterEncoding">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.Ssrs.CsvExporter" />がサポートするテキストエンコードを定義します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.CsvExporter">
      <summary>SSRS レポートを CSV にエクスポートするために使用できるオブジェクトを表します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.ExportProvider">
      <summary>
        <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.CsvExportProvider" />を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.Encoding">
      <summary>
        文字エンコードスキーム（ASCII、UTF7、UTF8、または Unicode）を取得または設定します。
        デフォルト値は UTF8 です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.ExcelMode">
      <summary>
        ターゲットの出力先が Excel かどうかを示す値を取得または設定します。
        デフォルト値は true です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.FieldDelimiter">
      <summary>
        結果に挿入する区切り文字列を取得または設定します。
        デフォルト値はカンマ（,）です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.FileExtension">
      <summary>
        結果に付けるファイル拡張子を取得または設定します。
        デフォルト値は .CSV です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.NoHeader">
      <summary>
        ヘッダー行が出力から除外されるかどうかを示す値を取得または設定します。
        デフォルト値は false です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.Qualifier">
      <summary>
        フィールド区切り文字またはレコード区切り文字を含む結果を囲む修飾子文字列を取得または 設定します。
        その修飾子が結果に含まれる場合は、修飾子をもう１つ続けます。
        Qualifier 設定は、FieldDelimiter や RecordDelimiter の設定と異なる必要があります。
        デフォルト値は引用符（"）です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.RecordDelimiter">
      <summary>
        各レコードの終わりに置くレコード区切り文字を取得または設定します。
        デフォルト値は &lt;cr&gt;&lt;lf&gt; です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.SuppressLineBreaks">
      <summary>
        出力に含まれるデータから改行を削除するかどうかを示す値を取得または設定します。
        デフォルト値は false です。
        この値が true の場合、FieldDelimiter、RecordDelimiter、および Qualifier の設定をスペース文字にすることはできません。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.CsvExporter.UseFormattedValues">
      <summary>
        書式設定された文字列を CSV 出力に挿入するかどうかを示す値を取得または設定します。
        <b>null</b>はデフォルト値を示します。
        ExcelMode が true の場合は true、そうでない場合は false です。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.PdfExportProvider">
      <summary>Adobe PDF 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.Ssrs.PdfExporter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.PdfExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.Ssrs.PdfExporter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.Ssrs.PdfExporter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExportProvider.DefaultExtension">
      <summary>現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。この実装は "pdf" を返します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExportProvider.FormatName">
      <summary>PDF エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.PdfExporter">
      <summary>SSRS レポートを PDF にエクスポートするために使用できるオブジェクトを表します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.ExportProvider">
      <summary>
        <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.PdfExportProvider" />を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.HumanReadablePDF">
      <summary>
        PDF を圧縮しないかどうかを示す値を取得または設定します。
        圧縮しない場合は、ソースが読み取りやすくなります。
        デフォルト値は false です。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.TiffExportProvider">
      <summary>画像 TIFF 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.Ssrs.TiffExporter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.TiffExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.Ssrs.TiffExporter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.Ssrs.TiffExporter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.TiffExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "tiff" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.TiffExportProvider.FormatName">
      <summary>PNG エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.TiffExporter">
      <summary>SSRS レポートを TIFF にエクスポートするために使用できるオブジェクトを表します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.TiffExporter.ExportProvider">
      <summary>
        <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.TiffExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.BmpExportProvider">
      <summary>画像 BMP 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.Ssrs.BmpExporter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.BmpExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.Ssrs.BmpExporter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.Ssrs.BmpExporter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.BmpExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "bmp" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.BmpExportProvider.FormatName">
      <summary>BMP エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.BmpExporter">
      <summary>SSRS レポートを BMP にエクスポートするために使用できるオブジェクトを表します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.BmpExporter.ExportProvider">
      <summary>
        <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.BmpExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.EmfExportProvider">
      <summary>画像 EMF 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.Ssrs.EmfExporter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.EmfExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.Ssrs.EmfExporter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.Ssrs.EmfExporter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.EmfExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "emf" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.EmfExportProvider.FormatName">
      <summary>EMF エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.EmfExporter">
      <summary>SSRS レポートを EMF にエクスポートするために使用できるオブジェクトを表します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.EmfExporter.ExportProvider">
      <summary>
        <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.EmfExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.GifExportProvider">
      <summary>画像 GIF 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.Ssrs.GifExporter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.GifExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.Ssrs.GifExporter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.Ssrs.GifExporter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.GifExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "gif" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.GifExportProvider.FormatName">
      <summary>GIF エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.GifExporter">
      <summary>SSRS レポートを GIF にエクスポートするために使用できるオブジェクトを表します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.GifExporter.ExportProvider">
      <summary>
        <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.GifExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.JpegExportProvider">
      <summary>画像 JPEG 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.Ssrs.JpegExporter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.JpegExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.Ssrs.JpegExporter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.Ssrs.GifExporter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.JpegExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "jpeg" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.JpegExportProvider.FormatName">
      <summary>JPEG エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.JpegExporter">
      <summary>SSRS レポートを JPEG にエクスポートするために使用できるオブジェクトを表します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.JpegExporter.ExportProvider">
      <summary>
        <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.JpegExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.PngExportProvider">
      <summary>画像 PNG 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.Ssrs.PngExporter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.PngExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.Ssrs.PngExporter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.Ssrs.PngExporter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.PngExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "png" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.PngExportProvider.FormatName">
      <summary>PNG エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.PngExporter">
      <summary>SSRS レポートを PNG にエクスポートするために使用できるオブジェクトを表します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.PngExporter.ExportProvider">
      <summary>
        <see cref="F:C1.Win.C1Document.C1SSRSDocumentSource.PngExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.ExcelExportProvider">
      <summary>Microsoft Excel 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.Ssrs.ExcelExporter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.ExcelExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.Ssrs.ExcelExporter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.Ssrs.ExcelExporter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.ExcelExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "xls" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.ExcelExportProvider.FormatName">
      <summary>Excel エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.ExcelExporter">
      <summary>SSRS レポートを Excel にエクスポートするために使用できるオブジェクトを表します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.ExcelExporter.OmitDocumentMap">
      <summary>
        見出しマップをサポートするレポートの見出しマップを省略するかどうかを示す値を取得または設定します。
        デフォルト値は false です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.ExcelExporter.OmitFormulas">
      <summary>
        レンダリングされるレポートから数式を省略するかどうかを示す値を取得または設定します。
        デフォルト値は false です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.ExcelExporter.SimplePageHeaders">
      <summary>
        レポートのページヘッダーを Excel のページヘッダーにレンダリングするかどうかを示す値を取得または設定します。
        値 false は、ワークシートの最初の行にページヘッダーがレンダリングされることを示します。
        デフォルト値は false です。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.MhtmlExportProvider">
      <summary>Web アーカイブ（MHTML）形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.Ssrs.MhtmlExporter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.MhtmlExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.Ssrs.MhtmlExporter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.Ssrs.MhtmlExporter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.MhtmlExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "mhtml" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.MhtmlExportProvider.FormatName">
      <summary>MHTML エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.MhtmlExporter">
      <summary>SSRS レポートを Web アーカイブ（MHTML）形式にエクスポートするために使用できるオブジェクトを表します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.MhtmlExporter.OutlookCompat">
      <summary>
        Outlook でのレポートの見栄えをよくする追加のメタデータを使用してレンダリングするかどうかを示す値を取得または 設定します。
        デフォルト値は true です。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.WordExportProvider">
      <summary>Microsoft Word 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.Ssrs.WordExporter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.WordExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.Ssrs.WordExporter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.Ssrs.WordExporter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.WordExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "doc" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.WordExportProvider.FormatName">
      <summary>Microsoft Word エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.WordTableAutoFitMode">
      <summary>生成された Word ファイルで、テーブルの AutoFit 値をどのように指定できるかを定義します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.Ssrs.WordTableAutoFitMode.False">
      <summary>Word のすべてのテーブルで、AutoFit は false に設定されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.Ssrs.WordTableAutoFitMode.True">
      <summary>Word のすべてのテーブルで、AutoFit は true に設定されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.Ssrs.WordTableAutoFitMode.Never">
      <summary>Word のどのテーブルにも AutoFit 値は設定されず、動作は Word のデフォルトに戻ります。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.Ssrs.WordTableAutoFitMode.Default">
      <summary>論理ページごとの物理的な描画領域（マージンを除いた物理的なページの幅）より狭いテーブルに対して AutoFit が設定されます。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.WordExporter">
      <summary>SSRS レポートを Microsoft Word 形式にエクスポートするために使用できるオブジェクトを表します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.WordExporter.AutoFit">
      <summary>
        生成される Word ファイル内のテーブルに対する AutoFit 値の指定方法を定義する値を取得または設定します。
        デフォルト値は、
        <see cref="F:C1.Win.C1Document.Export.Ssrs.WordTableAutoFitMode.Default" />です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.WordExporter.ExpandToggles">
      <summary>
        切り替え可能なすべての項目を完全に展開した状態でレンダリングするかどうかを示す値を取得または設定します。
        デフォルト値は false です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.WordExporter.FixedPageWidth">
      <summary>
        DOC ファイルに書き込まれるページ幅をレポート本体内の最大のページ幅に合わせて大きくするかどうかを示す値を取得または設定します。
        デフォルト値は false です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.WordExporter.OmitHyperlinks">
      <summary>
        Hyperlink が設定されているすべての項目で Hyperlink アクションを省略するかどうかを示す値を取得または設定します。
        デフォルト値は false です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.WordExporter.OmitDrillthroughs">
      <summary>
        Drillthrough が設定されているすべての項目で Drillthrough アクションを省略するかどうかを示す値を取得または設定します。
        デフォルト値は false です。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.PageColumn">
      <summary>ページ列のプロパティを表します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.PageColumn.Width">
      <summary>
        現在の列の幅を取得します。
        <para>
          デフォルトの列幅は
          <b>"auto"</b>です。
        </para>
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.PageColumn.Spacing">
      <summary>
        現在の列から次の列までのスペーシングを取得します。
        <para>
          デフォルトの列スペーシングは
          <b>5mm</b>です。
        </para>
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.PageColumnCollection">
      <summary>
        <see cref="T:C1.Win.C1Document.PageColumn" />オブジェクトのコレクションです。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.PageLayout">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />のページレイアウトを表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.PageLayout.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.PageLayout" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.PageLayout.#ctor(C1.Win.C1Document.C1PageSettings)">
      <summary>
        <see cref="T:C1.Win.C1Document.PageLayout" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="pageSettings">使用するページ設定。</param>
    </member>
    <member name="P:C1.Win.C1Document.PageLayout.Document">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.PageLayout" />オブジェクトを含む
        <see cref="T:C1.Win.C1Document.C1Document" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.PageLayout.Owner">
      <summary>
        現在のオブジェクトを所有する
        <see cref="T:C1.Win.C1Document.IDocumentObjectOwner" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.PageLayout.PageHeader">
      <summary>現在のページレイアウトに関連付けられたページヘッダーを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.PageLayout.PageFooter">
      <summary>現在のページレイアウトに関連付けられたページフッターを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.PageLayout.Watermark">
      <summary>現在のページレイアウトに関連付けられたウォーターマークを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.PageLayout.PageSettings">
      <summary>
        現在のページレイアウトに関連付けられた
        <see cref="T:C1.Win.C1Document.C1PageSettings" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.PageLayout.HasColumns">
      <summary>
        現在のページレイアウトの
        <see cref="P:C1.Win.C1Document.PageLayout.Columns" />コレクションが初期化済みで、空でないかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.PageLayout.Columns">
      <summary>
        現在のページレイアウトに関連付けられた
        <see cref="T:C1.Win.C1Document.PageColumn" />オブジェクトのコレクションを取得します。
        このプロパティにアクセスすると、列定義のコレクションが初期化されます（初期化されていなかった場合）。
        このレイアウトで列が定義されているかどうかをテストするには、
        <see cref="P:C1.Win.C1Document.PageLayout.HasColumns" />を使用します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.PageLayoutKindEnum">
      <summary>
        ページレイアウトが適用される
        <see cref="T:C1.Win.C1Document.C1Document" />内のページセットを識別します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.PageLayoutKindEnum.Default">
      <summary>現在のページレイアウトがドキュメントのデフォルトになります。</summary>
    </member>
    <member name="F:C1.Win.C1Document.PageLayoutKindEnum.FirstPage">
      <summary>現在のページレイアウトがドキュメントの最初のページに使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.PageLayoutKindEnum.LastPage">
      <summary>現在のページレイアウトがドキュメントの最後のページに使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.PageLayoutKindEnum.EvenPages">
      <summary>現在のページレイアウトがドキュメントの偶数ページに使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.PageLayoutKindEnum.OddPages">
      <summary>現在のページレイアウトがドキュメントの奇数ページに使用されます。</summary>
    </member>
    <member name="T:C1.Win.C1Document.PageLayouts">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderSection" />で使用される標準のページレイアウト（デフォルトのページレイアウト、最初と最後のページに使用されるページレイアウトなど）を表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.PageLayouts.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.PageLayouts" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.PageLayouts.Document">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.PageLayouts" />オブジェクトを含む
        <see cref="T:C1.Win.C1Document.C1Document" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.PageLayouts.Owner">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.PageLayouts" />オブジェクトを所有する
        <see cref="T:C1.Win.C1Document.RenderSection" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.PageLayouts.Item(C1.Win.C1Document.PageLayoutKindEnum)">
      <summary>
        指定された
        <see cref="T:C1.Win.C1Document.PageLayoutKindEnum" />の
        <see cref="T:C1.Win.C1Document.PageLayout" />を取得します。指定された種類のページレイアウトが現在の
        <see cref="T:C1.Win.C1Document.PageLayouts" />に対して指定されていない場合は、
        <b>null</b>を返します。
      </summary>
      <param name="kind">取得するページレイアウトの種類。</param>
      <returns>
        指定された種類のページレイアウト。存在しない場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.PageLayouts.FirstPage">
      <summary>
        現在のドキュメントの最初のページに使用される
        <see cref="T:C1.Win.C1Document.PageLayout" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.PageLayouts.LastPage">
      <summary>
        現在のドキュメントの最後のページに使用される
        <see cref="T:C1.Win.C1Document.PageLayout" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.PageLayouts.EvenPages">
      <summary>
        現在のドキュメントの偶数ページに使用される
        <see cref="T:C1.Win.C1Document.PageLayout" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.PageLayouts.OddPages">
      <summary>
        現在のドキュメントの奇数ページに使用される
        <see cref="T:C1.Win.C1Document.PageLayout" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.PageLayouts.Default">
      <summary>
        現在のドキュメントのデフォルトの
        <see cref="T:C1.Win.C1Document.PageLayout" />を取得または設定します。
        ページごとの有効なページレイアウトは、他のすべての適用可能なレイアウトにこのレイアウトをマージすることで決定されます。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.ParameterType">
      <summary>
        値（
        <see cref="!:C1.Xaml.C1Document.Parameter" />内の値）の型を指定します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.ParameterType.Boolean">
      <summary>値は Boolean 型です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.ParameterType.DateTime">
      <summary>値は DateTime 型です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.ParameterType.Integer">
      <summary>値は Integer 型です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.ParameterType.Float">
      <summary>値は Float 型です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.ParameterType.String">
      <summary>値は String 型です。</summary>
    </member>
    <member name="T:C1.Win.C1Document.LabeledValue">
      <summary>ラベル付きの値を表します。ラベルはユーザーインタフェースで使用できます。</summary>
    </member>
    <member name="M:C1.Win.C1Document.LabeledValue.#ctor(System.Object,System.String)">
      <summary>
        <see cref="T:C1.Win.C1Document.LabeledValue" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="value">
        <see cref="T:C1.Win.C1Document.LabeledValue" />クラスによって表される値。
      </param>
      <param name="label">値のラベル。</param>
    </member>
    <member name="P:C1.Win.C1Document.LabeledValue.Value">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.LabeledValue" />オブジェクトによって表される実際の値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.LabeledValue.Label">
      <summary>UI に表示する値のラベルを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.LabeledValues">
      <summary>
        <see cref="T:C1.Win.C1Document.LabeledValue" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.LabeledValues.IndexOfValue(System.Object)">
      <summary>
        指定された値を持つ
        <see cref="T:C1.Win.C1Document.LabeledValue" />オブジェクトを検索します。
      </summary>
      <param name="value">
        <see cref="T:C1.Win.C1Document.LabeledValue" />オブジェクトの値。
      </param>
      <returns>
        検索されたオブジェクトのインデックス。
        見つからなかった場合は -1。
      </returns>
    </member>
    <member name="T:C1.Win.C1Document.Parameter">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />で使用できるユーザー定義のパラメータを表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Parameter.Nullable">
      <summary>
        このパラメータの値を Null にできることを示す値を取得または設定します。
        複数値パラメータの場合は、true にできません。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Parameter.AllowBlank">
      <summary>
        このパラメータの値を空の文字列にできることを示す値を取得または 設定します。
        <see cref="P:C1.Win.C1Document.Parameter.DataType" />が文字列でない場合は無視されます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Parameter.MultiValue">
      <summary>これが複数値パラメータ（値のセットを受け取ることができるパラメータ）であることを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Parameter.Hidden">
      <summary>このパラメータを ユーザーに表示しない（ただし、サブレポート、ドリルスルーレポートなどでプログラミングによって使用することは可能）ことを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Parameter.Prompt">
      <summary>パラメータ値の指定を求める際に表示するユーザープロンプトを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Parameter.AllowedValues">
      <summary>有効なパラメータ値のリストを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Parameter.Value">
      <summary>
        パラメータ値を取得または設定します。
        <see cref="P:C1.Win.C1Document.Parameter.MultiValue" />が true の場合、値を配列として指定できます。
        この場合は、すべての項目が同じ型でなければなりません。
        各項目を配列にすることはできません。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Parameter.DataType">
      <summary>
        <see cref="T:C1.Win.C1Document.Parameter" />のデータ型を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.ParameterCollection">
      <summary>
        <see cref="T:C1.Win.C1Document.Parameter" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.ParameterCollection.ContainsVisibleParameters">
      <summary>エンドユーザーに表示されるパラメータがコレクションに含まれているかどうかをチェックします。</summary>
      <returns>
        エンドユーザーに表示されるパラメータがコレクションに含まれている場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.RenderFragment.ToPagePosition(C1.Win.Interop.Point)">
      <summary>親フラグメントの左上隅を基準として指定されたポイントを ページ座標に変換します。</summary>
      <param name="pt"></param>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Document.RenderFragment.RenderObject">
      <summary>
        このフラグメントを生成する
        <see cref="P:C1.Win.C1Document.RenderFragment.RenderObject" />を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderFragment.Page">
      <summary>
        このフラグメントを含む
        <see cref="T:C1.Win.C1Document.C1Page" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderFragment.ParentFragment">
      <summary>
        このフラグメントを含む
        <see cref="T:C1.Win.C1Document.RenderContainerFragment" />を取得します。
        このフラグメントが ページ内にある場合は null を返します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.FragmentDrawParams">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderFragment" />の描画時に使用されるプロパティを定義します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.FragmentDrawParams.DrawingBoundsPx">
      <summary>フラグメントの描画領域、つまりスペーシングを含まない範囲です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.FragmentDrawParams.BackgroundBoundsPx">
      <summary>背景の四角形です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.FragmentDrawParams.ContentBoundsPx">
      <summary>コンテンツの四角形です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.FragmentDrawParams.Borders">
      <summary>境界線のパラメータです。</summary>
    </member>
    <member name="T:C1.Win.C1Document.BorderSide">
      <summary>境界線の１つの辺を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BorderSide.Line">
      <summary>線スタイルを定義します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BorderSide.WidthPx">
      <summary>線の幅（ピクセル単位）を含みます。</summary>
    </member>
    <member name="T:C1.Win.C1Document.BorderParams">
      <summary>
        フラグメントの境界線に関する情報を含みます。
        <see cref="T:C1.Win.C1Document.RenderFragment" />の描画で使用されます。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BorderParams.BoundsPx">
      <summary>境界線の四角形です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BorderParams.Left">
      <summary>左境界線です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BorderParams.Top">
      <summary>上境界線です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BorderParams.Right">
      <summary>右境界線です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BorderParams.Bottom">
      <summary>下境界線です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BorderParams.RoundBordersClipRegion">
      <summary>
        オブジェクトに角丸境界線がある場合に使用されるクリッピング領域です。
        背景またはコンテンツを描画する前に適用する必要があります。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderArea">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderArea" />、
        <see cref="!:TableCell" />などのすべての単純なコンテナの基本クラスを表します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderImage">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderArea" />、
        <see cref="!:TableCell" />などのすべての単純なコンテナの基本クラスを表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderImage.Image">
      <summary>
        現在の
        <see cref="T:C1.Win.C1Document.RenderImage" />オブジェクトによってレンダリングされる画像を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderImage.ImageName">
      <summary>
        現在の
        <see cref="T:C1.Win.C1Document.RenderImage" />オブジェクトによってレンダリングされる画像の名前を取得または設定します。
        現在のオブジェクトがレンダリングを行う際、この名前を使用して、このオブジェクトを保持する
        <see cref="T:C1.Win.C1Document.C1Document" />の
        <see cref="P:C1.Win.C1Document.C1Document.Dictionary" />から実際の画像が取得されます。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.BordersSplitMode">
      <summary>オブジェクトが複数のページに分割される場合の境界線の描画方法を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BordersSplitMode.None">
      <summary>オブジェクトが分割される場合、境界線は描画されません。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BordersSplitMode.Square">
      <summary>オブジェクトが分割される場合、四角の境界線が描画されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BordersSplitMode.Round">
      <summary>
        オブジェクトが分割される場合、境界線が描画されます。
        境界線が角丸境界線の場合は（
        <see cref="P:C1.Win.C1Document.IBorders.RadiusX" />と
        <see cref="P:C1.Win.C1Document.IBorders.RadiusY" />を参照）、オブジェクトが分割されるときに角丸境界線が描画されます。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderParagraph">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />内の段落を表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderParagraph.HasContent">
      <summary>
        <see cref="P:C1.Win.C1Document.RenderParagraph.Content" />コレクションが初期化済みで、１つ以上の要素を含んでいるかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderParagraph.Content">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.RenderParagraph" />オブジェクトのコンテンツを表す
        <see cref="T:C1.Win.C1Document.ParagraphObjectCollection" />コレクションを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderSection">
      <summary>特定のページレイアウトを持つドキュメントの一部を表します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderSection.PageLayouts">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderSection" />オブジェクトで使用されるページレイアウトのコレクションを取得します。
        必ず存在するデフォルトのレイアウトのほかに、ドキュメントの最初/最後のページ、偶数/奇数ページ用の特別なレイアウトを定義できます。
        ページごとの有効なレイアウトは、適用可能なすべてのレイアウトをマージすることで作成されます。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderSectionCollection">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderSection" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.IImageAlign">
      <summary>画像の配置プロパティを定義します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.IImageAlign.AlignHorz">
      <summary>コンテナ内での画像の水平方向の配置を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.IImageAlign.AlignVert">
      <summary>コンテナ内での画像の垂直方向の配置を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.IImageAlign.StretchHorz">
      <summary>画像をコンテナいっぱいに水平方向に引き伸ばして配置するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.IImageAlign.StretchVert">
      <summary>画像をコンテナいっぱいに垂直方向に引き伸ばして配置するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.IImageAlign.KeepAspectRatio">
      <summary>画像をレンダリングする際に元のアスペクト比を保持するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.IImageAlign.TileHorz">
      <summary>画像をコンテナ内で水平方向に並べて表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.IImageAlign.TileVert">
      <summary>画像をコンテナ内で垂直方向に並べて表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.IImageAlign.BestFit">
      <summary>画像のサイズを変更してコンテナ内に最適に収まるようにするかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.ImageAlign">
      <summary>コンテナ内の画像の配置を表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.ImageAlign.#ctor(C1.Win.C1Document.ImageAlignHorzEnum,C1.Win.C1Document.ImageAlignVertEnum,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <see cref="T:C1.Win.C1Document.ImageAlign" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="alignHorz">
        <see cref="P:C1.Win.C1Document.ImageAlign.AlignHorz" />に割り当てられた値。
      </param>
      <param name="alignVert">
        <see cref="P:C1.Win.C1Document.ImageAlign.AlignVert" />に割り当てられた値。
      </param>
      <param name="stretchHorz">
        <see cref="P:C1.Win.C1Document.ImageAlign.StretchHorz" />に割り当てられた値。
      </param>
      <param name="stretchVert">
        <see cref="P:C1.Win.C1Document.ImageAlign.StretchVert" />に割り当てられた値。
      </param>
      <param name="keepAspectRatio">
        <see cref="P:C1.Win.C1Document.ImageAlign.KeepAspectRatio" />に割り当てられた値。
      </param>
      <param name="tileHorz">
        <see cref="P:C1.Win.C1Document.ImageAlign.TileHorz" />に割り当てられた値。
      </param>
      <param name="tileVert">
        <see cref="P:C1.Win.C1Document.ImageAlign.TileVert" />に割り当てられた値。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.ImageAlign.ToString">
      <summary>
        現在の
        <see cref="T:C1.Win.C1Document.ImageAlign" />を表す文字列を返します。
      </summary>
      <returns>
        現在の
        <see cref="T:C1.Win.C1Document.ImageAlign" />を表す文字列。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.ImageAlign.AlignHorz">
      <summary>コンテナ内での画像の水平方向の配置を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.ImageAlign.AlignVert">
      <summary>コンテナ内での画像の垂直方向の配置を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.ImageAlign.StretchHorz">
      <summary>画像をコンテナいっぱいに水平方向に引き伸ばして配置するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.ImageAlign.StretchVert">
      <summary>画像をコンテナいっぱいに垂直方向に引き伸ばして配置するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.ImageAlign.KeepAspectRatio">
      <summary>
        画像をレンダリングする際に元のアスペクト比を保持するかどうかを示す値を取得または設定します。
        <see cref="P:C1.Win.C1Document.ImageAlign.StretchHorz" />または
        <see cref="P:C1.Win.C1Document.ImageAlign.StretchVert" />が
        <b>true</b>のときに使用されます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.ImageAlign.TileHorz">
      <summary>
        画像をコンテナ内で水平方向に並べて表示するかどうかを示す値を取得または設定します。
        <see cref="P:C1.Win.C1Document.ImageAlign.StretchHorz" />が
        <b>true</b>の場合は無視されます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.ImageAlign.TileVert">
      <summary>
        画像をコンテナ内で垂直方向に並べて表示するかどうかを示す値を取得または設定します。
        <see cref="P:C1.Win.C1Document.ImageAlign.StretchVert" />が
        <b>true</b>の場合は無視されます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.ImageAlign.BestFit">
      <summary>
        画像のサイズを変更してコンテナ内に最適に収まるようにするかどうかを示す値を取得または設定します。
        詳細については、
        <b>備考</b>を参照してください。
      </summary>
      <remarks>
        <para>
          このプロパティを取得すると、
          <see cref="P:C1.Win.C1Document.ImageAlign.StretchHorz" />、
          <see cref="P:C1.Win.C1Document.ImageAlign.StretchVert" />および
          <see cref="P:C1.Win.C1Document.ImageAlign.KeepAspectRatio" />の値の論理積（
          <b>AND</b>）が返されます。
        </para>
        <para>
          このプロパティを
          <b>true</b>値に設定すると、
          <see cref="P:C1.Win.C1Document.ImageAlign.StretchHorz" />、
          <see cref="P:C1.Win.C1Document.ImageAlign.StretchVert" />、および
          <see cref="P:C1.Win.C1Document.ImageAlign.KeepAspectRatio" />が
          <b>true</b>に設定されます。
        </para>
        <para>
          このプロパティを
          <b>false</b>値に設定すると、
          <see cref="P:C1.Win.C1Document.ImageAlign.KeepAspectRatio" />のみが
          <b>false</b>に設定されます。
        </para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Document.Shadow">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderObject" />から投影される影を表します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Style">
      <summary>オブジェクトのスタイルを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Style.Clear">
      <summary>
        現在のスタイルをクリアします。
        すべてのプロパティはリセットされて、親スタイルから継承されます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Style.AssignNonInheritedFrom(C1.Win.C1Document.Style)">
      <summary>
        現在のスタイルに、他のスタイルに明示的に設定されている別の
        <see cref="!:C1.C1Preview.Style" />オブジェクトのすべてのプロパティ、ならびに
        <see cref="P:C1.Win.C1Document.Style.Parent" />プロパティおよび
        <see cref="P:C1.Win.C1Document.Style.AmbientParent" />プロパティの値をコピーします。
      </summary>
      <param name="source">
        プロパティのコピー元の
        <see cref="!:C1.C1Preview.Style" />オブジェクト。
      </param>
      <remarks>
        事実上、このメソッドは、
        <paramref name="source" />スタイルを現在の
        <see cref="!:C1.C1Preview.Style" />に完全にコピーします。
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.Owner">
      <summary>現在のスタイルのオーナーを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Style.Parent">
      <summary>
        現在のスタイルの親である
        <see cref="T:C1.Win.C1Document.Style" />を取得または設定します。
        <para>
          <b>null</b>でない場合、そのスタイルは、明示的に設定されていない現在のスタイルの非アンビエントプロパティの値を提供します。
        </para><para>
          <b>null</b>の場合、そのプロパティはデフォルト値を持ちます。
        </para><para>
          デフォルトでは、このプロパティは
          <b>null</b>です。
        </para>
      </summary>
      <remarks>
        初期状態では、
        <see cref="T:C1.Win.C1Document.Style" />オブジェクトは、明示的に設定されたプロパティを持ちません。
        これは、すべてのアンビエントプロパティ（フォントなど）の実効値はこのスタイルを保持するオブジェクトのスタイルから継承され、非アンビエントプロパティ（境界線など）の実効値はこのプロパティが指定するスタイルから継承されることを意味します。
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.Parents">
      <summary>
        両方の親（
        <see cref="P:C1.Win.C1Document.Style.Parent" />と
        <see cref="P:C1.Win.C1Document.Style.AmbientParent" />）を同じ値に設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Style.Children">
      <summary>
        子スタイルのコレクション（つまり、
        <see cref="P:C1.Win.C1Document.Style.Parent" />が現在のスタイルに設定された
        <see cref="T:C1.Win.C1Document.Style" />オブジェクト）を取得します。
      </summary>
      <remarks>
        このメソッドは、常に、子スタイルの
        <b>null</b>でないコレクションを返します。
        子スタイルのコレクションが存在しない場合は、コレクションを初期化します。
        スタイルが既に子スタイルを持つかどうかを、
        <see cref="P:C1.Win.C1Document.Style.Children" />コレクションを作成せずにテストするには、
        <see cref="P:C1.Win.C1Document.Style.HasChildren" />プロパティを使用します。
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.HasChildren">
      <summary>
        現在のスタイルの
        <see cref="P:C1.Win.C1Document.Style.Children" />コレクションが初期化済みで、１つ以上の要素を含んでいるかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Style.AmbientParent">
      <summary>
        現在のスタイルのアンビエント親である
        <see cref="T:C1.Win.C1Document.Style" />を取得または設定します。
        <para>
          <b>null</b>でない場合、そのスタイルは、明示的に設定されていない現在のスタイルのアンビエントプロパティの値を提供します。
        </para><para>
          <b>null</b>の場合、そのプロパティは、このスタイルを保持するオブジェクトのスタイルから継承されます。
        </para><para>
          デフォルトでは、このプロパティは
          <b>null</b>です。
        </para>
      </summary>
      <remarks>
        初期状態では、
        <see cref="T:C1.Win.C1Document.Style" />オブジェクトは、明示的に設定されたプロパティを持ちません。
        これは、すべてのアンビエントプロパティ（フォントなど）の実効値は それが
        <b>null</b>でない値に設定されていない限り、このスタイルを保持するオブジェクトのスタイルから継承されることを意味します。
        <b>null</b>でない値に設定されている場合は、そのスタイルから継承されます。
        <para>
          <b>AmbientParent</b>が指定されている場合でも、そのスタイルまたは独自のアンビエント親（スタイルまたは包含するオブジェクト）のいずれかに明示的に設定されているアンビエントプロパティだけが現在のスタイルに伝搬されます。
          詳細については、以下の例を参照してください。
        </para>
      </remarks>
      <example>
        たとえば、次のコードでは
        <code>
          <![CDATA[
          C1PrintDocument doc = new C1PrintDocument();
          RenderArea ra = new RenderArea();
          ra.Style.FontBold = true;
          RenderText rt = new RenderText("my text");
          ra.Style.AmbientParent = doc.Style;
          ra.Children.Add(rt);
          doc.Body.Children.Add(ra);
          ]]>
        </code>"my text" はやはり太字で印刷されます。一方、次のコードでは
        <code>
          <![CDATA[
          C1PrintDocument doc = new C1PrintDocument();
          doc.Style.FontBold = false; // この行が異なります!
          RenderArea ra = new RenderArea();
          ra.Style.FontBold = true;
          RenderText rt = new RenderText("my text");
          ra.Style.AmbientParent = doc.Style;
          ra.Children.Add(rt);
          doc.Body.Children.Add(ra);
          ]]>
        </code>"my text" は通常の（太字でない）フォントで印刷されます。これは、テキストオブジェクトの
        <b>AmbientParent</b>に割り当てられたスタイルに対して、
        <see cref="!:C1.C1Preview.Style.FontBold" />が明示的に
        <b>false</b>に 設定されているためです。
      </example>
    </member>
    <member name="P:C1.Win.C1Document.Style.BackgroundImage">
      <summary>
        背景画像を取得または設定します。画像は、
        <see cref="P:C1.Win.C1Document.Style.BackgroundImageAlign" />を使用して整列されます。
      </summary>
      <remarks>
        このプロパティは、
        <b>非アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルの
        <see cref="P:C1.Win.C1Document.Style.Parent" />から継承されます）。
        <para>デフォルトでは、画像はなしです。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.BackgroundImageName">
      <summary>
        現在のドキュメント内の
        <see cref="P:C1.Win.C1Document.C1Document.Dictionary" />にある背景画像の名前を取得または設定します。
      </summary>
      <remarks>
        このプロパティは、
        <b>非アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルの
        <see cref="P:C1.Win.C1Document.Style.Parent" />から継承されます）。
        <para>デフォルトは、空の文字列です。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.Brush">
      <summary>
        背景の塗りつぶしに使用されるブラシを取得または設定します。
        このプロパティと
        <see cref="P:C1.Win.C1Document.Style.BackColor" />プロパティの両方がスタイルに指定されている場合は、
        <b>BackColor</b>プロパティが優先されます。
      </summary>
      <remarks>
        このプロパティは、
        <b>非アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルの
        <see cref="P:C1.Win.C1Document.Style.Parent" />から継承されます）。
        <para>デフォルトでは、ブラシはなしです。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.ForeColor">
      <summary>テキスト（前景）色を取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>デフォルトは、黒色です。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.Rotation">
      <summary>
        <b>X</b>軸から反時計回りに回転角（度単位）を取得または設定します。
      </summary>
      <remarks>
        このプロパティは、
        <b>非アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルの
        <see cref="P:C1.Win.C1Document.Style.Parent" />から継承されます）。
        <para>デフォルトは０です。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.TextAlignHorz">
      <summary>水平方向のテキスト配置を取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>デフォルトは左揃えです。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.TextAlignVert">
      <summary>垂直方向のテキスト配置を取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>デフォルトは上揃えです。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.LineSpacing">
      <summary>テキストの行スペーシング（パーセント単位）を取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>デフォルトは、100% です（標準の行スペーシング）。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.WordWrap">
      <summary>現在の行に十分なスペースがない場合、テキストが自動的に次の行に折り返されるかどうかを示す値を取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>
          デフォルトは
          <b>true</b>です。
        </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.HyperlinkAttrs">
      <summary>
        「標準」（表示済みでも強調表示でもない）ハイパーリンクの
        <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs" />を取得または設定します。
      </summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>デフォルトは、ハイパーリンクを青色のテキストで強調表示します。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.VisitedHyperlinkAttrs">
      <summary>
        表示済みのハイパーリンクの
        <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs" />を取得または設定します。
      </summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>デフォルトは、表示済みのハイパーリンクをマゼンタ色のテキストで強調表示します。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.HoverHyperlinkAttrs">
      <summary>
        強調表示されたハイパーリンクの
        <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs" />を取得または設定します。
      </summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>デフォルトは、マウスが置かれたハイパーリンクを下線付きテキストにします。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.ActiveHyperlinkAttrs">
      <summary>
        アクティブなハイパーリンクの
        <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs" />を取得または設定します。
      </summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>デフォルトは、アクティブなハイパーリンクを強調表示しません。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.MeasureTrailingSpaces">
      <summary>テキストの測定時に各テキスト行の末尾のスペースを考慮するかどうかを 示す値を取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>
          デフォルトは
          <b>false</b>です。
        </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.Padding">
      <summary>パディング（スタイルオーナーのコンテンツと境界線の間に追加されるホワイトスペース）を取得または設定します。</summary>
      <remarks>
        パディングは（ある場合）
        <see cref="P:C1.Win.C1Document.Style.Borders" />の内側に、
        <see cref="P:C1.Win.C1Document.Style.Spacing" />は境界線の外側に追加されます。
        <para>
          このプロパティは、
          <b>非アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルの
          <see cref="P:C1.Win.C1Document.Style.Parent" />から継承されます）。
        </para><para>デフォルトでは、パディングはなしです。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.Spacing">
      <summary>現在のスタイルのオーナーと周囲のオブジェクトの間のスペーシングを取得または設定します。</summary>
      <remarks>
        スペーシングは
        <see cref="P:C1.Win.C1Document.Style.Borders" />の外側にあります（一方、
        <see cref="P:C1.Win.C1Document.Style.Padding" />は内側にあります）。
        <para>
          このプロパティは、
          <b>非アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルの
          <see cref="P:C1.Win.C1Document.Style.Parent" />から継承されます）。
        </para><para>デフォルトでは、スペーシングはなしです。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.Borders">
      <summary>現在のスタイルのオーナーオブジェクトの周囲に描画される境界線を取得または設定します。</summary>
      <remarks>
        境界線は、
        <see cref="P:C1.Win.C1Document.Style.Spacing" />領域の内側に描画され、
        <see cref="P:C1.Win.C1Document.Style.Padding" />を囲みます。
        <para>
          このプロパティは、
          <b>非アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルの
          <see cref="P:C1.Win.C1Document.Style.Parent" />から継承されます）。
        </para><para>デフォルトでは、境界線はなしです。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.Shadow">
      <summary>
        現在のオブジェクトから投影される影のプロパティを取得または設定します。
        デフォルトでは、影は 100% 透明で、不可視です。
        影を表示するには、
        <b>Shadow.Transparency</b>を 100 未満の値に設定します。
        他のプロパティも必要に応じて調整できます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Style.ImageAlign">
      <summary>前景画像の配置を取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>デフォルトは、左/上に整列し、水平/垂直に拡大し、アスペクト比を維持します。</para>
      </remarks>
      <seealso cref="P:C1.Win.C1Document.Style.BackgroundImageAlign" />
    </member>
    <member name="P:C1.Win.C1Document.Style.BackgroundImageAlign">
      <summary>背景画像の配置を取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>非アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルの
        <see cref="P:C1.Win.C1Document.Style.Parent" />から継承されます）。
        <para>デフォルトは、左/上に整列し、水平/垂直に拡大し、アスペクト比を維持します。</para>
      </remarks>
      <seealso cref="P:C1.Win.C1Document.Style.ImageAlign" />
    </member>
    <member name="P:C1.Win.C1Document.Style.BackColor">
      <summary>
        背景色を取得または設定します。このプロパティと
        <see cref="P:C1.Win.C1Document.Style.Brush" />プロパティの両方がスタイルに指定されている場合は、このプロパティが優先されます。
      </summary>
      <remarks>
        このプロパティは、
        <b>非アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルの
        <see cref="P:C1.Win.C1Document.Style.Parent" />から継承されます）。
        <para>デフォルトは、透明な背景色です。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.MinOrphanLines">
      <summary>ページブレークの前後で１ページに許容される孤立したテキスト行の最小数を取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>非アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルの
        <see cref="P:C1.Win.C1Document.Style.Parent" />から継承されます）。
        <para>デフォルトは０です。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.ClientAreaOnly">
      <summary>
        現在のスタイルを所有する
        <see cref="T:C1.Win.C1Document.RenderImage" />オブジェクトが
        <see cref="T:System.Windows.Forms.Control" />の クライアント領域だけをレンダリングするか、コントロール全体をレンダリングするかを示す値を取得または設定します。
      </summary>
      <remarks>
        <para>
          <b>RenderImage</b>の
          <see cref="!:RenderImage.Control" />プロパティに
          <see cref="T:System.Windows.Forms.Control" />が割り当てられている場合、
          <see cref="T:C1.Win.C1Document.RenderImage" />は、そのコントロールの画像をレンダリングできます。
          <b>ClientAreaOnly</b>を使用すると、コントロールのクライアント領域だけをレンダリングするように指示できます。
        </para>
        <para>
          このプロパティは、
          <b>非アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルの
          <see cref="P:C1.Win.C1Document.Style.Parent" />から継承されます）。
        </para>
        <para>
          デフォルトは
          <b>false</b>です。
        </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.ShapeFillBrush">
      <summary>
        形状（
        <see cref="!:RenderShapeBase" />から派生するオブジェクト）の内部領域の塗りつぶしに使用するブラシを取得または設定します。
        １つのスタイルにこのプロパティと
        <see cref="P:C1.Win.C1Document.Style.ShapeFillColor" />プロパティの両方が指定されている場合は、
        <b>ShapeFillColor</b>が優先されます。
      </summary>
      <remarks>
        このプロパティは、
        <b>非アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルの
        <see cref="P:C1.Win.C1Document.Style.Parent" />から継承されます）。
        <para>デフォルトでは、ブラシはなしです。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.ShapeFillColor">
      <summary>
        形状（
        <see cref="!:RenderShapeBase" />から派生するオブジェクト）の内部領域の塗りつぶしに使用する色を取得または設定します。
        １つのスタイルにこのプロパティと
        <see cref="P:C1.Win.C1Document.Style.ShapeFillBrush" />プロパティの両方が指定されている場合は、
        このプロパティが優先されます。
      </summary>
      <remarks>
        このプロパティは、
        <b>非アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルの
        <see cref="P:C1.Win.C1Document.Style.Parent" />から継承されます）。
        <para>デフォルトは、透明な塗りつぶし色です。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.ShapeLine">
      <summary>図形オブジェクト（RenderLine、RenderRectangle など）を描画するために使用される線のスタイルを取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>非アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルの
        <see cref="P:C1.Win.C1Document.Style.Parent" />から継承されます）。
        <para>デフォルトは、太さ 1pt の黒い線です。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.TextIndent">
      <summary>テキストブロックの１行目のインデントを取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>非アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルの
        <see cref="P:C1.Win.C1Document.Style.Parent" />から継承されます）。
        <para>デフォルトは０です。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.CharSpacing">
      <summary>テキスト内の文字間のスペーシングを取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>デフォルトは、０です（標準のスペーシング）。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.CharWidth">
      <summary>テキスト内の文字の幅の増減量（パーセント単位）を取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>デフォルトは、100 です（標準の幅）。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.JustifyLastLine">
      <summary>
        現在のスタイルで
        <see cref="P:C1.Win.C1Document.Style.TextAlignHorz" />が
        <see cref="F:C1.Win.C1Document.AlignHorzEnum.Justify" />または
        <see cref="F:C1.Win.C1Document.AlignHorzEnum.JustifyChars" />に設定されている場合、テキストの最後の行を揃えるかどうかを示す値を取得または設定します。
      </summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>
          デフォルトは
          <b>false</b>です。
        </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.JustifyEndOfLines">
      <summary>
        現在のスタイルで
        <see cref="P:C1.Win.C1Document.Style.TextAlignHorz" />が
        <see cref="F:C1.Win.C1Document.AlignHorzEnum.Justify" />または
        <see cref="F:C1.Win.C1Document.AlignHorzEnum.JustifyChars" />に設定されている場合、改行文字で終わるテキストの行を揃えるかどうかを示す値を取得または設定します。
      </summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>
          デフォルトは
          <b>true</b>です。
        </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.WordWrapMode">
      <summary>
        テキスト行を折り返す場合に、単語を分割する方法を示す値を取得または設定します。
        <para>
          <see cref="P:C1.Win.C1Document.Style.WordWrap" />が
          <b>false</b>の場合、このプロパティは無視されます。
        </para><para>
          デフォルト値は
          <see cref="!:C1.C1Preview.WordWrapMode.Normal" />です。
        </para>
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Style.FontName">
      <summary>フォントの名前を取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>デフォルトは Arial です。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.FontSize">
      <summary>フォントの em サイズを取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>デフォルトは 10 です。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.FontStyle">
      <summary>フォントのスタイルを取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>
          デフォルトは
          <b>false</b>です。
        </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.FontWeight">
      <summary>フォントウェイトを取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>
          デフォルトは
          <b>false</b>です。
        </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.TextDecoration">
      <summary>フォントが下線付きかどうかを示す値を取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>
          デフォルトは
          <b>false</b>です。
        </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.TextPosition">
      <summary>テキストのレンダリング方法として 標準、上付き文字、または下付き文字を示す値を取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>非アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルの
        <see cref="P:C1.Win.C1Document.Style.Parent" />から継承されます）。
        <para>デフォルトは、標準テキストです。</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Document.PropsHashTable`1">
      <summary>
        <para>これは内部使用専用です。</para>
        プロパティとその値のハッシュテーブルを表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.PropsHashTable`1.Clear">
      <summary>現在のインスタンスをクリアします。</summary>
    </member>
    <member name="M:C1.Win.C1Document.PropsHashTable`1.GetPropIndex(System.Int32)">
      <summary>
        <see cref="P:C1.Win.C1Document.PropsHashTable`1.Keys" />および
        <see cref="P:C1.Win.C1Document.PropsHashTable`1.Values" />配列内のプロパティのインデックスを取得します。
      </summary>
      <param name="propKey">プロパティキー。</param>
      <returns>
        <see cref="P:C1.Win.C1Document.PropsHashTable`1.Keys" />および
        <see cref="P:C1.Win.C1Document.PropsHashTable`1.Values" />配列内の指定されたプロパティの０から始まるインデックス。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.PropsHashTable`1.SetPropValue(System.Int32,`0)">
      <summary>プロパティの値を設定します。</summary>
      <param name="propKey">プロパティキー。</param>
      <param name="value">設定するプロパティ値。</param>
    </member>
    <member name="M:C1.Win.C1Document.PropsHashTable`1.DeletePropValue(System.Int32)">
      <summary>
        現在の
        <see cref="!:PropsHashtable&lt;T&gt;" />からプロパティ値を削除します。
      </summary>
      <param name="propKey">削除するプロパティキー。</param>
    </member>
    <member name="M:C1.Win.C1Document.PropsHashTable`1.IsEmpty">
      <summary>
        現在の
        <see cref="!:PropsHashtable&lt;T&gt;" />が空かどうかを示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.PropsHashTable`1.IsPropExists(System.Int32)">
      <summary>
        現在の
        <see cref="!:PropsHashtable&lt;T&gt;" />でプロパティが設定されているかどうかをテストします。
      </summary>
      <param name="propKey">プロパティキー。</param>
      <returns>
        現在の
        <see cref="!:PropsHashtable&lt;T&gt;" />で、指定されたプロパティが設定されている場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.PropsHashTable`1.Count">
      <summary>
        現在の
        <see cref="!:PropsHashtable&lt;T&gt;" />で設定されているプロパティの数を取得します。
        この値は、
        <see cref="P:C1.Win.C1Document.PropsHashTable`1.Keys" />および
        <see cref="P:C1.Win.C1Document.PropsHashTable`1.Values" />コレクションの要素の数と同じです。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.PropsHashTable`1.Flags">
      <summary>フラグの配列を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.PropsHashTable`1.Keys">
      <summary>
        現在の
        <see cref="!:PropsHashtable&lt;T&gt;" />で設定されているプロパティキーの配列を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.PropsHashTable`1.Values">
      <summary>
        現在の
        <see cref="!:PropsHashtable&lt;T&gt;" />で設定されているプロパティ値の配列を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.StyleCollection">
      <summary>
        <see cref="T:C1.Win.C1Document.Style" />オブジェクトのコレクションを表します。
        これは、
        <see cref="T:C1.Win.C1Document.Style" />上の
        <see cref="P:C1.Win.C1Document.Style.Children" />コレクションのタイプです。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.StyleCollection.Owner">
      <summary>
        このコレクションを所有する
        <see cref="T:C1.Win.C1Document.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.UnitTypeEnum">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />内で
        <see cref="T:C1.Win.C1Document.Unit" />および関連するタイプに使用される測定単位を列挙します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.UnitTypeEnum.Document">
      <summary>測定単位として、ドキュメント単位（1/300 インチ）を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.UnitTypeEnum.Inch">
      <summary>測定単位として、インチ単位を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.UnitTypeEnum.Mm">
      <summary>測定単位として、ミリメートル単位を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.UnitTypeEnum.Pica">
      <summary>測定単位として、パイカ単位（1/6 インチ）を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.UnitTypeEnum.Point">
      <summary>測定単位として、プリンタのポイント単位（1/72 インチ）を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.UnitTypeEnum.Twip">
      <summary>測定単位として、twips （1/1440 インチ）単位を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.UnitTypeEnum.InHs">
      <summary>測定単位として、1/100 インチ単位を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.UnitTypeEnum.Display">
      <summary>測定単位として、1/75 インチ単位を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.UnitTypeEnum.Cm">
      <summary>測定単位として、センチ単位を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.UnitTypeEnum.Dip">
      <summary>測定単位として、DIP の 1/96 インチ単位を指定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Unit">
      <summary>
        <see cref="!:C1PrintDocument" />内のオブジェクトの１つの座標またはサイズ（
        <see cref="T:C1.Win.C1Document.RenderObject" />の
        <see cref="!:RenderObject.X" />または
        <see cref="!:RenderObject.Height" />など）を表す構造体です。
      </summary>
      <remarks>
        <para>
          値には、auto、絶対値（5mm など）、または親の幅/高さのパーセントを指定できます。
          詳細については、
          <see cref="M:C1.Win.C1Document.Unit.#ctor(System.String)" />を参照してください。
        </para>
      </remarks>
    </member>
    <member name="F:C1.Win.C1Document.Unit.MmPerInch">
      <summary>１インチあたりのミリメートル数（double）。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Unit.DocumentUnitsPerInch">
      <summary>１インチあたりのドキュメント単位（double）。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Unit.PointsPerInch">
      <summary>１インチあたりのポイント数（double）。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Unit.TwipsPerInch">
      <summary>１インチあたりの twips 数（double）。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Unit.PicaPerInch">
      <summary>１インチあたりのパイカ数（double）。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Unit.CmPerInch">
      <summary>１インチあたりのセンチメートル数（double）。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Unit.DisplayPerInch">
      <summary>１インチあたりの表示単位（double）。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Unit.DipPerInch">
      <summary>１インチあたりの DIP 単位（double）。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Unit.MmPerInchF">
      <summary>１インチあたりのミリメートル数（float）。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Unit.DocumentUnitsPerInchF">
      <summary>１インチあたりのドキュメント単位（float）。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Unit.PointsPerInchF">
      <summary>１インチあたりのポイント数（float）。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Unit.TwipsPerInchF">
      <summary>１インチあたりの twips 数（float）。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Unit.PicaPerInchF">
      <summary>１インチあたりのパイカ数（float）。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Unit.CmPerInchF">
      <summary>１インチあたりのセンチメートル数（float）。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Unit.DisplayPerInchF">
      <summary>１インチあたりの表示単位（float）。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Unit.#ctor(System.String)">
      <summary>
        文字列から
        <see cref="T:C1.Win.C1Document.Unit" />構造体の新しいインスタンスを初期化します。
        詳細については、
        <b>備考</b>を参照してください。
      </summary>
      <param name="str">値を表す文字列。</param>
      <remarks>
        <para>
          （以下の説明で、「
          <b>オブジェクト</b>」は、
          <b>Unit</b>構造体自体ではなく、現在の
          <b>Unit</b>がそのサイズまたは座標を表している
          <see cref="T:C1.Win.C1Document.RenderObject" />などのドキュメントオブジェクトを意味します。）
        </para>
        <paramref name="str" />文字列は、以下のいずれかの形式の有効な
        <see cref="T:C1.Win.C1Document.Unit" />値を含む必要があります。
        <list type="bullet">
          <item>
            自動。
            文字列
            <b>"auto"</b>によって表されます。
            正確なセマンティクスは、現在の単位が関連付けられているオブジェクトのタイプによって異なります。
          </item>
          <item>
            単位修飾子がない数値（
            <b>"8"</b>、
            <b>"100.12"</b>など）。
            <para>
              この場合は、
              <see cref="!:C1PrintDocument.DefaultUnit" />によって測定単位が決定されます。
            </para>
          </item>
          <item>
            測定単位付きの数値（
            <b>"28mm"</b>、
            <b>"7in"</b>など）。
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Document.Unit.#ctor(System.Double,C1.Win.C1Document.UnitTypeEnum)">
      <summary>
        絶対長さ値を含む
        <see cref="T:C1.Win.C1Document.Unit" />構造体の新しいインスタンスを初期化します。
      </summary>
      <param name="value">単位値。</param>
      <param name="unitType">測定単位。</param>
    </member>
    <member name="M:C1.Win.C1Document.Unit.ToString">
      <summary>現在のオブジェクトを文字列に変換します。</summary>
      <returns>
        現在の
        <see cref="T:C1.Win.C1Document.Unit" />オブジェクトを表す文字列。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Unit.StringToUnitType(System.String,C1.Win.C1Document.UnitTypeEnum@)">
      <summary>
        文字列を
        <see cref="T:C1.Win.C1Document.UnitTypeEnum" />値に変換します。
        文字列には、次の値を指定できます。
        def、doc、in、mm、pc、pix、pt、tw、inhs
        このメソッドは大文字小文字を区別しません。
      </summary>
      <param name="s">
        変換する文字列。null または空の場合は、
        <see cref="!:UnitTypeEnum.Default" />が返されます。
      </param>
      <param name="value">
        出力：終了時に、
        <see cref="T:C1.Win.C1Document.UnitTypeEnum" />値を保持します。
      </param>
      <returns>
        エラーがない場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Unit.UnitTypeToString(C1.Win.C1Document.UnitTypeEnum)">
      <summary>
        <see cref="T:C1.Win.C1Document.UnitTypeEnum" />値を文字列表現に変換します。
        次の表に例を示します。
        <list type="bullet">
          <item>
            <description>
              <term>Default</term>空文字列
            </description>
          </item>
          <item>
            <description>
              <term>Document</term>「doc」
            </description>
          </item>
          <item>
            <description>
              <term>Inch</term>「in」
            </description>
          </item>
          <item>
            <description>
              <term>Millimeter</term>「mm」
            </description>
          </item>
          <item>
            <description>
              <term>Pica</term>「pc」
            </description>
          </item>
          <item>
            <description>
              <term>Pixel</term>「pix」
            </description>
          </item>
          <item>
            <description>
              <term>Point</term>「pt」
            </description>
          </item>
          <item>
            <description>
              <term>Twip</term>「tw」
            </description>
          </item>
          <item>
            <description>
              <term>InHs</term>「inhs」
            </description>
          </item>
          <item>
            <description>
              <term>Centimeters</term>「cm」
            </description>
          </item>
          <item>
            <description>
              <term>Percent</term>「%」
            </description>
          </item>
        </list>
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.Win.C1Document.UnitTypeEnum" />。
      </param>
      <returns>
        <paramref name="value" />を表す文字列。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Unit.op_Implicit(C1.Win.C1Document.Unit)~System.String">
      <summary>単位値を文字列に変換します。</summary>
      <param name="value">変換する単位。</param>
      <returns>単位値を表す文字列。</returns>
    </member>
    <member name="M:C1.Win.C1Document.Unit.op_Implicit(System.String)~C1.Win.C1Document.Unit">
      <summary>
        文字列を
        <see cref="T:C1.Win.C1Document.Unit" />値に変換します（
        <see cref="M:C1.Win.C1Document.Unit.#ctor(System.String)" />を参照）。
      </summary>
      <param name="value">変換する文字列。</param>
      <returns>単位値。</returns>
    </member>
    <member name="M:C1.Win.C1Document.Unit.TryParse(System.String,System.Double@,C1.Win.C1Document.UnitTypeEnum@)">
      <summary>
        文字列を解析し、その文字列から
        <see cref="P:C1.Win.C1Document.Unit.Value" />と
        <see cref="!:Unit.Utits" />を取得します。
      </summary>
      <param name="s">解析する文字列。</param>
      <param name="value">
        出力：
        <see cref="T:C1.Win.C1Document.Unit" />構造体の値。
      </param>
      <param name="units">
        出力：
        <see cref="T:C1.Win.C1Document.Unit" />構造体の単位。
      </param>
      <returns>
        変換が成功した場合は
        <b>true</b>。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Unit.TryParse(System.String,C1.Win.C1Document.Unit@)">
      <summary>
        文字列を解析し、
        <see cref="T:C1.Win.C1Document.Unit" />構造体を作成します。
      </summary>
      <param name="s">解析する文字列。</param>
      <param name="unit">
        出力：
        <see cref="T:C1.Win.C1Document.Unit" />構造体。
      </param>
      <returns>変換が成功した場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Document.Unit.Parse(System.String)">
      <summary>
        文字列を解析し、その文字列から
        <see cref="T:C1.Win.C1Document.Unit" />インスタンスを作成します。
        文字列が無効な場合は、例外をスローします。
      </summary>
      <param name="s">解析する文字列。</param>
      <returns>
        <see cref="T:C1.Win.C1Document.Unit" />インスタンス。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Unit.Convert(System.Double,C1.Win.C1Document.UnitTypeEnum,C1.Win.C1Document.UnitTypeEnum)">
      <summary>ある測定単位の値を別の測定単位の値に変換します。</summary>
      <param name="value">変換する値。</param>
      <param name="from">変換元の測定単位。</param>
      <param name="to">変換先の測定単位。</param>
      <returns>
        <paramref name="to" />単位に変換された
        <paramref name="value" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Unit.Value">
      <summary>
        現在の単位の絶対値を取得します（
        <see cref="P:C1.Win.C1Document.Unit.Units" />単位）。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Unit.Units">
      <summary>現在の単位の測定単位を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.NotifyCollection`1">
      <summary>通知を含むコレクションを表します。</summary>
      <typeparam name="TItem"></typeparam>
    </member>
    <member name="T:C1.Win.C1Document.INotifyCollection">
      <summary>項目が追加されたり、削除された場合などに、リスナーに動的変更を通知します。</summary>
    </member>
    <member name="E:C1.Win.C1Document.INotifyCollection.CollectionChanging">
      <summary>コレクションが変更されるときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Document.INotifyCollection.CollectionChanged">
      <summary>コレクションが変更されたときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Document.NotifyCollection`1.CollectionChanging">
      <summary>コレクションが変更されるときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Document.NotifyCollection`1.CollectionChanged">
      <summary>コレクションが変更されたときに発生します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.C1Brush">
      <summary>ブラシの抽象基本クラス。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1Brush.IsVisible(C1.Win.Interop.Rect)">
      <summary>指定された範囲内に現在のブラシが表示されるかどうかをテストします。</summary>
      <param name="bounds">テストする範囲。</param>
      <returns>ブラシが表示される場合は true、そうでない場合は false。</returns>
    </member>
    <member name="T:C1.Win.C1Document.C1HyperlinkAttrs">
      <summary>特定の状態のテキストハイパーリンクの視覚的な属性を表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1HyperlinkAttrs.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1HyperlinkAttrs.#ctor(System.Drawing.Color,System.Drawing.Color,System.Nullable{System.Boolean})">
      <summary>
        <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs" />クラスの新しいインスタンスを初期化し、背景色および前景色、ならびに
        <see cref="P:C1.Win.C1Document.C1HyperlinkAttrs.Underline" />プロパティを割り当てます。
      </summary>
      <param name="backColor">ハイパーリンクテキストの背景色。</param>
      <param name="foreColor">ハイパーリンクテキストの前景色。</param>
      <param name="underline">ハイパーリンクテキストを下線付きにするかどうかを示す値。</param>
    </member>
    <member name="M:C1.Win.C1Document.C1HyperlinkAttrs.#ctor(System.Nullable{System.Boolean})">
      <summary>
        <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs" />クラスの新しいインスタンスを初期化し、
        <see cref="P:C1.Win.C1Document.C1HyperlinkAttrs.Underline" />プロパティを割り当てます。
      </summary>
      <param name="underline">ハイパーリンクテキストを下線付きにするかどうかを示す値。</param>
    </member>
    <member name="M:C1.Win.C1Document.C1HyperlinkAttrs.Equals(System.Object)">
      <summary>
        指定されたオブジェクトが現在のオブジェクトと等しいかどうかを判定します。
        このメソッドは、２つのオブジェクトのプロパティを比較します。
      </summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>
        指定されたオブジェクトが現在のオブジェクトと等しい場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1HyperlinkAttrs.GetHashCode">
      <summary>
        <see cref="T:C1.Win.C1Document.C1HyperlinkAttrs" />のハッシュ関数として機能します。
      </summary>
      <returns>現在のオブジェクトのハッシュコード。</returns>
    </member>
    <member name="P:C1.Win.C1Document.C1HyperlinkAttrs.BackColor">
      <summary>
        背景色を取得します。
        この値が空の色または透過色を表す場合、ハイパーリンクの背景色は変更されません。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1HyperlinkAttrs.ForeColor">
      <summary>
        前景（テキスト）色を取得します。
        この値が空の色または透過色を表す場合、ハイパーリンクのテキスト色は変更されません。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1HyperlinkAttrs.Underline">
      <summary>ハイパーリンクテキストが下線付きかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1HyperlinkAttrs.VisitedDefault">
      <summary>表示済みのハイパーリンクのデフォルトの属性を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1HyperlinkAttrs.NormalDefault">
      <summary>「標準」（表示済みでも強調表示でもない）ハイパーリンクのデフォルト属性を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1HyperlinkAttrs.HoverDefault">
      <summary>強調表示されたハイパーリンクのデフォルトの属性を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.C1ImageFormat">
      <summary>画像形式を表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1SortedList`2.Add(`0,`1)">
      <summary>
        リストに値を追加し、追加された値のインデックスを返します。
        指定されたキーを持つ値が既に存在する場合は、例外を生成します。
      </summary>
      <param name="key"></param>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Document.FC">
      <summary>
        <para>これは内部使用専用です。</para>
        指定された精度の float および double 型数値を比較するための静的メソッドを実装します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.PageArea">
      <summary>ページの領域を特定する値をリストします。</summary>
    </member>
    <member name="T:C1.Win.C1Document.HitTestInfo">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Page" />内の特定のポイントに関する情報を含みます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.HitTestInfo.IsSameArea(C1.Win.C1Document.HitTestInfo)">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.HitTestInfo" />オブジェクトを別の
        <see cref="T:C1.Win.C1Document.HitTestInfo" />オブジェクトと比較し、２つのオブジェクトが同じ領域を表しているかどうかを示す値を返します。
      </summary>
      <param name="hti">
        比較する
        <see cref="T:C1.Win.C1Document.HitTestInfo" />オブジェクト。
      </param>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Document.HitTestInfo.IsInsideText">
      <summary>
        <see cref="P:C1.Win.C1Document.HitTestInfo.TextPosition" />プロパティによって指定されたテキスト位置がテストポイントの直下にあるかどうかを示す値を取得または設定します。
        このプロパティが
        <b>false</b>の場合、
        <see cref="P:C1.Win.C1Document.HitTestInfo.TextPosition" />は、テストポイントに
        <b>最も近い</b>テキスト位置を示します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.HitTestInfo.TextPosition">
      <summary>
        テストポイントに対応するテキスト位置を定義する
        <see cref="T:C1.Win.C1Document.C1DocumentTextPosition" />構造体を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.HitTestInfo.PageArea">
      <summary>テストポイントの下にある領域のタイプを特定する値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.HitTestInfo.ToolTip">
      <summary>この領域のツールチップを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.HitTestInfo.Hyperlink">
      <summary>
        この領域の
        <see cref="T:C1.Win.C1Document.C1Hyperlink" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.HitTestInfo.Fragment">
      <summary>
        テストポイントの下にある
        <see cref="T:C1.Win.C1Document.RenderFragment" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.AsyncActionProgressHandler`1">
      <summary>進捗状況の更新を提供する非同期アクションの進捗状況更新イベントを処理するメソッドを表します。</summary>
      <typeparam name="TProgress">進捗状況データの型。</typeparam>
      <param name="asyncInfo">非同期アクション。</param>
      <param name="progressInfo">進捗状況の情報。</param>
    </member>
    <member name="T:C1.Win.C1Document.AsyncActionWithProgressCompletedHandler`1">
      <summary>進捗状況の更新を提供する非同期アクションの完了イベントを処理するメソッドを表します。</summary>
      <typeparam name="TProgress">進捗状況データの型。</typeparam>
      <param name="asyncInfo">非同期アクション。</param>
      <param name="asyncStatus">非同期アクションのステータス。</param>
    </member>
    <member name="T:C1.Win.C1Document.AsyncStatus">
      <summary>非同期操作のステータスを指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.AsyncStatus.Started">
      <summary>操作は開始しています。</summary>
    </member>
    <member name="F:C1.Win.C1Document.AsyncStatus.Completed">
      <summary>操作は完了しています。</summary>
    </member>
    <member name="F:C1.Win.C1Document.AsyncStatus.Canceled">
      <summary>操作はキャンセルされました。</summary>
    </member>
    <member name="F:C1.Win.C1Document.AsyncStatus.Error">
      <summary>操作でエラーが発生しました。</summary>
    </member>
    <member name="T:C1.Win.C1Document.AsyncOperationProgressHandler`2">
      <summary>進捗状況の更新を提供する非同期操作の進捗状況更新イベントを処理するメソッドを表します。</summary>
      <typeparam name="TProgress">進捗状況データの型。</typeparam>
      <param name="asyncInfo">非同期操作。</param>
      <param name="progressInfo">進捗状況の情報。</param>
    </member>
    <member name="T:C1.Win.C1Document.AsyncOperationWithProgressCompletedHandler`2">
      <summary>進捗状況の更新を提供する非同期操作の完了イベントを処理するメソッドを表します。</summary>
      <typeparam name="TProgress">進捗状況データの型。</typeparam>
      <param name="asyncInfo">非同期操作。</param>
      <param name="asyncStatus">非同期アクションのステータス。</param>
    </member>
    <member name="T:C1.Win.C1Document.CollectionAction">
      <summary>
        <see cref="E:C1.Win.C1Document.INotifyCollection.CollectionChanging" />イベントまたは
        <see cref="E:C1.Win.C1Document.INotifyCollection.CollectionChanged" />イベントの原因になったアクションを記述します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.CollectionAction.Insert">
      <summary>コレクションに項目が追加されました。</summary>
    </member>
    <member name="F:C1.Win.C1Document.CollectionAction.Remove">
      <summary>コレクションから項目が削除されました。</summary>
    </member>
    <member name="F:C1.Win.C1Document.CollectionAction.Set">
      <summary>コレクション内の項目が置換されました。</summary>
    </member>
    <member name="F:C1.Win.C1Document.CollectionAction.Clear">
      <summary>コレクションがクリアされました。</summary>
    </member>
    <member name="T:C1.Win.C1Document.NotifyCollectionEventArgs">
      <summary>
        <see cref="E:C1.Win.C1Document.INotifyCollection.CollectionChanged" />および
        <see cref="E:C1.Win.C1Document.INotifyCollection.CollectionChanging" />イベントのデータを提供します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.NotifyCollectionEventArgs.#ctor(C1.Win.C1Document.CollectionAction,System.Int32)">
      <summary>
        <see cref="T:C1.Win.C1Document.NotifyCollectionEventArgs" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="action">イベントの原因になったアクション。</param>
      <param name="index">変更の影響を受けた項目のインデックス。</param>
    </member>
    <member name="P:C1.Win.C1Document.NotifyCollectionEventArgs.Action">
      <summary>イベントの原因になったアクションを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.NotifyCollectionEventArgs.Index">
      <summary>変更の影響を受けた項目のインデックスを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.NotifyCollectionEventHandler">
      <summary>
        <see cref="!:INotifyCollection.PropertyChanged" />イベントまたは
        <see cref="!:INotifyCollection.PropertyChanging" />イベントを処理するメソッドを表します。
      </summary>
      <param name="sender">イベントを発生させたオブジェクト。</param>
      <param name="e">イベントに関する情報。</param>
    </member>
    <member name="T:C1.Win.C1Document.PropertyNotifyEventArgs">
      <summary>
        <see cref="E:C1.Win.C1Document.INotifyObject.PropertyChanged" />および
        <see cref="E:C1.Win.C1Document.INotifyObject.PropertyChanging" />イベントのデータを提供します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.PropertyNotifyEventArgs.#ctor(System.String)">
      <summary>PropertyNotifyEventArgs クラスの新しいインスタンスを初期化します。</summary>
      <param name="propertyName">変更されるプロパティまたは変更されたプロパティの名前。</param>
    </member>
    <member name="P:C1.Win.C1Document.PropertyNotifyEventArgs.PropertyName">
      <summary>変更されるプロパティまたは変更されたプロパティの名前を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.PropertyNotifyEventHandler">
      <summary>
        オブジェクトのプロパティが変更されたとき、または変更されるときに発生した
        <see cref="E:C1.Win.C1Document.INotifyObject.PropertyChanged" />イベントまたは
        <see cref="E:C1.Win.C1Document.INotifyObject.PropertyChanging" />イベントを処理するメソッドを表します。
      </summary>
      <param name="sender"></param>
      <param name="e"></param>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Document.INotifyObject">
      <summary>プロパティ値が変更されること、または既に変更されたことをクライアントに通知します。</summary>
    </member>
    <member name="E:C1.Win.C1Document.INotifyObject.PropertyChanging">
      <summary>プロパティ値が変更されるときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Document.INotifyObject.PropertyChanged">
      <summary>プロパティ値が変更されたときに発生します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.OutlineNode">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />内のアウトラインノードを表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.OutlineNode.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.OutlineNode" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.OutlineNode.#ctor(System.String)">
      <summary>
        <see cref="T:C1.Win.C1Document.OutlineNode" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="caption">ノードキャプション。</param>
    </member>
    <member name="P:C1.Win.C1Document.OutlineNode.Owner">
      <summary>
        現在のノードを含む
        <see cref="T:C1.Win.C1Document.OutlineNodeCollection" />を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.OutlineNode.Parent">
      <summary>
        現在のノードの親である
        <see cref="T:C1.Win.C1Document.OutlineNode" />を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.OutlineNode.Level">
      <summary>ノードのツリー内の現在のノードのネストレベルを取得します（最上位のノードはレベル０）。</summary>
    </member>
    <member name="P:C1.Win.C1Document.OutlineNode.Caption">
      <summary>現在のノードの表示に使用される UI 文字列を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.OutlineNode.LinkTarget">
      <summary>現在のハイパーリンクのリンク先を決定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.OutlineNode.Image">
      <summary>現在のノードの表示に使用される画像を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.OutlineNode.ImageName">
      <summary>
        現在のノードの表示に使用されるアイコンの
        <see cref="P:C1.Win.C1Document.C1Document.Dictionary" />内の名前を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.OutlineNode.Children">
      <summary>
        現在のノードの子ノードのコレクションを取得します。
        このプロパティにアクセスすると、コレクションが初期化されます（初期化されていなかった場合）。
        この副作用なしに子ノードがあるかどうかをテストするには、
        <see cref="P:C1.Win.C1Document.OutlineNode.HasChildren" />プロパティを使用します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.OutlineNode.HasChildren">
      <summary>
        現在のノードの
        <see cref="P:C1.Win.C1Document.OutlineNode.Children" />コレクションが初期化され、少なくとも１つの要素が入っているかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.OutlineNode.TopParent">
      <summary>
        現在のノードツリーのルートである
        <see cref="T:C1.Win.C1Document.OutlineNode" />を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.OutlineNode.Document">
      <summary>
        現在のノードツリーを含む
        <see cref="T:C1.Win.C1Document.C1Document" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.OutlineNodeCollection">
      <summary>
        <see cref="T:C1.Win.C1Document.OutlineNode" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.OutlineNodeCollection.Document">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.Win.C1Document.C1Document" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.OutputRangeType">
      <summary>
        <see cref="T:C1.Win.C1Document.OutputRange" />のタイプを指定します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.OutputRangeType.All">
      <summary>ドキュメントのすべてのページが範囲内に置かれます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.OutputRangeType.PageList">
      <summary>範囲内のページがリストとして指定されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.OutputRangeType.PageRange">
      <summary>ページの１つまたは複数の範囲が指定されます。</summary>
    </member>
    <member name="T:C1.Win.C1Document.OutputRange">
      <summary>
        エクスポートまたは印刷されるドキュメントの一部（ページまたはオブジェクト）を記述します。
        メモ：すべてのページ番号は、１から始まります。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.OutputRange.All">
      <summary>すべてを含む範囲を表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.#ctor(System.Int32,System.Int32)">
      <summary>
        １つのページ範囲を含む OutputRange のインスタンスを 作成します。
        FromPage が ToPage より大きくてもかまいません。
        その場合は、範囲が 逆転されます。
      </summary>
      <param name="fromPage">範囲の最初のページの番号（１から始まる）。</param>
      <param name="toPage">範囲の最後のページの番号（１から始まる）。</param>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.#ctor(System.Int32[])">
      <summary>リストで指定された番号のすべてのページを含む OutputRange のインスタンスを作成します。</summary>
      <param name="pageNumbers">含めるページ番号の配列。</param>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.#ctor(System.String)">
      <summary>
        文字列パラメータで指定されたページを含む OutputRange のインスタンスを 作成します。
        文字列には、- スペースまたはカンマで区切られたページ番号（１から始まる）、- 連続範囲を指定するダッシュ（-）（最後のダッシュは無限を意味する）を含めることができます。
      </summary>
      <param name="pages">含めるページ。</param>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.ToString">
      <summary>現在の OutputRange を表す文字列を返します。</summary>
      <returns>範囲を表す文字列。</returns>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.Contains(System.Int32)">
      <summary>指定されたページが範囲内にあるかどうかをテストします。</summary>
      <param name="pageNumber">テストするページ番号。</param>
      <returns>ページが範囲内にある場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.GetEnumerator(System.Int32,System.Int32)">
      <summary>範囲内のすべてのページをループするための新しい列挙子を作成して返します。</summary>
      <param name="minPageNumber">ページ範囲が「-2」のように指定された場合に使用される最小ページ番号。</param>
      <param name="maxPageNumber">ページ範囲が「2-」のように指定された場合に使用される最大ページ番号。</param>
      <returns>新しい列挙子。</returns>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.GetEnumerator(System.Int32)">
      <summary>範囲内のすべてのページをループするための新しい列挙子を作成して返します。</summary>
      <param name="maxPageNumber">ページ範囲が「2-」のように指定された場合に使用される最大ページ番号。</param>
      <returns>新しい列挙子。</returns>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.GetEnumerator">
      <summary>範囲内のすべてのページをループするための新しい列挙子を作成して返します。</summary>
      <returns>新しい列挙子。</returns>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.GetPageCount(System.Int32,System.Int32)">
      <summary>
        範囲内のページの総数を取得します。
        OutputRange.All に対しては、int.MaxValue が返されます。
      </summary>
      <value></value>
    </member>
    <member name="P:C1.Win.C1Document.OutputRange.Type">
      <summary>範囲のタイプ（すべてのページ、ページの範囲など）。</summary>
    </member>
    <member name="T:C1.Win.C1Document.OutputRange.Enumerator">
      <summary>
        範囲内のすべてのページを列挙します。
        メモ：有効な MaxPageNumber を指定せずに OutputRange を作成した場合、クライアントは無限ループを回避する手段を講じる必要があります。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.Enumerator.Reset">
      <summary>列挙子をリセットします。</summary>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.Enumerator.MoveNext">
      <summary>範囲内の次のページ番号に移動します。</summary>
      <returns>範囲内に次のページが存在する場合は true。</returns>
    </member>
    <member name="P:C1.Win.C1Document.OutputRange.Enumerator.Current">
      <summary>現在のページ番号を取得します。</summary>
      <value>現在のページ番号。</value>
    </member>
    <member name="T:C1.Win.C1Document.Utils">
      <summary>一般的な機能を含みます。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Utils.SamePaperSizes(C1.Win.Interop.Size,C1.Win.Interop.Size)">
      <summary>２つのサイズが等しいかどうかをテストします。小さなマージンは丸め誤差と見なされます。</summary>
      <param name="size1">比較する最初のサイズ。</param>
      <param name="size2">比較する２番目のサイズ。</param>
      <returns>２つのサイズがほぼ等しい場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.CopyStream(System.IO.Stream,System.IO.Stream)">
      <summary>１つのストリームの内容を別のストリームにコピーします。</summary>
      <param name="src"></param>
      <param name="dst"></param>
    </member>
    <member name="M:C1.Win.C1Document.Utils.GetResourceStream(System.Reflection.Assembly,System.String)">
      <summary>指定されたアセンブリからリソースストリームを取得します。</summary>
      <param name="asmb"></param>
      <param name="resName"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.IsNumber(System.Object)">
      <summary>オブジェクトがバイト、整数、float などの数値を表すかどうかをチェックします。</summary>
      <param name="obj">チェックするオブジェクト。</param>
      <returns>
        オブジェクトが数値を表す場合は
        <b>true</b>、そうでない場合は false。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.AsNumber(System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="obj"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.FindTextInstances(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
      <summary>文字列からテキストのインスタンスを検索します。</summary>
      <param name="what">検索するテキスト。</param>
      <param name="where">検索する文字列。</param>
      <param name="fromIdx">検索を開始する場所のインデックス。</param>
      <param name="length">検索する部分文字列の長さ。</param>
      <param name="maxCount">検索するインスタンスの最大数。</param>
      <param name="forward">検索方向。</param>
      <param name="matchCase">大文字小文字の違いを無視します。</param>
      <param name="word">完全に一致する単語を検索します。</param>
      <returns>見つかったインスタンスの場所を示すインデックスの配列。</returns>
    </member>
    <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.Language">
      <summary>
        SSRS セッションで使用される言語を取得または設定します。
        このプロパティで指定するカルチャは、User!Language レポート識別子に影響します。
        デフォルトでは、このプロパティは null です。
        つまり、CultureInfo.CurrentUICulture が使用されます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1Document.MeasurementUnits">
      <summary>現在のドキュメントでオブジェクトの座標やサイズを定義するために使用される測定単位を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1Document.Style">
      <summary>
        現在のドキュメントのメイン（ルート）
        <see cref="P:C1.Win.C1Document.C1Document.Style" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.C1FragmentHighlight">
      <summary>テキストブロック内の強調表示を定義します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.C1LinkTargetBase">
      <summary>リンクターゲットを定義するクラスの抽象基本クラスです。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1LinkTarget.Bookmark">
      <summary>ドキュメント内のブックマークを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.C1LinkTargetFile">
      <summary>
        外部ドキュメント（ファイルまたは URL）を指す
        <see cref="T:C1.Win.C1Document.C1LinkTarget" />を記述します。
        ハイパーリンクジャンプは、
        <b>ShellExecute</b>（OS shell API）を使用して実行されるため、結果はオペレーティングシステムとインストールされているプログラムによって異なります。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1LinkTargetFile.#ctor(System.String)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1LinkTargetFile" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="fileName">ハイパーリンクジャンプで実行するファイルの名前（ドキュメント名、URL など）。</param>
    </member>
    <member name="M:C1.Win.C1Document.C1LinkTargetFile.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1LinkTargetFile" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="fileName">ハイパーリンクジャンプで実行するファイルの名前（ドキュメント名、URL など）。</param>
      <param name="command">
        実行するシェルコマンド（詳細は
        <see cref="P:C1.Win.C1Document.C1LinkTargetFile.Command" />を参照）。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.C1LinkTargetFile.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1LinkTargetFile" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="fileName">ハイパーリンクジャンプで実行するファイルの名前（ドキュメント名、URL など）。</param>
      <param name="command">
        実行するシェルコマンド（詳細は
        <see cref="P:C1.Win.C1Document.C1LinkTargetFile.Command" />を参照）。
      </param>
      <param name="parameters">コマンドパラメータ。</param>
      <param name="directory">コマンドが実行されるディレクトリ。</param>
    </member>
    <member name="M:C1.Win.C1Document.C1LinkTargetFile.Open">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.C1LinkTargetFile" />オブジェクトで定義されたパラメータを使用して、指定されたドキュメントを開きます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1LinkTargetFile.FileName">
      <summary>指定された動詞を実行する対象のファイルまたはオブジェクトを指定します。</summary>
      <remarks>
        シェル名前空間オブジェクトを指定するには、完全修飾パーサー名を渡します。
        すべてのオブジェクトですべての動詞がサポートされているわけではありません。
        たとえば、一部のドキュメントタイプは動詞「print」をサポートしません。
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.C1LinkTargetFile.Command">
      <summary>リンクがクリックされたときに実行するアクションを指定するコマンド（動詞）を取得します。</summary>
      <remarks>
        <para>
          有効な動詞は、ファイルまたはフォルダごとに異なります。
          一般に、オブジェクトのショートカットメニューから利用できるアクションは、有効な動詞です。
        </para>
        <para>
          動詞の詳細と、各動詞が有効かどうかについては、「オブジェクト動詞」を参照してください。
          ショートカットメニューの詳細については、「ショートカットメニューの拡張」を参照してください。
        </para>
        <para>次の動詞がよく使用されます。</para>
        <list type="table">
          <item>
            <term>edit</term>エディタを起動し、編集するドキュメントを開きます。
            FileName がドキュメントファイルでない場合、この関数は失敗します。
          </item>
          <item>
            <term>explore</term>
            <description>FileName で指定されたフォルダを調べます。</description>
          </item>
          <item>
            <term>find</term>
            <description>指定されたディレクトリから検索を開始します。</description>
          </item>
          <item>
            <term>open</term>
            <description>
              FileName パラメータで指定されたファイルを開きます。
              ファイルには、実行可能ファイル、ドキュメントファイル、またはフォルダを指定できます。
            </description>
          </item>
          <item>
            <term>print</term>
            <description>
              FileName で指定されたドキュメントファイルを印刷します。
              FileName がドキュメントファイルでない場合、この関数は失敗します。
            </description>
          </item>
          <item>
            <term>空文字列</term>
            <description>
              Microsoft(R) Windows(R) 2000 より前のシステムでは、デフォルトの動詞がレジストリにあり、有効である場合は、それが使用されます。
              そうでない場合は、動詞「open」が使用されます。
              Windows 2000 以降のシステムでは、デフォルトの動詞がある場合は、それが使用されます。
              そうでない場合は、動詞「open」が使用されます。
              どちらの動詞も使用できない場合は、レジストリに最初にリストされている動詞が使用されます。
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.C1LinkTargetFile.Parameters">
      <summary>
        <see cref="P:C1.Win.C1Document.C1LinkTargetFile.FileName" />パラメータで実行可能ファイルを指定している場合、これは、アプリケーションに渡されるパラメータを指定する文字列です。
        この文字列の形式は、呼び出される動詞によって決定されます。
        <see cref="P:C1.Win.C1Document.C1LinkTargetFile.FileName" />でドキュメントファイルを指定している場合、これは空文字列にする必要があります。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1LinkTargetFile.Directory">
      <summary>デフォルトのディレクトリを取得します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1Hyperlink.#ctor(C1.Win.C1Document.C1LinkTargetBase)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Hyperlink" />クラスの新しいインスタンスを初期化し、
        <see cref="P:C1.Win.C1Document.C1Hyperlink.LinkTarget" />を指定された
        <see cref="T:C1.Win.C1Document.C1LinkTargetBase" />に割り当てます。
      </summary>
      <param name="linkTarget">
        現在のハイパーリンクのリンク先として設定する
        <see cref="T:C1.Win.C1Document.C1LinkTargetBase" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.C1Hyperlink.#ctor(C1.Win.C1Document.C1LinkTargetBase,System.String)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Hyperlink" />クラスの新しいインスタンスを初期化し、
        <see cref="P:C1.Win.C1Document.C1Hyperlink.LinkTarget" />を指定された
        <see cref="T:C1.Win.C1Document.C1LinkTargetBase" />に割り当てます。
      </summary>
      <param name="linkTarget">
        現在のハイパーリンクのリンク先として設定する
        <see cref="T:C1.Win.C1Document.C1LinkTargetBase" />。
      </param>
      <param name="statusText">
        現在のハイパーリンクの
        <see cref="P:C1.Win.C1Document.C1Hyperlink.StatusText" />に割り当てる文字列。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.C1Hyperlink.#ctor(C1.Win.C1Document.C1LinkTargetBase,System.String,System.Object)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Hyperlink" />クラスの新しいインスタンスを初期化し、
        <see cref="P:C1.Win.C1Document.C1Hyperlink.LinkTarget" />を指定された
        <see cref="T:C1.Win.C1Document.C1LinkTargetBase" />に割り当てます。
      </summary>
      <param name="linkTarget">
        現在のハイパーリンクのリンク先として設定する
        <see cref="T:C1.Win.C1Document.C1LinkTargetBase" />。
      </param>
      <param name="statusText">
        現在のハイパーリンクの
        <see cref="P:C1.Win.C1Document.C1Hyperlink.StatusText" />に割り当てる文字列。
      </param>
      <param name="tag">
        現在のハイパーリンクの
        <see cref="P:C1.Win.C1Document.C1Hyperlink.Tag" />に割り当てる任意の値。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.C1Page.Draw(C1.Win.C1Document.Util.C1Graphics,C1.Win.Interop.Point,System.Nullable{C1.Win.Interop.Rect},C1.Win.C1Document.IC1HighlightingManager,C1.Win.C1Document.DrawAttrs)">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.C1Page" />を指定されたグラフィック上に描画します。
      </summary>
      <param name="graphics">
        描画先の
        <see cref="T:C1.Win.C1Document.Util.C1Graphics" />。
      </param>
      <param name="pointPx">
        <paramref name="graphics" />内のピクセル単位で表された、描画されるページの左上隅の場所を表すポイント。
      </param>
      <param name="visibilityRectPx">
        ページの可視領域を定義する四角形。
        この四角形と交差するフラグメントだけが描画されます。
      </param>
      <param name="highlightingManager">強調表示されるコンテンツに関する情報を提供します。</param>
      <param name="drawAttrs">
        追加の描画パラメータを定義する
        <see cref="T:C1.Win.C1Document.DrawAttrs" />構造体。
      </param>
    </member>
    <member name="P:C1.Win.C1Document.C1Page.Document">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.C1Page" />オブジェクトを表すページから成る
        <see cref="T:C1.Win.C1Document.C1Document" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="E:C1.Win.C1Document.C1PageSettings.PropertyChanged">
      <summary>プロパティ値が変更されたときに発生します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.CompatibilityOptions.UseGdiCompatibleTextLayout">
      <summary>DirectWrite の GDI 互換テキストレイアウトを使用してテキストをレンダリングするかどうかを示します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Dictionary.GetUniqueName(System.String)">
      <summary>
        辞書項目の一意の名前を取得します。
        この名前を持つ項目が存在しない場合は
        <paramref name="prefix" />が返され、そうでない場合は「prefix_XXX」のような名前が返されます。
      </summary>
      <param name="prefix">辞書項目のプリフィックス。</param>
      <returns>一意の名前。</returns>
    </member>
    <member name="T:C1.Win.C1Document.C1TextBlockRange">
      <summary>
        <see cref="T:C1.Win.C1Document.C1TextRange" />構造体のリストで表される、テキストブロック内のテキストの範囲を定義します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1TextBlockRange.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.C1TextBlockRange" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1TextBlockRange.#ctor(System.Collections.Generic.IList{C1.Win.C1Document.C1TextRange})">
      <summary>
        <see cref="T:C1.Win.C1Document.C1TextBlockRange" />クラスの新しいインスタンスを初期化します。
        <see cref="T:C1.Win.C1Document.C1TextBlockRange" />は、渡されたテキスト範囲のリストを使用します。
        つまり、独自にコピーを作成しません。
      </summary>
      <param name="textRanges">
        <see cref="T:C1.Win.C1Document.C1TextRange" />構造体のリスト。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.C1TextBlockRange.#ctor(C1.Win.C1Document.C1TextRange[])">
      <summary>
        <see cref="T:C1.Win.C1Document.C1TextBlockRange" />クラスの新しいインスタンスを初期化します。
        <see cref="T:C1.Win.C1Document.C1TextBlockRange" />は、渡されたテキスト範囲のリストを使用します。
        つまり、独自にコピーを作成しません。
      </summary>
      <param name="textRanges">
        <see cref="T:C1.Win.C1Document.C1TextRange" />構造体のリスト。
      </param>
    </member>
    <member name="P:C1.Win.C1Document.C1TextBlockRange.Count">
      <summary>テキスト範囲の数を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1TextBlockRange.Item(System.Int32)">
      <summary>指定されたインデックスを持つテキスト範囲を取得します。</summary>
      <param name="index">テキスト範囲のインデックス。</param>
      <returns>
        テキスト範囲を定義する
        <see cref="T:C1.Win.C1Document.C1TextRange" />構造体。
      </returns>
    </member>
    <member name="T:C1.Win.C1Document.C1DocumentSourceFeatures">
      <summary>
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />クラスの特定のインスタンスによってサポートされる機能セットを表します。
        そのインスタンスを使用するクライアントは、この型で公開されるプロパティを分析し、それに応じて UI 要素を有効または無効にできます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSourceFeatures.SupportsPaginated">
      <summary>
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />がページ区切り付きモードのドキュメント生成をサポートするかどうかを示します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSourceFeatures.SupportsNonPaginated">
      <summary>
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />がページ区切りなしモードのドキュメント生成をサポートするかどうかを示します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSourceFeatures.SupportsTextSearchInPaginatedMode">
      <summary>
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />がページ区切り付きモードのテキスト検索をサポートするかどうかを示します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSourceFeatures.SupportsTextSelectionInPaginatedMode">
      <summary>
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />がページ区切り付きモードのテキスト選択をサポートするかどうかを示します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.ParameterValidationError">
      <summary>
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />のパラメータの検証中に発生したエラーを表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.ParameterValidationError.#ctor(C1.Win.C1Document.Parameter,System.Object,System.String)">
      <summary>ParameterValidationError クラスの新しいインスタンスを初期化します。</summary>
      <param name="parameter">エラーに関連するパラメータ。</param>
      <param name="value">誤りのある値。</param>
      <param name="errorMessage">エラーメッセージ。</param>
    </member>
    <member name="P:C1.Win.C1Document.ParameterValidationError.Parameter">
      <summary>エラーに関連するパラメータを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.ParameterValidationError.Value">
      <summary>誤りのある値を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.ParameterValidationError.ErrorMessage">
      <summary>エラーメッセージを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.ValidateParametersCompletedEventArgs">
      <summary>
        <see cref="E:C1.Win.C1Document.C1DocumentSource.ValidateParametersCompleted" />イベントのパラメータを定義します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.ValidateParametersCompletedEventArgs.#ctor(System.Collections.Generic.List{C1.Win.C1Document.ParameterValidationError},System.Exception,System.Boolean)">
      <summary>
        <see cref="T:C1.Win.C1Document.ValidateParametersCompletedEventArgs" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="errors">
        パラメータ値のチェック中に発生したエラーを記述する
        <see cref="T:C1.Win.C1Document.ParameterValidationError" />オブジェクトのリスト。
      </param>
      <param name="error">非同期操作中に発生したエラー。</param>
      <param name="cancelled">非同期操作がキャンセルされたかどうかを示す値。</param>
    </member>
    <member name="P:C1.Win.C1Document.ValidateParametersCompletedEventArgs.Errors">
      <summary>
        パラメータ値のチェック中に発生したエラーを記述する
        <see cref="T:C1.Win.C1Document.ParameterValidationError" />オブジェクトのリストを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.C1DocumentSourceBusyState">
      <summary>
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />オブジェクトのビジー状態を記述します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.C1DocumentSourceBusyState.Ready">
      <summary>ドキュメントは準備できています（ビジー状態ではない）。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1DocumentSourceBusyState.Generating">
      <summary>ドキュメントを生成中です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1DocumentSourceBusyState.Exporting">
      <summary>ドキュメントをエクスポート中です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1DocumentSourceBusyState.Printing">
      <summary>ドキュメントを印刷中です。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.OnLongOperation(System.Double,System.Boolean)">
      <summary>内部使用。</summary>
      <param name="done"></param>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.OnBusyStateChanged">
      <summary>内部使用。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.OnValidateParametersCompleted(System.Collections.Generic.List{C1.Win.C1Document.ParameterValidationError},System.Exception)">
      <summary>内部使用。</summary>
      <param name="errors"></param>
      <param name="exception"></param>
      <param name="cancelled"></param>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.OnGetLinkTargetPositionCompleted(C1.Win.C1Document.C1LinkTargetBase,C1.Win.C1Document.C1BookmarkPosition,System.Exception)">
      <summary>内部使用。</summary>
      <param name="bookmark"></param>
      <param name="position"></param>
      <param name="exception"></param>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSource.Features">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />がサポートする機能セットを指定する
        <see cref="T:C1.Win.C1Document.C1DocumentSourceFeatures" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSource.SupportedExportProviders">
      <summary>現在のドキュメントソースオブジェクトがサポートするエクスポータの配列を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSource.DocumentName">
      <summary>ドキュメントの名前を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSource.BusyState">
      <summary>
        現在の
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />の現在のビジー状態を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSource.IsBusy">
      <summary>
        現在の
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />がビジーかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSource.PageSettings">
      <summary>
        ページ区切り付きドキュメントを生成する際に使用するページ設定を指定する
        <see cref="T:C1.Win.C1Document.C1PageSettings" />オブジェクトを取得または設定します（
        <see cref="P:C1.Win.C1Document.C1DocumentSource.Paginated" />を参照）。
      </summary>
    </member>
    <member name="E:C1.Win.C1Document.C1DocumentSource.BusyStateChanged">
      <summary>
        <see cref="P:C1.Win.C1Document.C1DocumentSource.BusyState" />プロパティの値が変更されたときに発生します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.SupportedExportProviders">
      <summary>
        オーバーライドされます。
        現在のドキュメントソースオブジェクトがサポートするエクスポータの配列を取得します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.Generate">
      <summary>SSRS レポートを生成します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.GenerateAsync">
      <summary>
        <see cref="M:C1.Win.C1Document.C1SSRSDocumentSource.Generate" />メソッドの非ブロック（非同期）バージョン。
      </summary>
      <seealso cref="M:C1.Win.C1Document.C1SSRSDocumentSource.Generate" />
    </member>
    <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.ValidateParameters">
      <summary>現在のパラメータ値を検証し、値が有効な場合は、有効な値のリストを更新します。</summary>
      <returns>
        エラーを特定する
        <see cref="T:C1.Win.C1Document.ParameterValidationError" />オブジェクトのリスト（空または null の場合があります）。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.ValidateParametersAsync">
      <summary>
        <see cref="M:C1.Win.C1Document.C1SSRSDocumentSource.ValidateParameters" />メソッドの非ブロック（非同期）バージョン。
      </summary>
      <returns>
        エラーを特定する
        <see cref="T:C1.Win.C1Document.ParameterValidationError" />オブジェクトの非同期リスト（空の場合があります）。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.Features">
      <summary>
        オーバーライドされます。
        <see cref="T:C1.Win.C1Document.C1SSRSDocumentSource" />の機能を定義する
        <see cref="T:C1.Win.C1Document.C1DocumentSourceFeatures" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.DocumentName">
      <summary>
        オーバーライドされます。
        現在のレポートのユーザーフレンドリな名前を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1SSRSDocumentSource.PageSettings">
      <summary>
        オーバーライドされます。
        SSRS レポートの生成に使用されるページ設定を指定する
        <see cref="T:C1.Win.C1Document.C1PageSettings" />オブジェクトを取得または設定します。
        このプロパティは、新しいレポートが開くと自動的に更新されます。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.C1FontStyle">
      <summary>フォントスタイルを定義します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontStyle.Normal">
      <summary>標準のフォントです。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontStyle.Italic">
      <summary>斜体フォントです。</summary>
    </member>
    <member name="T:C1.Win.C1Document.C1FontWeight">
      <summary>フォントウェイトを定義します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontWeight.Normal">
      <summary>「Normal」のフォントです。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontWeight.Black">
      <summary>「Black」のフォントです。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontWeight.Bold">
      <summary>「Bold」のフォントです。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontWeight.ExtraBlack">
      <summary>「Extra black」のフォントです。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontWeight.ExtraBold">
      <summary>「Extra bold」のフォントです。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontWeight.ExtraLight">
      <summary>「Extra light」のフォントです。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontWeight.Light">
      <summary>「Light」のフォントです。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontWeight.Medium">
      <summary>「Medium」のフォントです。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontWeight.SemiBold">
      <summary>「Semi bold」のフォントです。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontWeight.SemiLight">
      <summary>「Semi light」のフォントです。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontWeight.Thin">
      <summary>「Thin」のフォントです。</summary>
    </member>
    <member name="T:C1.Win.C1Document.C1TextDecoration">
      <summary>下線、取り消し線などのテキスト装飾を定義します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1TextDecoration.None">
      <summary>装飾なし。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1TextDecoration.Underline">
      <summary>テキストに下線を引きます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1TextDecoration.Strikeout">
      <summary>テキストに取り消し線を引きます。</summary>
    </member>
    <member name="T:C1.Win.C1Document.BarCodeEnum">
      <summary>バーコードのタイプを決定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.None">
      <summary>バーコードなし。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.Ansi39">
      <summary>ANSI 3 of 9（Code 39）は、大文字、数字、- , * $ / + % を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.Ansi39x">
      <summary>ANSI Extended 3 of 9（Extended Code 39）は、ASCII 文字セット全体を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.Code39">
      <summary>英数字（Code 3 of 9）。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.Code39x">
      <summary>Extended Code 39 は、ASCII 文字セット全体を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.Code93">
      <summary>英数字。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.Code93x">
      <summary>Extended Code 93 は、ASCII 文字セット全体を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.Code_128_A">
      <summary>Code 128 A は、制御文字、数字、句読点、大文字を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.Code_128_B">
      <summary>Code 128 B は、数字、句読点、大文字、小文字を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.Code_128_C">
      <summary>Code 128 C は数字だけを使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.Code_128auto">
      <summary>
        Code 128 Auto は、ASCII 文字セット全体を使用します。
        最小のバーコードになるように、Code 128 A、B、および C から 1 つが自動的に選択されます。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.Code_2_of_5">
      <summary>Code 2 of 5 は数字だけを使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.Code25intlv">
      <summary>Interleaved 2 of 5 は数字だけを使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.Codabar">
      <summary>数値のみ。Code39 より少し記録密度が高い。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.Matrix_2_of_5">
      <summary>
        Matrix 2 of 5 は、3 本の黒バーと 2 本の白バーから成る比較的高密度のバーコードです。
        Matrix_2_of_5 は数字だけを使用します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.MSI">
      <summary>MSI Code は数字だけを使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.PostNet">
      <summary>数値のみ。米国郵便サービス。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.EAN_13">
      <summary>
        EAN-13 は、数字（12 個の数字とチェックデジット）だけを使用します。
        文字列内に数字が 12 個だけある場合は、チェックサムを計算し、それを 13 番目の位置に付加します。
        13 個の数字がある場合は、チェックサムを検証し、それが正しくない場合はエラーを生成します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.EAN_8">
      <summary>EAN-8 は、数字（7 個の数字とチェックデジット）だけを使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.UPC_A">
      <summary>UPC-A は、数字（11 個の数字とチェックデジット）だけを使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.UPC_E0">
      <summary>
        UPC-E0 は数字だけを使用します。
        Zero Suppression の UPC シンボルに使用されます。
        Caption プロパティには、6 桁の UPC-E コードまたは完全な 11 桁（必須のコードタイプ 0 を含む）の UPC-A コードを入力する必要があります。
        11 桁のコードが入力された場合、バーコードコントロールは、可能であればそれを 6 桁の UPC-E コードに変換します。
        11 桁のコードを 6 桁のコードに変換できない場合は、何も表示されません。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.UPC_E1">
      <summary>
        UPC-E1 は数字だけを使用します。主に小売業界で在庫ラベルに使用されます。
        UPC-E1 の入力文字列の長さは数字 6 個です。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.RM4SCC">
      <summary>
        Royal Mail RM4SCC は、文字と数字（チェックデジット付き）だけを使用します。
        これは、イギリスのロイヤルメールで使用されるバーコードです。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.UCCEAN128">
      <summary>
        UCC/EAN –128 は、ASCII 文字セット全体を使用します。
        HIBC アプリケーションで使用される特殊な Code 128 です。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.QRCode">
      <summary>
        QRCode は、英数字やバイトデータに加えて、日本語の漢字やかな文字も扱うことができる 2 次元バーコードです。
        このバーコードは最大 7,366 文字をエンコードできます。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.Code49">
      <summary>
        Code 49 は、2 次元高密度スタック型バーコードです。
        ASCII 文字セット全体をエンコードします。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.JapanesePostal">
      <summary>
        これは、日本の郵便制度で使用されるバーコードです。
        18 桁の英数字をエンコードします。これには、7 桁の郵便番号の後に、必要に応じて番地や部屋番号などの情報が含まれます。
        エンコードするデータにはハイフンを含めることができます。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.Pdf417">
      <summary>
        Pdf417 は、よく使用されている 2 次元高密度バーコードです。
        最大 1,108 バイトの情報をエンコードできます。このバーコードは、小さなバーコードを積み重ねて構成されます。
        ASCII 文字セット全体をエンコードします。最大 2,725 データ文字をエンコードできます。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.EAN128FNC1">
      <summary>
        EAN128FNC1 は UCC/EAN-128（EAN128）バーコードタイプの 1 つで、任意の場所に FNC1 文字を挿入したり、バーサイズを調整することができるなど、UCC/EAN-128 にはない機能をサポートしています。
        FNC1 文字を挿入するには、実行時に Text プロパティに "\n"（C# の場合）または "vbLf"（VB の場合）を設定します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.RSS14">
      <summary>
        RSS14 は、コンポジットコンポーネント（CC）で拡張された EAN および UPC 情報を小さなスペースにエンコードできる省スペースシンボル（Reduced Space Symbology：RSS）の 1 つです。
        このバージョンは、全方向型 POS スキャナと共に使用される 14 桁の EAN.UCC 品目識別用です。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.RSS14Truncated">
      <summary>
        RSS14Truncated は、コンポジットコンポーネント（CC）で拡張された EAN および UPC 情報を小さなスペースにエンコードできる省スペースシンボル（Reduced Space Symbology：RSS）の 1 つです。
        このバージョンは、小さな品目に使用される、インジケータデジット付きの 14 桁の EAN.UCC 品目識別用です。POS スキャナ用ではありません。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.RSS14Stacked">
      <summary>
        RSS14Stacked は、コンポジットコンポーネント（CC）で拡張された EAN および UPC 情報を小さなスペースにエンコードできる省スペースシンボル（Reduced Space Symbology：RSS）の 1 つです。
        このバージョンは、RSS14Truncated では広すぎる場合に 2 段に積み重ねられること以外は、RSS14Truncated と同じです。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.RSS14StackedOmnidirectional">
      <summary>
        RSS14StackedOmnidirectional は、コンポジットコンポーネント（CC）で拡張された EAN および UPC 情報を小さなスペースにエンコードできる省スペースシンボル（Reduced Space Symbology：RSS）の 1 つです。
        このバージョンは、RSS14 では広すぎる場合に 2 段に積み重ねられること以外は、RSS14 と同じです。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.RSSExpanded">
      <summary>
        RSSExpanded は、コンポジットコンポーネント（CC）で拡張された EAN および UPC 情報を小さなスペースにエンコードできる省スペースシンボル（Reduced Space Symbology：RSS）の 1 つです。
        このバージョンは、全方向型 POS スキャナと共に使用される、AI 要素文字列（有効期限、重量など）付きの 14 桁の EAN.UCC 品目識別用です。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.RSSExpandedStacked">
      <summary>
        RSSExpandedStacked は、コンポジットコンポーネント（CC）で拡張された EAN および UPC 情報を小さなスペースにエンコードできる省スペースシンボル（Reduced Space Symbology：RSS）の 1 つです。
        このバージョンは、RSSExpanded では広すぎる場合に 2 段に積み重ねられること以外は、RSSExpanded と同じです。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.RSSLimited">
      <summary>
        RSS Limited は、コンポジットコンポーネント（CC）で拡張された EAN および UPC 情報を小さなスペースにエンコードできる省スペースシンボル（Reduced Space Symbology：RSS）の 1 つです。
        このバージョンは、0 または 1 のインジケータデジット付きの 14 桁の EAN.UCC 品目識別用です。POS スキャナでスキャンされない小さなシンボルに使用されます。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.DataMatrix">
      <summary>Data Matrix は、正方形または長方形のマトリックスパターンに並べられた正方形モジュールから成る 2 次元高密度バーコードです。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.MicroPDF417">
      <summary>
        MicroPDF417 は、PDF417 から派生された 2 次元多段バーコードです。
        Micro-PDF417 は、データをできる限り小さなサイズの 2 次元シンボル（最大 150 バイト、英数字 250 文字、数字 366 桁）にエンコードする必要があるアプリケーション用に設計されています。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.BarCodeEnum.IntelligentMail">
      <summary>Intelligent Mail（以前の 4-State Customer Barcode）は、米国内の郵便に使用される 65 本のバーコードです。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.ImageExporter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
      <summary>現在のエクスポータが、指定された型の範囲をエクスポートできるかどうかをテストします。</summary>
      <param name="rangeType">
        テストする
        <see cref="T:C1.Win.C1Document.OutputRangeType" />。
      </param>
      <returns>指定された範囲をエクスポートできる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.PdfExporter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
      <summary>エクスポータが、指定された型の範囲をエクスポートできるかどうかをテストします。</summary>
      <param name="rangeType">
        テストする
        <see cref="T:C1.Win.C1Document.OutputRangeType" />。
      </param>
      <returns>指定された範囲をエクスポートできる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.TiffExporter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
      <summary>現在のエクスポータが、指定された型の範囲をエクスポートできるかどうかをテストします。</summary>
      <param name="rangeType">
        テストする
        <see cref="T:C1.Win.C1Document.OutputRangeType" />。
      </param>
      <returns>指定された範囲をエクスポートできる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.ExcelExporter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
      <summary>現在のエクスポータが、指定された型の範囲をエクスポートできるかどうかをテストします。</summary>
      <param name="rangeType">
        テストする
        <see cref="T:C1.Win.C1Document.OutputRangeType" />。
      </param>
      <returns>指定された範囲をエクスポートできる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.MhtmlExporter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
      <summary>現在のエクスポータが、指定された型の範囲をエクスポートできるかどうかをテストします。</summary>
      <param name="rangeType">
        テストする
        <see cref="T:C1.Win.C1Document.OutputRangeType" />。
      </param>
      <returns>指定された範囲をエクスポートできる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.WordExporter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
      <summary>現在のエクスポータが、指定された型の範囲をエクスポートできるかどうかをテストします。</summary>
      <param name="rangeType">
        テストする
        <see cref="T:C1.Win.C1Document.OutputRangeType" />。
      </param>
      <returns>指定された範囲をエクスポートできる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportProvider.SupportedDocumentInfoFields">
      <summary>
        現在のエクスポート形式によってサポートされる
        <see cref="T:C1.Win.C1Document.DocumentInfo" />クラスのフィールドを示す フラグの組み合わせを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportProvider.CanShowOptions">
      <summary>
        関連付けられている
        <see cref="T:C1.Win.C1Document.Export.Exporter" />が、ユーザーがエクスポートオプションを編集するためのダイアログを表示できるかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportProvider.OptionsFormClass">
      <summary>エクスポートオプションの編集にデフォルトで使用されるフォームのタイプを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.ExportOptionsFormBase">
      <summary>
        <see cref="P:C1.Win.C1Document.Export.ExportOptionsFormBase.Exporter" />が使用するエクスポートオプションを編集するためのフォームを表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportOptionsFormBase.Exporter">
      <summary>関連付けられたエクスポータを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportOptionsFormBase.ExportProvider">
      <summary>関連付けられたエクスポートプロバイダを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportOptionsFormBase.Preview">
      <summary>結果のドキュメントがデフォルトのシステムビューアで開かれているかどうかを 示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportOptionsFormBase.DocumentInfo">
      <summary>ドキュメント情報を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportOptionsFormBase.Range">
      <summary>エクスポートするページの範囲を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportOptionsFormBase.MaxPageNumber">
      <summary>エクスポートされるドキュメントの最大ページ数を取得または設定します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.ExportOptionsFormBase.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">マネージリソースを破棄する場合は true、そうでない場合は false。</param>
    </member>
    <member name="T:C1.Win.C1Document.Forms.BaseForm">
      <summary>C1Preview 内のすべてのカスタムフォームの基本クラス。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Forms.BaseForm.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.Forms.BaseForm" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Forms.BaseForm.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">マネージリソースを破棄する場合は true、そうでない場合は false。</param>
    </member>
    <member name="T:C1.Win.C1Document.Forms.DocumentInfoForm">
      <summary>
        ドキュメントに関連付けられた
        <see cref="T:C1.Win.C1Document.DocumentInfo" />をユーザーが編集できるようにする
        <see cref="T:System.Windows.Forms.Form" />を表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Forms.DocumentInfoForm.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.Forms.DocumentInfoForm" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Forms.DocumentInfoForm.SetDocumentInfo(C1.Win.C1Document.DocumentInfo)">
      <summary>
        <see cref="T:C1.Win.C1Document.DocumentInfo" />オブジェクトから現在の
        <see cref="T:C1.Win.C1Document.Forms.DocumentInfoForm" />のプロパティにデータをコピーします。
      </summary>
      <param name="documentInfo">
        プロパティのコピー元の
        <see cref="T:C1.Win.C1Document.DocumentInfo" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.Forms.DocumentInfoForm.BuildDocumentInfo">
      <summary>
        新しい
        <see cref="T:C1.Win.C1Document.DocumentInfo" />オブジェクトを作成し、現在の
        <see cref="T:C1.Win.C1Document.Forms.DocumentInfoForm" />から新しいオブジェクトにデータをコピーします。
      </summary>
      <returns>
        現在のフォームのデータを含む
        <see cref="T:C1.Win.C1Document.DocumentInfo" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Forms.DocumentInfoForm.CreateForm(System.Type,System.Type)">
      <summary>
        新しい
        <see cref="T:C1.Win.C1Document.Forms.DocumentInfoForm" />フォーム または
        <see cref="T:C1.Win.C1Document.Forms.DocumentInfoForm" />の派生型のフォームを作成します。
      </summary>
      <param name="customType">
        カスタムフォーム型。
        <see cref="T:C1.Win.C1Document.Forms.DocumentInfoForm" />またはその派生型である必要があります。
      </param>
      <param name="defaultType">
        デフォルトのフォーム型。
        <paramref name="customType" />が
        <b>null</b>の場合に使用されます。
        <see cref="T:C1.Win.C1Document.Forms.DocumentInfoForm" />またはその派生型である必要があります。
      </param>
      <returns>新しく作成されたフォーム。</returns>
    </member>
    <member name="P:C1.Win.C1Document.Forms.DocumentInfoForm.SupportedFields">
      <summary>
        このフォームでサポートされる
        <see cref="T:C1.Win.C1Document.DocumentInfo" />フィールドを識別する
        <see cref="T:C1.Win.C1Document.DocumentInfoFields" />の組み合わせを取得または設定します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Forms.DocumentInfoForm.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">マネージリソースを破棄する場合は true、そうでない場合は false。</param>
    </member>
    <member name="T:C1.Win.C1Document.Forms.OutputRangeForm">
      <summary>ページ範囲の入力に使用できるフォームを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Forms.OutputRangeForm.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.Forms.OutputRangeForm" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Forms.OutputRangeForm.SetOutputRange(C1.Win.C1Document.OutputRange,System.Nullable{System.Int32})">
      <summary>出力範囲を割り当てます。</summary>
      <param name="range">割り当てる範囲。</param>
      <param name="maxPageNumber">最大ページ数。</param>
    </member>
    <member name="M:C1.Win.C1Document.Forms.OutputRangeForm.BuildOutputRange">
      <summary>入力データに基づいて出力範囲を構築します。</summary>
      <returns>新しい範囲。</returns>
    </member>
    <member name="M:C1.Win.C1Document.Forms.OutputRangeForm.CreateForm(System.Type,System.Type)">
      <summary>
        <see cref="T:C1.Win.C1Document.Forms.OutputRangeForm" />またはその派生型のインスタンスを作成します。
      </summary>
      <param name="customType">
        カスタムフォーム型または
        <b>null</b>。
      </param>
      <param name="defaultType">デフォルトのフォーム型。</param>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Forms.OutputRangeForm" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Forms.OutputRangeForm.AllowAll">
      <summary>「すべてのページの許可」オプションが有効かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Forms.OutputRangeForm.AllowPageRange">
      <summary>「ページ範囲」オプションが有効かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Forms.OutputRangeForm.AllowPageList">
      <summary>「ページリスト」オプションが有効かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Forms.OutputRangeForm.AllowInverted">
      <summary>「反転リスト」オプションが有効かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Forms.OutputRangeForm.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">マネージリソースを破棄する場合は true、そうでない場合は false。</param>
    </member>
    <member name="M:C1.Win.C1Document.PageColumn.#ctor(System.Double,System.Double)">
      <summary>
        <see cref="T:C1.Win.C1Document.PageColumn" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="width">
        現在の列の
        <see cref="P:C1.Win.C1Document.PageColumn.Width" />を表す double 値。
      </param>
      <param name="spacing">
        現在の列の
        <see cref="P:C1.Win.C1Document.PageColumn.Spacing" />を表す double 値。
      </param>
    </member>
    <member name="F:C1.Win.C1Document.ParameterType.Time">
      <summary>値は DateTime 型です。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Parameter.OnPropertyChanged">
      <summary>
        <see cref="T:C1.Win.C1Document.Parameter" />のプロパティが変更されると呼び出されます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Parameter.Owner">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.Parameter" />オブジェクトを含む
        <see cref="T:C1.Win.C1Document.ParameterCollection" />を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Parameter.DocumentSource">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.Parameter" />オブジェクトを所有する
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.CornerRadius">
      <summary>角丸四角形の角の半径を定義します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.CornerRadius.Default">
      <summary>
        角が直角の四角形を定義する
        <see cref="T:C1.Win.C1Document.CornerRadius" />構造体を取得します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.CornerRadius.#ctor(System.Double)">
      <summary>
        <see cref="T:C1.Win.C1Document.CornerRadius" />構造体の新しいインスタンスを初期化します。
      </summary>
      <param name="all">すべての角の値。</param>
    </member>
    <member name="M:C1.Win.C1Document.CornerRadius.#ctor(System.Double,System.Double)">
      <summary>
        <see cref="T:C1.Win.C1Document.CornerRadius" />構造体の新しいインスタンスを初期化します。
      </summary>
      <param name="allX">すべての x 半径の値。</param>
      <param name="allY">すべての y 半径の値。</param>
    </member>
    <member name="M:C1.Win.C1Document.CornerRadius.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <see cref="T:C1.Win.C1Document.CornerRadius" />構造体の新しいインスタンスを初期化します。
      </summary>
      <param name="topLeftX">
        <see cref="P:C1.Win.C1Document.CornerRadius.TopLeftX" />プロパティの値。
      </param>
      <param name="topLeftY">
        <see cref="P:C1.Win.C1Document.CornerRadius.TopLeftY" />プロパティの値。
      </param>
      <param name="topRightX">
        <see cref="P:C1.Win.C1Document.CornerRadius.TopRightX" />プロパティの値。
      </param>
      <param name="topRightY">
        <see cref="P:C1.Win.C1Document.CornerRadius.TopRightY" />プロパティの値。
      </param>
      <param name="bottomLeftX">
        <see cref="P:C1.Win.C1Document.CornerRadius.BottomLeftX" />プロパティの値。
      </param>
      <param name="bottomLeftY">
        <see cref="P:C1.Win.C1Document.CornerRadius.BottomLeftY" />プロパティの値。
      </param>
      <param name="bottomRightX">
        <see cref="P:C1.Win.C1Document.CornerRadius.BottomRightX" />プロパティの値。
      </param>
      <param name="bottomRightY">
        <see cref="P:C1.Win.C1Document.CornerRadius.BottomRightY" />プロパティの値。
      </param>
    </member>
    <member name="P:C1.Win.C1Document.CornerRadius.TopLeftX">
      <summary>左上の角の x 半径を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.CornerRadius.TopLeftY">
      <summary>左上の角の y 半径を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.CornerRadius.TopRightX">
      <summary>右上の角の x 半径を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.CornerRadius.TopRightY">
      <summary>右上の角の y 半径を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.CornerRadius.BottomRightX">
      <summary>右下の角の x 半径を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.CornerRadius.BottomRightY">
      <summary>右下の角の y 半径を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.CornerRadius.BottomLeftX">
      <summary>左下の角の x 半径を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.CornerRadius.BottomLeftY">
      <summary>左下の角の y 半径を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.CornerRadius.All">
      <summary>
        すべての角に使用される同じ半径値を取得または設定します。
        それぞれの半径が異なる値を持つ場合は、このプロパティを取得すると、null が返されます。
        このプロパティを null に設定しても、効果はありません。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.CornerRadius.AllX">
      <summary>
        すべての角に使用される同じ X 半径値を取得または設定します。
        それぞれの X 半径が異なる値を持つ場合は、このプロパティを取得すると、null が返されます。
        このプロパティを null に設定しても、効果はありません。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.IBorder">
      <summary>境界線のプロパティを定義します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.IBorder.Left">
      <summary>
        境界線の左辺を定義する
        <see cref="T:C1.Win.C1Document.ILine" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.IBorder.Top">
      <summary>
        境界線の上辺を定義する
        <see cref="T:C1.Win.C1Document.ILine" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.IBorder.Right">
      <summary>
        境界線の右辺を定義する
        <see cref="T:C1.Win.C1Document.ILine" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.IBorder.Bottom">
      <summary>
        境界線の下辺を定義する
        <see cref="T:C1.Win.C1Document.ILine" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.IBorder.CornerRadius">
      <summary>
        角丸境界線の角の半径を定義する
        <see cref="P:C1.Win.C1Document.IBorder.CornerRadius" />構造体を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Border">
      <summary>オブジェクトの境界線を表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Border.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.Border" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Border.#ctor(System.Double,System.Drawing.Color,C1.Win.C1Document.DashStyle)">
      <summary>
        <see cref="T:C1.Win.C1Document.Border" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Border.AssignFrom(C1.Win.C1Document.VisualPrimitive)">
      <summary>
        プロパティを別の
        <see cref="T:C1.Win.C1Document.Border" />から現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.Win.C1Document.Border.Compare(C1.Win.C1Document.VisualPrimitive)">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.Border" />オブジェクトを別の
        <see cref="T:C1.Win.C1Document.Border" />オブジェクトと比較します。
        オブジェクトが同じ境界線を表す場合は、
        <b>true</b>を返します。
      </summary>
      <param name="v">
        比較する
        <see cref="T:C1.Win.C1Document.Border" />オブジェクト。
      </param>
      <returns>
        2 つの境界線オブジェクトが同じ境界線を表す場合は、
        <b>true</b>を返します。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Border.CornerRadius">
      <summary>
        角丸境界線の角の半径を定義する
        <see cref="P:C1.Win.C1Document.Border.CornerRadius" />構造体を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Border.Left">
      <summary>
        境界線の左辺を定義する
        <see cref="T:C1.Win.C1Document.Line" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Border.Top">
      <summary>
        境界線の上辺を定義する
        <see cref="T:C1.Win.C1Document.Line" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Border.Right">
      <summary>
        境界線の右辺を定義する
        <see cref="T:C1.Win.C1Document.Line" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Border.Bottom">
      <summary>
        境界線の下辺を定義する
        <see cref="T:C1.Win.C1Document.Line" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Border.Style">
      <summary>
        境界線のすべての辺のスタイルを取得または設定します。
        境界線の辺ごとにスタイルが異なる場合は、null を取得します。
        このプロパティを null に設定しても、効果はありません。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Border.Width">
      <summary>
        境界線のすべての辺の幅を取得または設定します。
        境界線の辺ごとに幅が異なる場合は、null を取得します。
        このプロパティを null に設定しても、効果はありません。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Border.Color">
      <summary>
        境界線のすべての辺の色を取得または設定します。
        境界線の辺ごとに色が異なる場合は、Color.Empty を取得します。
        このプロパティを null に設定しても、効果はありません。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.ImageAlign.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.ImageAlign" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.DashStyle">
      <summary>線の破線スタイルを定義します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DashStyle.None">
      <summary>線なし。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DashStyle.Solid">
      <summary>実線。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DashStyle.Dash">
      <summary>破線。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DashStyle.Dot">
      <summary>点線。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DashStyle.DashDot">
      <summary>一点鎖線。</summary>
    </member>
    <member name="F:C1.Win.C1Document.DashStyle.DashDotDot">
      <summary>二点鎖線。</summary>
    </member>
    <member name="T:C1.Win.C1Document.ILine">
      <summary>線のプロパティを定義します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.ILine.Style">
      <summary>線スタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.ILine.Width">
      <summary>線の幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.ILine.Color">
      <summary>線の色を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Line">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />や
        <see cref="!:C1FlexReport" />内の線を表します。
        このクラスは、
        <see cref="T:C1.Win.C1Document.Border" />クラス内の境界線、
        <see cref="!:ShapeField" />で使用される線スタイルなどを指定するために使用されます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Line.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.Line" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Line.#ctor(System.Double,System.Drawing.Color,C1.Win.C1Document.DashStyle)">
      <summary>
        <see cref="T:C1.Win.C1Document.Line" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="width">
        <see cref="P:C1.Win.C1Document.Line.Width" />プロパティの値。
      </param>
      <param name="color">
        <see cref="P:C1.Win.C1Document.Line.Color" />プロパティの値。
      </param>
      <param name="style">
        <see cref="P:C1.Win.C1Document.Line.Style" />プロパティの値。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.Line.AssignFrom(C1.Win.C1Document.VisualPrimitive)">
      <summary>
        プロパティを別の
        <see cref="T:C1.Win.C1Document.Line" />から現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.Win.C1Document.Line.Compare(C1.Win.C1Document.VisualPrimitive)">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.Line" />オブジェクトを別の
        <see cref="T:C1.Win.C1Document.Line" />オブジェクトと比較します。
        オブジェクトが同じ境界線を表す場合は、
        <b>true</b>を返します。
      </summary>
      <param name="v">
        比較する
        <see cref="T:C1.Win.C1Document.Line" />オブジェクト。
      </param>
      <returns>
        2 つの Line オブジェクトが同じ線を表す場合は、
        <b>true</b>を返します。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Line.Style">
      <summary>線スタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Line.Width">
      <summary>線の幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Line.Color">
      <summary>線の色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Line.ActualWidth">
      <summary>
        線の実際の幅を取得します。
        <see cref="P:C1.Win.C1Document.Line.Width" />プロパティとは異なり、
        <see cref="P:C1.Win.C1Document.Line.Style" />が
        <see cref="F:C1.Win.C1Document.DashStyle.None" />の場合、このプロパティは 0 を返します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.VisualPrimitive">
      <summary>
        <see cref="T:C1.Win.C1Document.Line" />、
        <see cref="T:C1.Win.C1Document.Border" />などのさまざまな複合ビジュアルプロパティを表すクラスの 抽象基本クラスです。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.VisualPrimitive.OnPropertyChanged(System.String)">
      <summary>
        <see cref="E:C1.Win.C1Document.VisualPrimitive.PropertyChanged" />イベントを発生させます。
      </summary>
      <param name="propertyName">変更されるプロパティの名前。</param>
    </member>
    <member name="M:C1.Win.C1Document.VisualPrimitive.Clone">
      <summary>このオブジェクトのコピーを作成します。</summary>
      <returns>作成されたコピーを返します。</returns>
    </member>
    <member name="M:C1.Win.C1Document.VisualPrimitive.AssignFrom(C1.Win.C1Document.VisualPrimitive)">
      <summary>
        プロパティを別の
        <see cref="T:C1.Win.C1Document.VisualPrimitive" />から現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.Win.C1Document.VisualPrimitive.Compare(C1.Win.C1Document.VisualPrimitive)">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.VisualPrimitive" />オブジェクトを別の
        <see cref="T:C1.Win.C1Document.VisualPrimitive" />オブジェクトと比較します。
        オブジェクトが同じオブジェクトを表す場合は、
        <b>true</b>を返します。
      </summary>
      <param name="v">
        比較する
        <see cref="T:C1.Win.C1Document.VisualPrimitive" />オブジェクト。
      </param>
      <returns>
        2 つのオブジェクトが同じ場合は、
        <b>true</b>を返します。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.VisualPrimitive.Compare(C1.Win.C1Document.VisualPrimitive,C1.Win.C1Document.VisualPrimitive)">
      <summary>
        2 つの
        <see cref="T:C1.Win.C1Document.VisualPrimitive" />オブジェクトを比較し、それらが同じ線を表す場合は、
        <b>true</b>を返します。
      </summary>
      <param name="x">
        1 番目の
        <see cref="T:C1.Win.C1Document.VisualPrimitive" />オブジェクト。
      </param>
      <param name="y">
        2 番目の
        <see cref="T:C1.Win.C1Document.VisualPrimitive" />オブジェクト。
      </param>
      <returns>
        オブジェクトが同じ場合は
        <b>true</b>、そうでない場合は
        <b>false</b>を返します。オブジェクトが両方とも null の場合は、
        <b>true</b>を返します。
      </returns>
    </member>
    <member name="E:C1.Win.C1Document.VisualPrimitive.PropertyChanged">
      <summary>プロパティ値が変更されたときに発生します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.C1PrintOptions">
      <summary>ドキュメントコンテンツを印刷（またはプレビュー）する方法を制御するオプションを記述します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1PrintOptions.AssignFrom(C1.Win.C1Document.C1PrintOptions)">
      <summary>別のオブジェクトからこのオブジェクトにプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.Win.C1Document.C1PrintOptions.PrinterSettings">
      <summary>
        印刷パラメータを定義する
        <see cref="P:C1.Win.C1Document.C1PrintOptions.PrinterSettings" />オブジェクトを取得または設定します。
        null を指定してデフォルトのプリンタ設定を使用できます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1PrintOptions.PrintJobName">
      <summary>印刷ジョブの名前を取得または設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.FragmentDrawParams.VisibilityRectPx">
      <summary>C1Page.Draw() メソッドに渡される表示範囲四角形。</summary>
    </member>
    <member name="F:C1.Win.C1Document.FragmentDrawParams.HasDrawOffset">
      <summary>
        <see cref="!:RenderFragment.DrawOffset" />が空でないかどうかを示します。
        空でない場合は、Borders.BoundsPx を背景のクリッピング四角形として使用する必要があります。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.FragmentDrawParams.BackgroundClipRectPx">
      <summary>背景のクリッピング四角形。</summary>
    </member>
    <member name="F:C1.Win.C1Document.FragmentDrawParams.ContentClipRectPx">
      <summary>コンテンツのクリッピング四角形。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BorderParams.CornerRadiusPx">
      <summary>ピクセル単位に変換された Border.CornerRadius。</summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderFragment">
      <summary>
        ページ内の
        <see cref="P:C1.Win.C1Document.RenderFragment.RenderObject" />のフラグメントを表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.RenderFragment.#ctor(C1.Win.C1Document.RenderObject)">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderFragment" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="renderObject">
        この
        <see cref="T:C1.Win.C1Document.RenderFragment" />オブジェクトを生成する
        <see cref="P:C1.Win.C1Document.RenderFragment.RenderObject" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.RenderFragment.DrawContentStart(C1.Win.C1Document.Util.C1Graphics,C1.Win.C1Document.FragmentDrawParams@)">
      <summary>オブジェクトの背景を描画します。</summary>
      <param name="graphics"></param>
      <param name="fdp"></param>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Document.RenderFragment.HasChildFragments">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.RenderFragment" />オブジェクトに子の
        <see cref="T:C1.Win.C1Document.RenderFragment" />オブジェクトが含まれるかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderFragment.ChildFragments">
      <summary>
        子の
        <see cref="T:C1.Win.C1Document.RenderFragment" />オブジェクトのコレクションを取得します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.RenderFragment.CreateSame">
      <summary>このクラスと同じクラスの新しいインスタンスを作成します。</summary>
      <returns>新しく作成されたクローン。</returns>
    </member>
    <member name="M:C1.Win.C1Document.RenderFragment.AssignFrom(C1.Win.C1Document.RenderFragment)">
      <summary>
        別の
        <see cref="T:C1.Win.C1Document.RenderFragment" />オブジェクトからすべてを割り当てます。
      </summary>
      <param name="source">ソースオブジェクト。</param>
    </member>
    <member name="M:C1.Win.C1Document.RenderFragment.Draw(C1.Win.C1Document.Util.C1Graphics,C1.Win.Interop.Rect,System.Nullable{C1.Win.Interop.Rect},C1.Win.C1Document.IC1HighlightingManager)">
      <summary>
        指定された位置にフラグメントを描画します。
        visibilityRectPx によって表示範囲四角形が定義され、この四角形と交差するフラグメントだけが描画されます。
        すべての位置はグラフィックのピクセル単位で指定されます。
      </summary>
      <param name="graphics"></param>
      <param name="boundsPx"></param>
      <param name="visibilityRectPx"></param>
      <param name="highlightingManager"></param>
    </member>
    <member name="P:C1.Win.C1Document.RenderFragment.Document">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.RenderFragment" />の
        <see cref="P:C1.Win.C1Document.RenderFragment.RenderObject" />によって参照される
        <see cref="T:C1.Win.C1Document.C1Document" />を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderFragment.Bounds">
      <summary>
        ページ内または親における
        <see cref="T:C1.Win.C1Document.RenderFragment" />の範囲を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderFragment.BackgroundOffset">
      <summary>
        背景の描画オフセットを定義する
        <see cref="T:C1.Win.Interop.Thickness" />構造体を取得または設定します。
        背景が「複雑な」グラデーションや画像などの場合に使用されます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderFragment.ContentOffset">
      <summary>
        コンテンツの描画オフセットを定義する
        <see cref="T:C1.Win.Interop.Thickness" />構造体を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderFragmentCollection">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderFragment" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderContainerFragment">
      <summary>すべてのコンテナフラグメントの基本クラスです。</summary>
    </member>
    <member name="M:C1.Win.C1Document.RenderTextFragment.GetText">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.RenderTextFragment" />フラグメントのテキストを取得します。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.RenderTextFragment.HasText">
      <summary>
        このフラグメントに表示するテキストがあるかどうかを示す値を取得します。
        string.IsNullOrEmpty(GetText()) より、このメソッドを使用する方が効率的です。
      </summary>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Document.BarcodeSizeMode">
      <summary>バーコードサイズ変更モードを指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarcodeSizeMode.Normal">
      <summary>バーコード画像のサイズは、BarcodeSizeOptions.NarrowBarWidth、BarcodeSizeOptions.NarrowWideRatio などのプロパティによって決定されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.BarcodeSizeMode.Scale">
      <summary>
        バーコード画像は、
        <see cref="!:Field" />領域に収まるように拡大縮小されます。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.BarcodeSizeOptions">
      <summary>狭いバーの幅、狭いバーの広いバーに対する比率など、バーコードのサイズに影響するオプションを指定します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.BarcodeSizeOptions.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.BarcodeSizeOptions" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.BarcodeSizeOptions.Equals(System.Object)">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.BarcodeSizeOptions" />を指定されたオブジェクトと比較して、2 つが等しいかどうかを決定します。
      </summary>
      <param name="obj">現在の BarcodeSizeOptions と比較するオブジェクト。</param>
      <returns>2 つのオブジェクトが同じオプションを指定している場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Document.BarcodeSizeOptions.Clone">
      <summary>現在のオブジェクトのコピーを作成します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.BarcodeSizeOptions.AssignFrom(C1.BarCode.BarCodeOptionsBase)">
      <summary>
        プロパティを別の
        <see cref="T:C1.BarCode.BarCodeOptionsBase" />から現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.Win.C1Document.BarcodeSizeOptions.GetHashCode">
      <summary>指定されたオプションの現在の値に基づいて、ハッシュコードを計算および取得します。</summary>
      <returns>現在のオブジェクトのハッシュコード。</returns>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeSizeOptions.ModuleSize">
      <summary>
        バーコードモジュールのサイズ（twips 単位）を取得または設定します。
        <para>0 は、デフォルト値を意味します。デフォルト値は、バーコードタイプによって異なります。</para><list type="bullet">
          <item>シンプルな「バー」バーコードの場合は、15 twips です。</item>
          <item>マトリックスバーコード（QRCode、DataMatrix）の場合は、75 twips です。</item>
          <item>RSS スタック型バーコード（RSSStacked、RSSExpandedStacked）の場合は、45 twips です。</item>
          <item>合成バーコードの場合は、45 twips です。</item>
        </list>
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeSizeOptions.NarrowWideRatio">
      <summary>狭いバーと広いバーの比率を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeSizeOptions.SizeMode">
      <summary>バーコードサイズ変更モードを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeSizeOptions.BarHeight">
      <summary>バーの高さ（twips 単位）を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeSizeOptions.SupplementSpacing">
      <summary>メインバーコードと補助バーコードの間の間隔（twips 単位）を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.BarcodeOptions">
      <summary>追加のバーコードオプションを定義します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.BarcodeOptions.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.BarcodeOptions" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.BarcodeOptions.AssignFrom(C1.Win.C1Document.BarcodeOptions)">
      <summary>
        プロパティを別の
        <see cref="T:C1.Win.C1Document.BarcodeOptions" />から現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeOptions.SizeOptions">
      <summary>
        バーコードのサイズに影響するオプションを指定する
        <see cref="T:C1.Win.C1Document.BarcodeSizeOptions" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeOptions.CaptionGrouping">
      <summary>キャプションテキストを、それをサポートするバーコードタイプに応じて複数のグループに分割するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeOptions.CaptionPosition">
      <summary>バーコードに対するキャプションの相対的な垂直位置を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeOptions.CheckSumEnabled">
      <summary>適切な場合にバーコードのチェックサムを計算してバーコードに含めるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeOptions.SupplementNumber">
      <summary>
        バーコードデータの補助コードを取得または設定します。
        補助コードは、EAN/UPC シンボルの場合、2 桁または 5 桁です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeOptions.TextAlign">
      <summary>キャプションテキストの配置を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeOptions.BarCodeDirection">
      <summary>バーコードの方向を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeOptions.Code49">
      <summary>
        Code49 バーコードの追加オプションを指定する
        <see cref="T:C1.BarCode.Code49Options" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeOptions.QRCode">
      <summary>
        QR バーコードの追加オプションを指定する
        <see cref="T:C1.BarCode.QRCodeOptions" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeOptions.PDF417">
      <summary>
        PDF417 バーコードの追加オプションを指定する
        <see cref="T:C1.BarCode.PDF417Options" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeOptions.MicroPDF417">
      <summary>
        MicroPDF417 バーコードの追加オプションを指定する
        <see cref="T:C1.BarCode.MicroPDF417Options" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeOptions.GS1Composite">
      <summary>
        合成バーコードの追加オプションを指定する
        <see cref="T:C1.BarCode.GS1CompositeOptions" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeOptions.RssExpandedStacked">
      <summary>
        RSS Expanded Stacked バーコードの追加オプションを指定する
        <see cref="T:C1.BarCode.RssExpandedStackedOptions" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.BarcodeOptions.DataMatrix">
      <summary>
        DataMatrix バーコードの追加オプションを指定する
        <see cref="T:C1.BarCode.DataMatrixOptions" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.BarcodeOptions.Clone">
      <summary>現在のオブジェクトのクローンを作成します。</summary>
      <returns>クローンオブジェクト。</returns>
    </member>
    <member name="T:C1.Win.C1Document.RenderBarCode">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />内のバーコードを表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderBarCode.Text">
      <summary>バーコード画像としてエンコードされる値を取得または設定します。</summary>
      <remarks>
        <para>
          一部のエンコーディングは任意の長さの英数字値をサポートします。
          その他の エンコーディングは、数値または特定の文字セットに制限されます。
          詳細については、
          <see cref="!:BarCodeStyle" />列挙を 参照してください。
        </para>
        <para>現在のエンコーディングに対して無効な文字を使用すると、オブジェクトには空白の画像が表示されます。</para>
      </remarks>
      <example>
        次のサンプルは、Text プロパティを使用して、値「123456」を Code39 エンコーディングバーコードにエンコードする方法を示します。
        <code>
          <![CDATA[
          RenderBarCode rbc = new RenderBarCode();
          rbc.BarCodeType = BarCodeType.Code39;
          rbc.Text = "123456";
          doc.Body.Children.Add(rbc);
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.Win.C1Document.RenderBarCode.BarCodeType">
      <summary>
        バーコードの生成時に使用するエンコーディングのタイプを取得または設定します。
        <para>BarCodeType.None は、このプロパティの有効な値ではありません。</para>
      </summary>
      <remarks>
        選択されたエンコーディングが
        <see cref="P:C1.Win.C1Document.RenderBarCode.Text" />プロパティに保存された値に適用されて、オブジェクトに表示されるバーコード画像が生成されます。
      </remarks>
      <example>
        次のサンプルは、BarCodeType プロパティを使用して、値「123456」を Code39 エンコーディングバーコードにエンコードする方法を示します。
        <code>
          <![CDATA[
          RenderBarCode rbc = new RenderBarCode();
          rbc.BarCodeType = BarCodeType.Code39;
          rbc.Text = "123456";
          doc.Body.Children.Add(rbc);
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.Win.C1Document.RenderBarCode.Options">
      <summary>
        追加のバーコードオプションを定義する
        <see cref="T:C1.Win.C1Document.BarcodeOptions" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderContainer">
      <summary>子の描画オブジェクトを含むすべての描画オブジェクトの抽象基本クラスです。</summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderObject.HasChildObjects">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.RenderObject" />に子オブジェクトが含まれるかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderObject.ChildObjects">
      <summary>
        子の
        <see cref="T:C1.Win.C1Document.RenderObject" />オブジェクトのコレクションを取得します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.RenderObject.FindChildObject(System.String)">
      <summary>
        指定された名前を持つ
        <see cref="T:C1.Win.C1Document.RenderObject" />を検索します。
      </summary>
      <param name="name">オブジェクトの名前。</param>
      <returns>
        見つかった
        <see cref="T:C1.Win.C1Document.RenderObject" />。
        見つからなかった場合は null。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.RenderObject.Document">
      <summary>
        この描画オブジェクトを含む
        <see cref="T:C1.Win.C1Document.C1Document" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderObject.Position">
      <summary>
        親に含まれるこの
        <see cref="T:C1.Win.C1Document.RenderObject" />の位置を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderObject.Bookmark">
      <summary>現在のオブジェクトに関連付けられているブックマークを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderObject.ZOrder">
      <summary>
        現在のオブジェクトの z 順を取得または設定します。
        z 順の値が小さいオブジェクトは z 順の値が大きいオブジェクトの下に描画されます。
        デフォルトでは、このプロパティは 0 です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderObject.Parent">
      <summary>
        親
        <see cref="T:C1.Win.C1Document.RenderObject" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderObjectCollection">
      <summary>RenderObject オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderParagraphObject">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderParagraph" />オブジェクトの
        <see cref="P:C1.Win.C1Document.RenderParagraph.Content" />内で単一のスタイルを使用してレンダリングされるインラインテキストおよび画像の抽象基本クラス。
      </summary>
      <seealso cref="T:C1.Win.C1Document.RenderParagraphText" />
      <seealso cref="T:C1.Win.C1Document.RenderParagraphInlineContainer" />
    </member>
    <member name="P:C1.Win.C1Document.RenderParagraphObject.Hyperlink">
      <summary>
        現在の段落オブジェクトに関連付けられている
        <see cref="T:C1.Win.C1Document.C1Hyperlink" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderParagraphObject.ToolTip">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.RenderParagraphObject" />に関連付けられているツールチップを取得または設定します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderParagraphText">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderParagraph" />の
        <see cref="P:C1.Win.C1Document.RenderParagraph.Content" />内で単一のスタイルを使用してレンダリングされる 1 つのテキストランを表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderParagraphText.Text">
      <summary>
        現在の
        <see cref="T:C1.Win.C1Document.RenderParagraphText" />のテキストを取得または設定します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderParagraphValue">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderParagraph" />の
        <see cref="P:C1.Win.C1Document.RenderParagraph.Content" />内で単一のスタイルを使用してレンダリングされる 1 つの書式設定されたテキストランを表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderParagraphValue.Value">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.RenderParagraphValue" />オブジェクトによって表示される値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderParagraphValue.Format">
      <summary>
        <see cref="P:C1.Win.C1Document.RenderParagraphValue.Value" />の書式設定に使用される書式文字列を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderParagraphInlineContainer">
      <summary>
        <see cref="!:IFloater" />インタフェースをサポートする
        <see cref="T:C1.Win.C1Document.RenderObject" />のインラインコンテナを表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderParagraphInlineContainer.Content">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.RenderParagraphInlineContainer" />オブジェクトのコンテンツを提供する
        <see cref="T:C1.Win.C1Document.RenderObject" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderParagraphObjectCollection">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderParagraphObject" />オブジェクトのコレクションを表します。
        <see cref="T:C1.Win.C1Document.RenderParagraphObjectCollection" />は、
        <see cref="T:C1.Win.C1Document.RenderParagraph" />の 1 つのコンテンツを表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderParagraphObjectCollection.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.Win.C1Document.RenderParagraph" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderRtf">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />内の RTF を表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderRtf.Rtf">
      <summary>
        現在のオブジェクトによって表される
        <b>RTF</b>書式テキストを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderRtf.DetectUrls">
      <summary>
        <see cref="P:C1.Win.C1Document.RenderRtf.Rtf" />プロパティに割り当てられたテキスト内で URL（Uniform Resource Locator）が見つかった場合に、現在の
        <see cref="T:C1.Win.C1Document.RenderRtf" />がその URL を自動的に書式設定するかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderSectionCollection.Item(System.Int32)">
      <summary>指定されたインデックスにある要素を取得または設定します。</summary>
      <param name="index">取得または設定する要素の 0 から始まるインデックス。</param>
      <returns>指定されたインデックスを持つ要素を返します。</returns>
    </member>
    <member name="P:C1.Win.C1Document.RenderSectionCollection.Item(System.String)">
      <summary>指定された名前を持つ項目を取得します。</summary>
      <param name="name">項目の名前。</param>
      <returns>指定された名前を持つ項目、または見つからなかった場合は null を返します。</returns>
    </member>
    <member name="T:C1.Win.C1Document.RenderShape">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />内の 1 つの図形を表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderShape.ShapeType">
      <summary>
        現在のオブジェクトによって描画される幾何学図形のタイプを取得します。
        <see cref="P:C1.Win.C1Document.RenderShape.Shape" />プロパティが null の場合は、
        <b>None</b>を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderShape.Shape">
      <summary>
        このフィールドによって描画される幾何学図形のプロパティを指定する
        <see cref="T:C1.Win.C1Document.ShapeBase" />派生クラスのインスタンスを取得または設定します。
      </summary>
      <seealso cref="P:C1.Win.C1Document.RenderShape.ShapeType" />
    </member>
    <member name="T:C1.Win.C1Document.RenderTextBase">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />内のテキストを表します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderValue">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />内の 1 つの値を表します。
        この値は、
        <see cref="P:C1.Win.C1Document.RenderValue.Format" />プロパティを使用してテキストに変換されます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderValue.Value">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.RenderValue" />オブジェクトによって表示される値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderValue.Format">
      <summary>
        <see cref="P:C1.Win.C1Document.RenderValue.Value" />の書式設定に使用される書式文字列を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderValue.Text">
      <summary>
        <see cref="P:C1.Win.C1Document.RenderValue.Value" />を表すテキストを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.ShapeType">
      <summary>
        <see cref="!:Field" />によってサポートされる図形を定義します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.LineSlantEnum">
      <summary>図形内での線の描画方法を定義します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.LineSlantEnum.NoLine">
      <summary>線なし。</summary>
    </member>
    <member name="F:C1.Win.C1Document.LineSlantEnum.NoSlant">
      <summary>フィールドを垂直線（Height &gt; Width の場合）または水平線（Width &gt; Height の場合）としてレンダリングします。</summary>
    </member>
    <member name="F:C1.Win.C1Document.LineSlantEnum.Down">
      <summary>フィールドをフィールドボックスの左上隅と右下隅を結ぶ線としてレンダリングします。</summary>
    </member>
    <member name="F:C1.Win.C1Document.LineSlantEnum.Up">
      <summary>フィールドをフィールドボックスの左下隅と右上隅を結ぶ線としてレンダリングします。</summary>
    </member>
    <member name="T:C1.Win.C1Document.ShapeBase">
      <summary>
        レポートフィールドによってレンダリングされる図形の抽象基本クラスです（
        <see cref="!:Field.ShapeType" />と
        <see cref="!:Shape" />を参照）。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.ShapeBase.OnPropertyChanged(System.String)">
      <summary>
        <see cref="E:C1.Win.C1Document.ShapeBase.PropertyChanged" />イベントを発生させます。
      </summary>
      <param name="propertyName">変更されるプロパティの名前。</param>
    </member>
    <member name="M:C1.Win.C1Document.ShapeBase.CreateShape(C1.Win.C1Document.ShapeType)">
      <summary>
        指定された
        <see cref="P:C1.Win.C1Document.ShapeBase.ShapeType" />に適した
        <see cref="T:C1.Win.C1Document.ShapeBase" />派生オブジェクトを作成します。
      </summary>
      <param name="shapeType"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.ShapeBase.AssignFrom(C1.Win.C1Document.ShapeBase)">
      <summary>
        プロパティを別の
        <see cref="T:C1.Win.C1Document.ShapeBase" />から現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.Win.C1Document.ShapeBase.Clone">
      <summary>
        現在の
        <see cref="T:C1.Win.C1Document.ShapeBase" />オブジェクトのコピーを作成します。
        <see cref="!:Owner" />プロパティはコピーされず、
        <see cref="!:Owner" />プロパティの値は null になります。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.ShapeBase" />オブジェクト。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.ShapeBase.ShapeType">
      <summary>現在の図形のタイプを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.LineShapeBase">
      <summary>
        <see cref="T:C1.Win.C1Document.LineShape" />クラスと
        <see cref="!:PolygonShape" />クラスの抽象基本クラスです。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.LineShape">
      <summary>
        <see cref="!:C1FlexReport" />内の 1 つの直線図形を表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.LineShape.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.LineShape" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.LineShape.#ctor(C1.Win.C1Document.LineSlantEnum)">
      <summary>
        <see cref="T:C1.Win.C1Document.LineShape" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="lineSlant">
        <see cref="P:C1.Win.C1Document.LineShape.LineSlant" />プロパティの値。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.LineShape.AssignFrom(C1.Win.C1Document.ShapeBase)">
      <summary>
        プロパティを別の
        <see cref="T:C1.Win.C1Document.ShapeBase" />から現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.Win.C1Document.LineShape.ShapeType">
      <summary>
        オーバーライドされます。
        <see cref="F:C1.Win.C1Document.ShapeType.Line" />を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.LineShape.LineSlant">
      <summary>フィールド内で線を描画する方法を指定する値を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.TriangleShapeBase">
      <summary>
        <see cref="T:C1.Win.C1Document.IsoscelesTriangleShape" />および
        <see cref="T:C1.Win.C1Document.RightTriangleShape" />タイプの抽象基本クラスです。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.IsoscelesTriangleShape">
      <summary>
        <see cref="!:C1FlexReport" />内の二等辺三角形を表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.IsoscelesTriangleShape.ShapeType">
      <summary>
        オーバーライドされます。
        <see cref="F:C1.Win.C1Document.ShapeType.IsoscelesTriangle" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RightTriangleShape">
      <summary>
        <see cref="!:C1FlexReport" />内の直角三角形を表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RightTriangleShape.ShapeType">
      <summary>
        オーバーライドされます。
        <see cref="F:C1.Win.C1Document.ShapeType.RightTriangle" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RectangleShape">
      <summary>
        <see cref="!:C1FlexReport" />内の 1 つの四角形を表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RectangleShape.ShapeType">
      <summary>
        オーバーライドされます。
        <see cref="F:C1.Win.C1Document.ShapeType.Rectangle" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.EllipseShape">
      <summary>
        <see cref="!:C1FlexReport" />内の楕円形を表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.EllipseShape.ShapeType">
      <summary>
        オーバーライドされます。
        <see cref="F:C1.Win.C1Document.ShapeType.Ellipse" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.EllipsePartShape">
      <summary>
        <see cref="T:C1.Win.C1Document.ArcShape" />クラスと
        <see cref="T:C1.Win.C1Document.PieShape" />クラスの抽象基本クラスです。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.EllipsePartShape.AssignFrom(C1.Win.C1Document.ShapeBase)">
      <summary>
        プロパティを別の
        <see cref="T:C1.Win.C1Document.ShapeBase" />から現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.Win.C1Document.EllipsePartShape.StartAngle">
      <summary>
        <b>X</b>軸から、現在の図形を定義する扇形の最初の辺までを時計回りに測定した角度（度単位）を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.EllipsePartShape.SweepAngle">
      <summary>
        <see cref="P:C1.Win.C1Document.EllipsePartShape.StartAngle" />から、現在の図形を定義する扇形の 2 番目の辺までを時計回りに測定した角度（度単位）を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.ArcShape">
      <summary>
        <see cref="!:C1FlexReport" />内の円弧を表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.ArcShape.AssignFrom(C1.Win.C1Document.ShapeBase)">
      <summary>
        プロパティを別の
        <see cref="T:C1.Win.C1Document.ShapeBase" />から現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.Win.C1Document.ArcShape.ShapeType">
      <summary>
        オーバーライドされます。
        <see cref="F:C1.Win.C1Document.ShapeType.Arc" />を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.ArcShape.Closed">
      <summary>現在の円弧を閉じるかどうか（つまり、円弧の始点と終点を直線で接続するかどうか）を示す値を取得または設定します。</summary>
      <remarks>
        このプロパティのデフォルト値は、
        <b>false</b>です。
      </remarks>
    </member>
    <member name="T:C1.Win.C1Document.PieShape">
      <summary>
        <see cref="!:C1FlexReport" />内の 1 つの扇形を表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.PieShape.ShapeType">
      <summary>
        オーバーライドされます。
        <see cref="F:C1.Win.C1Document.ShapeType.Pie" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.IC1FormatVersionProvider">
      <summary>内部使用。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.C1FormatVersion">
      <summary>内部使用。何らかのバージョンを定義します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.IC1Serializable">
      <summary>内部使用。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.IC1SerializableCollection">
      <summary>内部使用。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.IC1PropsTable">
      <summary>内部使用。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.C1PropsTable`1">
      <summary>
        内部使用。別のクラスが
        <see cref="T:C1.Win.C1Document.Serialization.IC1Serializable" />インタフェースを実装するために使用するヘルパークラスです。
      </summary>
      <typeparam name="T">
        <see cref="T:C1.Win.C1Document.Serialization.IC1Serializable" />インタフェースをサポートする型。
      </typeparam>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.C1Serializer">
      <summary>内部使用。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1Serializer.PointToString(C1.Win.Interop.Point)">
      <summary>
        <see cref="T:C1.Win.Interop.Point" />構造体をシリアライズで使用される文字列に変換します。
      </summary>
      <param name="v"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1Serializer.CornerRadiusToString(C1.Win.C1Document.CornerRadius)">
      <summary>
        <see cref="T:C1.Win.C1Document.CornerRadius" />構造体をシリアライズで使用される文字列に変換します。
      </summary>
      <param name="v"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1Serializer.TryCornerRadiusFromString(System.String,C1.Win.C1Document.CornerRadius@)">
      <summary>
        文字列を
        <see cref="T:C1.Win.C1Document.CornerRadius" />構造体に変換します。
      </summary>
      <param name="s">変換する文字列。</param>
      <param name="result">
        出力：作成された
        <see cref="T:C1.Win.C1Document.CornerRadius" />構造体。
      </param>
      <returns>
        エラーがない場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1Serializer.TryPointFromString(System.String,C1.Win.Interop.Point@)">
      <summary>
        文字列を
        <see cref="T:C1.Win.Interop.Point" />構造体に変換します。
      </summary>
      <param name="s">変換する文字列。</param>
      <param name="result">
        出力：作成された
        <see cref="!:Point" />構造体。
      </param>
      <returns>
        エラーがない場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Serialization.C1Serializer.FormatVersion">
      <summary>現在シリアライズ中またはシリアライズ解除中のコンテンツのバージョンを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Serialization.C1Serializer.Aliases">
      <summary>シリアライズ中またはシリアライズ解除中に使用される型エイリアスのリストを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Serialization.C1Serializer.RootObject">
      <summary>現在シリアライズ中またはシリアライズ解除中のオブジェクトを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.C1TypeNameEncodingMode">
      <summary>作成中：シリアライズ中の型名エンコーディングのさまざまな方法を定義します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Serialization.C1TypeNameEncodingMode.None">
      <summary>型名をシリアライズしません。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Serialization.C1TypeNameEncodingMode.FullName">
      <summary>完全名を使用して型名をシリアライズします。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Serialization.C1TypeNameEncodingMode.AssemblyName">
      <summary>
        「AssemblyName,FullTypeName」の形式のアセンブリ名を使用して型名をシリアライズします。
        次に例を示します。
        <code>
          <![CDATA[
          C1.FlexReport.CustomFields.4,C1.FlexReport.CustomFields.SuperLabel
          ]]>
        </code>
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.C1WriterReaderBase">
      <summary>
        内部使用。
        <see cref="T:C1.Win.C1Document.Serialization.C1Serializer" />が使用するリーダー/ライタの基本クラスです。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.C1WriterBase">
      <summary>内部使用。シリアライズ中に書き込みを実行するライタの基本クラスです。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.C1ReaderBase">
      <summary>内部使用。シリアライズ解除中に読み取りを実行するリーダーの基本クラスです。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1ReaderBase.ReadProp">
      <summary>
        位置を次のプロパティに移動します。現在のオブジェクトにこれ以上プロパティがない場合は、
        <b>false</b>を返します。
      </summary>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Document.Serialization.C1ReaderBase.PropName">
      <summary>現在のプロパティの名前を取得し、いずれかの ReadXXX(...) メソッドを呼び出して値を読み取ります。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.C1XmlNodeReader">
      <summary>
        内部使用。シリアライズ解除の際の
        <see cref="T:System.Xml.XmlNode" />からの読み取りを実装します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.C1XmlWriter">
      <summary>
        内部使用。シリアライズの際の
        <see cref="T:System.Xml.XmlTextWriter" />への書き込みを実装します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Serialization.C1XmlWriter.XmlWriter">
      <summary>基底の XmlWriter オブジェクトを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.TypeAlias">
      <summary>内部使用。型のエイリアスを表します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.TypeAliases">
      <summary>内部使用。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Unit.Convert(C1.Win.C1Document.UnitTypeEnum)">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.Unit" />構造体の値を指定された測定単位の値に変換します。
      </summary>
      <param name="to">変換先の測定単位。</param>
      <returns>
        値を
        <paramref name="to" />単位で返します。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Unit.Convert(System.Double,System.Double,C1.Win.C1Document.UnitTypeEnum)">
      <summary>ピクセル測定単位の値を別の測定単位の値に変換します。</summary>
      <param name="value">変換するピクセル単位の値。</param>
      <param name="fromDpi">変換元の dpi。</param>
      <param name="to">変換先の測定単位。</param>
      <returns>
        <paramref name="to" />単位に変換された
        <paramref name="value" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Unit.Convert(System.Double,C1.Win.C1Document.UnitTypeEnum,System.Double)">
      <summary>ある測定単位の値をピクセル単位の値に変換します。</summary>
      <param name="value">
        変換する
        <paramref name="from" />単位の値。
      </param>
      <param name="from">変換元の測定単位。</param>
      <param name="to">変換先の dpi。</param>
      <returns>
        指定された dpi のピクセル単位に変換された
        <paramref name="value" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.INamedObjectOwner.CheckName(C1.Win.C1Document.INamedObject,System.String,System.String)">
      <summary>指定されたオブジェクトの新しい名前をチェックします。</summary>
      <param name="obj"></param>
      <param name="newName"></param>
    </member>
    <member name="M:C1.Win.C1Document.NamedCollection`1.CheckName(C1.Win.C1Document.INamedObject,System.String,System.String)">
      <summary>指定された名前を持つ項目がコレクションに既に含まれている場合は、例外を生成します。</summary>
      <param name="item"></param>
      <param name="newName"></param>
    </member>
    <member name="T:C1.Win.C1Document.C1SolidBrush">
      <summary>単色のブラシを定義します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1SolidBrush.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.C1SolidBrush" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1SolidBrush.#ctor(System.Drawing.Color)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1SolidBrush" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="color">
        <see cref="P:C1.Win.C1Document.C1SolidBrush.Color" />プロパティの値。
      </param>
    </member>
    <member name="P:C1.Win.C1Document.C1SolidBrush.Color">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.C1SolidBrush" />オブジェクトの色を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.GradientStop">
      <summary>グラデーション内のポイントを定義します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.GradientStop.#ctor(System.Double,System.Drawing.Color)">
      <summary>
        <see cref="T:C1.Win.C1Document.GradientStop" />クラスの新しいインスタンスを作成します。
      </summary>
      <param name="position">
        <see cref="P:C1.Win.C1Document.GradientStop.Position" />プロパティの値。
      </param>
      <param name="color">
        <see cref="P:C1.Win.C1Document.GradientStop.Color" />プロパティの値。
      </param>
    </member>
    <member name="P:C1.Win.C1Document.GradientStop.Position">
      <summary>
        ブラシ内のグラデーション途中色の相対的な位置を示す値。
        この値は、[0.0, 1.0] の範囲内である必要があります。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.GradientStop.Color">
      <summary>グラデーション途中色の色。</summary>
    </member>
    <member name="T:C1.Win.C1Document.GradientStopCollection">
      <summary>
        <see cref="T:C1.Win.C1Document.GradientStop" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.C1GradientBrush">
      <summary>さまざまなグラデーションブラシの抽象基本クラス。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1GradientBrush.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.C1GradientBrush" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1GradientBrush.GradientStops">
      <summary>ブラシのグラデーション途中色を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1GradientBrush.Color1">
      <summary>
        グラデーションの最初の色を取得します。
        このプロパティを設定すると、
        <see cref="P:C1.Win.C1Document.C1GradientBrush.GradientStops" />コレクションが自動的に変更されます（最初のグラデーション途中色が変更されます）。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1GradientBrush.Color2">
      <summary>
        グラデーションの最後の色を取得します。
        このプロパティを設定すると、
        <see cref="P:C1.Win.C1Document.C1GradientBrush.GradientStops" />コレクションが自動的に変更されます（最後のグラデーション途中色が変更されます）。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.C1RadialBrush">
      <summary>放射状グラデーションブラシを定義します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1RadialBrush.Center">
      <summary>
        中心の位置を指定する
        <see cref="T:C1.Win.Interop.Point" />構造体を取得または設定します。
        (0,0) が左上隅、(1,1) が右下隅になります。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1RadialBrush.CenterColor">
      <summary>現在の放射状グラデーションブラシの中心の色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1RadialBrush.SurroundColor">
      <summary>現在の放射状グラデーションブラシの周囲の色を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.C1LinearBrush">
      <summary>直線グラデーションブラシを定義します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1LinearBrush.StartPoint">
      <summary>
        現在の直線グラデーションの開始点の座標を取得または設定します。
        (0,0) が左上隅、(1,1) が右下隅になります。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1LinearBrush.EndPoint">
      <summary>
        現在の直線グラデーションの終了点の座標を取得または設定します。
        (0,0) が左上隅、(1,1) が右下隅になります。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1LinearBrush.StartColor">
      <summary>現在の直線グラデーションブラシの開始色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1LinearBrush.EndColor">
      <summary>現在の直線グラデーションブラシの終了色を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.C1DXExportGraphics">
      <summary>エクスポータで使用されるすべてのグラフィックオブジェクトの基本クラスです。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.C1DXTextMeasurementContext">
      <summary>
        Direct2D と DirectWrite を使用してテキストを測定するためのコンテキストとして使用できる
        <see cref="T:C1.Win.C1Document.Util.IC1TextMeasurementContext" />インタフェースを 実装します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.C1DXGraphics">
      <summary>Direct2D と DirectWrite を使用して描画を実行するグラフィックオブジェクトです。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1DXGraphics.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.C1DXGraphics" />クラスの新しいインスタンスを初期化します。
        このクラスのインスタンスは、内部画像オブジェクトに対するすべての描画を実行します。
        BeginGetImage/EndGetImage() メソッドを呼び出して、描画を開始/終了します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1GdiGraphics.Transform">
      <summary>これを実際の実装に置き換えてください。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.ArcSize">
      <summary>
        内部使用。
        参照：http://msdn.microsoft.com/en-us/library/windows/desktop/dd368068(v=vs.85).aspx
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.SweepDirection">
      <summary>
        内部使用。
        参照：http://msdn.microsoft.com/en-us/library/windows/desktop/dd368166(v=vs.85).aspx
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.FigureBegin">
      <summary>
        内部使用。
        参照：http://msdn.microsoft.com/en-us/library/windows/desktop/dd368106(v=vs.85).aspx
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.FigureEnd">
      <summary>
        内部使用。
        参照：http://msdn.microsoft.com/en-us/library/windows/desktop/dd368108(v=vs.85).aspx
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.ArcSegment">
      <summary>
        内部使用。
        参照：http://msdn.microsoft.com/en-us/library/windows/desktop/dd368065(v=vs.85).aspx
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.FillMode">
      <summary>
        内部使用。
        参照：http://msdn.microsoft.com/en-us/library/windows/desktop/dd368110(v=vs.85).aspx
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.SmoothingMode">
      <summary>内部使用。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.IClipRegion">
      <summary>クリッピング領域を表します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.IPath">
      <summary>
        内部使用。
        類似する動作：http://msdn.microsoft.com/en-us/library/windows/desktop/dd316578(v=vs.85).aspx
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.IPathSink">
      <summary>
        内部使用。
        類似する動作：http://msdn.microsoft.com/en-us/library/windows/desktop/dd316592(v=vs.85).aspx
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.INativeImage">
      <summary>
        内部使用。現在の
        <see cref="T:C1.Win.C1Document.Util.C1Graphics" />に依存するネイティブ画像を表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.INativeImage.GetSize">
      <summary>画像のサイズ（ピクセル単位）を返します。</summary>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Document.Util.IC1Background">
      <summary>背景の色、ブラシなどの属性を定義します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.C1Graphics">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />の描画面を実装する基本クラスです。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.WriteBookmark(System.String,C1.Win.Interop.Rect)">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.C1Graphics" />上の何らかの領域を特定するために使用されます。
        この領域を
        <see cref="M:C1.Win.C1Document.Util.C1Graphics.WriteHyperlink(C1.Win.C1Document.C1Hyperlink,C1.Win.Interop.Rect)" />メソッド内で参照できます。
        グラフィックの「エクスポート」で使用されます。
      </summary>
      <param name="bookmark"></param>
      <param name="bounds"></param>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.WriteHyperlink(C1.Win.C1Document.C1Hyperlink,C1.Win.Interop.Rect)">
      <summary>
        ターゲットを定義するクリック可能な
        <paramref name="hyperlink" />として領域をマークします。
      </summary>
      <param name="hyperlink"></param>
      <param name="bounds"></param>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.CreateClipRegion(C1.Win.C1Document.Util.IPath)">
      <summary>指定されたグラフィックパスのクリッピング領域を作成します。</summary>
      <param name="graphicsPath"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.CreateClipRegion(C1.Win.Interop.Rect)">
      <summary>指定された範囲のクリッピング領域を作成します。</summary>
      <param name="bounds"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.CreatePath">
      <summary>グラフィックパスを作成します。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.CreateRoundBordersClipRegion(C1.Win.C1Document.BorderParams)">
      <summary>指定された境界線のクリッピング領域を作成します。</summary>
      <param name="borders"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.DrawRectangle(C1.Win.Interop.Rect,System.Drawing.Color,System.Double,C1.Win.C1Document.DashStyle)">
      <summary>
        <see cref="T:C1.Win.Interop.Rect" />構造体で指定された四角形を描画します。
      </summary>
      <param name="bounds">
        描画する四角形を表す
        <see cref="T:C1.Win.Interop.Rect" />構造体。
      </param>
      <param name="color">
        四角形の色を表す
        <see cref="T:System.Drawing.Color" />構造体。
      </param>
      <param name="lineWidth">四角形の描画に使用される線の幅を指定します。</param>
      <param name="style">四角形の描画に使用される線のスタイルを指定します。</param>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.DrawEllipse(C1.Win.Interop.Rect,System.Drawing.Color,System.Double,C1.Win.C1Document.DashStyle)">
      <summary>
        <see cref="T:C1.Win.Interop.Rect" />構造体で指定された楕円を描画します。
      </summary>
      <param name="bounds">
        描画する楕円を表す
        <see cref="T:C1.Win.Interop.Rect" />構造体。
      </param>
      <param name="color">
        楕円の色を表す
        <see cref="T:System.Drawing.Color" />構造体。
      </param>
      <param name="lineWidth">楕円の描画に使用される線の幅を指定します。</param>
      <param name="style">楕円の描画に使用される線のスタイルを指定します。</param>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.DrawRectangle(C1.Win.C1Document.Line,System.Double,C1.Win.Interop.Rect)">
      <summary>
        <see cref="T:C1.Win.Interop.Rect" />構造体で指定された四角形を描画します。
      </summary>
      <param name="line">
        <see cref="T:C1.Win.C1Document.Line" />オブジェクトは、四角形の属性を指定します。
      </param>
      <param name="lineWidth">四角形の描画に使用される線の幅（ピクセル単位）を指定します。</param>
      <param name="bounds">
        描画する四角形を表す
        <see cref="T:C1.Win.Interop.Rect" />構造体。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.DrawPath(C1.Win.C1Document.Util.IPath,System.Drawing.Color,System.Double,C1.Win.C1Document.DashStyle)">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.IPath" />を描画します。
      </summary>
      <param name="path">
        描画するパスを表す、
        <see cref="T:C1.Win.C1Document.Util.IPath" />インタフェースをサポートするオブジェクト。
      </param>
      <param name="color">
        パスの色を表す
        <see cref="T:System.Drawing.Color" />構造体。
      </param>
      <param name="lineWidth">四角形の描画に使用される線の幅（ピクセル単位）を指定します。</param>
      <param name="style">四角形の描画に使用される線のスタイルを指定します。</param>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.SetClip(C1.Win.Interop.Rect,C1.Win.Interop.Rect)">
      <summary>
        clipRect が
        <paramref name="containerRect" />に含まれていない場合に、clipRect で指定されたクリッピング四角形を設定します。
      </summary>
      <param name="clipRect"></param>
      <param name="containerRect"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.DrawRtf(System.String,System.Int32,System.Int32,C1.Win.Interop.Rect,System.Boolean)">
      <summary>RTF テキストを描画します。</summary>
      <param name="rtf"></param>
      <param name="firstCharIndex"></param>
      <param name="length"></param>
      <param name="bounds"></param>
      <param name="detectUrls"></param>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1Graphics.Transform">
      <summary>変換マトリックスを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1Graphics.Printing">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.Util.C1Graphics" />オブジェクトが印刷に使用されるかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1HtmlGraphics.WriteLinks">
      <summary>HREF を含む A タグに囲まれた四角形を SVG コンテンツの最後に追加します</summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.IC1TextFormat">
      <summary>テキストの書式、フォント、前景色などを定義します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextFormat.FontName">
      <summary>フォントの名前を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextFormat.FontWeight">
      <summary>フォントウェイトを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextFormat.FontStyle">
      <summary>フォントスタイルを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextFormat.FontSize">
      <summary>フォントサイズを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextFormat.Culture">
      <summary>この書式に関連付けられているカルチャを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextFormat.TextDecoration">
      <summary>テキスト装飾を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextFormat.BackColor">
      <summary>背景色を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextFormat.Brush">
      <summary>背景ブラシを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextFormat.ForeColor">
      <summary>前景色を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.C1TextFormat">
      <summary>内部使用。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1TextFormat.FontName">
      <summary>フォントの名前を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1TextFormat.FontWeight">
      <summary>フォントウェイトを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1TextFormat.FontStyle">
      <summary>フォントスタイルを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1TextFormat.FontSize">
      <summary>フォントサイズを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1TextFormat.Culture">
      <summary>この書式に関連付けられているカルチャを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1TextFormat.TextDecoration">
      <summary>テキスト装飾を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1TextFormat.BackColor">
      <summary>背景色を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1TextFormat.Brush">
      <summary>背景ブラシを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1TextFormat.ForeColor">
      <summary>前景色を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.C1TextLayout">
      <summary>テキストのレンダリング/測定機能を実装する基本クラスです。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextLayout.Dispose">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.C1TextLayout" />によって使用されたアンマネージリソースを解放します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextLayout.Draw(C1.Win.C1Document.Util.C1Graphics,System.Double,System.Double)">
      <summary>
        現在の
        <see cref="T:C1.Win.C1Document.Util.C1TextLayout" />を描画します。
      </summary>
      <param name="x"></param>
      <param name="y"></param>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextLayout.HitTest(System.Double,System.Double)">
      <summary>この関数を使用して、レイアウトボックスの左上の場所を基準とした特定の ピクセル位置を渡し、それに応じてヒットテストされた場所にあるテキスト文字列のヒットテストメトリックに関する情報を取得します。</summary>
      <param name="x">レイアウトボックスの左上の場所を基準とした、ヒットテストするピクセル位置 X。</param>
      <param name="y">レイアウトボックスの左上の場所を基準とした、ヒットテストするピクセル位置 Y。</param>
      <returns>
        ヒットテストに関する情報を含む
        <see cref="T:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo" />を返します。
      </returns>
    </member>
    <member name="T:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo">
      <summary>
        ヒットテストによって取得された
        <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout" />の領域を記述します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.Length">
      <summary>ヒット領域内のテキスト位置の数。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.IsTrailingHit">
      <summary>
        ヒットテストの場所が文字の先頭側か末尾側かを示します。
        <see cref="P:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.IsInside" />値が FALSE に設定されている場合は、ヒットテストの場所に最も近い端を表すために、
        <see cref="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.StartPosition" />値に従ってこの値が設定されます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.IsInside">
      <summary>
        ヒットテストの場所がテキスト文字列内かどうかを示します。
        FALSE の場合は、テキストの端に最も近い位置が返されます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.TextPosition">
      <summary>
        カーソルが配置されるテキスト内の位置を含みます。
        <see cref="P:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.IsTrailingHit" />が false の場合、この値は
        <see cref="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.StartPosition" />と等しくなり、
        <see cref="P:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.IsTrailingHit" />が true の場合は、
        <see cref="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.StartPosition" />+ 1 と等しくなります。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.IC1TextMeasurementContext">
      <summary>テキストの測定に使用できるコンテキストを定義します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextMeasurementContext.DpiX">
      <summary>グラフィックの水平解像度を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextMeasurementContext.DpiY">
      <summary>グラフィックの垂直解像度を取得します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1Image.GetFormat(System.Drawing.Imaging.ImageFormat)">
      <summary>
        渡された
        <see cref="T:System.Drawing.Imaging.ImageFormat" />に対応する
        <see cref="T:C1.Win.C1Document.C1ImageFormat" />値を取得します。
      </summary>
      <param name="imageFormat"></param>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Document.C1PositionBase">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderContainer" />内の
        <see cref="T:C1.Win.C1Document.RenderObject" />の位置を定義するすべてのクラスの基本クラスです。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1PositionBase.Clone">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.C1PositionBase" />の正確なコピーを作成します。
      </summary>
      <returns>
        作成された
        <see cref="T:C1.Win.C1Document.C1PositionBase" />オブジェクト。
      </returns>
    </member>
    <member name="T:C1.Win.C1Document.C1Position">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderObject" />の位置を絶対単位で定義します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1Position.#ctor(C1.Win.C1Document.Unit,C1.Win.C1Document.Unit,C1.Win.C1Document.Unit,C1.Win.C1Document.Unit)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Position" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="x">X 座標。</param>
      <param name="y">Y 座標。</param>
      <param name="width">幅。</param>
      <param name="height">高さ。</param>
    </member>
    <member name="P:C1.Win.C1Document.C1Position.X">
      <summary>オブジェクトの X 座標を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1Position.Y">
      <summary>オブジェクトの Y 座標を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1Position.Width">
      <summary>オブジェクトの幅を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1Position.Height">
      <summary>オブジェクトの高さを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.OutputRange.AllInverted">
      <summary>逆転した順序ですべてを含む範囲を表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.#ctor(System.Int32,System.Int32,System.Boolean)">
      <summary>1 つのページ範囲を含む OutputRange のインスタンスを 作成します。</summary>
      <param name="fromPage">範囲の最初のページの番号（1 から始まる）。</param>
      <param name="toPage">範囲の最後のページの番号（1 から始まる）。</param>
      <param name="inverted">
        範囲を逆転するかどうかを示します。詳細については、
        <see cref="P:C1.Win.C1Document.OutputRange.Inverted" />を参照してください。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.#ctor(System.Int32[],System.Boolean)">
      <summary>リストで指定された番号のすべてのページを含む OutputRange の インスタンスを作成します。</summary>
      <param name="pageNumbers">含めるページ番号の配列。</param>
      <param name="inverted">
        範囲を逆転するかどうかを示します。詳細については、
        <see cref="P:C1.Win.C1Document.OutputRange.Inverted" />を参照してください。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.#ctor(System.String,System.Boolean)">
      <summary>
        文字列パラメータで指定されたページを含む OutputRange のインスタンスを作成します。
        文字列には、
        - スペースまたはカンマで区切られたページ番号（1 から始まる）、
        - 連続範囲を指定するダッシュ（-）（最後のダッシュは無限を意味する）
        を含めることができます。
      </summary>
      <param name="pages">含めるページ。</param>
      <param name="inverted">
        範囲を逆転するかどうかを示します。詳細については、
        <see cref="P:C1.Win.C1Document.OutputRange.Inverted" />を参照してください。
      </param>
    </member>
    <member name="P:C1.Win.C1Document.OutputRange.Inverted">
      <summary>範囲を逆転するかどうかを示す値を取得します。範囲が逆転されると、範囲の反復子は、範囲の末尾から先頭に進みます。</summary>
      <value>範囲が逆転される場合は true、そうでない場合は false。</value>
    </member>
    <member name="P:C1.Win.C1Document.OutputRange.FromPage">
      <summary>範囲内の最初のページを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.OutputRange.ToPage">
      <summary>範囲内の最後のページを取得します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.Enumerator.#ctor(C1.Win.C1Document.OutputRange,System.Int32,System.Int32)">
      <summary>OutputRange 列挙子の新しいインスタンスを作成します。</summary>
      <param name="range"></param>
      <param name="minPageNumber"></param>
      <param name="maxPageNumber"></param>
    </member>
    <member name="M:C1.Win.C1Document.Utils.BarCodeEnumToCodeType(C1.Win.C1Document.BarCodeEnum)">
      <summary>
        <see cref="T:C1.Win.C1Document.BarCodeEnum" />の値を
        <see cref="T:C1.BarCode.CodeType" />の値に変換します。
      </summary>
      <param name="bc"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.IsNull(System.Object)">
      <summary>値が null または System.DBNull かどうかを示す値を返します。</summary>
      <param name="v">テストする値。</param>
      <returns>
        <paramref name="v" />が null または System.DBNull の場合は
        <b>true</b>、そうでない場合は false を返します。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.Swap``1(``0@,``0@)">
      <summary>2 つの値を入れ替えます。</summary>
      <typeparam name="T"></typeparam>
      <param name="v1"></param>
      <param name="v2"></param>
    </member>
    <member name="M:C1.Win.C1Document.Utils.TryObjectAsDouble(System.Object,System.Globalization.CultureInfo,System.Double@)">
      <summary>オブジェクトの double 値への変換を試みます。</summary>
      <param name="obj"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.TryAsNumber(System.Object,System.Double@)">
      <summary>
        オブジェクトがバイト、整数、float などの数値を表すかどうかをチェックし、数値を double 値に変換します。
        オブジェクトが数値でない場合は、false を返します。
      </summary>
      <param name="obj">チェックする値。</param>
      <param name="v">Double 値。</param>
      <returns>
        <paramref name="obj" />に数値が含まれる場合は true を返します。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.AreObjectsEqual(System.Object,System.Object)">
      <summary>
        Equals() メソッドを使用して 2 つのオブジェクトを比較します。
        両方のオブジェクトが null の場合は、
        <b>true</b>を返します。
      </summary>
      <param name="v1">最初のオブジェクト。</param>
      <param name="v2">2 番目のオブジェクト。</param>
      <returns>
        オブジェクトが等しい場合は
        <b>true</b>、そうでない場合は
        <b>false</b>を返します。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.ValidateFileName(System.String)">
      <summary>指定された文字列をチェックし、ファイル名に使用できない文字をすべて削除します。</summary>
      <param name="s">チェックするファイル名を含む文字列。</param>
      <returns>検証された文字列を返します。</returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.ReadMetafileFromMemory(System.Byte[])">
      <summary>
        バイト配列から
        <see cref="T:System.Drawing.Imaging.Metafile" />を読み取ります。
      </summary>
      <param name="imageData">
        <see cref="T:System.Drawing.Imaging.Metafile" />データを含むバイト配列。
      </param>
      <returns>
        新しく作成された
        <see cref="T:System.Drawing.Imaging.Metafile" />。指定されたデータからメタファイルを作成できない場合は null。
      </returns>
      <seealso cref="M:C1.Win.C1Document.Utils.WriteMetafileToMemory(System.Drawing.Imaging.Metafile)" />
    </member>
    <member name="M:C1.Win.C1Document.Utils.WriteMetafileToMemory(System.Drawing.Imaging.Metafile)">
      <summary>
        <see cref="T:System.Drawing.Imaging.Metafile" />をバイト配列に書き込みます。
      </summary>
      <param name="metafile">
        書き込む
        <see cref="T:System.Drawing.Imaging.Metafile" />。
      </param>
      <returns>
        <paramref name="metafile" />データを含むバイト配列。
      </returns>
      <seealso cref="M:C1.Win.C1Document.Utils.ReadMetafileFromMemory(System.Byte[])" />
    </member>
    <member name="M:C1.Win.C1Document.Utils.WriteMetafileToStream(System.Drawing.Imaging.Metafile,System.IO.Stream)">
      <summary>
        <see cref="T:System.Drawing.Imaging.Metafile" />を
        <see cref="T:System.IO.Stream" />にシリアライズします。
      </summary>
      <param name="metafile">
        シリアライズする
        <see cref="T:System.Drawing.Imaging.Metafile" />。
      </param>
      <param name="stream">
        ターゲット
        <see cref="T:System.IO.Stream" />。
      </param>
      <returns>メタファイルが正常に保存された場合は true。</returns>
      <seealso cref="M:C1.Win.C1Document.Utils.WriteMetafileToMemory(System.Drawing.Imaging.Metafile)" />
      <seealso cref="M:C1.Win.C1Document.Utils.WriteMetafileToFile(System.Drawing.Imaging.Metafile,System.String)" />
    </member>
    <member name="M:C1.Win.C1Document.Utils.WriteMetafileToFile(System.Drawing.Imaging.Metafile,System.String)">
      <summary>
        <see cref="T:System.Drawing.Imaging.Metafile" />をディスクファイルにシリアライズします。
      </summary>
      <param name="metafile">
        シリアライズする
        <see cref="T:System.Drawing.Imaging.Metafile" />。
      </param>
      <param name="fileName">ターゲットファイル名。</param>
      <returns>メタファイルが正常に保存された場合は true。</returns>
      <seealso cref="M:C1.Win.C1Document.Utils.WriteMetafileToStream(System.Drawing.Imaging.Metafile,System.IO.Stream)" />
    </member>
    <member name="M:C1.Win.C1Document.Utils.WriteImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.IO.Stream)">
      <summary>指定された画像をストリームに書き込みます。</summary>
      <param name="image"></param>
      <param name="imageFormat"></param>
      <param name="stream"></param>
      <returns>
        画像の保存に実際に使用された
        <see cref="T:System.Drawing.Imaging.ImageFormat" />を返します。
        書き込み中にエラーが発生した場合は null を返します。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.WriteImageToFile(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.String)">
      <summary>指定された画像をファイルに書き込みます。</summary>
      <param name="image"></param>
      <param name="imageFormat"></param>
      <param name="stream"></param>
      <returns>
        画像の保存に実際に使用された
        <see cref="T:System.Drawing.Imaging.ImageFormat" />を返します。
        書き込み中にエラーが発生した場合は null を返します。
      </returns>
    </member>
    <member name="T:C1.Win.C1Document.NonSortingPropertyDescriptorCollection">
      <summary>
        内部使用。ソートされてない PropertyDescriptorCollection を提供します。
        これは、展開可能なタイプにおいて、ネストしたプロパティをアルファベット順以外の順序で 並べる場合に役立ちます。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.CornerRadiusConverter">
      <summary>内部使用。</summary>
    </member>
    <member name="T:C1.Win.C1Document.LineConverter">
      <summary>内部使用。</summary>
    </member>
    <member name="T:C1.Win.C1Document.LineTypeEditor">
      <summary>内部使用。</summary>
    </member>
    <member name="T:C1.Win.C1Document.BorderConverter">
      <summary>内部使用。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Style.HasBackground">
      <summary>このスタイルで背景が指定されているかどうかをチェックします。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.CustomDraw(C1.Win.C1Document.RenderFragment,C1.Win.C1Document.FragmentDrawParams@)">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.C1Graphics" />の下位クラスでレンダーフラグメントの描画をオーバーライドできるようにします。
        C1Graphics でカスタマイズした描画を実装している場合、このメソッドは true を返す必要があります。
        背景とコンテンツだけを描画する必要があります。境界線は常に描画されます。
      </summary>
      <param name="rf"></param>
      <param name="fdp"></param>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextFormat.RightToLeft">
      <summary>テキストが、右から左に表記されるフォントを使用するロケールをサポートするように配置されているかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1TextFormat.RightToLeft">
      <summary>テキストが、右から左に表記されるフォントを使用するロケールをサポートするように配置されているかどうかを示す値を取得します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Utils.IsEmpty(System.Object)">
      <summary>値が null、System.DBNull、または空の配列かどうかを示す値を返します。</summary>
      <param name="v">テストする値。</param>
      <returns>
        <paramref name="v" />の値が null、System.DBNull、または空の配列の場合は、
        <b>true</b>を返します。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1PageSettings.IsLayoutEqual(C1.Win.C1Document.C1PageSettings)">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.C1PageSettings" />オブジェクトに、別の
        <see cref="T:C1.Win.C1Document.C1PageSettings" />オブジェクトと同じレイアウト（同じ用紙サイズおよびマージン）があるかどうかを示す値を取得します。
      </summary>
      <param name="pageSettings">比較する C1PageSettings オブジェクト。</param>
      <returns>
        レイアウトが同じ場合は
        <b>true</b>、そうでない場合は
        <B>false</B>を返します。
      </returns>
    </member>
    <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.XlsxExportProvider">
      <summary>Xlsx エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1SSRSDocumentSource.DocxExportProvider">
      <summary>Docx エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExportProvider.OptionsFormClass">
      <summary>
        オーバーライドされます。
        エクスポートオプションの編集にデフォルトで使用されるフォームのタイプを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.ServerSide">
      <summary>
        エクスポートをサーバー側で実行するかどうかを示す値を取得または設定します。
        デフォルト値は true です。
      </summary>
      <remarks>
        <see cref="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.ServerSide" />が false の場合は、
        <b>C1Pdf</b>を使用してローカルにエクスポートが実行されます。
        このモードは PDF/A、セキュリティ設定など、
        <b>C1Pdf</b>から提供される機能をより多くサポートします。
        ただし、次の制限があります。
        - クライアント側で実行されるため、低速です。
        - アウトラインをサポートしません。
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.EmbedFonts">
      <summary>
        エクスポータが PDF 出力にフォント情報を埋め込むかどうかを示す値を取得または設定します。
        このプロパティは、
        <see cref="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.ServerSide" />が false の場合にのみ使用されます。
      </summary>
      <remarks>
        <para>フォント情報を埋め込むと、PDF ドキュメントがかなり大きくなりますが、必要なフォントがすべてインストールされていないシステムでもファイルを正確に表示できます。</para>
        <para>
          必要な
          <b>TrueType</b>フォントがターゲットシステムにインストールされている場合、フォントの埋め込みは必要ありません。
        </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.PdfACompatible">
      <summary>
        エクスポータが PDF 出力を PDF/A 互換にするかどうかを示す値を取得または設定します。
        このプロパティは、
        <see cref="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.ServerSide" />が false の場合にのみ使用されます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.UseCompression">
      <summary>
        エクスポータで圧縮を使用するかどうかを示す値を取得または設定します。
        このプロパティは、
        <see cref="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.ServerSide" />が false の場合にのみ使用されます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.PdfSecurityOptions">
      <summary>
        PDF ドキュメントを誰が使用し、どのアクションを使用できるかを指定する
        <see cref="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.PdfSecurityOptions" />オブジェクトを取得します。
        このプロパティは、
        <see cref="P:C1.Win.C1Document.Export.Ssrs.PdfExporter.ServerSide" />が false の場合にのみ使用されます。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.XlsxExportProvider">
      <summary>XLSX（Open XML）形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.Ssrs.ExcelExporter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.XlsxExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.Ssrs.ExcelExporter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.Ssrs.ExcelExporter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.XlsxExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "xlsx" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.XlsxExportProvider.FormatName">
      <summary>Excel エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.ExcelExporter.OpenXmlDocument">
      <summary>ドキュメントが Office12 Open XML 形式で保存されるかどうかを示す値を取得または設定します。</summary>
      <value>
        ドキュメントが Office12 形式でエクスポートされる場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </value>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.DocxExportProvider">
      <summary>DOCX（Open XML）形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.Ssrs.WordExporter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.DocxExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.Ssrs.WordExporter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.Ssrs.WordExporter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.DocxExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "docx" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.DocxExportProvider.FormatName">
      <summary>DOCX エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.WordExporter.OpenXmlDocument">
      <summary>ドキュメントが Office12 Open XML 形式で保存されるかどうかを示す値を取得または設定します。</summary>
      <value>
        ドキュメントが Office12 形式でエクスポートされる場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </value>
    </member>
    <member name="T:C1.Win.C1Document.Export.PdfOptionsFormBase">
      <summary>
        <see cref="!:PdfFilter" />が使用するエクスポートオプションを編集するためのフォームを表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.UseCompression">
      <summary>圧縮を使用するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.UseOutlines">
      <summary>アウトライン使用するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.PdfACompatible">
      <summary>PDF/A 互換であるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.EmbedFonts">
      <summary>ドキュメントで使用されている埋め込み可能なフォントを埋め込むかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.SecurityOwnerPassword">
      <summary>オーナーパスワードを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.SecurityUserPassword">
      <summary>ユーザーパスワードを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.EncryptionType">
      <summary>パスワード保護された PDF ドキュメントに使用する暗号化の種類を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.SecurityAllowPrint">
      <summary>結果のドキュメントを印刷できるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.SecurityAllowCopyContent">
      <summary>結果のドキュメントのコンテンツをコピーできるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.SecurityAllowEditContent">
      <summary>結果のドキュメントのコンテンツを編集できるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfOptionsFormBase.SecurityAllowEditAnnotations">
      <summary>結果のドキュメント注釈を編集できるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.PdfOptionsFormBase.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">マネージリソースを破棄する場合は true、そうでない場合は false。</param>
    </member>
    <member name="T:C1.Win.C1Document.Export.PdfSecurityOptions">
      <summary>PDF ドキュメントを誰が使用し、どのアクションを使用できるかを決定するオプションを含みます。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfSecurityOptions.AllowCopyContent">
      <summary>ユーザーが PDF ドキュメントからコンテンツをコピーできるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfSecurityOptions.AllowEditAnnotations">
      <summary>ユーザーが PDF ドキュメントの注釈を編集できるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfSecurityOptions.AllowEditContent">
      <summary>ユーザーが PDF ドキュメントのコンテンツを編集できるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfSecurityOptions.AllowPrint">
      <summary>ユーザーが PDF ドキュメントを印刷できるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfSecurityOptions.OwnerPassword">
      <summary>PDF ドキュメントのアクセス許可を変更するために必要なパスワードを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfSecurityOptions.UserPassword">
      <summary>PDF ドキュメントを開くために必要なパスワードを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfSecurityOptions.EncryptionType">
      <summary>標準 40 ビットの PDF 暗号化タイプをデフォルトで取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Serialization.C1Serializer.BasePath">
      <summary>相対ファイル名で指定された追加ファイルを検索するために、シリアライズ/シリアライズ解除中に使用されるディレクトリ名を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.C1Image">
      <summary>内部使用。C1Document 内のクロスプラットフォーム画像ホルダを表すヘルパークラスです。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Utils.GetRelativePath(System.String,System.String)">
      <summary>
        相対パスを返します。
        次に例を示します。
        <code>
          <![CDATA[
          GetRelativePath("c:\temp", "c:\temp\qq\zz.txt") returns "qq\zz.txt"
          ]]>
        </code>
      </summary>
      <param name="basePath"></param>
      <param name="path"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.GetParameterlessCtor(System.Type)">
      <summary>指定されたタイプのパラメータなしデフォルトインスタンスコンストラクタを返します。</summary>
      <param name="type">タイプ。</param>
      <returns>存在する場合は、指定されたタイプのデフォルトコンストラクタを返し、そうでない場合は null を返します。</returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.IsEnum(System.Type)">
      <summary>現在の Type が列挙を表すかどうかを示す値を取得します。</summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.IsValueType(System.Type)">
      <summary>Type が値型であるかどうかを示す値を取得します。</summary>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>
        2 つの文字列を比較します。
        Xaml と WinForms で使用できます。
      </summary>
      <param name="strA"></param>
      <param name="indexA"></param>
      <param name="strB"></param>
      <param name="indexB"></param>
      <param name="length"></param>
      <param name="ignoreCase"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.C1Image.GetData">
      <summary>
        このメソッドを使用して、マルチスレッド環境で画像の作成に使用できる
        <see cref="T:System.IO.MemoryStream" />を 取得します。
      </summary>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Document.C1PdfDocumentSource">
      <summary>PDF レポートの生成に使用できるドキュメントソースを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1PdfDocumentSource.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.C1PdfDocumentSource" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1PdfDocumentSource.DocumentLocation">
      <summary>PDF ドキュメントの場所を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1PdfDocumentSource.SupportedExportProviders">
      <summary>オーバーライドされます。現在のドキュメントソースオブジェクトがサポートするエクスポータの配列を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1PrintOptions.PageSettings">
      <summary>
        ページ設定、用紙サイズ、用紙の向きなどを定義する
        <see cref="T:C1.Win.C1Document.C1PageSettings" />オブジェクトを取得または設定します。
        null が設定されているときは、PrinterSettings.DefaultPageSettings が使用されます。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderPdf">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Document" />内の RTF を表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1FragmentHighlight.#ctor(System.Object,C1.Win.C1Document.C1HighlightAttrs)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1FragmentHighlight" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="range">強調表示するコンテンツを定義するオブジェクト。</param>
      <param name="attrs">強調表示属性。</param>
    </member>
    <member name="P:C1.Win.C1Document.C1FragmentHighlight.Range">
      <summary>強調表示するコンテンツを定義するオブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1FragmentHighlight.Attrs">
      <summary>
        強調表示属性を定義する
        <see cref="T:C1.Win.C1Document.C1HighlightAttrs" />構造体を取得します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.IC1HighlightingManager.GetFragmentHighlight(C1.Win.C1Document.RenderFragment)">
      <summary>レンダリングフラグメントの強調表示領域を返します。</summary>
      <param name="fragment"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.C1Page.HitTest(C1.Win.C1Document.Util.IC1TextMeasurementContext,C1.Win.Interop.Point)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Page" />内の特定のポイントに関する情報を含む
        <see cref="T:C1.Win.C1Document.HitTestInfo" />オブジェクトを 取得します。
      </summary>
      <param name="tmc">
        テキスト処理で使用できる
        <see cref="T:C1.Win.C1Document.Util.IC1TextMeasurementContext" />インタフェース。
      </param>
      <param name="point">
        ページの左上隅を基準としたテストポイントの座標を
        <see cref="!:Document.MeasurementUnits" />単位で指定します。
      </param>
      <returns>
        テストポイントにある要素に関する情報を含む
        <see cref="T:C1.Win.C1Document.HitTestInfo" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentRange.GetFragmentRange(C1.Win.C1Document.RenderFragment)">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.C1DocumentRange" />に属する
        <paramref name="fragment" />部分を定義するオブジェクトを返します。オブジェクトのタイプは
        <paramref name="fragment" />のタイプに依存します。たとえば、
        <see cref="T:C1.Win.C1Document.RenderTextFragment" />の派生クラスは、
        <see cref="T:C1.Win.C1Document.C1TextBlockRange" />オブジェクトを返します。
      </summary>
      <param name="fragment"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentRange.GetText">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.C1DocumentRange" />で定義されるドキュメントのテキストを含む文字列を返します。
      </summary>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Document.C1CaretCoords">
      <summary>
        テキスト内のカレットの位置を定義します。位置は 2 つの点で定義されます。
        <see cref="F:C1.Win.C1Document.C1CaretCoords.Min" />はテキスト行の上端の位置、
        <see cref="F:C1.Win.C1Document.C1CaretCoords.Max" />はテキスト行の下端の位置です。
        通常の水平方向の英文テキストの場合：Min.X == Max.X、かつ Max.Y == Min.Y + HeightOfTheTextLine 90
        度回転させたテキストの場合：Max.X == Min.X + HeightOfTheTextLine、かつ Min.Y == Max.Y
        直角以外の角度に回転させたテキストの場合：Min.X != Max.X、かつ Min.Y != Max.Y
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.C1CaretCoords.Min">
      <summary>行の上端の位置。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1CaretCoords.Max">
      <summary>行の下端の位置。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1CaretCoords.#ctor(C1.Win.Interop.Point,C1.Win.Interop.Point)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1CaretCoords" />構造体の新しいインスタンスを初期化します。
      </summary>
      <param name="min">
        <see cref="F:C1.Win.C1Document.C1CaretCoords.Min" />プロパティの値。
      </param>
      <param name="max">
        <see cref="F:C1.Win.C1Document.C1CaretCoords.Max" />プロパティの値。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.C1CaretCoords.GetBounds(C1.Win.C1Document.C1CaretCoords,C1.Win.C1Document.C1CaretCoords)">
      <summary>
        両方の
        <see cref="T:C1.Win.C1Document.C1CaretCoords" />を含む四角形を返します。
      </summary>
      <param name="c1"></param>
      <param name="c2"></param>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Document.C1TextBlockCoords">
      <summary>テキストブロックの座標を定義します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1TextBlockCoords.TL">
      <summary>左上隅の座標。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1TextBlockCoords.TR">
      <summary>右上隅の座標。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1TextBlockCoords.BR">
      <summary>右下隅の座標。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1TextBlockCoords.BL">
      <summary>左下隅の座標。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentTextPosition.PageCoords">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Page" />上のこの
        <see cref="T:C1.Win.C1Document.C1DocumentTextPosition" />の座標をページの左上隅を基準として取得します。
      </summary>
      <returns>
        テキスト位置の座標を含む
        <see cref="T:C1.Win.C1Document.C1CaretCoords" />構造体。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentTextPosition.RenderFragment">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.C1DocumentTextPosition" />が属する
        <see cref="P:C1.Win.C1Document.C1DocumentTextPosition.RenderFragment" />を取得します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.ExportCompletedEventArgs.#ctor(C1.Win.C1Document.Export.ExportFilter,System.Exception,System.Boolean)">
      <summary>
        <see cref="T:C1.Win.C1Document.ExportCompletedEventArgs" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="exporter">
        エクスポートパラメータを定義する
        <see cref="T:C1.Win.C1Document.Export.ExportFilter" />オブジェクト。
      </param>
      <param name="error">非同期操作中に発生したエラー。</param>
      <param name="cancelled">非同期操作がキャンセルされたかどうかを示す値。</param>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.OnExportCompleted(C1.Win.C1Document.Export.ExportFilter,System.Exception)">
      <summary>内部使用。</summary>
      <param name="exporter"></param>
      <param name="exception"></param>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.GetDocumentRange(C1.Win.C1Document.C1DocumentTextPosition,C1.Win.C1Document.C1DocumentTextPosition,C1.Win.C1Document.Util.IC1TextMeasurementContext)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1DocumentTextPosition" />オブジェクトによって指定される 2 つのテキスト位置に基づいて
        <see cref="T:C1.Win.C1Document.C1DocumentRange" />オブジェクトを作成します。
      </summary>
      <param name="startPosition">ドキュメント範囲の開始位置。</param>
      <param name="endPosition">ドキュメント範囲の終了位置。</param>
      <param name="textMeasurementContext">
        <see cref="T:C1.Win.C1Document.C1DocumentRange" />の作成中に使用する
        <see cref="T:C1.Win.C1Document.Util.IC1TextMeasurementContext" />。
      </param>
      <returns>
        ドキュメント範囲を定義する
        <see cref="T:C1.Win.C1Document.C1DocumentRange" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.GetWordDocumentRange(C1.Win.C1Document.C1DocumentTextPosition,C1.Win.C1Document.Util.IC1TextMeasurementContext)">
      <summary>
        ドキュメント内の指定された位置を含む単語を定義する
        <see cref="T:C1.Win.C1Document.C1DocumentRange" />オブジェクトを作成します。
      </summary>
      <param name="position">
        テキスト位置を指定する
        <see cref="T:C1.Win.C1Document.C1DocumentTextPosition" />オブジェクト。
      </param>
      <param name="textMeasurementContext">
        <see cref="T:C1.Win.C1Document.C1DocumentRange" />の作成中に使用する
        <see cref="T:C1.Win.C1Document.Util.IC1TextMeasurementContext" />。
      </param>
      <returns>
        指定された
        <paramref name="position" />を含むか、その近くにある単語を定義する
        <see cref="T:C1.Win.C1Document.C1DocumentRange" />。
      </returns>
    </member>
    <member name="T:C1.Win.C1Document.C1FontStretch">
      <summary>フォントの標準アスペクト比に対してフォントを伸縮する度合いを表します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontStretch.UltraCondensed">
      <summary>極めて狭い。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontStretch.ExtraCondensed">
      <summary>より狭い。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontStretch.Condensed">
      <summary>狭い。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontStretch.SemiCondensed">
      <summary>やや狭い。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontStretch.Normal">
      <summary>標準。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontStretch.Medium">
      <summary>中レベル。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontStretch.SemiExpanded">
      <summary>やや広い。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontStretch.Expanded">
      <summary>広い。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontStretch.ExtraExpanded">
      <summary>より広い。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FontStretch.UltraExpanded">
      <summary>極めて広い。</summary>
    </member>
    <member name="T:C1.Win.C1Document.TextFitMode">
      <summary>指定された範囲にテキストを収める方法を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.TextFitMode.None">
      <summary>テキストを範囲内に収めません。</summary>
    </member>
    <member name="F:C1.Win.C1Document.TextFitMode.AutoFontSize">
      <summary>指定された範囲に収まるようにフォントのサイズが調整されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.TextFitMode.AutoCharSpacing">
      <summary>
        指定された範囲に収まるようにテキストが均等に配置されます。
        均等配置は、単語ではなく文字ごとに行われ、フィールドの幅がデフォルトのテキストの幅より狭い場合でも考慮されます。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.Forms.SsrsPdfOptionsForm">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.PdfFilter" />が使用するエクスポートオプションを編集するためのフォームを表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.Forms.SsrsPdfOptionsForm.ServerSide">
      <summary>エクスポートがサーバーで実行されるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.Forms.SsrsPdfOptionsForm.Exporter">
      <summary>関連付けられたエクスポータを取得します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.Forms.SsrsPdfOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">マネージリソースを破棄する場合は true、そうでない場合は false。</param>
    </member>
    <member name="F:C1.Win.C1Document.Export.ExportProvider.PdfExportProvider">
      <summary>PDF エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.ExportProvider.HtmlExportProvider">
      <summary>HTML エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.ExportProvider.XlsExportProvider">
      <summary>XLS エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.ExportProvider.MetafileExportProvider">
      <summary>メタファイルエクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.ExportProvider.XlsxExportProvider">
      <summary>Open XML Excel エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.ExportProvider.RtfExportProvider">
      <summary>RTF エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.ExportProvider.DocxExportProvider">
      <summary>Open XML Word エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.ExportProvider.TiffExportProvider">
      <summary>TIFF エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.ExportProvider.BmpExportProvider">
      <summary>BMP エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.ExportProvider.PngExportProvider">
      <summary>PNG エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.ExportProvider.JpegExportProvider">
      <summary>JPEG エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.ExportProvider.GifExportProvider">
      <summary>GIF エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.ExportFilter">
      <summary>
        すべてのエクスポータクラスの抽象基本クラス。
        <see cref="T:C1.Win.C1Document.Export.ExportFilter" />の派生クラスのインスタンスは、ドキュメントのエクスポートに使用されます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.ExportFilter.CopyPropertiesToOptionsForm(C1.Win.C1Document.Export.ExportOptionsFormBase)">
      <summary>
        現在のエクスポータのプロパティを指定されたエクスポートオプションフォームの対応するユーザー編集可能なオプションにコピーします。
        派生クラスでオーバーライドして、フォーマット固有オプションを処理できます。
      </summary>
      <param name="f">
        プロパティのコピー先の
        <see cref="T:C1.Win.C1Document.Export.ExportOptionsFormBase" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.Export.ExportFilter.CopyPropertiesFromOptionsForm(C1.Win.C1Document.Export.ExportOptionsFormBase)">
      <summary>
        指定されたエクスポートオプションフォームから現在のエクスポータの対応するプロパティにオプションをコピーします。
        派生クラスでオーバーライドして、フォーマット固有オプションを処理できます。
      </summary>
      <param name="f">
        オプションのコピー元の
        <see cref="T:C1.Win.C1Document.Export.ExportOptionsFormBase" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.Export.ExportFilter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.ExportFilter" />が指定された型のドキュメントページ範囲を処理できるかどうかをテストします。
        このメソッドのデフォルトの実装は、指定された範囲の型が
        <see cref="F:C1.Win.C1Document.OutputRangeType.All" />の場合は
        <b>true</b>、そうでない場合は
        <b>false</b>を返します。
      </summary>
      <param name="rangeType">テストする範囲の型。</param>
      <returns>
        <see cref="T:C1.Win.C1Document.Export.ExportFilter" />が指定された出力範囲を処理できる場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Export.ExportFilter.Dispose">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.ExportFilter" />オブジェクトを破棄します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.ExportFilter.ShowOptionsDialog">
      <summary>ユーザーがエクスポートオプションを編集するためのダイアログを表示します。</summary>
      <returns>
        ダイアログが正しく表示され、ユーザーが
        <b>［OK］</b>をクリックした場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportFilter.Preview">
      <summary>
        ディスクファイルへのエクスポート後にエクスポートされたドキュメントを開くかどうかを示す値を取得または設定します。
        ファイルを開くために使用されるアプリケーションは、OS シェルによって決定されます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportFilter.ShowOptions">
      <summary>ドキュメントのエクスポートの前にオプションダイアログを表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportFilter.FileName">
      <summary>出力ファイルの名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportFilter.Stream">
      <summary>出力ストリームを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportFilter.ExportProvider">
      <summary>
        現在のエクスポータに関連付けられたエクスポート形式を記述する、
        <see cref="P:C1.Win.C1Document.Export.ExportFilter.ExportProvider" />から派生したクラスのインスタンスを取得します。
        このインスタンスを使用して、形式の説明、デフォルトの拡張子など、現在のエクスポート形式に関する静的情報を取得できます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportFilter.MultiFile">
      <summary>
        エクスポート時に複数のファイルが生成されたかどうかを示す値を取得します。
        複数のファイルが生成され、
        <see cref="P:C1.Win.C1Document.Export.ExportFilter.UseZipForMultipleFiles" />プロパティが true の場合、出力（ストリームまたはファイル）は、生成されたファイルを含む zip 形式で圧縮されたアーカイブになります。
        実際のファイルのリストは、
        <see cref="P:C1.Win.C1Document.Export.ExportFilter.OutputFiles" />プロパティから取得できます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportFilter.UseZipForMultipleFiles">
      <summary>エクスポート時に複数のファイルが作成される場合に、生成されたファイルを zip アーカイブとして出力（ストリームまたはファイル）するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportFilter.OutputFiles">
      <summary>
        <see cref="!:Export(string)" />の呼び出しによって生成されたファイルのリストを取得します。
        エクスポータは通常、単一のファイルを生成しますが（RTF、XLS エクスポータなど）、複数のファイルを生成できるものもあります（HTML、EMF エクスポータなど）。
        このプロパティからは、それらすべてのファイルにアクセスできます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportFilter.Range">
      <summary>エクスポートするページの範囲を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportFilter.DocumentInfo">
      <summary>
        現在のエクスポータに割り当てられたドキュメントに関連付けられている
        <see cref="P:C1.Win.C1Document.Export.ExportFilter.DocumentInfo" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.EmfOptionsForm">
      <summary>
        <see cref="!:EmfFilter" />が使用するエクスポートオプションを編集するためのフォームを表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.EmfOptionsForm.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.EmfOptionsForm" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.EmfOptionsForm.MetafileType">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.Export.MetafileFilter" />が生成するメタファイルのタイプを取得または設定します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.EmfOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">マネージリソースを破棄する場合は true、そうでない場合は false。</param>
    </member>
    <member name="M:C1.Win.C1Document.Export.ExportOptionsFormBase.CreateForm(C1.Win.C1Document.Export.ExportFilter,System.Type,System.Type)">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.ExportOptionsFormBase" />-derived クラスの新しいインスタンスを作成します。
      </summary>
      <param name="exporter">使用するエクスポータ。</param>
      <param name="customType">カスタムフォームタイプ。</param>
      <param name="defaultType">デフォルトのフォームタイプ。</param>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Document.Export.HtmlOptionsForm">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.HtmlFilter" />が使用するエクスポートオプションを編集するためのフォームを表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.HtmlOptionsForm.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.HtmlOptionsForm" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.HtmlOptionsForm.Paged">
      <summary>フィルタが一続きのレポートを 1 つの HTML ファイルに生成するか、それともページ区切り付きのレポートを一連の HTML ファイルに生成するかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.HtmlOptionsForm.PagedEnabled">
      <summary>
        <see cref="P:C1.Win.C1Document.Export.HtmlOptionsForm.Paged" />がサポートされるかどうかを指定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.HtmlOptionsForm.ShowNavigator">
      <summary>ナビゲータを追加するかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.HtmlOptionsForm.SingleFile">
      <summary>フィルタが単一ファイルを生成するかどうかを指定します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.HtmlOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">マネージリソースを破棄する場合は true、そうでない場合は false。</param>
    </member>
    <member name="T:C1.Win.C1Document.Export.ImageOptionsForm">
      <summary>画像エクスポータのオプションを編集するために使用されるフォームの基本クラス。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.ImageOptionsForm.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.ImageOptionsForm" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.ImageOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">マネージリソースを破棄する場合は true、そうでない場合は false。</param>
    </member>
    <member name="T:C1.Win.C1Document.Export.PdfOptionsForm">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.PdfFilter" />が使用するエクスポートオプションを編集するためのフォームを表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfOptionsForm.Exporter">
      <summary>関連付けられたエクスポータを取得します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.PdfOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">マネージリソースを破棄する場合は true、そうでない場合は false。</param>
    </member>
    <member name="T:C1.Win.C1Document.Export.GraphicsFilter">
      <summary>ページ区切り付きエクスポートフィルタ。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.HtmlExportProvider">
      <summary>HTML 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.HtmlFilter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.HtmlExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.HtmlFilter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.HtmlFilter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.HtmlExportProvider.DefaultExtension">
      <summary>現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。この実装は "html" を返します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.HtmlExportProvider.FormatName">
      <summary>HTML エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.HtmlExportProvider.OptionsFormClass">
      <summary>オーバーライドされます。エクスポートオプションの編集にデフォルトで使用されるフォームのタイプを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.HtmlFilter">
      <summary>レポートを HTML ストリームまたはファイルにレンダリングするために使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.HtmlFilter.Paged">
      <summary>フィルタが一続きのレポートを 1 つの HTML ファイルに生成するか、それともページ区切り付きのレポートを一連の HTML ファイルに生成するかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.HtmlFilter.ExportProvider">
      <summary>
        <see cref="F:C1.Win.C1Document.Export.ExportProvider.HtmlExportProvider" />を取得します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.HtmlFilter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
      <summary>
        ページの一部範囲をエクスポートできるかどうかを示します。
        ページ区切り付きエクスポートモードの場合は true、ページ区切りがない場合は false を返します。
      </summary>
      <param name="rangeType">範囲タイプ。</param>
      <returns>ページ区切り付きエクスポートモードの場合は true、ページ区切りがない場合は false。</returns>
    </member>
    <member name="T:C1.Win.C1Document.Export.ImageExportProvider">
      <summary>画像形式の 1 つへのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.ImageFilter" />
    </member>
    <member name="T:C1.Win.C1Document.Export.ImageFilter">
      <summary>ドキュメントを画像ストリームまたは画像ファイルにレンダリングするために使用されるフィルタの基本クラスです。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.MetafileFilter" />
    </member>
    <member name="T:C1.Win.C1Document.Export.RasterImageExportProvider">
      <summary>画像形式の 1 つへのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.ImageFilter" />
    </member>
    <member name="P:C1.Win.C1Document.Export.RasterImageExportProvider.OptionsFormClass">
      <summary>
        オーバーライドされます。
        エクスポートオプションの編集にデフォルトで使用されるフォームのタイプを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.RasterImageFilter">
      <summary>BMP、PNG、TIFF などのラスタ画像を生成する画像フィルタの基本クラス。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.BmpExportProvider">
      <summary>BMP 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.BmpFilter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.BmpExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.BmpFilter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.BmpFilter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.BmpExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "bmp" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.BmpExportProvider.FormatName">
      <summary>BMP エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.BmpFilter">
      <summary>ドキュメントを BMP ストリームまたはファイルにレンダリングするために使用されます。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.BmpFilter.ExportProvider">
      <summary>
        <see cref="F:C1.Win.C1Document.Export.ExportProvider.BmpExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.PngExportProvider">
      <summary>PNG 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.PngFilter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.PngExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.PngFilter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.PngFilter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.PngExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "png" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PngExportProvider.FormatName">
      <summary>PNG エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.PngFilter">
      <summary>ドキュメントを PNG ストリームまたはファイルにレンダリングするために使用されます。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PngFilter.ExportProvider">
      <summary>
        <see cref="F:C1.Win.C1Document.Export.ExportProvider.PngExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.JpegExportProvider">
      <summary>JPEG 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.JpegFilter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.JpegExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.JpegFilter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.JpegFilter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.JpegExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "jpg" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.JpegExportProvider.FormatName">
      <summary>JPEG エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.JpegFilter">
      <summary>ドキュメントを JPEG ストリームまたはファイルにレンダリングするために使用されます。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.JpegFilter.ExportProvider">
      <summary>
        <see cref="F:C1.Win.C1Document.Export.ExportProvider.JpegExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.GifExportProvider">
      <summary>GIF 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.GifFilter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.GifExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.GifFilter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.GifFilter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.GifExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "gif" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.GifExportProvider.FormatName">
      <summary>GIF エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.GifFilter">
      <summary>ドキュメントを GIF ストリームまたはファイルにレンダリングするために使用されます。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.GifFilter.ExportProvider">
      <summary>
        <see cref="F:C1.Win.C1Document.Export.ExportProvider.GifExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.MetafileExportProvider">
      <summary>EMF 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.MetafileFilter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.MetafileExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.MetafileFilter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.MetafileFilter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.MetafileExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "zip" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.MetafileExportProvider.FormatName">
      <summary>EMF エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.MetafileExportProvider.OptionsFormClass">
      <summary>
        オーバーライドされます。
        エクスポートオプションの編集にデフォルトで使用されるフォームのタイプを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.MetafileFilter">
      <summary>
        ドキュメントを圧縮されたメタファイルにレンダリングするために使用されます。
        このフィルタは、レポートページごとに 1 つのメタファイルを含む zip ファイルを作成します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.MetafileFilter.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.MetafileFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.MetafileFilter.ExportProvider">
      <summary>
        <see cref="F:C1.Win.C1Document.Export.ExportProvider.MetafileExportProvider" />を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.MetafileFilter.MetafileType">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.Export.MetafileFilter" />が生成するメタファイルのタイプを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.MetafileFilter.ReferenceGraphics">
      <summary>
        作成されたメタファイルのデバイスコンテキストを取得するために使用される
        <see cref="T:System.Drawing.Graphics" />を取得または設定します。
        null を指定すると、画面 DC が使用されます。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.PdfExportProvider">
      <summary>PDF 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.PdfFilter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.PdfExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.PdfFilter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.PdfFilter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "pdf" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfExportProvider.FormatName">
      <summary>PDF エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfExportProvider.OptionsFormClass">
      <summary>
        オーバーライドされます。
        エクスポートオプションの編集にデフォルトで使用されるフォームのタイプを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.PdfFilter">
      <summary>レポートを PDF ストリームまたはファイルにレンダリングするために使用されます。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.PdfFilter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
      <summary></summary>
      <param name="rangeType"></param>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfFilter.EmbedFonts">
      <summary>フィルタが PDF 出力にフォント情報を埋め込むかどうかを指定します。</summary>
      <remarks>
        <para>フォント情報を埋め込むと、PDF ドキュメントがかなり大きくなりますが、必要なフォントがすべてインストールされていないシステムでもファイルを正確に表示できます。</para>
        <para>
          必要な
          <b>TrueType</b>フォントがターゲットシステムにインストールされている場合、フォントの埋め込みは 必要ありません。
        </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfFilter.UseOutlines">
      <summary>PDF 出力にアウトラインツリーを含めるかどうかを指定します。</summary>
      <remarks>
        <para>アウトラインツリーは、レポートグループに基づいて自動的に作成され、Adobe Acrobat Viewer でレポートをナビゲートするために使用できます。</para>
        <para>
          ツリーの各ノードは、レポートのグループヘッダーセクションに対応します。
          非表示のグループヘッダーセクションは、PDF 文書にアウトラインエントリを生成しません。
        </para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfFilter.PdfACompatible">
      <summary>PDF/A 互換ドキュメントを生成するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfFilter.UseCompression">
      <summary>圧縮を使用するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfFilter.PdfSecurityOptions">
      <summary>
        PDF ドキュメントを誰が使用し、どのアクションを使用できるかを指定する
        <see cref="P:C1.Win.C1Document.Export.PdfFilter.PdfSecurityOptions" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.PdfFilter.ExportProvider">
      <summary>
        <see cref="F:C1.Win.C1Document.Export.ExportProvider.PdfExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.RtfExportProvider">
      <summary>RTF 形式へのエクスポートを記述します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.RtfExportProvider.NewExporter">
      <summary>
        <see cref="P:C1.Win.C1Document.Export.RtfFilter.OpenXml" />が false の場合は、
        <see cref="T:C1.Win.C1Document.Export.RtfFilter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.RtfFilter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.RtfExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "rtf" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.RtfExportProvider.FormatName">
      <summary>RTF エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.RtfExportProvider.SupportedDocumentInfoFields">
      <summary>
        現在のエクスポート形式によってサポートされる
        <see cref="T:C1.Win.C1Document.DocumentInfo" />クラスのフィールドを示す フラグの組み合わせを取得します。
        この実装は次のすべての組み合わせを返します。
        <b>Author</b> <b>Creator</b> <b>Title</b> <b>Operator</b> <b>Subject</b> <b>Keywords</b> <b>CreationTime</b> <b>RevisionTime</b> <b>Manager</b> <b>Company</b> <b>Comment</b>
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.DocxExportProvider">
      <summary>DOCX 形式へのエクスポートを記述します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.DocxExportProvider.NewExporter">
      <summary>
        <see cref="P:C1.Win.C1Document.Export.RtfFilter.OpenXml" />が true の場合は、
        <see cref="T:C1.Win.C1Document.Export.RtfFilter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.RtfFilter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.DocxExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "docx" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.DocxExportProvider.FormatName">
      <summary>RTF エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.RtfFilter">
      <summary>ドキュメントを RTF ストリームまたはファイルにエクスポートするために使用されます。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.RtfFilter.Paged">
      <summary>フィルタが元のレポートのページレイアウトを保持するか、それとも一続きのドキュメントを生成するかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.RtfFilter.OpenXml">
      <summary>Microsoft Word 2007 以降で使用される OpenXml 形式を使用してファイルをエクスポートするかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.RtfFilter.ShapesWord2007Compatible">
      <summary>
        DOCX に保存するときに Word 2007 と互換性がある形状形式を使用するかどうかを示す値を 取得または設定します。
        false に設定されている場合は、新しい Word 2010 形状形式が使用されます。
        この形式では、より多くの機能がサポートされますが、Word 2007 と互換性のないドキュメントが生成される可能性があり、MS Word で開く際に非常に時間がかかります。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.RtfFilter.ExportProvider">
      <summary>
        <see cref="F:C1.Win.C1Document.Export.ExportProvider.RtfExportProvider" />または
        <see cref="F:C1.Win.C1Document.Export.ExportProvider.DocxExportProvider" />を
        <see cref="P:C1.Win.C1Document.Export.RtfFilter.OpenXml" />プロパティに基づいて取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.RasterImageOptionsForm">
      <summary>画像エクスポータのオプションを編集するために使用されるフォームの基本クラス。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.RasterImageOptionsForm.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.RasterImageOptionsForm" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.RasterImageOptionsForm.Resolution">
      <summary>TIFF ドキュメントの解像度を dpi 単位（1 インチあたりドット数）で取得または設定します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.RasterImageOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">マネージリソースを破棄する場合は true、そうでない場合は false。</param>
    </member>
    <member name="T:C1.Win.C1Document.Export.RtfOptionsForm">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.HtmlFilter" />が使用するエクスポートオプションを編集するためのフォームを表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.RtfOptionsForm.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.HtmlOptionsForm" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.RtfOptionsForm.Paged">
      <summary>フィルタが一続きのレポートを 1 つの HTML ファイルに生成するか、それともページ区切り付きのレポートを一連の HTML ファイルに生成するかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.RtfOptionsForm.OpenXmlDocument">
      <summary>Microsoft Word 2007 以降で使用される OpenXml 形式を使用してファイルをエクスポートするかどうかを取得または設定します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.RtfOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">マネージリソースを破棄する場合は true、そうでない場合は false。</param>
    </member>
    <member name="T:C1.Win.C1Document.Export.TiffOptionsForm">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.TiffFilter" />が使用するエクスポートオプションを編集するためのフォームを表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.TiffOptionsForm.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.TiffOptionsForm" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.TiffOptionsForm.Monochrome">
      <summary>TIFF ドキュメントを白黒形式で保存するかどうかを取得または設定します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.TiffOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">マネージリソースを破棄する場合は true、そうでない場合は false。</param>
    </member>
    <member name="T:C1.Win.C1Document.Export.XlsOptionsForm">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.XlsFilter" />が使用するエクスポートオプションを編集するためのフォームを表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.XlsOptionsForm.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.HtmlOptionsForm" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.XlsOptionsForm.PictureLayer">
      <summary>別のピクチャレイヤを使用してエクスポートするかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.XlsOptionsForm.Tolerance">
      <summary>
        ドキュメント内の行および列の境界を自動検出する際の許容値（ポイント単位）を取得または設定します。
        この値を小さくするほど、データを正確に配置するために、幅の狭い行や列が数多く作成されます。
      </summary>
      <value>許容値。</value>
    </member>
    <member name="P:C1.Win.C1Document.Export.XlsOptionsForm.OpenXmlDocument">
      <summary>Microsoft Word 2007 以降で使用される OpenXml 形式を使用してファイルをエクスポートするかどうかを取得または設定します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.XlsOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
      <param name="disposing">マネージリソースを破棄する場合は true、そうでない場合は false。</param>
    </member>
    <member name="T:C1.Win.C1Document.Export.StructureFilter">
      <summary>XLS および RTF フィルタの抽象基本クラス。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.TiffExportProvider">
      <summary>TIFF 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.TiffFilter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.TiffExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.TiffFilter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.TiffFilter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.TiffExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "tiff" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.TiffExportProvider.FormatName">
      <summary>TIFF エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.TiffExportProvider.OptionsFormClass">
      <summary>
        オーバーライドされます。
        エクスポートオプションの編集にデフォルトで使用されるフォームのタイプを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.TiffFilter">
      <summary>ドキュメントを TIFF ストリームまたはファイルにレンダリングするために使用されます。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.TiffFilter.ExportProvider">
      <summary>
        <see cref="F:C1.Win.C1Document.Export.ExportProvider.TiffExportProvider" />を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.TiffFilter.Monochrome">
      <summary>TIFF ドキュメントを白黒形式で保存するかどうかを取得または設定します。</summary>
      <remarks>
        <para>
          このプロパティのデフォルト値は true です。
          これにより、ファックス機と互換性があるかなり小さなドキュメントが 生成されます（CompressionCCITT4 圧縮を使用）。
        </para>
        <para>
          このプロパティを false に設定すると、LZW 圧縮を使用するカラードキュメントを生成できます。
          ただし、白黒ドキュメントよりかなり大きくなります（同じ解像度でも 100 倍ほど大きくなる）。
        </para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Document.Export.XlsExportProvider">
      <summary>XLS 形式へのエクスポートを記述します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.XlsExportProvider.NewExporter">
      <summary>
        <see cref="P:C1.Win.C1Document.Export.XlsFilter.OpenXml" />が false の場合は、
        <see cref="T:C1.Win.C1Document.Export.XlsFilter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.XlsFilter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.XlsExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "xls" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.XlsExportProvider.FormatName">
      <summary>HTML エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.XlsExportProvider.SupportedDocumentInfoFields">
      <summary>
        現在のエクスポート形式によってサポートされる
        <see cref="T:C1.Win.C1Document.DocumentInfo" />クラスのフィールドを示すフラグの組み合わせを取得します。
        この実装は
        <b>Author</b>を返します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.XlsxExportProvider">
      <summary>Open XML XLSX 形式へのエクスポートを記述します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.XlsxExportProvider.NewExporter">
      <summary>
        <see cref="P:C1.Win.C1Document.Export.XlsFilter.OpenXml" />が true の場合は、
        <see cref="T:C1.Win.C1Document.Export.XlsFilter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.XlsFilter" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.XlsxExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "xlsx" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.XlsxExportProvider.FormatName">
      <summary>XLSX エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.XlsFilter">
      <summary>レポートを XLS ストリームまたはファイルにエクスポートするために使用されます。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.XlsFilter.SheetName">
      <summary>レポートを Excel ワークブックファイルに保存するときに使用されるワークシートの名前を取得または設定します。</summary>
      <remarks>このプロパティを使用すると、複数のレポートを 1 つの Excel ワークブックファイルに保存できます（1 レポート 1 シート）。</remarks>
    </member>
    <member name="P:C1.Win.C1Document.Export.XlsFilter.OpenXml">
      <summary>Microsoft Excel 2007 以降で使用される OpenXml 形式を使用してファイルをエクスポートするかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.XlsFilter.PictureLayer">
      <summary>別のピクチャレイヤを使用してエクスポートするかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.XlsFilter.Tolerance">
      <summary>
        ドキュメント内の行および列の境界を自動検出する際の許容値（ポイント単位）を取得または設定します。
        この値を小さくするほど、データを正確に配置するために、幅の狭い行や列が数多く作成されます。
      </summary>
      <value>許容値。</value>
    </member>
    <member name="P:C1.Win.C1Document.Export.XlsFilter.ExportProvider">
      <summary>
        <see cref="F:C1.Win.C1Document.Export.ExportProvider.XlsExportProvider" />または
        <see cref="F:C1.Win.C1Document.Export.ExportProvider.XlsxExportProvider" />を OpenXml プロパティに基づいて取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.FindTextCallback">
      <summary>
        見つかったテキストの位置ごとに
        <see cref="M:C1.Win.C1Document.IC1TextFragment.FindText(C1.Win.C1Document.Util.IC1TextMeasurementContext,C1.Win.C1Document.C1FindTextParams,C1.Win.C1Document.FindTextCallback)" />から呼び出されるコールバックメソッドです。
      </summary>
      <param name="start">見つかったテキストの開始位置を定義する位置。</param>
      <param name="end">見つかったテキストの終了位置を定義する位置。</param>
    </member>
    <member name="M:C1.Win.C1Document.RenderFragment.CalcHitTest(C1.Win.C1Document.Util.IC1TextMeasurementContext,C1.Win.C1Document.HitTestInfo,C1.Win.Interop.Point,C1.Win.Interop.Rect,System.Double,System.Double)">
      <summary>ページ内の特定のポイントに関する情報を計算します。</summary>
      <param name="tmc">
        テキスト処理で使用できる
        <see cref="T:C1.Win.C1Document.Util.IC1TextMeasurementContext" />インタフェース。
      </param>
      <param name="hti">ヒットテスト情報。</param>
      <param name="ptPage">
        テストするポイントの座標。この
        <see cref="T:C1.Win.C1Document.RenderFragment" />を含むページの左上隅を基準として C1Document.DefaultUnit 単位で指定します。
      </param>
      <param name="clipRectPage"></param>
      <param name="xOffs"></param>
      <param name="yOffs"></param>
    </member>
    <member name="M:C1.Win.C1Document.RenderFragment.GetTopLeftChildrenOffsetRelativeToPage">
      <summary>ページの左上隅を基準としたフラグメントのクライアント領域のオフセットを返します。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.RenderTextFragment.InternalBuildTextLayout(C1.Win.C1Document.Util.C1TextLayout)">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.C1TextLayout" />オブジェクトのプロパティを初期化します。
      </summary>
      <param name="tl"></param>
    </member>
    <member name="M:C1.Win.C1Document.RenderTextFragment.GetNearestTextPosition(C1.Win.C1Document.Util.IC1TextMeasurementContext,C1.Win.Interop.Point,System.Double,System.Double)">
      <summary>
        指定されたポイントに最も近いフラグメント内のテキスト位置を定義する
        <see cref="T:C1.Win.C1Document.C1DocumentTextPosition" />を返します。
      </summary>
      <param name="tmc">
        テキスト処理で使用できる
        <see cref="T:C1.Win.C1Document.Util.IC1TextMeasurementContext" />インタフェース。
      </param>
      <param name="ptPage">ページの左上隅を基準とした位置。</param>
      <param name="xOffs">ページの左端からの親フラグメントの水平方向のオフセット。</param>
      <param name="yOffs">ページの上端からの親フラグメントの垂直方向のオフセット。</param>
      <returns>
        フラグメント内の位置を定義する
        <see cref="T:C1.Win.C1Document.C1DocumentTextPosition" />オブジェクトまたは null。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.RenderTextFragment.FindText(C1.Win.C1Document.Util.IC1TextMeasurementContext,C1.Win.C1Document.C1FindTextParams,C1.Win.C1Document.FindTextCallback)">
      <summary>フラグメント内のテキストを検索し、見つかったテキストブロックをすべて列挙します。</summary>
      <param name="tmc">
        テキスト処理で使用できる
        <see cref="T:C1.Win.C1Document.Util.IC1TextMeasurementContext" />インタフェース。
      </param>
      <param name="findTextParams">検索パラメータ。</param>
      <param name="callback">見つかったテキストブロックごとに呼び出されるコールバックメソッド。</param>
      <returns>見つかったテキストを強調表示するために Draw() メソッド内のオブジェクトに戻すことができるオブジェクトを返します。</returns>
    </member>
    <member name="P:C1.Win.C1Document.RenderTextFragment.NewParagraph">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.RenderTextFragment" />の最初の行が段落の最初の行で、
        <see cref="P:C1.Win.C1Document.Style.TextIndent" />を使用する必要があるかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderTextFragment.JustifyLastLine">
      <summary>
        <see cref="!:RenderObject.Style.TextAlignHorz" />が Justify または JustifyChars に設定されている場合に、この
        <see cref="T:C1.Win.C1Document.RenderTextFragment" />の 最後の行を均等に配置するかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderTextFragment.VerticalLines">
      <summary>
        テキストの行が左から右に進むのか右から左に進むのかを示す値を取得または設定します。このプロパティは、
        <see cref="!:RenderObject.Style.TextAngle" />が直角以外（0、90、180、270 以外）の 角度を指定する場合にのみ使用されます。
        <b>null</b>は、方向が
        <see cref="!:RenderObject.Style.TextAngle" />とフラグメントのサイズに基づいて自動的に計算されることを示します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.ReadUnknownObjectDelegate">
      <summary>内部使用。シリアライズ解除時にタイプを解決できないオブジェクトの読み取りに使用するカスタムメソッドを渡すために使用されます。</summary>
      <param name="reader"></param>
      <param name="typeName"></param>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Document.Style.TextAngle">
      <summary>
        <b>X</b>軸から反時計回りに計測されるテキストの 回転角（度単位）を取得または設定します。
      </summary>
      <remarks>
        このプロパティは、
        <b>非アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルの
        <see cref="P:C1.Win.C1Document.Style.Parent" />から継承されます）。
        <para>デフォルトは 0 です。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.TextFitMode">
      <summary>有効な領域内にテキストを収める方法を示す値を取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>非アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルの
        <see cref="P:C1.Win.C1Document.Style.Parent" />から継承されます）。
        <para>デフォルトは 0 です。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Document.Style.FontStretch">
      <summary>フォントストレッチを取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>
          デフォルトは
          <b>false</b>です。
        </para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Document.C1FoundPosition.GetFragmentRange(C1.Win.C1Document.RenderFragment)">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.C1FoundPosition" />に属する
        <paramref name="fragment" />部分を定義するオブジェクトを返します。
        オブジェクトのタイプは
        <paramref name="fragment" />のタイプに依存します。たとえば、
        <see cref="T:C1.Win.C1Document.RenderTextFragment" />の派生クラスは、
        <see cref="T:C1.Win.C1Document.C1TextBlockRange" />オブジェクトを返します。
      </summary>
      <param name="fragment"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.C1FoundPosition.GetBounds">
      <summary>
        ページ上のこの
        <see cref="T:C1.Win.C1Document.C1FoundPosition" />の範囲、すなわち
        <see cref="P:C1.Win.C1Document.C1DocumentTextPosition.PageCoords" />に基づいて計算された四角形を返します。
      </summary>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Document.Util.IC1DXTextLayoutOwner">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout" />を所有するクラスで実装する必要があります。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1DXTextLayoutOwner.Factory">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout" />が使用する DirectWrite ファクトリを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1DXTextLayoutOwner.DefaultFont">
      <summary>C1DXTextLayout 内のいずれかの場所で指定されているフォントが見つからない場合に使用されるフォントの名前を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1DXTextLayoutOwner.FallbackFonts">
      <summary>C1DXTextLayout 内のいずれかの場所で指定されているフォントに特定の文字のグリフが含まれない場合に使用されるフォールバックフォントのリストを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.C1DXTextLayout">
      <summary>DirectWrite API に基づいてテキストレンダリングを実装します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1DXTextLayout.Owner">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout" />オブジェクトを所有する
        <see cref="T:C1.Win.C1Document.Util.IC1DXTextLayoutOwner" />を取得します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1DXTextLayout.#ctor(C1.Win.C1Document.Util.IC1DXTextLayoutOwner)">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">テキストのレンダリング時に使用される追加情報を提供する IC1DXTextLayoutOwner インタフェース。</param>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1DXTextLayout.GetChar(System.Int32)">
      <summary>指定されたテキスト位置にある文字を取得します。</summary>
      <param name="charIndex">テキストの位置。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1DXTextLayout.GetString(System.Int32,System.Int32)">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout" />オブジェクトのテキストの一部を含む文字列を取得します。
      </summary>
      <param name="textPosition">開始テキスト位置。</param>
      <param name="length">テキストの長さ。</param>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1DXTextLayout.UseTransformForSidewaysText">
      <summary>
        回転したグリフのないフォントを使用して垂直方向のテキストを描画する場合に、
        <see cref="T:C1.Win.C1Document.Util.C1DXTextLayout" />が グラフィックに変換を適用しないかどうかを示す値を取得します。
        たとえば、日本語のグリフは、テキストが上から下へ垂直方向に描画される場合に、回転されません。
        現在、このプロパティは
        <see cref="T:C1.Win.C1Document.Util.C1GdiGraphics.C1GdiTextLayout" />でオーバーライドされます。
        StringFormatFlags.DirectionVertical が StringFormat で指定されている場合は、WinForms グラフィックオブジェクトに回転変換を適用すべきでないためです。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.C1Graphics" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.CreateTextLayout">
      <summary>
        グラフィック上のテキストのレンダリングまたは測定に使用できる
        <see cref="T:C1.Win.C1Document.Util.C1TextLayout" />オブジェクトを作成および初期化します。
      </summary>
      <returns>
        作成された
        <see cref="T:C1.Win.C1Document.Util.C1TextLayout" />オブジェクト。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1Graphics.TextLayout">
      <summary>
        テキストの測定に使用できる
        <see cref="T:C1.Win.C1Document.Util.C1TextLayout" />オブジェクトを取得します。
        このインスタンスは、
        <see cref="T:C1.Win.C1Document.Util.C1Graphics" />コンストラクタ内で作成され、
        <see cref="T:C1.Win.C1Document.Util.C1Graphics" />が破棄されると破棄されます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.GetRotatedMatrix(System.Double,System.Double,System.Double,System.Double)">
      <summary>次の記事に基づきます。http://www.euclideanspace.com/maths/geometry/affine/aroundPoint/matrix2d/index.htm.</summary>
      <param name="cos"></param>
      <param name="sin"></param>
      <param name="centerX"></param>
      <param name="centerY"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.GetRotatedMatrix(System.Single,System.Double,System.Double)">
      <summary>指定されたポイントを中心にして指定された角度だけ回転を行う行列を作成します。</summary>
      <param name="angle"></param>
      <param name="centerX"></param>
      <param name="centerY"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1PdfGraphics.Reset">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.Util.C1PdfGraphics" />オブジェクトの状態をリセットします。
        ドキュメントのページのレンダリングが終了すると、エクスポータから呼び出されます。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.IC1TextRange">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.C1Graphics" />がテキストの範囲を描画するために使用するテキスト範囲のさまざまな属性を定義します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.IC1TextRange.GetFontFacePtr">
      <summary>IDWriteFontFace インタフェースへのポインタを取得します。D2D 関数を使用してテキストを描画する場合に使用できます。</summary>
      <param name="textLayout"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Util.IC1TextRange.GetFontFace">
      <summary>フォントに関する必要な情報をすべて取得できる DW.FontFace オブジェクトを取得します。</summary>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextRange.IsSideways">
      <summary>テキストが、たとえば日本語のように垂直方向かどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextRange.BidiLevel">
      <summary>テキストの BIDI レベルを取得します。BidiLevel % 2 != 0 の場合、そのテキストは RightToLeft テキストです。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextRange.FontEmSize">
      <summary>DIP（1/96 インチ）単位でフォントサイズを取得します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.IC1TextRange.GetBaseLineOffset">
      <summary>DIP（1/96 インチ）単位でフォントのベースラインのオフセットを取得します。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Util.IC1TextSelectionBuilder.AddTextBlock(System.String,C1.Win.Interop.Rect)">
      <summary>
        選択する個別のテキストブロックごとに
        <see cref="T:C1.Win.C1Document.IC1TextFragment" />から呼び出されます。
      </summary>
      <param name="text">テキストブロックのテキスト。</param>
      <param name="boundsInFragmentContentAreaPx">
        フラグメントのコンテンツ領域の左上隅を基準とした
        <see cref="P:C1.Win.C1Document.Util.IC1TextSelectionBuilder.TextMeasurementContext" />のテキストの範囲（ピクセル単位）。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.Util.IC1TextSelectionBuilder.AddHighlight(System.Object)">
      <summary>
        Draw() メソッド内でフラグメントに
        <paramref name="highlightInfo" />オブジェクトを戻して選択範囲を強調表示するために、一度だけ呼び出されます。
      </summary>
      <param name="highlightInfo">強調表示される領域を特定するオブジェクト。</param>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextFormat.FontStretch">
      <summary>フォントストレッチを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1TextFormat.FontStretch">
      <summary>フォントストレッチを取得します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextFormat.#ctor(C1.Win.C1Document.Util.C1TextFormat)">
      <summary>
        渡された
        <see cref="T:C1.Win.C1Document.Util.C1TextFormat" />構造体のプロパティを使用して、
        <see cref="T:C1.Win.C1Document.Util.C1TextFormat" />構造体の新しいインスタンスを初期化します。
      </summary>
      <param name="source">プロパティのコピー元の構造体。</param>
    </member>
    <member name="T:C1.Win.C1Document.Util.C1TextLayoutRange">
      <summary>書式設定されたテキストの範囲を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayoutRange.Text">
      <summary>範囲のテキストを取得または設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayoutRange.Format">
      <summary>テキストの書式を取得または設定します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextLayoutRange.#ctor(System.String,C1.Win.C1Document.Util.IC1TextFormat)">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.C1TextLayoutRange" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="text">
        <see cref="F:C1.Win.C1Document.Util.C1TextLayoutRange.Text" />プロパティの値。
      </param>
      <param name="format">
        <see cref="F:C1.Win.C1Document.Util.C1TextLayoutRange.Format" />プロパティの値。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextLayoutRange.Dispose">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.C1TextLayoutRange" />によって使用されたアンマネージリソースを解放します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.TextAlign">
      <summary>水平方向のテキスト配置を取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.LinesAlign">
      <summary>
        垂直方向のテキスト配置を取得します。
        テキストの行揃え方法を定義します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.WritingMode">
      <summary>書字モード（水平方向、垂直方向など）を取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.WordWrap">
      <summary>現在の行に十分なスペースがない場合に、テキストが自動的に次の行に折り返されるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.RightToLeft">
      <summary>テキストが、右から左に表記されるフォントを使用するロケールをサポートするように配置されているかどうかを示す値を取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.GdiCompatible">
      <summary>テキストを GDI 互換モードでレンダリングするかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.MeasureTrailingSpaces">
      <summary>各行の末尾にある空白を文字列の測定に含めるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.NewParagraph">
      <summary>最初の行を段落の最初の行として解釈するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.JustifyLastLine">
      <summary>TextAlign が Justify または JustifyChars に設定されている場合に、最後の行を揃えるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.TextIndent">
      <summary>最初の行のインデントを取得または設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.TextAngle">
      <summary>テキストの角度を取得または設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.TextRanges">
      <summary>書式設定されたテキスト範囲のコレクションを取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.LineSpacing">
      <summary>
        行スペーシングを取得または設定します。デフォルトは
        <b>1</b>で、追加のスペーシングはなしです。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.MaxWidth">
      <summary>
        有効な幅の最大値を取得または設定します。
        <b>null</b>の場合、幅は無制限です。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.MaxHeight">
      <summary>
        有効な高さの最大値を取得または設定します。
        <b>null</b>の場合、高さは無制限です。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.Highlight">
      <summary>使用する強調表示を取得または設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.VerticalLines">
      <summary>
        テキストの行が左から右に進むのか右から左に進むのかを示す値を取得または設定します。
        このプロパティは、
        <see cref="F:C1.Win.C1Document.Util.C1TextLayout.TextAngle" />が直角以外（0、90、180、270 以外）の 角度を指定する場合にのみ使用されます。
        <b>null</b>は、方向が
        <see cref="F:C1.Win.C1Document.Util.C1TextLayout.TextAngle" />、
        <see cref="F:C1.Win.C1Document.Util.C1TextLayout.MaxWidth" />、
        <see cref="F:C1.Win.C1Document.Util.C1TextLayout.MaxHeight" />に基づいて自動的に計算されることを示します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.TextFitMode">
      <summary>
        指定された範囲内にテキストを収める方法を示す値を取得または設定します。
        範囲は、
        <see cref="F:C1.Win.C1Document.Util.C1TextLayout.MaxWidth" />と
        <see cref="F:C1.Win.C1Document.Util.C1TextLayout.MaxHeight" />で指定されます。
        <see cref="F:C1.Win.C1Document.Util.C1TextLayout.TextFitMode" />が
        <b>None</b>でない場合、これらはどちらも null にできません。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.CharPitch">
      <summary>
        文字間の追加スペースを定義する値を取得または設定します。
        この値は、各文字の幅に追加されます。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.LinesFlowDirection">
      <summary>計算値。行フローの方向を含みます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.Lines">
      <summary>計算値。テキスト行のリストです。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.Width">
      <summary>計算値。テキストの幅です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.Height">
      <summary>計算値。テキストの高さです。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.AllTextFit">
      <summary>
        計算値。
        <see cref="F:C1.Win.C1Document.Util.C1TextLayout.MaxWidth" />と
        <see cref="F:C1.Win.C1Document.Util.C1TextLayout.MaxHeight" />で指定された範囲内にすべてのテキストが収まるかどうかを示します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.TextLength">
      <summary>計算値。テキストの全長です。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextLayout.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.C1TextLayout" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextLayout.CreateTextRange(System.String,C1.Win.C1Document.Util.IC1TextFormat)">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.C1TextLayoutRange" />オブジェクトを作成します。
      </summary>
      <param name="text"></param>
      <param name="format"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextLayout.Clear">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.C1TextLayout" />オブジェクトのコンテンツを消去します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextLayout.AddText(System.String,C1.Win.C1Document.Util.IC1TextFormat)">
      <summary>書式設定されたテキスト範囲をテキストレイアウトに追加します。</summary>
      <param name="text">テキスト。</param>
      <param name="format">テキストの書式。</param>
      <returns>
        テキスト範囲を定義する
        <see cref="T:C1.Win.C1Document.Util.C1TextLayoutRange" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextLayout.MeasureAutoSize">
      <summary>テキストサイズを測定します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextLayout.MeasureLayout">
      <summary>
        テキストレイアウト全体を測定します。
        このメソッドを呼び出した後は、
        <see cref="T:C1.Win.C1Document.Util.C1TextLayout" />のすべてのメソッド（HitTest()、Draw() など）を使用できます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextLayout.MeasureAndDraw(C1.Win.C1Document.Util.C1Graphics,System.Double,System.Double)">
      <summary>レイアウトを測定し、描画します。</summary>
      <param name="graphics"></param>
      <param name="x"></param>
      <param name="y"></param>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextLayout.BuildSelection(C1.Win.C1Document.Util.IC1TextSelectionBuilder)">
      <summary>テキスト選択範囲を作成します。</summary>
      <param name="ctx"></param>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextLayout.GetCaretCoords(System.Int32,System.Boolean)">
      <summary>この関数を使用し、テキスト位置および位置の前方/後方を指定して、レイアウトボックスの左上を基準としたピクセル位置を取得します。</summary>
      <param name="textIndex">ピクセル位置の取得に使用されるテキスト位置。</param>
      <param name="isTraling">
        位置が
        <paramref name="textIndex" />によって指定された文字より
        <b>後</b>の位置を指すかどうかを示します。
      </param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextLayout.GetSplitPosition(System.Double,System.Int32,C1.Win.C1Document.Util.C1TextLayout.SplitPositionInfo@)">
      <summary>テキストを分割できる位置を決定します。</summary>
      <param name="pos"></param>
      <param name="minOrphanLines"></param>
      <param name="spi">出力：分割位置に関する情報。</param>
      <returns>指定された位置でテキストを分割できるかどうかを示す値。</returns>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextLayout.GetText">
      <summary>このテキストレイアウトのテキストを 1 つの文字列として取得します。</summary>
      <returns>テキストレイアウトのテキスト。</returns>
    </member>
    <member name="T:C1.Win.C1Document.Util.C1TextLayout.LinesFlowDirectionEnum">
      <summary>行フローの方向を定義します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.C1TextLayout.SplitPositionInfo">
      <summary>テキスト内の分割位置を定義します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.SplitPositionInfo.Before">
      <summary>テキストの分割位置より上の部分です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.SplitPositionInfo.After">
      <summary>テキストの分割位置より下の部分です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.SplitPositionInfo.Piece.Size">
      <summary>部分のサイズです（ピクセル単位）。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.SplitPositionInfo.Piece.FirstCharIndex">
      <summary>最初の文字のインデックスです。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.SplitPositionInfo.Piece.Length">
      <summary>
        文字数単位の長さです。
        -1 は、
        <see cref="F:C1.Win.C1Document.Util.C1TextLayout.SplitPositionInfo.Piece.FirstCharIndex" />から始まるすべての残りのテキストを意味します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.C1TextLayout.TextPos">
      <summary>テキスト内の位置を定義します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.TextPos.TextIndex">
      <summary>文字のインデックスです。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.TextPos.GlyphIndex">
      <summary>グリフのインデックスです。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.C1TextLayout.Line">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.C1TextLayout" />内の 1 行のテキストを表します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.Line.Start">
      <summary>行が開始する位置です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.Line.End">
      <summary>行が終了する位置です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.Line.BeforeHardBreak">
      <summary>行末の強制改行文字が開始する位置です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.Line.BeforeTralingSpaces">
      <summary>末尾のスペースが開始する位置です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.Line.Width">
      <summary>行の幅です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.Line.Height">
      <summary>行の高さです。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1TextLayout.Line.HardBreak">
      <summary>行が強制改行によって追加されたかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1TextLayout.Line.Length">
      <summary>行の長さを文字数単位で取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.TextPosition">
      <summary>テキストの位置です。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.CaretCoordsBefore">
      <summary>
        <see cref="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.TextPosition" />の
        <b>前</b>のカレットの座標です。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.CaretCoordsAfter">
      <summary>
        <see cref="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.TextPosition" />の
        <b>後</b>のカレットの座標です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.CaretCoords">
      <summary>
        カレットの座標を取得します。
        <see cref="P:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.IsTrailingHit" />に基づいて、このプロパティは、
        <see cref="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.CaretCoordsAfter" />または
        <see cref="F:C1.Win.C1Document.Util.C1TextLayout.HitTestInfo.CaretCoordsBefore" />を返します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.IC1TextMeasurementContext.CreateTextLayout">
      <summary>
        このコンテキストに基づいてテキストの測定に使用できる
        <see cref="T:C1.Win.C1Document.Util.C1TextLayout" />オブジェクトを作成します。
      </summary>
      <returns>
        <see cref="T:C1.Win.C1Document.Util.C1TextLayout" />オブジェクト。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextMeasurementContext.TextLayout">
      <summary>
        テキストの測定に使用できる
        <see cref="T:C1.Win.C1Document.Util.C1TextLayout" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.GetHashCode">
      <summary>デフォルトのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュコード。</returns>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.Equals(System.Object)">
      <summary>指定されたオブジェクトが現在のオブジェクトと等しいかどうかを判定します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定されたオブジェクトが現在のオブジェクトと等しい場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.InRange(System.Int32,System.Int32)">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.OutputRange" />によって指定されるページ番号が指定された範囲内にあるかどうかをテストします。
      </summary>
      <param name="minPageNumber"></param>
      <param name="maxPageNumber"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.GetPage(System.Int32,System.Int32,System.Int32)">
      <summary>指定されたインデックスを持つページの番号を取得します。</summary>
      <param name="pageIndex"></param>
      <param name="minPageNumber"></param>
      <param name="maxPageNumber"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.ToTwips(System.Double,System.Double)">
      <summary>ピクセル単位の値をtwips 単位の値に変換します。</summary>
      <param name="valuePixels">ピクセル単位の値。</param>
      <param name="dpi">使用する DPI。</param>
      <returns>twips 単位の値。</returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.GetWord(System.String,System.Int32,System.Int32@,System.Int32@)">
      <summary>指定された位置に近いテキスト内の単語を取得します。</summary>
      <param name="s"></param>
      <param name="p"></param>
      <param name="start"></param>
      <param name="length"></param>
    </member>
    <member name="M:C1.Win.C1Document.Utils.GetNearText(System.String,System.Int32,System.Int32,System.String@,System.Int32@)">
      <summary>指定された位置に「近い」テキストを取得します。</summary>
      <param name="text"></param>
      <param name="position"></param>
      <param name="length"></param>
      <param name="nearText"></param>
      <param name="positionInNearText"></param>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.LinesFlowDirectionEnum.NormalFlowMask">
      <summary>行が垂直方向（上から下または下から上）であることを示します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.LinesFlowDirectionEnum.NormalDirectionMask">
      <summary>最初の行が最後の行より上にあるときに、最も普通な行の方向（上から下または左から右）であることを示します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSourceFeatures.SupportsPageSettings">
      <summary>
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />がカスタムページ設定をサポートするかどうかを示します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.GetPageCompletedEventArgs">
      <summary>
        <see cref="E:C1.Win.C1Document.C1DocumentSource.GetPageCompleted" />イベントのパラメータを定義します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.GetPageCompletedEventArgs.#ctor(System.Int32,C1.Win.C1Document.C1Page,System.Exception,System.Boolean)">
      <summary>
        <see cref="T:C1.Win.C1Document.GetPageCompletedEventArgs" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="pageIndex">非同期操作で要求されたページのインデックス。</param>
      <param name="page">
        操作の結果を表す
        <see cref="T:C1.Win.C1Document.C1Page" />オブジェクト。
      </param>
      <param name="error">非同期操作中に発生したエラー。</param>
      <param name="cancelled">非同期操作がキャンセルされたかどうかを示す値。</param>
    </member>
    <member name="P:C1.Win.C1Document.GetPageCompletedEventArgs.PageIndex">
      <summary>非同期操作で要求されたページのインデックスを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.GetPageCompletedEventArgs.Page">
      <summary>
        <see cref="T:C1.Win.C1Document.C1Page" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.GetLinkTargetPositionCompletedEventArgs">
      <summary>
        <see cref="E:C1.Win.C1Document.C1DocumentSource.GetLinkTargetPositionCompleted" />イベントのパラメータを定義します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.GetLinkTargetPositionCompletedEventArgs.#ctor(C1.Win.C1Document.C1LinkTargetBase,C1.Win.C1Document.C1BookmarkPosition,System.Exception,System.Boolean)">
      <summary>
        <see cref="T:C1.Win.C1Document.GetLinkTargetPositionCompletedEventArgs" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="linkTarget">
        <see cref="T:C1.Win.C1Document.C1LinkTargetBase" />オブジェクトは、ドキュメント内の位置を定義します。
      </param>
      <param name="position">
        操作の結果を表す
        <see cref="T:C1.Win.C1Document.C1BookmarkPosition" />オブジェクト。
      </param>
      <param name="error">非同期操作中に発生したエラー。</param>
      <param name="cancelled">非同期操作がキャンセルされたかどうかを示す値。</param>
    </member>
    <member name="P:C1.Win.C1Document.GetLinkTargetPositionCompletedEventArgs.LinkTarget">
      <summary>
        ドキュメント内の位置を定義する
        <see cref="T:C1.Win.C1Document.C1LinkTargetBase" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.GetLinkTargetPositionCompletedEventArgs.Position">
      <summary>
        <see cref="T:C1.Win.C1Document.C1BookmarkPosition" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.C1DocumentSourceContext">
      <summary>
        内部使用。
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />が機能する完全なコンテキストを表す抽象クラスです。
        このクラスのインスタンスを使用して、C1DocumentSource の現在の状態を保存および復元できます。
        たとえば、これを使用して、前方移動と後方移動を実装できます。
        詳細については、
        <see cref="M:C1.Win.C1Document.C1DocumentSource.GetContext" />メソッドと
        <see cref="M:C1.Win.C1Document.C1DocumentSource.SetContext(C1.Win.C1Document.C1DocumentSourceContext)" />メソッドを参照してください。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.IsGenerateAllowed">
      <summary>
        この時点で
        <see cref="M:C1.Win.C1Document.C1DocumentSource.Generate" />メソッドを呼び出すことができるかどうかを示す値を返します。
      </summary>
      <returns>
        この時点で
        <see cref="M:C1.Win.C1Document.C1DocumentSource.Generate" />メソッドを呼び出すことができるかどうかを示す値。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.Generate">
      <summary>ドキュメントを生成します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.GenerateAsync">
      <summary>
        <see cref="M:C1.Win.C1Document.C1DocumentSource.Generate" />メソッドの非ブロック（非同期）バージョンです。
      </summary>
      <seealso cref="M:C1.Win.C1Document.C1DocumentSource.Generate" />
      <returns>
        非同期操作を識別する
        <see cref="T:System.Threading.Tasks.Task" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.ValidateParameters">
      <summary>現在のパラメータ値を検証し、値が有効な場合は、有効な値のリストを更新します。</summary>
      <returns>
        エラーを特定する
        <see cref="T:C1.Win.C1Document.ParameterValidationError" />オブジェクトのリスト（空または null の場合があります）。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.ValidateParametersAsync">
      <summary>
        <see cref="M:C1.Win.C1Document.C1DocumentSource.ValidateParameters" />メソッドの非ブロック（非同期）バージョンです。
      </summary>
      <returns>
        エラーを特定する
        <see cref="T:C1.Win.C1Document.ParameterValidationError" />オブジェクトの非同期リスト（空の場合があります）。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.Export(C1.Win.C1Document.Export.ExportFilter)">
      <summary>指定されたエクスポートフィルタを使用して、ドキュメントを外部形式のストリームにエクスポートします。</summary>
      <param name="exportFilter">使用するエクスポートフィルタ。</param>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.ExportAsync(C1.Win.C1Document.Export.ExportFilter)">
      <summary>
        <see cref="M:C1.Win.C1Document.C1DocumentSource.Export(C1.Win.C1Document.Export.ExportFilter)" />メソッドの非ブロック（非同期）バージョンです。
      </summary>
      <param name="exportFilter">使用するエクスポートフィルタ。</param>
      <returns>非同期の値オブジェクト。</returns>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.Print(C1.Win.C1Document.C1PrintOptions)">
      <summary>生成されたドキュメントを印刷します。</summary>
      <param name="options">
        印刷オプションを定義する
        <see cref="T:C1.Win.C1Document.C1PrintOptions" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.Print(System.Drawing.Printing.PrinterSettings)">
      <summary>生成されたレポートを印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.Print">
      <summary>生成されたレポートを印刷します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.ClearContent">
      <summary>
        生成されたコンテンツをクリアし、
        <see cref="P:C1.Win.C1Document.C1DocumentSource.Dirty" />を true に設定します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.CancelAsync">
      <summary>現在実行されている非同期アクションをキャンセルし、アクションが実際にキャンセルされるまで待ちます。</summary>
    </member>
    <member name="E:C1.Win.C1Document.C1DocumentSource.GenerateCompleted">
      <summary>
        <see cref="M:C1.Win.C1Document.C1DocumentSource.GenerateAsync" />メソッドが完了したときに発生します。
      </summary>
    </member>
    <member name="E:C1.Win.C1Document.C1DocumentSource.ValidateParametersCompleted">
      <summary>
        <see cref="M:C1.Win.C1Document.C1DocumentSource.ValidateParametersAsync" />メソッドが完了したときに発生します。
      </summary>
    </member>
    <member name="E:C1.Win.C1Document.C1DocumentSource.ExportCompleted">
      <summary>
        <see cref="M:C1.Win.C1Document.C1DocumentSource.ExportAsync(C1.Win.C1Document.Export.ExportFilter)" />メソッドが完了したときに発生します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1PdfDocumentSource.Credential">
      <summary>
        オーバーライドされます。PDF ドキュメントで使用される資格情報を定義する
        <see cref="T:System.Net.NetworkCredential" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1SSRSDocumentSource.IsGenerateAllowed">
      <summary>
        オーバーライドされます。
        状態が
        <see cref="F:C1.Win.C1Document.C1DocumentSourceBusyState.Ready" />で、
        <see cref="P:C1.Win.C1Document.C1SSRSDocumentSource.DocumentLocation" />が null でない場合は、
        <b>true</b>を返します。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Export.ExportFilter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.ExportFilter" />オブジェクトを破棄します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.C1DXPrintManager">
      <summary>内部使用。D2D 印刷サービスを使用する C1DXGraphics を介した印刷を実装します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.C1MetafilePrintManager">
      <summary>
        内部使用。
        標準的な
        <see cref="T:System.Drawing.Printing.PrintDocument" />を使用し、C1GdiGraphics を介して印刷を実装します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.C1PrintManager">
      <summary>内部使用。印刷サービスを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1PrintManager.DocumentSource">
      <summary>
        印刷対象の
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />を取得または設定します。
        <see cref="T:C1.Win.C1Document.C1PrintManager" />は、この
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />が既に印刷状態（BusyState == Printing）であると仮定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1PrintManager.Options">
      <summary>
        印刷パラメータを定義する
        <see cref="T:C1.Win.C1Document.C1PrintOptions" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1PrintManager.Print">
      <summary>
        指定されたプリンタ設定を使用して、
        <see cref="P:C1.Win.C1Document.C1PrintManager.DocumentSource" />を印刷します。
        エラーが発生した場合、このメソッドは例外を生成します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.C1FindTextAction">
      <summary>テキスト検索の方向を記述します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FindTextAction.Start">
      <summary>ドキュメントの先頭からテキスト検索が行われます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FindTextAction.Next">
      <summary>ドキュメントの現在の位置から末尾に向かってテキスト検索が行われます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.C1FindTextAction.Previous">
      <summary>ドキュメントの現在の位置から先頭に向かってテキスト検索が行われます。</summary>
    </member>
    <member name="T:C1.Win.C1Document.FindActionCompletedEventArgs">
      <summary>
        <see cref="E:C1.Win.C1Document.C1TextSearchManager.FindActionCompleted" />イベントのパラメータを定義します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.FindActionCompletedEventArgs.#ctor(C1.Win.C1Document.C1FindTextAction,C1.Win.C1Document.C1FoundPosition,System.Exception,System.Boolean)">
      <summary>
        <see cref="T:C1.Win.C1Document.FindActionCompletedEventArgs" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="action">検索アクションを定義します。</param>
      <param name="position">
        操作の結果を表す
        <see cref="T:C1.Win.C1Document.C1FoundPosition" />オブジェクト。
      </param>
      <param name="error">非同期操作中に発生したエラー。</param>
      <param name="cancelled">非同期操作がキャンセルされたかどうかを示す値。</param>
    </member>
    <member name="P:C1.Win.C1Document.FindActionCompletedEventArgs.Action">
      <summary>
        完了した検索アクションを定義する
        <see cref="T:C1.Win.C1Document.C1FindTextAction" />値を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.FindActionCompletedEventArgs.Position">
      <summary>
        検出されたテキスト位置を指定する
        <see cref="T:C1.Win.C1Document.C1FoundPosition" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.C1TextSearchManager">
      <summary>
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />によって管理されているドキュメント内のテキストを検索する機能を提供します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1TextSearchManager.GetFragmentHighligh(System.Collections.Generic.IList{C1.Win.C1Document.C1FragmentHighlight},C1.Win.C1Document.RenderFragment,C1.Win.C1Document.C1HighlightAttrs,C1.Win.C1Document.C1HighlightAttrs)">
      <summary>
        指定された
        <see cref="T:C1.Win.C1Document.RenderFragment" />の
        <paramref name="highlight" />リストにデータを設定します。
      </summary>
      <param name="highlight"></param>
      <param name="fragment"></param>
      <param name="findMatchHighlight"></param>
      <param name="activeFindMatchHighlight"></param>
    </member>
    <member name="M:C1.Win.C1Document.C1TextSearchManager.FindStart(System.Int32,System.Boolean,C1.Win.C1Document.C1FindTextParams)">
      <summary>ドキュメント内で最初に見つかるテキストを検索します。</summary>
      <param name="startPageIndex">検索を開始するページの 0 から始まるインデックス。</param>
      <param name="wholeDocument">検索中にドキュメント全体をロードするか、最初に見つかったフラグメントまでをロードするかを示します。</param>
      <param name="findParams">テキスト検索のパラメータ。</param>
      <returns>見つかったテキストの位置。</returns>
    </member>
    <member name="M:C1.Win.C1Document.C1TextSearchManager.FindStartAsync(System.Int32,System.Boolean,C1.Win.C1Document.C1FindTextParams,System.Boolean)">
      <summary>
        <see cref="M:C1.Win.C1Document.C1TextSearchManager.FindStartAsync(System.Int32,System.Boolean,C1.Win.C1Document.C1FindTextParams,System.Boolean)" />メソッドの非ブロック（非同期）バージョンです。
      </summary>
      <param name="startPageIndex">検索を開始するページの 0 から始まるインデックス。</param>
      <param name="wholeDocument">検索中にドキュメント全体をロードするか、最初に見つかったフラグメントまでをロードするかを示します。</param>
      <param name="findParams">テキスト検索のパラメータ。</param>
      <returns>見つかったテキストの位置を表す非同期のオブジェクト。</returns>
    </member>
    <member name="M:C1.Win.C1Document.C1TextSearchManager.FindNext(C1.Win.C1Document.C1FoundPosition)">
      <summary>ドキュメント内で次に見つかるテキストを検索します。</summary>
      <param name="initialPosition">
        検索を開始する位置を定義する
        <see cref="T:C1.Win.C1Document.C1FoundPosition" />オブジェクト。
      </param>
      <returns>見つかったテキストの位置。</returns>
    </member>
    <member name="M:C1.Win.C1Document.C1TextSearchManager.FindNextAsync(C1.Win.C1Document.C1FoundPosition,System.Boolean)">
      <summary>
        <see cref="!:FindNext()" />メソッドの非ブロック（非同期）バージョンです。
      </summary>
      <param name="foundPosition">
        検索を開始する位置を定義する
        <see cref="T:C1.Win.C1Document.C1FoundPosition" />オブジェクト。
      </param>
      <returns>見つかったテキストの位置を表す非同期のオブジェクト。</returns>
    </member>
    <member name="M:C1.Win.C1Document.C1TextSearchManager.FindPrevious(C1.Win.C1Document.C1FoundPosition)">
      <summary>ドキュメント内で前に見つかるテキストを検索します。</summary>
      <param name="foundPosition">
        検索を開始する位置を定義する
        <see cref="T:C1.Win.C1Document.C1FoundPosition" />オブジェクト。
      </param>
      <returns>見つかったテキストの位置。</returns>
    </member>
    <member name="M:C1.Win.C1Document.C1TextSearchManager.FindPreviousAsync(C1.Win.C1Document.C1FoundPosition,System.Boolean)">
      <summary>
        <see cref="!:FindPrevious()" />メソッドの非ブロック（非同期）バージョンです。
      </summary>
      <param name="foundPosition">
        検索を開始する位置を定義する
        <see cref="T:C1.Win.C1Document.C1FoundPosition" />オブジェクト。
      </param>
      <returns>見つかったテキストの位置を表す非同期のオブジェクト。</returns>
    </member>
    <member name="M:C1.Win.C1Document.C1TextSearchManager.Reset">
      <summary>テキスト検索結果をリセットします。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1TextSearchManager.CancelAsync">
      <summary>現在の非同期アクションをキャンセルし、アクションが実際にキャンセルされるまで待ちます。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1TextSearchManager.ActiveFoundPosition">
      <summary>
        アクティブな発見位置を取得または設定します。
        この位置は、さまざまな強調表示属性を持ちます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1TextSearchManager.Params">
      <summary>
        テキストなどの検索パラメータです。
        FindStartXXX() メソッドで初期化されます。
      </summary>
    </member>
    <member name="E:C1.Win.C1Document.C1TextSearchManager.LongOperation">
      <summary>操作中に定期的に発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Document.C1TextSearchManager.FoundPositionsChanged">
      <summary>
        <see cref="P:C1.Win.C1Document.C1TextSearchManager.FoundPositions" />リストが変更されたときに発生します。
      </summary>
    </member>
    <member name="E:C1.Win.C1Document.C1TextSearchManager.FindActionCompleted">
      <summary>非同期検索アクションが完了したときに発生します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1DXGraphics.GdiCompatibleContext">
      <summary>DeviceContext が不透明の GdiCompatible ビットマップに基づいているかどうかを示します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1DXGraphics.FillColor">
      <summary>Windows 7 で SSRS ページを描画する場合に使用されます。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1PdfGraphics.PageScale(System.Double,System.Double)">
      <summary>このグラフィックのページスケールを設定します（リンクおよびブックマーク用）。</summary>
      <param name="sx">水平方向のスケール。</param>
      <param name="sy">垂直方向のスケール。</param>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextLayout.Dispose(System.Boolean)">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.C1TextLayout" />によって使用されたアンマネージリソースを解放します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSource.Log">
      <summary>
        最後の操作中（生成中、エクスポート中など）に発生したイベントのリストを含む
        <see cref="T:C1.Win.C1Document.LogEntryList" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.SvgExportProvider">
      <summary>内部使用。SVG 形式に基づいて HTML 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.Win.C1Document.Export.Ssrs.SvgExporter" />
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.SvgExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.Win.C1Document.Export.Ssrs.SvgExportProvider" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.Export.Ssrs.SvgExportProvider" />。
      </returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.SvgExportProvider.DefaultExtension">
      <summary>
        現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。
        この実装は "html" を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.Ssrs.SvgExportProvider.FormatName">
      <summary>HTML エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.Ssrs.SvgExporter">
      <summary>内部使用。SSRS レポートを SVG 形式にエクスポートするために使用できるオブジェクトを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Export.Ssrs.SvgExporter.CanExportRange(C1.Win.C1Document.OutputRangeType)">
      <summary>現在のエクスポータが、指定された型の範囲をエクスポートできるかどうかをテストします。</summary>
      <param name="rangeType">
        テストする
        <see cref="T:C1.Win.C1Document.OutputRangeType" />。
      </param>
      <returns>指定された範囲をエクスポートできる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="P:C1.Win.C1Document.Export.ExportFilter.PageSettings">
      <summary>
        エクスポートするコンテンツを提供する
        <see cref="T:C1.Win.C1Document.C1PageSettings" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Export.HtmlFilterBase">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.C1HtmlGraphics" />に基づく HTML フィルタの基本クラスです。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.HtmlFilterBase.ShowNavigator">
      <summary>ナビゲータを追加するかどうかを指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.HtmlFilterBase.NavigatorPosition">
      <summary>ナビゲータ位置を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Export.HtmlFilterBase.SingleFile">
      <summary>フィルタが単一ファイルを生成するかどうかを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.C1DXTextLayout.BuildCharMapWhenDrawGlyphRun">
      <summary>文字幅の配列を構築して DrawGlyphRun(...) メソッドに渡すかどうかを示す値を取得します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.DrawGlyphRun(System.Double,System.Double,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.Drawing.Color,C1.Win.C1Document.Util.IC1TextRange,C1.Win.C1Document.Util.C1TextLayout,System.String)">
      <summary>グリフランをレンダリングします。</summary>
      <param name="baselineOriginX">
        グリフのベースラインの X 座標。
        右から左へのテキストの場合、X はテキストの「右」側を示し、グリフはこのポイントから左へ描画されます。
      </param>
      <param name="baselineOriginY">
        グリフのベースラインの Y 座標。
        range.IsSideways が true の場合、つまりグリフを垂直方向に描画する場合（日本語テキスト）、Y はグリフの高さの中央の位置になります。
      </param>
      <param name="glyphCount">グリフの数。</param>
      <param name="glyphIndices">
        range.GetFontFace() によって指定されたフォント内のグリフのインデックスを含む short 値の配列へのポインタ。
        ((short*)glyphIndices)[i] を使用して i 番目のグリフインデックスが取得されます。
        すべてのインデックスが解決されている必要があり、0 にはできません。
      </param>
      <param name="glyphAdvances">
        グリフの幅を含む float 値の配列へのポインタ。
        ((float*)glyphAdvances)[i] を使用して i 番目のグリフの幅が取得されます。
      </param>
      <param name="glyphOffsets">
        <see cref="!:DW.GlyphOffset" />構造体の配列へのポインタ。
        ((DW.GlyphOffset*)glyphOffsets)[i] を使用して i 番目のグリフのオフセットが取得されます。
      </param>
      <param name="clusterMap">テキストクラスタのテーブルへのポインタ。</param>
      <param name="foreColor">テキストの色です。</param>
      <param name="range">
        テキストに関する拡張情報を取得するための
        <see cref="T:C1.Win.C1Document.Util.IC1TextRange" />インタフェース。
      </param>
      <param name="textLayout">
        このメソッドを呼び出す
        <see cref="T:C1.Win.C1Document.Util.C1TextLayout" />オブジェクト。
      </param>
      <param name="text">描画するテキスト。</param>
    </member>
    <member name="T:C1.Win.C1Document.Util.C1TextLayout.JustifyMode">
      <summary>テキストに適用するさまざまなタイプの位置揃えを定義します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.JustifyMode.None">
      <summary>位置揃えしません。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.JustifyMode.Standard">
      <summary>標準的な位置揃えスペースが使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.Util.C1TextLayout.JustifyMode.Chars">
      <summary>行内のすべての文字の幅が調整されます。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.GetWholeDocumentRange(C1.Win.C1Document.Util.IC1TextMeasurementContext)">
      <summary>
        ドキュメント全体を含む
        <see cref="T:C1.Win.C1Document.C1DocumentRange" />オブジェクトを作成します。
        ドキュメントにテキストがない場合、このメソッドは null を返します。
      </summary>
      <param name="textMeasurementContext">
        <see cref="T:C1.Win.C1Document.C1DocumentRange" />の作成中に使用する
        <see cref="T:C1.Win.C1Document.Util.IC1TextMeasurementContext" />。
      </param>
      <returns>
        ドキュメント全体を定義する
        <see cref="T:C1.Win.C1Document.C1DocumentRange" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.GetPageDocumentRange(C1.Win.C1Document.C1Page,C1.Win.C1Document.Util.IC1TextMeasurementContext)">
      <summary>
        指定されたページを含む
        <see cref="T:C1.Win.C1Document.C1DocumentRange" />オブジェクトを作成します。
        ページにテキストがない場合、このメソッドは null を返します。
      </summary>
      <param name="page">
        ページを指定する
        <see cref="T:C1.Win.C1Document.C1Page" />オブジェクト。
      </param>
      <param name="textMeasurementContext">
        <see cref="T:C1.Win.C1Document.C1DocumentRange" />の作成中に使用する
        <see cref="T:C1.Win.C1Document.Util.IC1TextMeasurementContext" />。
      </param>
      <returns>
        ページドキュメント範囲を定義する
        <see cref="T:C1.Win.C1Document.C1DocumentRange" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1PdfDocumentSource.LoadFromStream(System.IO.Stream)">
      <summary>ストリームからドキュメントをロードします。</summary>
      <param name="stream"></param>
    </member>
    <member name="F:C1.Win.C1Document.ParameterType.Date">
      <summary>
        値は DateTime ですが、日付だけを入力できます。
        時間の部分は常に 0:00.00 になります。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Parameter.MaxLength">
      <summary>
        文字列パラメータの最大長を取得または設定します。
        0 は長さが無制限であることを意味します。
        文字列以外のパラメータでは、このプロパティは無視されます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1PrintOptions.OutputRange">
      <summary>
        印刷するページの範囲を定義する
        <see cref="P:C1.Win.C1Document.C1PrintOptions.OutputRange" />オブジェクトを取得または設定します。
        これは null にできます。その場合は、
        <see cref="P:C1.Win.C1Document.C1PrintOptions.PrinterSettings" />で指定された値が使用されます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.GetMinPage(System.Int32)">
      <summary>現在の範囲の開始ページ番号を取得します。</summary>
      <param name="minPageNumber">
        開始ページ番号。
        現在の範囲がドキュメントの先頭から始まっている場合に使用されます。
      </param>
      <returns>実際の開始ページ番号。</returns>
    </member>
    <member name="M:C1.Win.C1Document.OutputRange.GetMaxPage(System.Int32)">
      <summary>現在の範囲の終了ページ番号を取得します。</summary>
      <param name="maxPageNumber">
        終了ページ番号。
        現在の範囲がドキュメントの末尾で終わる場合に使用されます。
      </param>
      <returns>実際の終了ページ番号。</returns>
    </member>
    <member name="P:C1.Win.C1Document.C1Page.Owner">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.C1Page" />オブジェクトのオーナーを取得します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1PageSettings.#ctor(C1.Win.C1Document.Unit,C1.Win.C1Document.Unit,System.Drawing.Printing.PaperKind,System.Boolean)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1PageSettings" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="width">
        <see cref="P:C1.Win.C1Document.C1PageSettings.Width" />プロパティの値。
      </param>
      <param name="height">
        <see cref="P:C1.Win.C1Document.C1PageSettings.Height" />プロパティの値。
      </param>
      <param name="paperSize">
        <see cref="P:C1.Win.C1Document.C1PageSettings.PaperSize" />プロパティの値。
      </param>
      <param name="landscape">
        <see cref="P:C1.Win.C1Document.C1PageSettings.Landscape" />プロパティの値。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.AddToLog(System.Exception)">
      <summary>
        <see cref="P:C1.Win.C1Document.C1DocumentSource.Log" />リストにログエントリを追加します。
      </summary>
      <param name="ex">ログエントリに関連付けられている例外。</param>
      <returns>
        作成された
        <see cref="T:C1.Win.C1Document.LogEntry" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.AddToLog(C1.Win.C1Document.LogEntrySeverity,System.String)">
      <summary>
        <see cref="P:C1.Win.C1Document.C1DocumentSource.Log" />リストにログエントリを追加します。
      </summary>
      <param name="severity">ログエントリの重要度。</param>
      <param name="message">ログエントリのメッセージ。</param>
      <returns>
        作成された
        <see cref="T:C1.Win.C1Document.LogEntry" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.AddToLog(C1.Win.C1Document.LogEntrySeverity,System.String,System.Object[])">
      <summary>
        <see cref="P:C1.Win.C1Document.C1DocumentSource.Log" />リストにログエントリを追加します。
      </summary>
      <param name="severity">ログエントリの重要度。</param>
      <param name="format">ログエントリのメッセージの構築に使用される書式文字列。</param>
      <param name="args">ログエントリのメッセージの構築に使用される引数。</param>
      <returns>
        作成された
        <see cref="T:C1.Win.C1Document.LogEntry" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.LabeledValues.#ctor(System.Collections.Generic.IList{C1.Win.C1Document.LabeledValue})">
      <summary>
        <see cref="T:C1.Win.C1Document.LabeledValues" />コレクションの新しいインスタンスを初期化します。
      </summary>
      <param name="items">
        <see cref="T:C1.Win.C1Document.LabeledValue" />オブジェクトのリスト。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.Border.ShouldSerialize">
      <summary>このオブジェクトのいずれかのプロパティがデフォルト値から変更されたかどうかを示します。</summary>
      <returns>
        オブジェクトがデフォルト値から変更された場合は
        <b>true</b>を返し、そうでない場合は
        <b>false</b>を返します。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Border.Reset">
      <summary>すべてのプロパティをデフォルト値にリセットします。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Border.CreateSame">
      <summary>現在のオブジェクトと同じ型のオブジェクトを作成します。</summary>
      <returns>作成されたオブジェクト。</returns>
    </member>
    <member name="M:C1.Win.C1Document.ImageAlign.CreateSame">
      <summary>現在のオブジェクトと同じ型のオブジェクトを作成します。</summary>
      <returns>作成されたオブジェクト。</returns>
    </member>
    <member name="M:C1.Win.C1Document.Line.ShouldSerialize">
      <summary>このオブジェクトのいずれかのプロパティがデフォルト値から変更されたかどうかを示します。</summary>
      <returns>
        オブジェクトがデフォルト値から変更された場合は
        <b>true</b>を返し、そうでない場合は
        <b>false</b>を返します。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Line.Reset">
      <summary>すべてのプロパティをデフォルト値にリセットします。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Line.PropsTable">
      <summary>内部使用。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Line.CreateSame">
      <summary>現在のオブジェクトと同じ型のオブジェクトを作成します。</summary>
      <returns>作成されたオブジェクト。</returns>
    </member>
    <member name="T:C1.Win.C1Document.VisualPrimitive.PropsTable`1">
      <summary>内部使用。</summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:C1.Win.C1Document.VisualPrimitive.CreateSame">
      <summary>現在のオブジェクトと同じ型のオブジェクトを作成します。</summary>
      <returns>作成されたオブジェクト。</returns>
    </member>
    <member name="P:C1.Win.C1Document.RenderContainerFragment.HasChildFragments">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderContainerFragment" />に子フラグメントが含まれるかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderContainerFragment.ChildFragments">
      <summary>子のフラグメントのコレクションを取得します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.RenderTextFragment.BuildTextLayout(C1.Win.C1Document.Util.IC1TextMeasurementContext,C1.Win.C1Document.Util.C1TextLayout,System.Nullable{System.Double},System.Nullable{System.Double},C1.Win.C1Document.IC1HighlightingManager,System.Boolean,C1.Win.C1Document.UnitTypeEnum)">
      <summary>
        内部使用。この
        <see cref="T:C1.Win.C1Document.RenderTextFragment" />のコンテンツを表す
        <see cref="T:C1.Win.C1Document.Util.C1TextLayout" />オブジェクト。
      </summary>
      <param name="tmc"></param>
      <param name="tl"></param>
      <param name="widthPx"></param>
      <param name="heightPx"></param>
      <param name="hm"></param>
      <param name="gdiCompatible"></param>
      <param name="du"></param>
    </member>
    <member name="M:C1.Win.C1Document.BarcodeOptions.ShouldSerialize">
      <summary>このオブジェクトのいずれかのプロパティがデフォルト値から変更されたかどうかを示します。</summary>
      <returns>
        オブジェクトがデフォルト値から変更された場合は
        <b>true</b>を返し、そうでない場合は
        <b>false</b>を返します。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.BarcodeOptions.Reset">
      <summary>すべてのプロパティをデフォルト値にリセットします。</summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderContainer.HasChildObjects">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.RenderContainer" />に子オブジェクトが含まれるかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderContainer.ChildObjects">
      <summary>
        子オブジェクトを含む
        <see cref="T:C1.Win.C1Document.RenderObjectCollection" />を取得します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.LayoutBreak">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderObject" />の前後にページ区切りが挿入されるかどうかを決定します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.LayoutBreak.None">
      <summary>ページ区切りなし。</summary>
    </member>
    <member name="F:C1.Win.C1Document.LayoutBreak.Before">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderObject" />の前にページ区切りが挿入されます。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.LayoutBreak.After">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderObject" />の後にページ区切りが挿入されます。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.LayoutBreak.BeforeAndAfter">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderObject" />の前と後にページ区切りが挿入されます。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.LayoutBreak.PageBefore">
      <summary>
        段組みレポートで、
        <see cref="T:C1.Win.C1Document.RenderObject" />の前に段区切りではなくページ区切りが挿入されます。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.LayoutBreak.PageAfter">
      <summary>
        段組みレポートで、
        <see cref="T:C1.Win.C1Document.RenderObject" />の後に段区切りではなくページ区切りが挿入されます。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.LayoutBreak.PageBeforeAndAfter">
      <summary>
        段組みレポートで、
        <see cref="T:C1.Win.C1Document.RenderObject" />の前と後に段区切りではなくページ区切りが挿入されます。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderObject.SpecialInfo">
      <summary>
        エクスポータで使用できる
        <see cref="P:C1.Win.C1Document.RenderObject.SpecialInfo" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.RenderObject.LayoutBreak">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderObject" />の前または後にページ区切りが挿入されるかどうかを決定する値を取得または設定します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.RenderParagraph.CreateSame">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderParagraph" />の新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.RenderParagraph" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.RenderParagraph.AssignFrom(System.Object)">
      <summary>別のオブジェクトからすべてを割り当てます。</summary>
      <param name="source">ソースオブジェクト。</param>
    </member>
    <member name="P:C1.Win.C1Document.RenderParagraphObject.SpecialInfo">
      <summary>
        エクスポータで使用できる
        <see cref="P:C1.Win.C1Document.RenderParagraphObject.SpecialInfo" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.RenderParagraphValue.CreateSame">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderParagraphValue" />の新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.RenderParagraphValue" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.RenderParagraphValue.AssignFrom(System.Object)">
      <summary>別のオブジェクトからすべてを割り当てます。</summary>
      <param name="source">ソースオブジェクト。</param>
    </member>
    <member name="M:C1.Win.C1Document.RenderValue.CreateSame">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderValue" />の新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.Win.C1Document.RenderValue" />。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.RenderValue.AssignFrom(System.Object)">
      <summary>別のオブジェクトからすべてを割り当てます。</summary>
      <param name="source">ソースオブジェクト。</param>
    </member>
    <member name="M:C1.Win.C1Document.C1TextSearchManager.IsSearching">
      <summary>検索が現在実行中かどうかを示す値を取得します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1SolidBrush.CreateSame">
      <summary>現在のオブジェクトと同じ型のオブジェクトを作成します。</summary>
      <returns>作成されたオブジェクト。</returns>
    </member>
    <member name="M:C1.Win.C1Document.C1RadialBrush.CreateSame">
      <summary>現在のオブジェクトと同じ型のオブジェクトを作成します。</summary>
      <returns>作成されたオブジェクト。</returns>
    </member>
    <member name="M:C1.Win.C1Document.C1LinearBrush.CreateSame">
      <summary>現在のオブジェクトと同じ型のオブジェクトを作成します。</summary>
      <returns>作成されたオブジェクト。</returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.InflateHalfLine(C1.Win.Interop.Rect,System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <paramref name="left" />、
        <paramref name="top" />などの値の半分を
        <paramref name="rect" />の該当する辺に加算します。
      </summary>
      <param name="rect"></param>
      <param name="left"></param>
      <param name="top"></param>
      <param name="right"></param>
      <param name="bottom"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Utils.DeflateHalfLine(C1.Win.Interop.Rect,System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <paramref name="left" />、
        <paramref name="top" />などの値の半分を
        <paramref name="rect" />の該当する辺から減算します。
      </summary>
      <param name="rect"></param>
      <param name="left"></param>
      <param name="top"></param>
      <param name="right"></param>
      <param name="bottom"></param>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Document.FlexChart.Axis">
      <summary>RenderFlexChart 内の軸を表します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.Position">
      <summary>軸位置を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.Origin">
      <summary>軸が直交軸と交差する位置の値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.Reversed">
      <summary>軸を反転（上から下または右から左）するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.Labels">
      <summary>軸ラベルを表示すかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.LabelAngle">
      <summary>軸ラベルの回転角度を取得または設定します。</summary>
      <remarks>この角度は、-90 から 90 の有効な値で測定されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.Format">
      <summary>軸ラベルに使用される書式文字列を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.Title">
      <summary>軸の横に表示されるタイトルテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.TitleStyle">
      <summary>軸タイトルのスタイルを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.MajorTickMarks">
      <summary>軸の目盛りマークの場所を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.MajorGrid">
      <summary>軸にグリッド線を表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.MajorGridStyle">
      <summary>主グリッドのスタイルを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.MajorUnit">
      <summary>軸ラベル間の単位数を取得または設定します。</summary>
      <remarks>軸に日付値が含まれる場合、単位は日数です。</remarks>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.MinorTickMarks">
      <summary>小目盛りマークの場所を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.MinorGrid">
      <summary>軸に副グリッド線を表示するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.MinorGridStyle">
      <summary>副グリッドのスタイルを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.MinorUnit">
      <summary>小目盛りとグリッド線の間の単位数を取得または設定します。</summary>
      <remarks>軸に日付値が含まれる場合、単位は日数です。</remarks>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.LogBase">
      <summary>軸の対数の底を取得または設定します。</summary>
      <remarks>底が NaN（デフォルト値）の場合、軸は線形目盛りを使用します。</remarks>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.AxisLine">
      <summary>軸線が表示されているかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.LabelAlignment">
      <summary>軸ラベルの配置を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.Min">
      <summary>軸に表示される最小値を取得または設定します。</summary>
      <remarks>最小値が NaN（デフォルト値）の場合、最小値は自動的に計算されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.Max">
      <summary>軸に表示される最大値を取得または設定します。</summary>
      <remarks>最大値が NaN（デフォルト値）の場合、最大値は自動的に計算されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.Style">
      <summary>軸スタイルを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Axis.OverlappingLabels">
      <summary>重なった軸ラベルの処理方法を示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.FlexChart.ChartOptions">
      <summary>チャートのオプションを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.ChartOptions.InterpolateNulls">
      <summary>欠損値の解釈方法を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.ChartOptions.ClusterSize">
      <summary>縦棒グラフと横棒グラフのクラスタのサイズを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.ChartOptions.BubbleMinSize">
      <summary>バブルチャートの最小シンボルサイズを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.ChartOptions.BubbleMaxSize">
      <summary>バブルチャートの最大シンボルサイズを取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.FlexChart.ChartStyle">
      <summary>RenderFlexChartBase 要素のビジュアルスタイルを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.ChartStyle.StrokeColor">
      <summary>
        ストローク色を取得または設定します。
        <b>null</b>はデフォルトの色を示します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.ChartStyle.StrokeWidth">
      <summary>ストロークの幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.ChartStyle.FillColor">
      <summary>
        塗りつぶし色を取得または設定します。
        <b>null</b>はデフォルトの色を示します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.ChartStyle.Font">
      <summary>
        フォントを取得または設定します。
        デフォルトは Arial 9 ポイントです。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.FlexChart.HorizontalAlignment">
      <summary>コントロール内のオブジェクトまたはテキストがコントロールの要素に対して水平方向にどのように配置されるかを指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.FlexChart.HorizontalAlignment.Left">
      <summary>オブジェクトまたはテキストは、コントロール要素の左側に揃えられます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.FlexChart.HorizontalAlignment.Right">
      <summary>オブジェクトまたはテキストは、コントロール要素の右側に揃えられます。</summary>
    </member>
    <member name="F:C1.Win.C1Document.FlexChart.HorizontalAlignment.Center">
      <summary>オブジェクトまたはテキストは、コントロール要素の中央に揃えられます。</summary>
    </member>
    <member name="T:C1.Win.C1Document.FlexChart.ChartTitle">
      <summary>チャートタイトル（ヘッダーまたはフッター）を表します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.ChartTitle.Content">
      <summary>タイトルのコンテンツを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.ChartTitle.Border">
      <summary>タイトルが境界線を持つかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.ChartTitle.HorizontalAlignment">
      <summary>タイトルの水平方向の配置を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.ChartTitle.Style">
      <summary>タイトルのスタイルを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.ChartTitle.BorderStyle">
      <summary>タイトルの境界線スタイルを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.FlexChart.DataLabel">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderFlexChart" />内のデータポイントに関連付けられたラベルを表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.DataLabel.Position">
      <summary>データラベルの位置を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.FlexChart.DataLabelBase">
      <summary>データラベルの基本クラスです。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.DataLabelBase.Content">
      <summary>データラベルのコンテンツを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.DataLabelBase.Border">
      <summary>ラベルが境界線を持つかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.DataLabelBase.ConnectingLine">
      <summary>データラベルが、対応するデータポイントとの接続線を持つかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.DataLabelBase.Offset">
      <summary>
        対応するデータポイントからのデータラベルのオフセットを twips 単位で取得または設定します。
        0（デフォルト）は自動値を示します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.DataLabelBase.Style">
      <summary>データラベルのスタイルを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.DataLabelBase.BorderStyle">
      <summary>データラベルの境界線スタイルを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.FlexChart.Legend">
      <summary>チャート凡例を表します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Legend.Owner">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.FlexChart.Legend" />オブジェクトを所有する
        <see cref="T:C1.Win.C1Document.FlexChart.ChartBase" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Legend.Position">
      <summary>凡例の位置を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Legend.Style">
      <summary>凡例のスタイルを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Legend.TitleStyle">
      <summary>凡例タイトルのスタイルを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Legend.Title">
      <summary>凡例タイトルを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.Legend.Orientation">
      <summary>凡例の方向を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.FlexChart.SeriesColumn">
      <summary>
        <see cref="T:C1.Win.C1Document.FlexChart.Series" />が使用するデータの列を表します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.SeriesColumn.DataType">
      <summary>データ型を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.FlexChart.SeriesColumn.Values">
      <summary>double 値の配列を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.FlexChart.Series">
      <summary>
        <see cref="T:C1.Win.C1Document.RenderFlexChart" />内の系列を表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.FlexChart.Series.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Document.FlexChart.Series" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.FlexChart.SeriesCollection">
      <summary>
        <see cref="T:C1.Win.C1Document.FlexChart.Series" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.RenderFlexChart">
      <summary>
        FlexChart に基づく
        <see cref="T:C1.Win.C1Document.C1Document" />内のチャートを表します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1Serializer.ThicknessToString(C1.Win.Interop.Thickness)">
      <summary>
        <see cref="T:C1.Win.Interop.Thickness" />構造体をシリアライズで使用される文字列に変換します。
      </summary>
      <param name="v"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1Serializer.TryThicknessFromString(System.String,C1.Win.Interop.Thickness@)">
      <summary>
        文字列を
        <see cref="T:C1.Win.Interop.Thickness" />構造体に変換します。
      </summary>
      <param name="s">変換する文字列。</param>
      <param name="result">
        出力：作成された
        <see cref="T:C1.Win.Interop.Thickness" />構造体。
      </param>
      <returns>
        エラーがない場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.DrawRectangle(C1.Win.Interop.Rect,System.Drawing.Color,System.Double,System.Single[])">
      <summary>
        <see cref="T:C1.Win.Interop.Rect" />構造体で指定された四角形を描画します。
      </summary>
      <param name="bounds">
        描画する四角形を表す
        <see cref="T:C1.Win.Interop.Rect" />構造体。
      </param>
      <param name="color">
        四角形の色を表す
        <see cref="T:System.Drawing.Color" />構造体。
      </param>
      <param name="lineWidth">四角形の描画に使用される線の幅を指定します。</param>
      <param name="dashPattern">四角形の描画に使用される線の破線パターンを指定します。</param>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.DrawEllipse(C1.Win.Interop.Rect,System.Drawing.Color,System.Double,System.Single[])">
      <summary>
        <see cref="T:C1.Win.Interop.Rect" />構造体で指定された楕円を描画します。
      </summary>
      <param name="bounds">
        描画する楕円を表す
        <see cref="T:C1.Win.Interop.Rect" />構造体。
      </param>
      <param name="color">
        楕円の色を表す
        <see cref="T:System.Drawing.Color" />構造体。
      </param>
      <param name="lineWidth">楕円の描画に使用される線の幅を指定します。</param>
      <param name="dashPattern">楕円の描画に使用される線の破線パターンを指定します。</param>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.DrawPath(C1.Win.C1Document.Util.IPath,System.Drawing.Color,System.Double,System.Single[])">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.IPath" />を描画します。
      </summary>
      <param name="path">
        描画するパスを表す、
        <see cref="T:C1.Win.C1Document.Util.IPath" />インタフェースをサポートするオブジェクト。
      </param>
      <param name="color">
        パスの色を表す
        <see cref="T:System.Drawing.Color" />構造体。
      </param>
      <param name="lineWidth">パスの描画に使用される線の幅（ピクセル単位）を指定します。</param>
      <param name="dashPattern">パスの描画に使用される線の破線パターンを指定します。</param>
    </member>
    <member name="M:C1.Win.C1Document.Utils.AreObjectArraysEqual(System.Object[],System.Object[])">
      <summary>
        <see cref="M:C1.Win.C1Document.Utils.AreObjectsEqual(System.Object,System.Object)" />メソッドを使用して 2 つのオブジェクト配列を比較します。
        配列のサイズが同じで、同じオブジェクトが含まれている場合は、
        <b>true</b>を返します。
      </summary>
      <param name="v1">最初の配列。</param>
      <param name="v2">2 番目の配列。</param>
      <returns>
        配列が等しい場合は
        <b>true</b>、そうでない場合は
        <b>false</b>を返します。
      </returns>
    </member>
    <member name="T:C1.Win.C1Document.PdfPasswordException">
      <summary>現在のパスワードとして提供された値が正しくないときに生成される例外。</summary>
    </member>
    <member name="M:C1.Win.C1Document.PdfPasswordException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:C1.Win.C1Document.PdfPasswordException" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1PdfDocumentSource.LoadFromFile(System.String)">
      <summary>ファイルからドキュメントをロードします。</summary>
      <param name="fileName">ソースファイル。</param>
    </member>
    <member name="P:C1.Win.C1Document.C1PdfDocumentSource.Stream">
      <summary>
        PDF コンテンツを含む
        <see cref="P:C1.Win.C1Document.C1PdfDocumentSource.Stream" />オブジェクトを取得または設定します。
        このプロパティに新しい値を割り当てると、
        <see cref="P:C1.Win.C1Document.C1PdfDocumentSource.DocumentLocation" />が null にリセットされます。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.DrawAttrs.Default">
      <summary>
        透明な
        <see cref="P:C1.Win.C1Document.DrawAttrs.FillColor" />を持つデフォルトの
        <see cref="T:C1.Win.C1Document.DrawAttrs" />インスタンスを取得します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.DrawAttrs.Whiten">
      <summary>
        白色の
        <see cref="P:C1.Win.C1Document.DrawAttrs.FillColor" />を持つ
        <see cref="T:C1.Win.C1Document.DrawAttrs" />インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.DrawAttrs.FillColor">
      <summary>ページのコンテンツを描画する前に、ページの塗りつぶしに使用する色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextRange.DWFontFamilyName">
      <summary>
        DirectWrite フォントファミリ名を取得します。
        これは、DW.FontFamily を取得するために DW.FontCollection.FindFamilyName(...) メソッドで使用された名前です。
        <see cref="P:C1.Win.C1Document.Util.IC1TextRange.GdiFontName" />のコメントを参照してください。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextRange.DWFontStyle">
      <summary>
        DirectWrite フォントスタイルを取得します。
        これは、DW.Font を取得するために DW.FontFamily.GetFirstMatchingFont(...) メソッドで使用された値です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextRange.DWFontWeight">
      <summary>
        DirectWrite フォントウェイトを取得します。
        これは、DW.Font を取得するために DW.FontFamily.GetFirstMatchingFont(...) メソッドで使用された値です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextRange.DWFontStretch">
      <summary>
        DirectWrite フォントストレッチを取得します。
        これは、DW.Font を取得するために DW.FontFamily.GetFirstMatchingFont(...) メソッドで使用された値です。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextRange.GdiFontName">
      <summary>
        GDI フォント名を取得します。
        GDI フォントハンドルを取得するには、この名前を使用する必要があります。
        たとえば、"Arial Narrow" フォントです。
        DirectWrite では、これが "Arial" フォントファミリと Condenced FontStretch に変換されます。
        GDI では、これを "Arial Narrow" フォントで作成する必要があります。
        GDI フォントシステムでは FontStretch は使用されません。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Util.IC1TextRange.GdiFontStyle">
      <summary>
        GDI フォントスタイルを取得します。
        GDI フォントハンドルを取得するには、このスタイルを使用する必要があります。
        <see cref="P:C1.Win.C1Document.Util.IC1TextRange.GdiFontName" />のコメントを参照してください。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1TextLayout.ClearTextRanges">
      <summary>
        <see cref="F:C1.Win.C1Document.Util.C1TextLayout.TextRanges" />コレクションをクリアします。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1LinkTargetBase.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:C1.Win.C1Document.C1LinkTargetBase.GetHashCode">
      <inheritdoc />
    </member>
    <member name="P:C1.Win.C1Document.C1LinkTargetBase.DocumentAction">
      <summary>
        このリンクで移動するときに実行するアクションを定義する
        <see cref="T:C1.Win.C1Document.C1DocumentAction" />オブジェクトを取得します。
        null の場合があります。その場合、
        <see cref="T:C1.Win.C1Document.C1LinkTargetBase" />は現在のドキュメントを変更しません。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1LinkTarget.#ctor(C1.Win.C1Document.C1DocumentAction,System.String)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1LinkTarget" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="documentAction">
        実行する
        <see cref="T:C1.Win.C1Document.C1DocumentAction" />オブジェクト。
      </param>
      <param name="bookmark">ドキュメント内のブックマークを定義する文字列。</param>
    </member>
    <member name="M:C1.Win.C1Document.C1LinkTarget.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:C1.Win.C1Document.C1LinkTarget.GetHashCode">
      <inheritdoc />
    </member>
    <member name="P:C1.Win.C1Document.C1LinkTarget.DocumentAction">
      <inheritdoc />
    </member>
    <member name="T:C1.Win.C1Document.C1LinkTargetPage">
      <summary>ページインデックスとページ内の領域を使用して、別のドキュメントまたは同じドキュメント内の場所へのリンクを定義します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1LinkTargetPage.#ctor(C1.Win.C1Document.C1DocumentAction,System.Int32,C1.Win.Interop.Rect)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1LinkTarget" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="documentAction">
        実行する
        <see cref="T:C1.Win.C1Document.C1DocumentAction" />オブジェクト。
      </param>
      <param name="pageIndex">ドキュメント内のページのインデックス。</param>
      <param name="pageBounds">ページ内の領域。</param>
    </member>
    <member name="M:C1.Win.C1Document.C1LinkTargetPage.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:C1.Win.C1Document.C1LinkTargetPage.GetHashCode">
      <inheritdoc />
    </member>
    <member name="P:C1.Win.C1Document.C1LinkTargetPage.DocumentAction">
      <inheritdoc />
    </member>
    <member name="P:C1.Win.C1Document.C1LinkTargetPage.PageIndex">
      <summary>ドキュメント内のページのインデックスを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.C1LinkTargetPage.PageBounds">
      <summary>ページ上の領域を取得します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1TextBlockCoords.GetCaretBefore">
      <summary>
        テキストブロックの前のカレット位置を定義する
        <see cref="T:C1.Win.C1Document.C1CaretCoords" />を返します。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.C1TextBlockCoords.GetCaretAfter">
      <summary>
        テキストブロックの後のカレット位置を定義する
        <see cref="T:C1.Win.C1Document.C1CaretCoords" />を返します。
      </summary>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Document.C1DocumentAction">
      <summary>
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />によって実行できるアクションを表し、その内容を変更します。
        <see cref="M:C1.Win.C1Document.C1DocumentSource.ExecuteAction(C1.Win.C1Document.C1DocumentAction)" />を参照してください。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.ExecuteActionCompletedEventArgs">
      <summary>
        <see cref="E:C1.Win.C1Document.C1DocumentSource.ExecuteActionCompleted" />イベントのデータを提供します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.ExecuteActionCompletedEventArgs.#ctor(C1.Win.C1Document.C1DocumentAction,C1.Win.C1Document.C1BookmarkPosition,System.Exception,System.Boolean)">
      <summary>
        <see cref="T:C1.Win.C1Document.ExecuteActionCompletedEventArgs" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="action">
        非同期操作で実行されるアクションを定義する
        <see cref="T:C1.Win.C1Document.C1DocumentAction" />オブジェクト。
      </param>
      <param name="position">
        表示される生成済みドキュメント内の位置を定義する
        <see cref="T:C1.Win.C1Document.C1BookmarkPosition" />オブジェクト。
      </param>
      <param name="error">非同期操作中に発生したエラー。</param>
      <param name="cancelled">非同期操作がキャンセルされたかどうかを示す値。</param>
    </member>
    <member name="P:C1.Win.C1Document.ExecuteActionCompletedEventArgs.Position">
      <summary>
        表示される生成済みドキュメント内の位置を定義する
        <see cref="T:C1.Win.C1Document.C1BookmarkPosition" />を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.ExecuteActionCompletedEventArgs.Action">
      <summary>
        非同期操作で実行されるアクションを定義する
        <see cref="T:C1.Win.C1Document.C1DocumentAction" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.ExecuteAction(C1.Win.C1Document.C1DocumentAction)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1DocumentAction" />オブジェクトで指定されるアクションを実行します。
      </summary>
      <param name="action">
        実行するアクションを定義する
        <see cref="T:C1.Win.C1Document.C1DocumentAction" />。
      </param>
      <returns>
        ドキュメントを開く位置を定義する
        <see cref="T:C1.Win.C1Document.C1BookmarkPosition" />オブジェクトを返します。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1DocumentSource.ExecuteActionAsync(C1.Win.C1Document.C1DocumentAction)">
      <summary>
        <see cref="M:C1.Win.C1Document.C1DocumentSource.ExecuteAction(C1.Win.C1Document.C1DocumentAction)" />メソッドの非ブロック（非同期）バージョンです。
      </summary>
      <param name="action">
        実行するアクションを定義する
        <see cref="T:C1.Win.C1Document.C1DocumentAction" />。
      </param>
      <returns>非同期の値オブジェクト。</returns>
    </member>
    <member name="M:C1.Win.C1Document.C1PdfDocumentSource.#ctor(System.ComponentModel.IContainer)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1PdfDocumentSource" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="container"></param>
    </member>
    <member name="M:C1.Win.C1Document.C1PdfDocumentSource.ShouldSerializeDocumentLocation">
      <summary>
        <see cref="P:C1.Win.C1Document.C1PdfDocumentSource.DocumentLocation" />プロパティを保存するかどうかを示します。
      </summary>
      <returns>プロパティ値のデフォルトから変更されている場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.Win.C1Document.C1PdfDocumentSource.ResetDocumentLocation">
      <summary>
        <see cref="P:C1.Win.C1Document.C1PdfDocumentSource.DocumentLocation" />プロパティの値をデフォルト値にリセットします。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.SSRSReportLocationBase.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:C1.Win.C1Document.SSRSReportLocationBase.GetHashCode">
      <inheritdoc />
    </member>
    <member name="T:C1.Win.C1Document.SSRSOpenReportAction">
      <summary>
        <see cref="T:C1.Win.C1Document.SSRSReportLocationBase" />で指定される場所から SSRS レポートを開きます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.SSRSOpenReportAction.#ctor(C1.Win.C1Document.SSRSReportLocationBase)">
      <summary>
        <see cref="T:C1.Win.C1Document.SSRSOpenReportAction" />オブジェクトの新しいインスタンスを初期化します。
      </summary>
      <param name="location">
        SSRS レポートの場所を定義する
        <see cref="T:C1.Win.C1Document.SSRSOpenReportAction" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.SSRSOpenReportAction.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:C1.Win.C1Document.SSRSOpenReportAction.GetHashCode">
      <inheritdoc />
    </member>
    <member name="P:C1.Win.C1Document.SSRSOpenReportAction.Location">
      <summary>
        開く SSRS レポートの場所を定義する
        <see cref="T:C1.Win.C1Document.SSRSReportLocationBase" />を取得します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.RenderPdf.Dispose(System.Boolean)">
      <summary>マネージリソースとアンマネージリソースに対してクリーンアップ操作を実行します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.RenderPdf.Dispose">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.XmlNodeWrapperBase">
      <summary>
        内部使用。
        <see cref="T:System.Xml.Linq.XElement" />と
        <see cref="T:System.Xml.XmlNode" />を同じように使用するためのオブジェクトモデルを提供する基本クラスです。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.XmlNodeWrapperBase.SelectSingleNode(System.String)">
      <summary>
        <see cref="M:System.Xml.XmlNode.SelectSingleNode(System.String)" />と同じ。
      </summary>
      <param name="path"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.XmlNodeWrapperBase.SelectNodes(System.String)">
      <summary>
        <see cref="M:System.Xml.XmlNode.SelectNodes(System.String)" />と同じ。
      </summary>
      <param name="path"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.XmlNodeWrapperBase.GetFirstChild">
      <summary>
        <see cref="P:System.Xml.XmlNode.FirstChild" />と同じ。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.XmlNodeWrapperBase.GetNextSibling">
      <summary>
        <see cref="P:System.Xml.XmlNode.NextSibling" />と同じ。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.XmlNodeWrapperBase.GetAttr(System.String)">
      <summary>
        指定された名前を持つ属性の値を返します。
        属性が見つからない場合は null を返します。
      </summary>
      <param name="name"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.XmlNodeWrapperBase.GetInnerText">
      <summary>
        <see cref="P:System.Xml.XmlNode.InnerText" />と同じ。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.XmlNodeWrapperBase.GetName">
      <summary>ノードの名前を返します。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.XmlNodeWrapperBase.GetParent">
      <summary>親ノードまたは null を返します。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.XmlNodeWrapperBase.GetOwnerDocument">
      <summary>
        このノードを所有する
        <see cref="T:C1.Win.C1Document.Serialization.XmlDocumentWrapperBase" />を返します。
      </summary>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.XmlNodeWrapper">
      <summary>
        内部使用。
        <see cref="T:System.Xml.XmlNode" />のラッパー。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.XContainerWrapper">
      <summary>
        内部使用。
        <see cref="T:System.Xml.Linq.XContainer" />のラッパー。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.XNodeWrapper">
      <summary>
        内部使用。
        <see cref="T:System.Xml.Linq.XElement" />のラッパー。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.XmlDocumentWrapperBase">
      <summary>
        内部使用。
        <see cref="T:System.Xml.Linq.XDocument" />と
        <see cref="T:System.Xml.XmlDocument" />を操作する類似のオブジェクトモデルを宣言する基本クラスです。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.XmlDocumentWrapper">
      <summary>
        内部使用。
        <see cref="T:System.Xml.XmlDocument" />のラッパー。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.XmlDocumentWrapper.FromXmlDocument(System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlDocument" />から
        <see cref="T:C1.Win.C1Document.Serialization.XmlDocumentWrapper" />を作成します。
      </summary>
      <param name="doc"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.XmlDocumentWrapper.FromFile(System.String)">
      <summary>
        ファイルから
        <see cref="T:C1.Win.C1Document.Serialization.XmlDocumentWrapper" />を作成します。
      </summary>
      <param name="fileName"></param>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.XDocumentWrapper">
      <summary>
        内部使用。
        <see cref="T:System.Xml.Linq.XDocument" />のラッパー。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.XDocumentWrapper.FromBase64(System.String)">
      <summary>
        内部使用。
        XML レポート定義を含む Base64 エンコード文字列から
        <see cref="T:C1.Win.C1Document.Serialization.XDocumentWrapper" />を作成します。
      </summary>
      <param name="base64"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.XDocumentWrapper.FromString(System.String)">
      <summary>
        内部使用。
        XML レポート定義を含む文字列から
        <see cref="T:C1.Win.C1Document.Serialization.XDocumentWrapper" />を作成します。
      </summary>
      <param name="s"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.XDocumentWrapper.FromStream(System.IO.Stream)">
      <summary>
        内部使用。
        <see cref="T:System.IO.Stream" />から
        <see cref="T:C1.Win.C1Document.Serialization.XDocumentWrapper" />を作成します。
        メモ：ストリームは、このメソッド呼び出し後に破棄できます。
      </summary>
      <param name="stream"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.XDocumentWrapper.FromFile(System.String)">
      <summary>
        内部使用。
        ファイルから
        <see cref="T:C1.Win.C1Document.Serialization.XDocumentWrapper" />を作成します。
      </summary>
      <param name="fileName"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.XDocumentWrapper.FromXDocument(System.Xml.Linq.XDocument)">
      <summary>
        <see cref="T:System.Xml.Linq.XDocument" />から
        <see cref="T:C1.Win.C1Document.Serialization.XDocumentWrapper" />を作成します。
      </summary>
      <param name="doc"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.IC1Serializable.Serialize(C1.Win.C1Document.Serialization.C1WriterBase)">
      <summary>内部使用。</summary>
      <param name="writer"></param>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.IC1Serializable.Deserialize(C1.Win.C1Document.Serialization.C1ReaderBase)">
      <summary>内部使用。</summary>
      <param name="reader"></param>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.IC1Serializable.ReadProp(C1.Win.C1Document.Serialization.C1ReaderBase)">
      <summary>内部使用。</summary>
      <param name="reader"></param>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.IC1SerializableCollection.Add(System.Object)">
      <summary>内部使用。</summary>
      <param name="obj"></param>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.IC1PropsTable.Serialize(C1.Win.C1Document.Serialization.C1WriterBase,C1.Win.C1Document.Serialization.IC1Serializable)">
      <summary>内部使用。</summary>
      <param name="writer"></param>
      <param name="obj"></param>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.IC1PropsTable.Deserialize(C1.Win.C1Document.Serialization.C1ReaderBase,C1.Win.C1Document.Serialization.IC1Serializable)">
      <summary>内部使用。</summary>
      <param name="reader"></param>
      <param name="obj"></param>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1PropsTable`1.Serialize(C1.Win.C1Document.Serialization.C1WriterBase,`0)">
      <summary>内部使用。</summary>
      <param name="writer"></param>
      <param name="obj"></param>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1PropsTable`1.Deserialize(C1.Win.C1Document.Serialization.C1ReaderBase,`0)">
      <summary>内部使用。</summary>
      <param name="reader"></param>
      <param name="obj"></param>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.C1PropsTable`1.WriteDelegate">
      <summary>内部使用。</summary>
      <param name="writer"></param>
      <param name="obj"></param>
    </member>
    <member name="T:C1.Win.C1Document.Serialization.C1PropsTable`1.ReadDelegate">
      <summary>内部使用。</summary>
      <param name="reader"></param>
      <param name="obj"></param>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1Serializer.LoadAssembly(System.String)">
      <summary>内部使用。</summary>
      <param name="assemblyName"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1Serializer.InitSerialize">
      <summary>内部使用。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1Serializer.InitDeserialize">
      <summary>内部使用。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1Serializer.Serialize(System.Xml.XmlWriter,C1.Win.C1Document.Serialization.IC1Serializable,System.String)">
      <summary>内部使用。</summary>
      <param name="xmlWriter"></param>
      <param name="rootObject"></param>
      <param name="name"></param>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1Serializer.Deserialize(C1.Win.C1Document.Serialization.XmlNodeWrapperBase,C1.Win.C1Document.Serialization.IC1Serializable)">
      <summary>内部使用。</summary>
      <param name="node"></param>
      <param name="rootObject"></param>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1Serializer.SizeToString(C1.Win.Interop.Size)">
      <summary>
        <see cref="T:C1.Win.Interop.Size" />構造体をシリアライズで使用される文字列に変換します。
      </summary>
      <param name="v"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1Serializer.TrySizeFromString(System.String,C1.Win.Interop.Size@)">
      <summary>
        文字列を
        <see cref="T:C1.Win.Interop.Size" />構造体に変換します。
      </summary>
      <param name="s">変換する文字列。</param>
      <param name="result">
        出力：作成された
        <see cref="!:Size" />構造体。
      </param>
      <returns>
        エラーがない場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.#ctor(C1.Win.C1Document.Serialization.C1Serializer,C1.Win.C1Document.Serialization.XmlNodeWrapperBase)">
      <summary>内部使用。</summary>
      <param name="serializer"></param>
      <param name="xmlNode"></param>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadString">
      <summary>内部使用。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadBytes">
      <summary>内部使用。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadImage">
      <summary>内部使用。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadInt">
      <summary>内部使用。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadChar">
      <summary>内部使用。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadLong">
      <summary>内部使用。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadEnum``1">
      <summary>内部使用。</summary>
      <typeparam name="T"></typeparam>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadNullableEnum``1">
      <summary>内部使用。</summary>
      <typeparam name="T"></typeparam>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadBool">
      <summary>内部使用。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadNullableBool">
      <summary>内部使用。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadDouble">
      <summary>内部使用。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadNullableDouble">
      <summary>内部使用。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadFloat">
      <summary>内部使用。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadNullableColor">
      <summary>内部使用。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadColor">
      <summary>内部使用。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadCultureInfo">
      <summary>内部使用。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadByte">
      <summary>内部使用。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadDateTime">
      <summary>内部使用。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadProp">
      <summary>内部使用。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadObject(System.Object,System.Type,System.String,C1.Win.C1Document.Serialization.ReadUnknownObjectDelegate)">
      <summary>内部使用。</summary>
      <param name="v"></param>
      <param name="type"></param>
      <param name="fallbackTypeName"></param>
      <param name="readUnknownObject"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadCollection(System.Collections.IList,System.Type,C1.Win.C1Document.Serialization.ReadUnknownObjectDelegate)">
      <summary>内部使用。</summary>
      <param name="v"></param>
      <param name="type"></param>
      <param name="readUnknownItem"></param>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Document.Serialization.C1XmlNodeReader.FullCurrentNodeName">
      <summary>
        内部使用。
        「/」で区切られた親ノードの名前を含めて、現在読み取られているノードの名前を返します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Serialization.C1XmlNodeReader.CurrentXmlElement">
      <summary>
        内部使用。
        現在読み取られている
        <see cref="T:C1.Win.C1Document.Serialization.XmlNodeWrapperBase" />を返します。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.CapStyle">
      <summary>
        内部使用。
        参照：https://msdn.microsoft.com/en-us/library/windows/desktop/dd368079(v=vs.85).aspx
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.LineJoin">
      <summary>
        内部使用。
        参照：https://msdn.microsoft.com/en-us/library/windows/desktop/dd368130(v=vs.85).aspx
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.PenStyle">
      <summary>
        内部使用。
        ペンの属性を定義します。
        類似する動作：https://msdn.microsoft.com/en-us/library/windows/desktop/dd368164(v=vs.85).aspx
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.EmbeddedFontFormat">
      <summary>
        内部使用。
        埋め込みフォントの形式です。
      </summary>
    </member>
    <member name="T:C1.Win.C1Document.Util.IEmbeddedFont">
      <summary>
        内部使用。
        埋め込みフォントの属性を定義します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1Graphics.DrawPath(C1.Win.C1Document.Util.IPath,System.Drawing.Color,System.Double,C1.Win.C1Document.Util.PenStyle)">
      <summary>
        <see cref="T:C1.Win.C1Document.Util.IPath" />を描画します。
      </summary>
      <param name="path">
        描画するパスを表す、
        <see cref="T:C1.Win.C1Document.Util.IPath" />インタフェースをサポートするオブジェクト。
      </param>
      <param name="color">
        パスの色を表す
        <see cref="T:System.Drawing.Color" />構造体。
      </param>
      <param name="lineWidth">パスの描画に使用される線の幅（ピクセル単位）。</param>
      <param name="penStyle">ペンのスタイル。</param>
    </member>
    <member name="M:C1.Win.C1Document.C1LinkTargetBase.Encode">
      <summary>
        内部使用。
        この
        <see cref="T:C1.Win.C1Document.C1LinkTargetBase" />オブジェクトを文字列にエンコードします。
        <see cref="M:C1.Win.C1Document.C1LinkTargetBase.Parse(System.String)" />メソッドを使用してデコードします。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.C1LinkTargetBase.Parse(System.String)">
      <summary>
        内部使用。
        指定された文字列から
        <see cref="T:C1.Win.C1Document.C1LinkTargetBase" />オブジェクトを作成します。
        文字列が無効な形式の場合は null を返します。
      </summary>
      <param name="s"></param>
      <returns></returns>
    </member>
    <member name="T:C1.Win.C1Document.SSRSToggleItemAction">
      <summary>
        現在開いているレポート内の項目の表示/非表示を切り替えます。
        詳細については、ReportExecutionService.ToggleItem(string) を参照してください。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.SSRSToggleItemAction.#ctor(System.String)">
      <summary>
        <see cref="T:C1.Win.C1Document.SSRSToggleItemAction" />オブジェクトの新しいインスタンスを初期化します。
      </summary>
      <param name="toggleID">切り替える項目の ID。</param>
    </member>
    <member name="M:C1.Win.C1Document.SSRSToggleItemAction.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:C1.Win.C1Document.SSRSToggleItemAction.GetHashCode">
      <inheritdoc />
    </member>
    <member name="P:C1.Win.C1Document.SSRSToggleItemAction.ToggleID">
      <summary>切り替える項目の ID を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Document.SSRSSortAction">
      <summary>
        現在開いているレポートのソートを変更します。
        詳細については、ReportExecutionService.Sort(...) を参照してください。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.SSRSSortAction.#ctor(System.String,C1.Win.ImportServices.ReportExecution4.SortDirectionEnum)">
      <summary>
        <see cref="T:C1.Win.C1Document.SSRSSortAction" />オブジェクトの新しいインスタンスを初期化します。
      </summary>
      <param name="sortItemID">ソートするレポート項目の ID。</param>
      <param name="direction">ソート方向。</param>
    </member>
    <member name="M:C1.Win.C1Document.SSRSSortAction.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:C1.Win.C1Document.SSRSSortAction.GetHashCode">
      <inheritdoc />
    </member>
    <member name="P:C1.Win.C1Document.SSRSSortAction.SortItemID">
      <summary>ソートするレポート項目の ID を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Document.SSRSSortAction.Direction">
      <summary>ソートの方向を取得します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.XmlDocumentWrapper.FromString(System.String)">
      <summary>
        ストリームから
        <see cref="T:C1.Win.C1Document.Serialization.XmlDocumentWrapper" />を作成します。
      </summary>
      <param name="s"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.XmlDocumentWrapper.FromStream(System.IO.Stream)">
      <summary>
        ストリームから
        <see cref="T:C1.Win.C1Document.Serialization.XmlDocumentWrapper" />を作成します。
      </summary>
      <param name="stream"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1Serializer.Serialize(System.Xml.XmlWriter,C1.Win.C1Document.Serialization.IC1Serializable,System.String,C1.Win.C1Document.Serialization.C1TypeNameEncodingMode)">
      <summary>内部使用。</summary>
      <param name="xmlWriter"></param>
      <param name="rootObject"></param>
      <param name="name"></param>
      <param name="writeType"></param>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1Serializer.RectToString(C1.Win.Interop.Rect)">
      <summary>
        <see cref="T:C1.Win.Interop.Rect" />構造体をシリアライズで使用される文字列に変換します。
      </summary>
      <param name="v"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1Serializer.TryRectFromString(System.String,C1.Win.Interop.Rect@)">
      <summary>
        文字列を
        <see cref="T:C1.Win.Interop.Rect" />構造体に変換します。
      </summary>
      <param name="s">変換する文字列。</param>
      <param name="result">
        出力：作成された
        <see cref="T:C1.Win.Interop.Rect" />構造体。
      </param>
      <returns>
        エラーがない場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1DXExportGraphics.DrawText(C1.Win.Interop.Point,System.String,System.String,System.Single,C1.Win.C1Document.C1FontWeight,System.Boolean,C1.Win.C1Document.C1TextDecoration,System.Drawing.Color,System.Single[],System.Byte[],System.Boolean,System.Int32,System.Double)">
      <summary>単純なテキストランを描画します。</summary>
      <param name="pt">描画するテキストの開始点。</param>
      <param name="text">テキストラン。</param>
      <param name="fontName">フォント名を表す文字列。</param>
      <param name="fontSize">フォントサイズ（ポイント単位）。</param>
      <param name="weight">
        フォントウェイト。
        <see cref="T:C1.Win.C1Document.C1FontWeight" />を参照してください。
      </param>
      <param name="italic">斜体フラグ。</param>
      <param name="decor">
        テキスト装飾。
        <see cref="T:C1.Win.C1Document.C1TextDecoration" />を参照してください。
      </param>
      <param name="color">テキスト（前景）色。</param>
      <param name="advances">進行配列。各グリフの幅（ポイント単位）。</param>
      <param name="panose">フォント PANOSE（フォント識別子）。</param>
      <param name="vertical">絵文字フラグ付き垂直テキスト。</param>
      <param name="bidiLevel">右から左（Bi-di）テキストレベル（0 - Normal、1 - Rtl、2 - Inside Rtl）。</param>
      <param name="offset">テキストの右境界オフセット。デフォルトは 0。</param>
    </member>
    <member name="T:C1.Win.C1Document.SearchScope">
      <summary>検索範囲のテキストを指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.SearchScope.WholeDocument">
      <summary>ドキュメントの最後まで検索します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.SearchScope.FirstOccurrence">
      <summary>最初の一致が見つかるまで検索します。</summary>
    </member>
    <member name="F:C1.Win.C1Document.SearchScope.SinglePage">
      <summary>指定されたページ内でのみ検索します。</summary>
    </member>
    <member name="M:C1.Win.C1Document.C1TextSearchManager.#ctor(C1.Win.C1Document.C1DocumentSource)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1TextSearchManager" />の新しいインスタンスを初期化します。
      </summary>
      <param name="documentSource">
        検索を実行する
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.C1TextSearchManager.Dispose">
      <summary>
        <see cref="T:C1.Win.C1Document.C1TextSearchManager" />が使用するすべてのリソースを解放します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1TextSearchManager.Dispose(System.Boolean)">
      <summary>
        <see cref="T:C1.Win.C1Document.C1TextSearchManager" />によって使用されるアンマネージリソースを解放し、オプションでマネージリソースも解放します。
      </summary>
      <param name="disposing">
        マネージリソースとアンマネージリソースの両方を解放する場合は、true。
        アンマネージリソースだけを解放する場合は、false。
      </param>
    </member>
    <member name="M:C1.Win.C1Document.C1TextSearchManager.FindStart(System.Int32,C1.Win.C1Document.SearchScope,C1.Win.C1Document.C1FindTextParams)">
      <summary>ドキュメント内で最初に見つかるテキストを検索します。</summary>
      <param name="startPageIndex">検索する最初のページの 0 ベースのインデックス。</param>
      <param name="scope">検索の範囲。</param>
      <param name="findParams">テキスト検索パラメータ。</param>
      <returns>見つかったテキストの位置。</returns>
    </member>
    <member name="M:C1.Win.C1Document.C1TextSearchManager.FindStartAsyncEx(System.Int32,C1.Win.C1Document.SearchScope,C1.Win.C1Document.C1FindTextParams,System.Boolean)">
      <summary>
        <see cref="M:C1.Win.C1Document.C1TextSearchManager.FindStart(System.Int32,C1.Win.C1Document.SearchScope,C1.Win.C1Document.C1FindTextParams)" />メソッドの非ブロック（非同期）バージョンです。
      </summary>
      <param name="startPageIndex">検索する最初のページの 0 ベースのインデックス。</param>
      <param name="scope">検索の範囲。</param>
      <param name="findParams">テキスト検索パラメータ。</param>
      <param name="throwException">検索中にドキュメントのアクセスエラーが発生した場合に例外を生成するかどうか。</param>
      <returns>
        非同期操作を管理するために使用できる
        <see cref="!:IAsyncOperationWithProgress&lt;C1FoundPosition, double&gt;" />インタフェース。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1TextSearchManager.FindStartAsync(System.Int32,C1.Win.C1Document.SearchScope,C1.Win.C1Document.C1FindTextParams,System.Boolean)">
      <summary>
        <see cref="M:C1.Win.C1Document.C1TextSearchManager.FindStart(System.Int32,C1.Win.C1Document.SearchScope,C1.Win.C1Document.C1FindTextParams)" />メソッドの非ブロック（非同期）バージョンです。
      </summary>
      <param name="startPageIndex">検索する最初のページの 0 ベースのインデックス。</param>
      <param name="scope">検索の範囲。</param>
      <param name="findParams">テキスト検索パラメータ。</param>
      <param name="throwException">検索中にドキュメントのアクセスエラーが発生した場合に例外を生成するかどうか。</param>
      <returns>見つかったテキストの位置を表す非同期のオブジェクト。</returns>
    </member>
    <member name="M:C1.Win.C1Document.C1TextSearchManager.FindStartAsyncEx(System.Int32,System.Boolean,C1.Win.C1Document.C1FindTextParams,System.Boolean)">
      <summary>
        <see cref="M:C1.Win.C1Document.C1TextSearchManager.FindStart(System.Int32,System.Boolean,C1.Win.C1Document.C1FindTextParams)" />メソッドの非ブロック（非同期）バージョンです。
      </summary>
      <param name="startPageIndex">検索する最初のページの 0 ベースのインデックス。</param>
      <param name="wholeDocument">検索中にドキュメント全体をロードするか、最初に見つかったフラグメントまでをロードするかを示す値。</param>
      <param name="findParams">テキスト検索パラメータ。</param>
      <param name="throwException">検索中にドキュメントのアクセスエラーが発生した場合に例外を生成するかどうか。</param>
      <returns>
        非同期操作を管理するために使用できる
        <see cref="!:IAsyncOperationWithProgress&lt;C1FoundPosition, double&gt;" />インタフェース。
      </returns>
    </member>
    <member name="M:C1.Win.C1Document.C1TextSearchManager.HasFoundPositions">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.C1TextSearchManager" />の
        <see cref="P:C1.Win.C1Document.C1TextSearchManager.FoundPositions" />が空かどうかをチェックします。
      </summary>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Document.C1TextSearchManager.DocumentSource">
      <summary>
        この
        <see cref="T:C1.Win.C1Document.C1TextSearchManager" />がテキストを検索する
        <see cref="T:C1.Win.C1Document.C1DocumentSource" />を取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1TextSearchManager.Scope">
      <summary>
        テキストを検索する
        <see cref="T:C1.Win.C1Document.C1Document" />の範囲を指定します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1TextSearchManager.FoundPositions">
      <summary>
        見つかったテキスト位置を定義する
        <see cref="T:C1.Win.C1Document.C1FoundPosition" />オブジェクトのリストを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.C1DocumentSource.DefaultPrintOptions">
      <summary>
        <see cref="T:C1.Win.C1Document.C1DocumentSource" /> の印刷メソッドで使用される
        デフォルトの印刷オプションを定義する <see cref="T:C1.Win.C1Document.C1PrintOptions" /> オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.Win.C1Document.Export.XlsFilter.FontScaling">
      <summary>
        フォントのスケーリング値を取得または設定します。デフォルトはスケーリングなし（1.0）です。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Util.C1DXExportGraphics.DrawGlyphs(C1.Win.Interop.Point,C1.Util.DX.DirectWrite.GlyphRun,C1.Util.DX.DirectWrite.GlyphRunDescription,System.Drawing.Color,C1.Util.DX.DirectWrite.MeasuringMode,System.String)">
      <summary>
        グリフランを正確に描画します。
      </summary>
      <param name="pt">描画するグリフの開始点。</param>
      <param name="glyphRun">
        描画するグリフラン。<see cref="!:GlyphRun" /> を参照してください。
      </param>
      <param name="glyphRunDescription">
        描画するグリフランの説明。<see cref="!:GlyphRunDescription" /> を参照してください。
      </param>
      <param name="color">テキスト（前景）色。</param>
      <param name="measuringMode">
        測定モード。<see cref="!:MeasuringMode" /> を参照してください。
      </param>
      <param name="fontName">元のフォント名。</param>
    </member>
    <member name="T:C1.Win.C1Document.PageScaling">
      <summary>
        印刷時のページの拡大縮小方法を指定します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.PageScaling.FitToPaper">
      <summary>
        必要に応じて、用紙に合わせてページが拡大または縮小されます。
      </summary>
    </member>
    <member name="F:C1.Win.C1Document.PageScaling.FitToPrintableArea">
      <summary>
        必要に応じて、印刷可能なページ範囲に合わせてページが拡大または縮小されます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.C1PrintOptions.ToString">
      <inheritdoc />
    </member>
    <member name="P:C1.Win.C1Document.C1PrintOptions.PageScaling">
      <summary>
        印刷時にページが拡大縮小される方法を示す値を取得または設定します。
        <para>
          デフォルト値は、<see cref="F:C1.Win.C1Document.PageScaling.FitToPaper" /> です。
        </para>
      </summary>
    </member>
    <member name="M:C1.Win.C1Document.Serialization.C1XmlNodeReader.ReadDictionary(System.Collections.IDictionary,System.Type,C1.Win.C1Document.Serialization.ReadUnknownObjectDelegate)">
      <summary>
        内部使用。
      </summary>
      <param name="v"></param>
      <param name="type"></param>
      <param name="readUnknownItem"></param>
      <returns></returns>
    </member>
  </members>
</doc>