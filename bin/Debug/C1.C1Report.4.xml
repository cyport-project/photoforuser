<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>C1.C1Report.4</name>
  </assembly>
  <members>
    <member name="T:C1.C1Excel.Strings">
      <summary>デザイナによって使用される UI 文字列を含む静的クラス。</summary>
    </member>
    <member name="T:C1.C1Pdf.Strings">
      <summary>デザイナによって使用される UI 文字列を含む静的クラス。</summary>
    </member>
    <member name="T:C1.C1Preview.C1Anchor">
      <summary>ドキュメント内のアンカーを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1Anchor.#ctor">
      <summary>C1Anchor クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1Anchor.#ctor(System.String)">
      <summary>C1Anchor クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">ドキュメント内で一意のアンカーの名前。</param>
    </member>
    <member name="M:C1.C1Preview.C1Anchor.#ctor(System.String,System.String)">
      <summary>C1Anchor クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">ドキュメント内で一意のアンカーの名前。</param>
      <param name="description">アンカーの説明。</param>
    </member>
    <member name="M:C1.C1Preview.C1Anchor.#ctor(System.String,System.String,System.Object)">
      <summary>C1Anchor クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">ドキュメント内で一意のアンカーの名前。</param>
      <param name="description">アンカーの説明。</param>
      <param name="userData">アンカーに関連付けられた任意のデータ。</param>
    </member>
    <member name="P:C1.C1Preview.C1Anchor.Name">
      <summary>ドキュメント内で一意のアンカーの名前を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1Anchor.Description">
      <summary>アンカーの説明を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1Anchor.UserData">
      <summary>アンカーに関連付けられた任意のデータを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.C1AnchorText">
      <summary>テキストオブジェクト内のアンカーを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1AnchorText.#ctor">
      <summary>C1AnchorText クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1AnchorText.#ctor(System.String)">
      <summary>C1AnchorText クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">ドキュメント内で一意のアンカーの名前。</param>
    </member>
    <member name="M:C1.C1Preview.C1AnchorText.#ctor(System.String,System.String)">
      <summary>C1AnchorText クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">ドキュメント内で一意のアンカーの名前。</param>
      <param name="description">アンカーの説明。</param>
    </member>
    <member name="M:C1.C1Preview.C1AnchorText.#ctor(System.String,System.String,System.Object)">
      <summary>C1AnchorText クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">ドキュメント内で一意のアンカーの名前。</param>
      <param name="description">アンカーの説明。</param>
      <param name="userData">アンカーに関連付けられた任意のデータ。</param>
    </member>
    <member name="M:C1.C1Preview.C1AnchorText.#ctor(System.String,System.Int32)">
      <summary>C1AnchorText クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">ドキュメント内で一意のアンカーの名前。</param>
      <param name="position">テキスト内のアンカーの位置。</param>
    </member>
    <member name="M:C1.C1Preview.C1AnchorText.#ctor(System.String,System.String,System.Int32)">
      <summary>C1AnchorText クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">ドキュメント内で一意のアンカーの名前。</param>
      <param name="description">アンカーの説明。</param>
      <param name="position">テキスト内のアンカーの位置。</param>
    </member>
    <member name="M:C1.C1Preview.C1AnchorText.#ctor(System.String,System.String,System.Object,System.Int32)">
      <summary>C1AnchorText クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">ドキュメント内で一意のアンカーの名前。</param>
      <param name="description">アンカーの説明。</param>
      <param name="userData">アンカーに関連付けられた任意のデータ。</param>
      <param name="position">テキスト内のアンカーの位置。</param>
    </member>
    <member name="P:C1.C1Preview.C1AnchorText.Position">
      <summary>テキスト内のアンカーの位置を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.C1AnchorCollection">
      <summary>
        <see cref="T:C1.C1Preview.C1Anchor" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1AnchorCollection.Add(C1.C1Preview.C1Anchor)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="anchor">追加するオブジェクト。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.C1AnchorCollection.Insert(System.Int32,C1.C1Preview.C1Anchor)">
      <summary>
        <see cref="T:C1.C1Preview.C1Anchor" />を現在のコレクションに挿入します。
      </summary>
      <param name="index">アンカーの挿入位置。</param>
      <param name="anchor">挿入するアンカー。</param>
    </member>
    <member name="M:C1.C1Preview.C1AnchorCollection.Remove(C1.C1Preview.C1Anchor)">
      <summary>
        <see cref="T:C1.C1Preview.C1Anchor" />を現在のコレクションから削除します。
      </summary>
      <param name="anchor">削除するアンカー。</param>
    </member>
    <member name="M:C1.C1Preview.C1AnchorCollection.IndexOf(C1.C1Preview.C1Anchor)">
      <summary>
        現在のコレクション内の
        <see cref="T:C1.C1Preview.C1Anchor" />のインデックスを返します。
      </summary>
      <param name="anchor">検索するアンカー。</param>
      <returns>現在のコレクション内の指定したアンカーのインデックス、または -1。</returns>
    </member>
    <member name="M:C1.C1Preview.C1AnchorCollection.FindByName(System.String)">
      <summary>現在のコレクション内の指定した名前を持つアンカーを検索します。</summary>
      <param name="anchorName">検索する名前。</param>
      <returns>指定した名前を持つアンカー。アンカーが見つからなかった場合は null。</returns>
    </member>
    <member name="P:C1.C1Preview.C1AnchorCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得または設定します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.IC1FormatVersionProvider">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.C1FormatVersion">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.C1FormatVersion.TypeConverter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.TypeConverterBase">
      <summary>文字列との間で双方向変換できるタイプコンバータの抽象基本クラス。</summary>
    </member>
    <member name="M:C1.C1Preview.TypeConverterBase.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>文字列をオブジェクトに変換します。</summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="str">変換する文字列。</param>
      <returns>変換されたオブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.TypeConverterBase.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>オブジェクトを文字列に変換します。</summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="o">変換するオブジェクト。</param>
      <returns>変換された文字列。</returns>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkStateEnum">
      <summary>ハイパーリンクの状態を表します。</summary>
    </member>
    <member name="F:C1.C1Preview.C1HyperlinkStateEnum.Normal">
      <summary>ハイパーリンクはまだ表示されていません。</summary>
    </member>
    <member name="F:C1.C1Preview.C1HyperlinkStateEnum.Visited">
      <summary>ハイパーリンクは表示済みです。</summary>
    </member>
    <member name="F:C1.C1Preview.C1HyperlinkStateEnum.Hover">
      <summary>ハイパーリンクにマウスポインタが置かれています。</summary>
    </member>
    <member name="F:C1.C1Preview.C1HyperlinkStateEnum.Active">
      <summary>ハイパーリンクがクリックされた直後で、まだ表示されていません。</summary>
    </member>
    <member name="T:C1.C1Preview.C1Hyperlink">
      <summary>ハイパーリンクを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1Hyperlink.#ctor">
      <summary>C1Hyperlink クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1Hyperlink.#ctor(C1.C1Preview.RenderObject)">
      <summary>C1Hyperlink クラスの新しいインスタンスを初期化します。</summary>
      <param name="renderObject">リンクターゲットとなる描画オブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.C1Hyperlink.#ctor(C1.C1Preview.ParagraphObject)">
      <summary>C1Hyperlink クラスの新しいインスタンスを初期化します。</summary>
      <param name="paragraphObject">リンクターゲットとなる段落オブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.C1Hyperlink.#ctor(C1.C1Preview.C1LinkTarget)">
      <summary>C1Hyperlink クラスの新しいインスタンスを初期化します。</summary>
      <param name="linkTarget">ハイパーリンクのリンクターゲット。</param>
    </member>
    <member name="M:C1.C1Preview.C1Hyperlink.#ctor(C1.C1Preview.C1LinkTarget,System.String)">
      <summary>C1Hyperlink クラスの新しいインスタンスを初期化します。</summary>
      <param name="linkTarget">ハイパーリンクのリンクターゲット。</param>
      <param name="statusText">ステータス行に表示するテキスト。</param>
    </member>
    <member name="M:C1.C1Preview.C1Hyperlink.#ctor(C1.C1Preview.C1LinkTarget,System.String,System.Object)">
      <summary>C1Hyperlink クラスの新しいインスタンスを初期化します。</summary>
      <param name="linkTarget">ハイパーリンクのリンクターゲット。</param>
      <param name="statusText">ステータス行に表示するテキスト。</param>
      <param name="userData">ハイパーリンクに関連付けられた任意のデータ。</param>
    </member>
    <member name="M:C1.C1Preview.C1Hyperlink.#ctor(System.String)">
      <summary>C1Hyperlink クラスの新しいインスタンスを初期化します。</summary>
      <param name="anchorName">アンカーの名前。</param>
    </member>
    <member name="M:C1.C1Preview.C1Hyperlink.AssignFrom(C1.C1Preview.C1Hyperlink)">
      <summary>指定したオブジェクトのプロパティを現在のオブジェクトにコピーします。</summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.C1Hyperlink.Clone">
      <summary>現在のオブジェクトのコピーを作成します。</summary>
      <returns>新しく作成されたオブジェクト。</returns>
    </member>
    <member name="P:C1.C1Preview.C1Hyperlink.StatusText">
      <summary>ステータス行に表示するテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1Hyperlink.LinkTarget">
      <summary>ハイパーリンクのリンクターゲットを取得または設定します。</summary>
      <remarks>
        <para>リンクターゲットは、次のいずれかのクラスのオブジェクトによって記述されます。</para>
        <list type="bullet">
          <item>
            <term>C1LinkTargetAnchor</term>
            <description>現在のドキュメント内のアンカー。</description>
          </item>
          <item>
            <term>C1LinkTargetExternalAnchor</term>
            <description>外部の C1Preview ドキュメント内のアンカー。</description>
          </item>
          <item>
            <term>C1LinkTargetFile</term>
            <description>外部ドキュメント、プログラム、または URL。リンクを起動するために ShellExecute API が使用されます。</description>
          </item>
          <item>
            <term>C1LinkTargetPage</term>
            <description>現在のドキュメント内のページ。</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1Hyperlink.UserData">
      <summary>ハイパーリンクに関連付けられた任意のデータを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1Hyperlink.State">
      <summary>ハイパーリンクのステータスを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1Hyperlink.PdfURL">
      <summary>ハイパーリンクが指す URL を Adobe PDF 形式で取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTarget">
      <summary>リンクターゲットの抽象基本クラス。</summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTarget.#ctor">
      <summary>C1LinkTarget クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTarget.GetPageNo(C1.C1Preview.C1Page,C1.C1Preview.C1PrintDocument)">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.C1LinkTarget" />によって指されているページの１基準の番号を取得します。 この時点でページが解決できない場合（ドキュメントがまだ生成されていない場合など）、 このメソッドは０を返します。
      </summary>
      <param name="currentPage">
        現在の
        <see cref="T:C1.C1Preview.C1LinkTarget" />オブジェクトを含むページ。
        <see cref="T:C1.C1Preview.C1LinkTarget" />が
        <see cref="T:C1.C1Preview.OutlineNode" />に関連付けられている場合は、
        <b>null</b>を指定することができます。
      </param>
      <param name="document">
        現在の
        <see cref="T:C1.C1Preview.C1LinkTarget" />を含む
        <see cref="T:C1.C1Preview.C1PrintDocument" />。
      </param>
      <returns>ターゲットのページ番号。</returns>
    </member>
    <member name="M:C1.C1Preview.C1LinkTarget.GetDocumentLocation(System.Int32,C1.C1Preview.C1PrintDocument)">
      <summary>
        現在のリンクターゲットによって指されている
        <see cref="T:C1.C1Preview.DocumentLocation" />を返します。
        <para>位置を解決できなかった場合（ドキュメントがまだ生成されていない場合など）や、 リンクターゲットがドキュメント外部の場所（URL や外部ドキュメントなど）を指している場合、 このメソッドは null を返します。</para>
      </summary>
      <param name="currentPageIndex">現在のリンクターゲットを含むページのインデックス（ゼロ基準）。 これは、相対ターゲット（前のページなど）に使用され、現在のコンテキストに現在のページがない場合や、 リンクターゲットが絶対指定の場合は -1 になります。</param>
      <param name="document">現在のリンクターゲットを含むドキュメント。</param>
      <returns>
        ターゲット位置を含む
        <see cref="T:C1.C1Preview.DocumentLocation" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1LinkTarget.GetDocumentLocation(System.Int32,C1.C1Preview.C1MultiDocument)">
      <summary>
        現在のリンクターゲットによって指されている
        <see cref="T:C1.C1Preview.DocumentLocation" />を返します。
        <para>位置を解決できなかった場合（ドキュメントがまだ生成されていない場合など）や、 リンクターゲットがドキュメント外部の場所（URL や外部ドキュメントなど）を指している場合、 このメソッドは null を返します。</para>
      </summary>
      <param name="currentPageIndex">現在のリンクターゲットを含むページのインデックス（ゼロ基準）。 これは、相対ターゲット（前のページなど）に使用され、 現在のコンテキストに現在のページがない場合や、リンクターゲットが絶対指定の場合は -1 になります。</param>
      <param name="document">現在のリンクターゲットを含むドキュメント。</param>
      <returns>
        ターゲット位置を含む
        <see cref="T:C1.C1Preview.DocumentLocation" />。
      </returns>
    </member>
    <member name="P:C1.C1Preview.C1LinkTarget.URL">
      <summary>URL を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTarget.PdfURL">
      <summary>URL を Adobe PDF 形式で取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTargetUser">
      <summary>コードで定義した処理を実行するためのリンクターゲットを定義します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetUser.#ctor">
      <summary>C1LinkTargetUser クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTargetAnchor">
      <summary>ドキュメント内のアンカーへのリンクターゲットを定義します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetAnchor.#ctor">
      <summary>C1LinkTargetAnchor クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetAnchor.#ctor(System.String)">
      <summary>C1LinkTargetAnchor クラスの新しいインスタンスを初期化します。</summary>
      <param name="anchorName">アンカーの名前。</param>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetAnchor.AnchorName">
      <summary>アンカーの名前を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetAnchor.URL">
      <summary>URL を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetAnchor.PdfURL">
      <summary>URL を Adobe PDF 形式で取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTargetExternalAnchor">
      <summary>外部 C1Preview ドキュメント内のアンカーへのリンクターゲットを定義します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetExternalAnchor.#ctor">
      <summary>C1LinkTargetExternalAnchor クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetExternalAnchor.#ctor(System.String,System.String)">
      <summary>C1LinkTargetAnchor クラスの新しいインスタンスを初期化します。</summary>
      <param name="documentFileName">外部 C1Preview ドキュメントのファイル名。</param>
      <param name="anchorName">アンカーの名前。</param>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetExternalAnchor.DocumentFileName">
      <summary>外部 C1Preview ドキュメントのファイル名を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetExternalAnchor.URL">
      <summary>URL を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetExternalAnchor.PdfURL">
      <summary>URL を Adobe PDF 形式で取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTargetFile">
      <summary>外部ファイルへのリンクターゲットを定義します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetFile.#ctor">
      <summary>C1LinkTargetFile クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetFile.#ctor(System.String)">
      <summary>C1LinkTargetFile クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName">操作対象のファイル名。</param>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetFile.#ctor(System.String,System.String)">
      <summary>C1LinkTargetFile クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName">操作対象のファイル名。</param>
      <param name="command">実行される操作を表す文字列。</param>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetFile.#ctor(System.String,System.String,System.String,System.String)">
      <summary>C1LinkTargetFile クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName">操作対象のファイル名。</param>
      <param name="command">実行される操作を表す文字列。</param>
      <param name="parameters">アプリケーションに渡されるパラメータ。</param>
      <param name="directory">デフォルトのディレクトリ名。</param>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetFile.FileName">
      <summary>操作対象のファイル名を取得します。</summary>
      <remarks>Shell 名前空間オブジェクトを指定するには、完全修飾された解析名を渡します。 すべての動詞がすべてのオブジェクト上でサポートされるとは限らないことに注意してください。 たとえば、一部のドキュメントタイプでは動詞「print」をサポートしません。</remarks>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetFile.Command">
      <summary>実行される操作を表す文字列を取得します。</summary>
      <remarks>
        <para>利用可能な操作の種類は、ファイルまたはファイルによって異なります。これらの操作には、コンテキストメニューやレジストリで列挙されるコマンドも含まれます。</para>
        <para>次の操作がよく使用されます。</para>
        <list type="table">
          <item>
            <term>edit</term>
            <description>エディタを起動し、FileName で指定されたドキュメントを開きます。FileName がドキュメントファイルでない場合、この関数は失敗します。</description>
          </item>
          <item>
            <term>explore</term>
            <description>FileName で指定されたフォルダを選択して、エクスプローラを起動します。</description>
          </item>
          <item>
            <term>open</term>
            <description>FileName で指定されたファイルを開きます。ファイルには、実行可能ファイル、ドキュメントファイル、フォルダ、URL を指定できます。</description>
          </item>
          <item>
            <term>print</term>
            <description>FileName で指定されたドキュメントファイルを印刷します。FileName がドキュメントファイルでない場合、この関数は失敗します。</description>
          </item>
          <item>
            <term>空文字列</term>
            <description>利用可能な場合、「open」操作が既定で適用されます。利用不可能な場合、ファイルなどに応じた既定の操作が適用されます。</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetFile.Parameters">
      <summary>アプリケーションに渡されるパラメータを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetFile.Directory">
      <summary>デフォルトのディレクトリ名を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetFile.URL">
      <summary>URL を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetFile.PdfURL">
      <summary>URL を Adobe PDF 形式で取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.PageJumpTypeEnum">
      <summary>ページ移動の種別を表します。</summary>
    </member>
    <member name="F:C1.C1Preview.PageJumpTypeEnum.First">
      <summary>最初のページに移動します。</summary>
    </member>
    <member name="F:C1.C1Preview.PageJumpTypeEnum.Previous">
      <summary>前のページに移動します。</summary>
    </member>
    <member name="F:C1.C1Preview.PageJumpTypeEnum.Next">
      <summary>次のページに移動します。</summary>
    </member>
    <member name="F:C1.C1Preview.PageJumpTypeEnum.Last">
      <summary>最後のページに移動します。</summary>
    </member>
    <member name="F:C1.C1Preview.PageJumpTypeEnum.Absolute">
      <summary>指定されたページに移動します。</summary>
    </member>
    <member name="F:C1.C1Preview.PageJumpTypeEnum.Relative">
      <summary>現在のページから相対的に指定されたページに移動します。</summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTargetPage">
      <summary>ドキュメント内の別のページへのリンクターゲットを定義します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetPage.#ctor">
      <summary>C1LinkTargetPage クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetPage.#ctor(System.Int32)">
      <summary>C1LinkTargetPage クラスの新しいインスタンスを初期化します。</summary>
      <param name="pageNo">移動先のページ番号。</param>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetPage.#ctor(C1.C1Preview.PageJumpTypeEnum)">
      <summary>C1LinkTargetPage クラスの新しいインスタンスを初期化します。</summary>
      <param name="pageJumpType">ページ移動の種別。</param>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetPage.#ctor(C1.C1Preview.PageJumpTypeEnum,System.Int32)">
      <summary>C1LinkTargetPage クラスの新しいインスタンスを初期化します。</summary>
      <param name="pageJumpType">ページ移動の種別。</param>
      <param name="pageNo">移動先のページ番号。</param>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetPage.PageJumpType">
      <summary>ページ移動の種別を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetPage.PageNo">
      <summary>移動先のページ番号を指定します。</summary>
    </member>
    <member name="T:C1.C1Preview.C1LinkTargetDocumentLocation">
      <summary>IDocumentLocation インタフェースをサポートするドキュメント内のオブジェクトへのリンクターゲットを定義します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetDocumentLocation.#ctor">
      <summary>C1LinkTargetDocumentLocation クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1LinkTargetDocumentLocation.#ctor(C1.C1Preview.IDocumentLocation)">
      <summary>C1LinkTargetDocumentLocation クラスの新しいインスタンスを初期化します。</summary>
      <param name="documentLocation">移動先のオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.C1LinkTargetDocumentLocation.DocumentLocation">
      <summary>ドキュメント内の場所を特定するオブジェクトを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.C1PageSettings">
      <summary>ドキュメントのページのプロパティを記述します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.#ctor">
      <summary>C1PageSettings クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.#ctor(C1.C1Preview.C1PageSettings)">
      <summary>C1PageSettings クラスの新しいインスタンスを初期化します。</summary>
      <param name="source">コピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.#ctor(C1.C1Preview.C1PageSettings,System.Boolean)">
      <summary>C1PageSettings クラスの新しいインスタンスを初期化します。</summary>
      <param name="source">コピー元のオブジェクト。</param>
      <param name="landscape">用紙方向が横向きかどうか。</param>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.#ctor(System.Drawing.Printing.PageSettings)">
      <summary>C1PageSettings クラスの新しいインスタンスを初期化します。</summary>
      <param name="source">コピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.SetPaperSizes(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
        <see cref="P:C1.C1Preview.C1PageSettings.Width" />と
        <see cref="P:C1.C1Preview.C1PageSettings.Height" />を指定された値に設定します。
      </summary>
      <param name="width">設定する幅。</param>
      <param name="height">設定する高さ。</param>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.IsSameLayout(C1.C1Preview.C1PageSettings)">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.C1PageSettings" />によって指定されたページレイアウトを別の
        <see cref="T:C1.C1Preview.C1PageSettings" />オブジェクトのレイアウトと比較します。
      </summary>
      <param name="other">
        現在の値と比較する
        <see cref="T:C1.C1Preview.C1PageSettings" />オブジェクト。
      </param>
      <returns>２つのオブジェクトが同じページレイアウトを定義している場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.Compare(C1.C1Preview.C1PageSettings)">
      <summary>この C1PageSettings と他の C1PageSettings オブジェクトを比較します。</summary>
      <param name="other">比較先の C1PageSettings オブジェクト。</param>
      <returns>この C1PageSettings オブジェクトが他の C1PageSettings オブジェクトと等しい場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.Clone">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.C1PageSettings" />オブジェクトのコピーを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.C1PageSettings" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.AssignFrom(C1.C1Preview.C1PageSettings)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.C1PageSettings" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.AssignFrom(System.Drawing.Printing.PageSettings)">
      <summary>
        <see cref="T:System.Drawing.Printing.PageSettings" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.ToPageSettings(C1.C1Preview.C1PrintDocument,System.Drawing.Printing.PrinterSettings)">
      <summary>現在のオブジェクトのプロパティに基づいて PageSettings クラスの新しいインスタンスを作成し、初期化します。</summary>
      <param name="document">デフォルトの単位（このオブジェクトのいくつかのサイズがデフォルトの単位で指定されている場合）と dpi（いくつかのサイズが UnitTypeEnum.Pixel で指定されている場合）を提供する C1PrintDocument オブジェクト。null を指定できますが、その場合は、現在のオブジェクトに UnitTypeEnum.Default または UnitTypeEnum.Pixel 単位を使用するサイズが含まれてはなりません。</param>
      <param name="printerSettings">ターゲットページ設定のプリンタ設定。null を指定できます。その場合は、デフォルトのプリンタが使用されます。</param>
      <returns>新しく作成された PageSettings オブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.ToPageSettings(C1.C1Preview.C1PrintDocument)">
      <summary>PageSettings クラスの新しいインスタンスを作成して初期化します。</summary>
      <param name="document">デフォルトの単位（このオブジェクトのいくつかのサイズがデフォルトの単位で指定されている場合）と dpi（いくつかのサイズが UnitTypeEnum.Pixel で指定されている場合）を提供する C1PrintDocument オブジェクト。null を指定できます。この場合は、このオブジェクトが UnitTypeEnum.Default または UnitTypeEnum.Pixel のサイズを含むと、例外が生成されます。</param>
      <returns>作成された PageSettings オブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.ToPageSettings">
      <summary>現在のオブジェクトのプロパティに基づいて PageSettings クラスの新しいインスタンスを作成し、初期化します。</summary>
      <returns>新しく作成された PageSettings オブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.Compare(C1.C1Preview.C1PageSettings,C1.C1Preview.C1PageSettings)">
      <summary>
        ２つの
        <see cref="T:C1.C1Preview.C1PageSettings" />オブジェクトのプロパティを比較します。
      </summary>
      <param name="v1">比較する１つめのオブジェクト。</param>
      <param name="v2">比較する２つめのオブジェクト。</param>
      <returns>２つのオブジェクトのプロパティが同じ場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.GetCurrentLocaleDefaultPaperSize(System.Double@,System.Double@,System.Double@,C1.C1Preview.UnitTypeEnum@)">
      <summary>現在のロケールのデフォルトの用紙サイズを取得します。</summary>
      <param name="width">出力：用紙の幅。</param>
      <param name="height">出力：用紙の高さ。</param>
      <param name="margin">出力：用紙の余白。</param>
      <param name="units">出力：値の単位。</param>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.CreateDefaultPageSettings">
      <summary>現在のプリンタまたはシステムロケールに基づいて、デフォルトの設定で C1PageSettings オブジェクトを作成します。</summary>
      <returns>作成された C1PageSettings オブジェクト。</returns>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.Document">
      <summary>
        現在のオブジェクトを含む
        <see cref="T:C1.C1Preview.C1PrintDocument" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.UsePrinterPaperSize">
      <summary>ドキュメントを生成するときにプリンタの用紙サイズを使用するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.PageLayout">
      <summary>このオブジェクトを含む PageLayout オブジェクトを取得します。このオブジェクトが PageLayout にリンクされない場合は、null を指定できます。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.Landscape">
      <summary>ページが横または縦のどちらの方向に印刷されるかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.Width">
      <summary>用紙の幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.Height">
      <summary>用紙の高さを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.PaperKind">
      <summary>用紙のタイプを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.Color">
      <summary>ページをカラーで印刷するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.LeftMargin">
      <summary>左マージンの幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.TopMargin">
      <summary>上マージンの幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.RightMargin">
      <summary>右マージンの幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.BottomMargin">
      <summary>下マージンの幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.PaperSourceKind">
      <summary>希望の給紙方法を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.PaperSourceName">
      <summary>給紙の名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.PaperSourceRawKind">
      <summary>PaperSourceKind 値のいずれかまたはカスタム値を表す整数を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.PrinterResolutionKind">
      <summary>希望のプリンタの解像度を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.PrinterResolutionX">
      <summary>
        dpi（ドット/インチ）単位の水平プリンタ解像度を取得または設定します。
        <see cref="P:C1.C1Preview.C1PageSettings.PrinterResolutionKind" />がカスタムの場合に使用します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PageSettings.PrinterResolutionY">
      <summary>
        dpi（ドット/インチ）単位の垂直プリンタ解像度を取得または設定します。
        <see cref="P:C1.C1Preview.C1PageSettings.PrinterResolutionKind" />がカスタムの場合に使用します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.C1PageSettings.PageSettingsTypeConverter">
      <summary>
        <see cref="T:C1.C1Preview.C1PageSettings" />クラスの
        <see cref="T:System.ComponentModel.TypeConverter" />を提供します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.PageSettingsTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定したタイプのオブジェクトがこのコンバータのタイプに変換できるかどうかをテストします。</summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="type">
        変換元のタイプを表す
        <see cref="T:System.Type" />。
      </param>
      <returns>このコンバータが変換を実行できる場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.PageSettingsTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>特定の値オブジェクトを指定したタイプに変換します。</summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。null 参照（Visual Basic では Nothing）が渡された場合は、現在のカルチャが前提とされます。
      </param>
      <param name="value">変換するオブジェクト。</param>
      <param name="type">
        <i>value</i>パラメータの変換先の
        <see cref="T:System.Type" />。
      </param>
      <returns>
        変換された値を表す
        <b>Object</b>。
      </returns>
    </member>
    <member name="T:C1.C1Preview.FormsStyleEnum">
      <summary>入力コントロールのスタイルを記述します。</summary>
    </member>
    <member name="F:C1.C1Preview.FormsStyleEnum.Acrobat">
      <summary>Adobe Acrobat スタイル。</summary>
    </member>
    <member name="F:C1.C1Preview.FormsStyleEnum.InfoPath">
      <summary>Microsoft InfoPath スタイル。</summary>
    </member>
    <member name="F:C1.C1Preview.FormsStyleEnum.WinXp">
      <summary>Windows XP スタイル。</summary>
    </member>
    <member name="F:C1.C1Preview.FormsStyleEnum.WinClassic">
      <summary>Windows クラシックスタイル。</summary>
    </member>
    <member name="T:C1.C1Preview.C1DocumentFormatEnum">
      <summary>C1PrintDocument 形式の種別を定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.C1DocumentFormatEnum.C1d">
      <summary>オリジナルの C1PrintDocument 形式です。</summary>
    </member>
    <member name="F:C1.C1Preview.C1DocumentFormatEnum.C1dx">
      <summary>Open Packaging Conventions に準拠した新しい C1PrintDocument 形式です。</summary>
    </member>
    <member name="F:C1.C1Preview.C1DocumentFormatEnum.C1db">
      <summary>バイナリシリアル化形式 （ドキュメントはバイトの並びで表現されます）を指定します。</summary>
    </member>
    <member name="T:C1.C1Preview.C1PrintDocument">
      <summary>ComponentOne ドキュメント。外部形式でプレビュー、印刷、またはエクスポートできるドキュメントを表します。</summary>
      <summary>ComponentOne ドキュメント。外部形式でプレビュー、印刷、またはエクスポートできるドキュメントを表します。</summary>
    </member>
    <member name="T:C1.C1Preview.IStyleOwner">
      <summary>
        <b>Style</b>プロパティ（
        <see cref="P:C1.C1Preview.IStyleOwner.Style" />タイプ）を公開できるクラスを定義します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IStyleOwner.GetAmbientPropValue(System.Int32,C1.C1Preview.Scripting.IScriptContext)">
      <summary>アンビエントプロパティの値を取得します。</summary>
      <param name="propKey">プロパティキー。</param>
      <param name="context">
        計算されたプロパティの評価に使用する
        <see cref="T:C1.C1Preview.Scripting.IScriptContext" />。
      </param>
      <returns>プロパティ値。</returns>
    </member>
    <member name="M:C1.C1Preview.IStyleOwner.GetNonAmbientPropValue(System.Int32,C1.C1Preview.Scripting.IScriptContext)">
      <summary>非アンビエントプロパティの値を取得します。</summary>
      <param name="propKey">プロパティキー。</param>
      <param name="context">
        計算されたプロパティの評価に使用する
        <see cref="T:C1.C1Preview.Scripting.IScriptContext" />。
      </param>
      <returns>プロパティ値。</returns>
    </member>
    <member name="M:C1.C1Preview.IStyleOwner.GetProp(System.Int32,C1.C1Preview.Scripting.IScriptContext)">
      <summary>現在のオブジェクトに存在するスタイルプロパティの値を取得します （現在のオブジェクトに明示的に定義されていないプロパティの解決は試みません）。</summary>
      <param name="propKey">
        プロパティキー（任意の
        <b>Style.c_propXXX</b>定数）。
      </param>
      <param name="context">
        計算されたプロパティの取得に使用される
        <see cref="T:C1.C1Preview.Scripting.IScriptContext" />。
      </param>
      <returns>プロパティ値。</returns>
    </member>
    <member name="P:C1.C1Preview.IStyleOwner.AmbientParent">
      <summary>アンビエントプロパティの親を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.IStyleOwner.Style">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.IStyleOwner" />のスタイルを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IStyleOwner.Dictionary">
      <summary>画像の格納に使用される辞書オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.IStyleOwner.EmbeddedFonts">
      <summary>埋め込みフォントのリストを取得します。 このコレクションは、フォントの逆シリアル化に使用されます。</summary>
    </member>
    <member name="T:C1.C1Preview.ICollectionOwner">
      <summary>
        <para>これは内部使用専用です。</para>実装先のオブジェクトが
        <see cref="T:C1.C1Preview.OwnedCollection" />からの 変更に関する通知を受信できるインタフェースを記述します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.ICollectionOwner.OnClear(System.Object)">
      <summary>所有されたコレクションがクリアされるときに呼び出されます。</summary>
      <param name="sender">
        クリアされている
        <see cref="T:C1.C1Preview.OwnedCollection" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.ICollectionOwner.OnClearComplete(System.Object)">
      <summary>所有されたコレクションがクリアされた後に呼び出されます。</summary>
      <param name="sender">
        クリアされた
        <see cref="T:C1.C1Preview.OwnedCollection" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.ICollectionOwner.OnInsert(System.Object,System.Int32,System.Object)">
      <summary>項目が所有されたコレクションに挿入されようとするときに呼び出されます。</summary>
      <param name="sender">
        項目の挿入先となる
        <see cref="T:C1.C1Preview.OwnedCollection" />。
      </param>
      <param name="index">挿入される項目のインデックス。</param>
      <param name="item">挿入される項目。</param>
    </member>
    <member name="M:C1.C1Preview.ICollectionOwner.OnInsertComplete(System.Object,System.Int32,System.Object)">
      <summary>項目が所有先のコレクションに挿入された後に呼び出されます。</summary>
      <param name="sender">
        項目の挿入先となった
        <see cref="T:C1.C1Preview.OwnedCollection" />。
      </param>
      <param name="index">挿入された項目のインデックス。</param>
      <param name="item">挿入された項目。</param>
    </member>
    <member name="M:C1.C1Preview.ICollectionOwner.OnRemove(System.Object,System.Int32,System.Object)">
      <summary>項目が所有先のコレクションから削除されようとするときに呼び出されます。</summary>
      <param name="sender">
        項目が削除される
        <see cref="T:C1.C1Preview.OwnedCollection" />。
      </param>
      <param name="index">削除される項目のインデックス。</param>
      <param name="item">削除される項目。</param>
    </member>
    <member name="M:C1.C1Preview.ICollectionOwner.OnRemoveComplete(System.Object,System.Int32,System.Object)">
      <summary>項目が所有先のコレクションから削除された後に呼び出されます。</summary>
      <param name="sender">
        項目が削除された
        <see cref="T:C1.C1Preview.OwnedCollection" />。
      </param>
      <param name="index">削除された項目のインデックス。</param>
      <param name="item">削除された項目。</param>
    </member>
    <member name="M:C1.C1Preview.ICollectionOwner.OnSet(System.Object,System.Int32,System.Object,System.Object)">
      <summary>項目が所有先のコレクションに設定されようとするときに呼び出されます。</summary>
      <param name="sender">
        項目が設定される
        <see cref="T:C1.C1Preview.OwnedCollection" />。
      </param>
      <param name="index">設定される項目のインデックス。</param>
      <param name="oldValue">設定される項目の古い値。</param>
      <param name="newValue">設定される項目の新しい値。</param>
    </member>
    <member name="M:C1.C1Preview.ICollectionOwner.OnSetComplete(System.Object,System.Int32,System.Object,System.Object)">
      <summary>項目が所有先のコレクションに設定された後に呼び出されます。</summary>
      <param name="sender">
        項目が設定された
        <see cref="T:C1.C1Preview.OwnedCollection" />。
      </param>
      <param name="index">設定された項目のインデックス。</param>
      <param name="oldValue">設定された項目の古い値。</param>
      <param name="newValue">設定された項目の新しい値。</param>
    </member>
    <member name="T:C1.C1Preview.IDocumentLocation">
      <summary>ドキュメント内の場所を表します。</summary>
    </member>
    <member name="P:C1.C1Preview.IDocumentLocation.PageIndex">
      <summary>この位置を含むページインデックス（ゼロ基準）を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.IDocumentLocation.PageNo">
      <summary>この位置を含むページの論理番号を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.IDocumentLocation.Location">
      <summary>
        この位置を囲む
        <see cref="T:C1.C1Preview.RectangleD" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IDocumentLocation.LocationUnit">
      <summary>
        <see cref="P:C1.C1Preview.IDocumentLocation.Location" />プロパティによって使用される
        <see cref="T:C1.C1Preview.UnitTypeEnum" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IDocumentLocation.LocationDpi">
      <summary>
        <see cref="P:C1.C1Preview.IDocumentLocation.Location" />プロパティ（使用する単位が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合にのみ関与）によって使用される解像度（DPI）を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.IC1SerializableObject">
      <summary>これは内部使用専用です。 このインタフェースを使って、オブジェクトがシリアライザからの通知を受け取ることができるようにします。</summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.IScriptContext">
      <summary>スクリプトコンテキストを記述します。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.IScriptContext.GetActiveDataBinding">
      <summary>現在の C1DataBinding オブジェクトを取得します。null を返すことができ、 データバインディングが定義されていないことを意味します。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.IScriptContext.Document">
      <summary>このコンテキストを含む C1PrintDocument オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.IScriptContext.Page">
      <summary>現在の Page オブジェクトを取得します。 ページ依存の式が計算できない場合は null が可能です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.IScriptContext.Hyperlink">
      <summary>現在のハイパーリンクを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.IScriptContext.LinkTarget">
      <summary>ハイパーリンクのリンクターゲットを取得します。 リンクターゲットに計算プロパティが含まれる場合、Hyperlink.LinkTarget とは異なる値になることがあります。</summary>
    </member>
    <member name="T:C1.C1Preview.IC1Document">
      <summary>これは内部使用専用です。 ドキュメントのページへの統一したアクセスを提供します。</summary>
    </member>
    <member name="M:C1.C1Preview.IC1Document.PageAsMetafile(System.Int32,C1.C1Preview.PageDrawParams)">
      <summary>これは内部使用専用です。 ページ画像を取得します。</summary>
      <param name="pageIndex">０から始まるページインデックス。</param>
      <param name="pdp">追加の描画パラメータを指定します。</param>
      <returns>ページを表すメタファイル。</returns>
    </member>
    <member name="M:C1.C1Preview.IC1Document.GetPageNo(System.Int32)">
      <summary>これは内部使用専用です。 ページに関連付けられている論理ページ番号を取得します。</summary>
      <param name="pageIndex">０から始まるページインデックス。</param>
      <returns>論理ページ番号。</returns>
    </member>
    <member name="M:C1.C1Preview.IC1Document.FindAnchor(System.String)">
      <summary>
        ドキュメント内のアンカーの位置を定義する
        <see cref="T:C1.C1Preview.C1AnchorInfo" />オブジェクトを取得します。
      </summary>
      <param name="anchorName">アンカーの名前。</param>
      <returns>
        <see cref="T:C1.C1Preview.C1AnchorInfo" />オブジェクト。アンカーが見つからなかった場合は null。
      </returns>
    </member>
    <member name="M:C1.C1Preview.IC1Document.GetPageDocumentLocation(System.Int32)">
      <summary>
        ドキュメント内のページを定義する
        <see cref="T:C1.C1Preview.DocumentLocation" />オブジェクトを取得します。
      </summary>
      <param name="pageIndex">０から始まるページインデックス。</param>
      <returns>
        <see cref="T:C1.C1Preview.DocumentLocation" />オブジェクト。ページインデックスが有効でない場合は null。
      </returns>
    </member>
    <member name="P:C1.C1Preview.IC1Document.PageCount">
      <summary>これは内部使用専用です。 ドキュメントの総ページ数を取得します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.#ctor">
      <summary>C1PrintDocument クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeAutoEmbedFonts">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.AutoEmbedFonts" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.AutoEmbedFonts" />をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeStyle">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeTagOpenParen">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.TagOpenParen" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.TagOpenParen" />をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeTagCloseParen">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.TagCloseParen" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.TagCloseParen" />をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeTagEscapeString">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.TagEscapeString" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.TagEscapeString" />をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeTagsInputDialogClassName">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.TagsInputDialogClassName" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.TagsInputDialogClassName" />をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.SelectBestMeasurementDevice">
      <summary>MeasurementGraphics として使用できる最適なデバイスを選択します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnDefaultUnitChanged">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.DefaultUnit" />プロパティ値が変更されたときに呼び出されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnResolvedUnitChanged">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />プロパティ値が変更されたときに呼び出されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnBusyStateChanged">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.BusyState" />プロパティ値が変更されたときに呼び出されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnLongOperation(System.Double,System.Boolean)">
      <summary>ドキュメント生成の進行状況を示すために呼び出されます。</summary>
      <param name="complete">完了率（0～1）</param>
      <param name="canCancel">生成をキャンセルできるかどうか。</param>
      <returns>生成が中止されない場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.InitDocument">
      <summary>一部の初期化を実行します。たとえば、サブオブジェクト（PageHeader、PageFooter など）を作成して、 DefaultPageSettings を初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Clear">
      <summary>ドキュメントをクリアします。すべてのプロパティはデフォルト値に設定されます。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Save(System.String)">
      <summary>ドキュメントをファイルに保存します。</summary>
      <param name="fileName">保存するファイル名。</param>
      <seealso cref="T:C1.C1Preview.C1DocumentFormatEnum" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Save(System.String,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>ドキュメントをファイルに保存します。</summary>
      <param name="fileName">保存するファイル名。</param>
      <param name="documentFormat">C1PrintDocument 形式の種別。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Save(System.IO.Stream)">
      <summary>ドキュメントをストリームに保存します。</summary>
      <param name="stream">保存するストリーム。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Save(System.IO.Stream,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>ドキュメントをストリームに保存します。</summary>
      <param name="stream">保存するストリーム。</param>
      <param name="documentFormat">C1PrintDocument 形式の種別。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Load(System.IO.Stream)">
      <summary>ドキュメントをストリームから読み込みます。</summary>
      <param name="stream">ドキュメントを読み込むストリーム。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Load(System.IO.Stream,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>ドキュメントをストリームから読み込みます。</summary>
      <param name="stream">ドキュメントを読み込むストリーム。</param>
      <param name="documentFormat">C1PrintDocument 形式の種別。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Load(System.String)">
      <summary>ドキュメントをファイルから読み込みます。</summary>
      <param name="fileName">ファイル名。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Load(System.String,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>ドキュメントをファイルから読み込みます。</summary>
      <param name="fileName">ファイル名。</param>
      <param name="documentFormat">C1PrintDocument 形式の種別。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromFile(System.String,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>C1PrintDocument クラスのインスタンスを生成して、指定したファイルからドキュメントを読み込みます。</summary>
      <param name="fileName">ドキュメントのファイル名。</param>
      <param name="documentFormat">C1PrintDocument 形式の種別。</param>
      <returns>生成された C1PrintDocument オブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromFile(System.String)">
      <summary>C1PrintDocument クラスのインスタンスを生成して、指定したファイルからドキュメントを読み込みます。</summary>
      <param name="fileName">ドキュメントのファイル名。</param>
      <returns>生成された C1PrintDocument オブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromStream(System.IO.Stream,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>C1PrintDocument クラスのインスタンスを生成して、指定したストリームからドキュメントを読み込みます。</summary>
      <param name="stream">ドキュメントを読み込むストリーム。</param>
      <param name="documentFormat">C1PrintDocument 形式の種別。</param>
      <returns>生成された C1PrintDocument オブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromStream(System.IO.Stream)">
      <summary>C1PrintDocument クラスのインスタンスを生成して、指定したストリームからドキュメントを読み込みます。</summary>
      <param name="stream">ドキュメントを読み込むストリーム。</param>
      <returns>生成された C1PrintDocument オブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeAdditionalObjects">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.AdditionalObjects" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.AdditionalObjects" />をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeDataSchema">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.DataSchema" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.DataSchema" />をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeScriptingOptions">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.ScriptingOptions" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.ScriptingOptions" />をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeTags">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.Tags" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.Tags" />をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeDocumentInfo">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.DocumentInfo" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.DocumentInfo" />をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeDocumentStartingScript">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.DocumentStartingScript" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.DocumentStartingScript" />をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeDocumentEndedScript">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.DocumentEndedScript" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.DocumentEndedScript" />をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializePageConfigureScript">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.PageConfigureScript" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.PageConfigureScript" />をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeErrorScript">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.ErrorScript" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.ErrorScript" />をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeCompatibilityOptions">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.CompatibilityOptions" />プロパティをシリアル化する必要があるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.CompatibilityOptions" />をシリアル化する必要がある場合は true、そうでない場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ShouldSerializeFontProcessingOptions">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.FontProcessingOptions" />プロパティをシリアル化する必要があるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.FontProcessingOptions" />をシリアル化する必要がある場合は true、そうでない場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Dispose(System.Boolean)">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />で使用されたリソースを解放します。
      </summary>
      <param name="disposing">
        マネージドとアンマネージドリソースの両方を解放する場合は
        <b>true</b>。アンマネージドリソースのみを解放する場合は
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnInputValueChanged(C1.C1Preview.RenderInputBase)">
      <summary>
        現在のドキュメントに含まれた
        <see cref="T:C1.C1Preview.RenderInputBase" />オブジェクトの
        <see cref="P:C1.C1Preview.IValueProvider.Value" />プロパティが変更されたときに呼び出されます。
        <see cref="E:C1.C1Preview.C1PrintDocument.InputValueChanged" />イベントを起こします。
      </summary>
      <param name="renderObject">
        入力値が変更された
        <see cref="T:C1.C1Preview.RenderInputBase" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnFormsStyleChanged">
      <summary>
        <see cref="E:C1.C1Preview.C1PrintDocument.FormsStyleChanged" />イベントを起こします。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnGenerateDocument">
      <summary>
        <see cref="E:C1.C1Preview.C1PrintDocument.GenerateDocument" />イベントを起こします。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnPageConfigure(C1.C1Preview.C1Page)">
      <summary>
        新しい空のページが作成されて、現在のドキュメントに追加されるときに呼び出され、
        <see cref="E:C1.C1Preview.C1PrintDocument.PageConfigure" />イベントを起こします。 このメソッドが呼び出されるときは、
        <see cref="T:C1.C1Preview.C1Page" />はすでに
        <see cref="P:C1.C1Preview.C1PrintDocument.Pages" />コレクションに追加されていますが、 まだ解決されていません。 派生クラスでオーバーライドされる場合は、ベースメソッドを呼び出す必要があります。新しいページのレイアウトの変更に使用できます。
      </summary>
      <param name="page">
        新しく追加された
        <see cref="T:C1.C1Preview.C1Page" />オブジェクト。
      </param>
      <returns>
        <see cref="E:C1.C1Preview.C1PrintDocument.PageConfigure" />イベントで作成された
        <see cref="P:C1.C1Preview.C1PrintDocument.PageLayout" />、または
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnPageAdded(C1.C1Preview.C1Page)">
      <summary>
        <see cref="T:C1.C1Preview.C1Page" />が完全に生成された後のドキュメント生成中に呼び出され、
        <see cref="E:C1.C1Preview.C1PrintDocument.PageAdded" />イベントを起こします。
      </summary>
      <param name="page">
        生成されたページを識別する
        <see cref="T:C1.C1Preview.C1Page" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnPageUpdated(C1.C1Preview.C1Page)">
      <summary>
        <see cref="T:C1.C1Preview.C1Page" />が更新された後のドキュメント生成中に呼び出され、
        <see cref="E:C1.C1Preview.C1PrintDocument.PageUpdated" />イベントを起こします。
        <para>
          このメソッドは、
          <see cref="T:C1.C1Preview.RenderObject" />のフラグメント （
          <see cref="T:C1.C1Preview.RenderFragment" />）がページに追加または削除されるたびに呼び出されます （すなわち、このメソッドはドキュメントの生成時に非常に頻繁に呼び出されます）。
        </para><para>
          <see cref="M:C1.C1Preview.C1PrintDocument.OnPageChanged(C1.C1Preview.C1Page)" />も参照してください。
        </para>
      </summary>
      <param name="page">
        更新されたページを識別する
        <see cref="T:C1.C1Preview.C1Page" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnPageChanged(C1.C1Preview.C1Page)">
      <summary>
        ドキュメントにすでに追加された
        <see cref="T:C1.C1Preview.C1Page" />が変更された （ページの番号付けの変更や、ページで使用される
        <b>PageCount</b>タグの更新など）後の ドキュメント生成中に呼び出され、
        <see cref="E:C1.C1Preview.C1PrintDocument.PageChanged" />イベントを起こします。
        <para>
          <see cref="M:C1.C1Preview.C1PrintDocument.OnPageUpdated(C1.C1Preview.C1Page)" />も参照してください。
        </para>
      </summary>
      <param name="page">
        変更されたページを識別する
        <see cref="T:C1.C1Preview.C1Page" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnPageDeleted(C1.C1Preview.C1Page)">
      <summary>
        ページが
        <see cref="P:C1.C1Preview.C1PrintDocument.Pages" />コレクションから削除されるときに呼び出されます。
      </summary>
      <param name="page">
        削除されたページを識別する
        <see cref="T:C1.C1Preview.C1Page" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnBeforePagesClear">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.Pages" />コレクションがクリアされようとするときに呼び出されます。
        <see cref="E:C1.C1Preview.C1PrintDocument.BeforePagesClear" />イベントを起こします。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnPagesClear">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.Pages" />コレクションがクリアされた後に呼び出されます。
        <see cref="E:C1.C1Preview.C1PrintDocument.PagesClear" />イベントを起こします。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnDocumentStarting">
      <summary>
        ドキュメントが生成を開始するときに呼び出されます。
        <see cref="E:C1.C1Preview.C1PrintDocument.DocumentStarting" />イベントを発生させ、
        <see cref="P:C1.C1Preview.C1PrintDocument.DocumentStartingScript" />スクリプトを実行します。
      </summary>
      <remarks>
        ドキュメント生成の前後には以下の順序で処理が実行されます。
        <list type="number">
          <item>
            <term>
              <see cref="M:C1.C1Preview.C1PrintDocument.OnDocumentStarting" />
            </term>
            <description>
              <see cref="E:C1.C1Preview.C1PrintDocument.DocumentStarting" />イベントを発生させます。
            </description>
          </item>
          <item>
            <term>
              <see cref="P:C1.C1Preview.C1PrintDocument.BusyState" />=
              <see cref="F:C1.C1Preview.BusyStateEnum.Generating" />
            </term>
            <description>
              <see cref="P:C1.C1Preview.C1PrintDocument.BusyState" />が
              <see cref="F:C1.C1Preview.BusyStateEnum.Generating" />に変更されます。
            </description>
          </item>
          <item>
            <term>
              <see cref="M:C1.C1Preview.C1PrintDocument.ExecuteDocumentStartingScript" />
            </term>
            <description>
              <see cref="P:C1.C1Preview.C1PrintDocument.DocumentStartingScript" />スクリプトを実行します。
            </description>
          </item>
          <item>... ドキュメントの生成...</item>
          <item>
            <term>
              <see cref="M:C1.C1Preview.C1PrintDocument.ExecuteDocumentEndedScript" />
            </term>
            <description>
              <see cref="P:C1.C1Preview.C1PrintDocument.DocumentEndedScript" />スクリプトを実行します。
            </description>
          </item>
          <item>
            <term>
              <see cref="P:C1.C1Preview.C1PrintDocument.BusyState" />=
              <see cref="F:C1.C1Preview.BusyStateEnum.Ready" />
            </term>
            <description>
              <see cref="P:C1.C1Preview.C1PrintDocument.BusyState" />が
              <see cref="F:C1.C1Preview.BusyStateEnum.Ready" />に変更されます。
            </description>
          </item>
          <item>
            <term>
              <see cref="M:C1.C1Preview.C1PrintDocument.OnDocumentEnded" />
            </term>
            <description>
              <see cref="E:C1.C1Preview.C1PrintDocument.DocumentEnded" />イベントを発生させます。
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ExecuteDocumentStartingScript">
      <summary>
        ドキュメントが生成を開始するときに呼び出されます。
        <see cref="P:C1.C1Preview.C1PrintDocument.DocumentStartingScript" />スクリプトを実行します。 詳細とイベントの順序については、
        <see cref="M:C1.C1Preview.C1PrintDocument.OnDocumentStarting" />メソッドの備考を参照してください。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.OnDocumentEnded">
      <summary>
        ドキュメントが生成されたときに呼び出されます。
        <see cref="E:C1.C1Preview.C1PrintDocument.DocumentEnded" />イベントを発生させ、
        <see cref="P:C1.C1Preview.C1PrintDocument.DocumentEndedScript" />スクリプトを実行します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ExecuteDocumentEndedScript">
      <summary>
        ドキュメントの生成が完了したときに呼び出されます。
        <see cref="P:C1.C1Preview.C1PrintDocument.DocumentEndedScript" />スクリプトを実行します。 詳細とイベントの順序については、
        <see cref="M:C1.C1Preview.C1PrintDocument.OnDocumentStarting" />メソッドの備考を参照してください。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ClearGeneratedPages">
      <summary>ドキュメントの生成中に作成されたページおよびその他の情報をクリアします。 このメソッドでは、ドキュメントの構造や内容はクリアされません。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(System.Double,C1.C1Preview.UnitTypeEnum,System.Single)">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の値を別の測定単位に変換します。
      </summary>
      <param name="value">
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の値。
      </param>
      <param name="destType">変換後の単位を指定します。</param>
      <param name="destDpi">destType が UnitTypeEnum.Pixel の場合は dpi を指定します。</param>
      <returns>変換後の値を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(C1.C1Preview.RectangleD,C1.C1Preview.UnitTypeEnum,System.Single,System.Single)">
      <summary>
        現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の
        <see cref="T:C1.C1Preview.RectangleD" />値を別の
        <see cref="T:C1.C1Preview.UnitTypeEnum" />単位に変換します。
      </summary>
      <param name="value">
        変換する値。
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位で表されます。
      </param>
      <param name="destType">
        変換先
        <see cref="T:C1.C1Preview.UnitTypeEnum" />単位。
      </param>
      <param name="destDpiX">
        水平変換先解像度（DPI）。
        <paramref name="destType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合にのみ必要です。
      </param>
      <param name="destDpiY">
        垂直変換先解像度（DPI）。
        <paramref name="destType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合にのみ必要です。
      </param>
      <returns>
        ターゲット単位に変換された
        <see cref="T:C1.C1Preview.RectangleD" />構造体。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(System.Drawing.Region,C1.C1Preview.UnitTypeEnum,System.Single,System.Single)">
      <summary>
        現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の
        <see cref="T:System.Drawing.Region" />オブジェクトを別の
        <see cref="T:C1.C1Preview.UnitTypeEnum" />単位を使用するように変換（スケール）します。
      </summary>
      <param name="region">
        スケールする
        <see cref="T:System.Drawing.Region" />。
      </param>
      <param name="destType">使用する変換先単位。</param>
      <param name="destDpiX">
        水平変換先解像度（DPI）。
        <paramref name="destType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合にのみ必要です。
      </param>
      <param name="destDpiY">
        垂直変換先解像度（DPI）。
        <paramref name="destType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合にのみ必要です。
      </param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(C1.C1Preview.OffsetsD,C1.C1Preview.UnitTypeEnum,System.Single,System.Single)">
      <summary>
        現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の
        <see cref="T:C1.C1Preview.OffsetsD" />値を別の
        <see cref="T:C1.C1Preview.UnitTypeEnum" />単位に変換します。
      </summary>
      <param name="value">
        変換する値。
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位で表されます。
      </param>
      <param name="destType">
        変換先
        <see cref="T:C1.C1Preview.UnitTypeEnum" />単位。
      </param>
      <param name="destDpiX">
        水平変換先解像度（DPI）。
        <paramref name="destType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合にのみ必要です。
      </param>
      <param name="destDpiY">
        垂直変換先解像度（DPI）。
        <paramref name="destType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合にのみ必要です。
      </param>
      <returns>
        ターゲット単位に変換された
        <see cref="T:C1.C1Preview.OffsetsD" />構造体。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(System.Double,C1.C1Preview.UnitTypeEnum)">
      <summary>
        現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の
        <b>double</b>値を別の
        <see cref="T:C1.C1Preview.UnitTypeEnum" />単位に変換します。その際、
        <paramref name="destType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合は
        <see cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" />解像度を使用します。
      </summary>
      <param name="value">
        変換する値。
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位で表されます。
      </param>
      <param name="destType">
        変換先
        <see cref="T:C1.C1Preview.UnitTypeEnum" />単位。
      </param>
      <returns>
        <paramref name="destType" />単位に変換された値。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(C1.C1Preview.RectangleD,C1.C1Preview.UnitTypeEnum)">
      <summary>
        現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の
        <see cref="T:C1.C1Preview.RectangleD" />値を別の
        <see cref="T:C1.C1Preview.UnitTypeEnum" />単位に変換します。その際、
        <paramref name="destType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合は
        <see cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" />解像度を使用します。
      </summary>
      <param name="value">
        変換する値。
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位で表されます。
      </param>
      <param name="destType">
        変換先
        <see cref="T:C1.C1Preview.UnitTypeEnum" />単位。
      </param>
      <returns>
        ターゲット単位に変換された
        <see cref="T:C1.C1Preview.RectangleD" />構造体。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(C1.C1Preview.OffsetsD,C1.C1Preview.UnitTypeEnum)">
      <summary>
        現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の
        <see cref="T:C1.C1Preview.OffsetsD" />値を別の
        <see cref="T:C1.C1Preview.UnitTypeEnum" />単位に変換します。その際、
        <paramref name="destType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合は
        <see cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" />解像度を使用します。
      </summary>
      <param name="value">
        変換する値。
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位で表されます。
      </param>
      <param name="destType">
        変換先
        <see cref="T:C1.C1Preview.UnitTypeEnum" />単位。
      </param>
      <returns>
        ターゲット単位に変換された
        <see cref="T:C1.C1Preview.OffsetsD" />構造体。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(C1.C1Preview.PointD,C1.C1Preview.UnitTypeEnum,System.Single,System.Single)">
      <summary>
        現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の
        <see cref="T:C1.C1Preview.PointD" />値を別の
        <see cref="T:C1.C1Preview.UnitTypeEnum" />単位に変換します。
      </summary>
      <param name="value">
        変換する値。
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位で表されます。
      </param>
      <param name="destType">
        変換先
        <see cref="T:C1.C1Preview.UnitTypeEnum" />単位。
      </param>
      <param name="destDpiX">
        水平変換先解像度（DPI）。
        <paramref name="destType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合にのみ必要です。
      </param>
      <param name="destDpiY">
        垂直変換先解像度（DPI）。
        <paramref name="destType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合にのみ必要です。
      </param>
      <returns>
        ターゲット単位に変換された
        <see cref="T:C1.C1Preview.PointD" />構造体。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(System.Double,System.Single,System.Boolean)">
      <summary>
        現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の
        <b>double</b>値を
        <paramref name="destDpi" />によって指定された解像度を持つ
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />に変換します。
        <para>
          <paramref name="truncate" />パラメータに応じて、変換された値は単純に切り捨てられるか、 丸められます（低速しかし高精度）。
        </para>
      </summary>
      <param name="value">
        変換する値。
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位で表されます。
      </param>
      <param name="destDpi">変換先解像度（DPI）。</param>
      <param name="truncate">
        変換された値を切り捨てるには
        <b>true</b>、丸めるには
        <b>false</b>（低速しかし高精度）。
      </param>
      <returns>変換された値。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(C1.C1Preview.RectangleD,System.Single,System.Single,System.Boolean)">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の四角形をピクセル単位に変換します。
      </summary>
      <param name="value">
        変換する値。
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位で表されます。
      </param>
      <param name="destDpiX">水平変換先解像度（DPI）。</param>
      <param name="destDpiY">垂直変換先解像度（DPI）。</param>
      <param name="truncate">
        変換された値を切り捨てるには
        <b>true</b>、丸めるには
        <b>false</b>（低速しかし高精度）。
      </param>
      <returns>
        ピクセルに変換された
        <see cref="T:System.Drawing.Rectangle" />構造体。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRU(C1.C1Preview.OffsetsD,System.Single,System.Single,System.Boolean)">
      <summary>
        指定した解像度を使って、現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の
        <see cref="T:C1.C1Preview.OffsetsD" />値を、
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />単位の
        <see cref="T:System.Drawing.Rectangle" />構造体に変換します。
        <para>
          <paramref name="truncate" />パラメータに応じて、変換された値は単純に切り捨てられるか、 丸められます（低速しかし高精度）。
        </para>
      </summary>
      <param name="value">
        変換する値。
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位で表されます。
      </param>
      <param name="destDpiX">水平変換先解像度（DPI）。</param>
      <param name="destDpiY">垂直変換先解像度（DPI）。</param>
      <param name="truncate">
        変換された値を切り捨てるには
        <b>true</b>、丸めるには
        <b>false</b>（低速しかし高精度）。
      </param>
      <returns>
        ピクセルに変換された
        <see cref="T:C1.C1Preview.OffsetsI" />構造体。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ToRU(System.Double,C1.C1Preview.UnitTypeEnum,System.Single)">
      <summary>
        値を指定された測定単位から
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位に変換します。
      </summary>
      <param name="value">変換前の値。</param>
      <param name="srcType">
        ソース
        <paramref name="value" />の表現に使用される測定の単位。
      </param>
      <param name="srcDpi">
        ソース解像度（DPI）。（
        <paramref name="srcType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合に使用）。
      </param>
      <returns>
        変換後の値を
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位で返します。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ToRU(C1.C1Preview.RectangleD,C1.C1Preview.UnitTypeEnum,System.Single,System.Single)">
      <summary>
        指定した
        <see cref="T:C1.C1Preview.UnitTypeEnum" />単位の
        <see cref="T:C1.C1Preview.RectangleD" />構造体を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の
        <b>RectangleD</b>に変換します。
      </summary>
      <param name="value">変換するソース値。</param>
      <param name="srcType">
        ソース
        <paramref name="value" />の表現に使用される測定の単位。
      </param>
      <param name="srcDpiX">
        ソース水平解像度（DPI）。（
        <paramref name="srcType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合に使用）。
      </param>
      <param name="srcDpiY">
        ソース垂直解像度（DPI）。（
        <paramref name="srcType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合に使用）。
      </param>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の
        <see cref="T:C1.C1Preview.RectangleD" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ToRU(System.Double,C1.C1Preview.UnitTypeEnum)">
      <summary>
        指定した
        <see cref="T:C1.C1Preview.UnitTypeEnum" />単位の
        <b>double</b>値を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の
        <b>double</b>値に変換します。その際、
        <paramref name="srcType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合は
        <see cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" />をソース解像度として使用します。
      </summary>
      <param name="value">変換するソース値。</param>
      <param name="srcType">
        ソース
        <paramref name="value" />の表現に使用される測定の単位。
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />に等しい場合、現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" />がソース解像度（DPI）として使用されます。
      </param>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の
        <b>double</b>値。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ToRU(C1.C1Preview.RectangleD,C1.C1Preview.UnitTypeEnum)">
      <summary>
        指定した
        <see cref="T:C1.C1Preview.UnitTypeEnum" />単位の
        <see cref="T:C1.C1Preview.RectangleD" />構造体を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の
        <b>RectangleD</b>に変換します。 その際、
        <paramref name="srcType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合は
        <see cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" />をソース解像度として使用します。
      </summary>
      <param name="value">変換するソース値。</param>
      <param name="srcType">
        ソース
        <paramref name="value" />の表現に使用される測定の単位。
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />に等しい場合、現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" />がソース解像度（DPI）として使用されます。
      </param>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の
        <see cref="T:C1.C1Preview.RectangleD" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ConvertUnit(C1.C1Preview.Unit,C1.C1Preview.UnitTypeEnum)">
      <summary>
        絶対
        <see cref="T:C1.C1Preview.Unit" />値を指定した測定単位に変換します （このオーバーロードはピクセルに変換できません）。
      </summary>
      <param name="source">
        変換するソースの
        <see cref="T:C1.C1Preview.Unit" />値（絶対値であること）。
      </param>
      <param name="destUnitType">
        変換先の単位タイプ（
        <see cref="T:C1.C1Preview.UnitTypeEnum" />。
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />は使用不可）。
      </param>
      <returns>
        <paramref name="destUnitType" />単位の
        <paramref name="source" />値を表す
        <b>double</b>。
      </returns>
      <remarks>
        <para>
          <paramref name="source" />は、「5mm」、「1.5in」、「8」のような絶対値である必要があります。 ソースは、式（「prev.width」または「prev.height*2+2mm」など）を使用できません。
        </para>
        <para>
          変換先の単位タイプには
          <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />を使用できません。 ピクセルに変換するには、代わりに
          <see cref="M:C1.C1Preview.C1PrintDocument.ConvertUnit(C1.C1Preview.Unit,C1.C1Preview.UnitTypeEnum,System.Single)" />を使用します。
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ConvertUnit(C1.C1Preview.Unit,C1.C1Preview.UnitTypeEnum,System.Single)">
      <summary>
        絶対
        <see cref="T:C1.C1Preview.Unit" />値を指定した測定単位に変換します。
      </summary>
      <param name="source">
        変換するソースの
        <see cref="T:C1.C1Preview.Unit" />値（絶対値であること）。
      </param>
      <param name="destUnitType">
        変換先の単位タイプ（
        <see cref="T:C1.C1Preview.UnitTypeEnum" />）。
      </param>
      <param name="destDpi">
        変換先の解像度（DPI。
        <paramref name="destUnitType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合に使用）。
      </param>
      <returns>
        <paramref name="destUnitType" />単位の
        <paramref name="source" />値を表す
        <b>double</b>。
      </returns>
      <remarks>
        <paramref name="source" />は、「5mm」、「1.5in」、「8」のような絶対値である必要があります。 ソースは、式（「prev.width」または「prev.height*2+2mm」など）を使用できません。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.HasEditableTags">
      <summary>入力ダイアログで入力または変更できるタグがドキュメントに含まれているかどうかをチェックします。</summary>
      <returns>
        <see cref="P:C1.C1Preview.C1PrintDocument.Tags" />コレクションにダイアログに表示可能なタグが少なくとも１つ含まれている場合、 または
        <see cref="P:C1.C1Preview.C1PrintDocument.TagsInputDialogClass" />が null でない場合 （開発者がドキュメントのタグを編集するためのカスタムフォームを定義している場合）は true になります。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.EditTags">
      <summary>
        タグの入力ダイアログを表示します。これにより、ユーザーは、
        <see cref="P:C1.C1Preview.C1PrintDocument.Tags" />コレクションに含まれる
        <see cref="T:C1.C1Preview.Tag" />オブジェクトの値を入力／更新できます。
      </summary>
      <returns>ユーザーがダイアログを受け付けた場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Reflow">
      <summary>
        現在のドキュメントをリフローします。 ハンドラが
        <see cref="E:C1.C1Preview.C1PrintDocument.GenerateDocument" />イベントに割り当てられている場合は、このハンドラが呼び出されます。 その以外の場合は、
        <see cref="M:C1.C1Preview.C1PrintDocument.Generate" />メソッドが呼び出されます。
      </summary>
      <returns>ドキュメント生成中に警告が発生しなかった場合は true。警告が発生した場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Generate">
      <summary>ドキュメントを生成します。</summary>
      <returns>エラーが発生しなかった場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Generate(C1.C1Preview.RefreshModeEnum)">
      <summary>ドキュメントを生成します。引数はリフレッシュモードを示します。</summary>
      <param name="refreshMode">生成時に情報がリフレッシュされることを示します。</param>
      <returns>生成時に警告が発生しなかった場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.NewPage(C1.C1Preview.PageLayout,C1.C1Preview.PageDirectionEnum)">
      <summary>新しいページを作成します。</summary>
      <param name="pageLayout">後続のすべてのページで使用されるレイアウトを指定します。</param>
      <param name="direction">ページを垂直方向と水平方向のどちらに追加するかを示します。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.NewPage(C1.C1Preview.PageLayout)">
      <summary>新しいページを作成し、それをドキュメントに追加します。</summary>
      <param name="pageLayout">後続のすべてのページで使用されるレイアウトを指定します。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.NewPage">
      <summary>新しいページを作成し、それをドキュメントに追加します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.NewColumn">
      <summary>新しい段を開始します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.NewLine">
      <summary>インラインフローで新しい行を開始します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.StartDoc">
      <summary>新しいドキュメントを開始する。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.EndDoc">
      <summary>ドキュメントの生成を終了します。</summary>
      <returns>生成時に警告が発生しなかった場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.CanRenderBlock">
      <summary>ブロックフローへのレンダリングが許可されるかどうかを示します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.CanRenderDirect">
      <summary>ダイレクトレンダリングが許可されるかどうかを示します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.IsInlineStarted">
      <summary>インラインのレンダリングが開始されたかどうかを示します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)">
      <summary>描画オブジェクトをドキュメントに追加して解決します。</summary>
      <param name="ro">処理する RenderObject オブジェクト。</param>
      <returns>エラーが発生しなかった場合は true を返します。</returns>
      <remarks>
        <para>このメソッドは、StartDoc() メソッドと EndDoc() メソッドを使ってドキュメントを生成する場合にだけ使用できます。</para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject)">
      <summary>描画オブジェクトをドキュメントに追加し、指定された位置で解決します。</summary>
      <param name="x">オブジェクトの X 座標。auto は指定できません。</param>
      <param name="y">オブジェクトの Y 座標。auto は指定できません。</param>
      <param name="ro">レンダリングする RenderObject オブジェクト。</param>
      <returns>エラーが発生しなかった場合は true を返します。</returns>
      <remarks>
        <para>このメソッドは、StartDoc() メソッドと EndDoc() メソッドを使ってドキュメントを生成する場合にだけ使用できます。</para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)">
      <summary>描画オブジェクトをドキュメントに追加し、指定された位置で解決します。</summary>
      <param name="x">オブジェクトの X 座標。auto は指定できません。</param>
      <param name="y">オブジェクトの Y 座標。auto は指定できません。</param>
      <param name="ro">レンダリングする RenderObject オブジェクト。</param>
      <param name="width">オブジェクトの幅。null を指定すると、自動幅になります。</param>
      <param name="height">オブジェクトの高さ。null を指定すると、自動高さになります。</param>
      <returns>エラーが発生しなかった場合は true を返します。</returns>
      <remarks>
        <para>このメソッドは、StartDoc() メソッドと EndDoc() メソッドを使ってドキュメントを生成する場合にだけ使用できます。</para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.AddAnchor(System.String,System.String,System.Object)">
      <summary>
        アンカー（
        <see cref="T:C1.C1Preview.C1Anchor" />または
        <see cref="T:C1.C1Preview.C1AnchorText" />）をドキュメントの現在の位置に追加します。
        <see cref="P:C1.C1Preview.C1PrintDocument.IsStartEndDocMode" />が
        <b>true</b>の場合のみ使用できます。
      </summary>
      <param name="name">
        アンカーの
        <see cref="P:C1.C1Preview.C1Anchor.Name" />に割り当てられた文字列。
      </param>
      <param name="description">
        アンカーの
        <see cref="P:C1.C1Preview.C1Anchor.Description" />に割り当てられた文字列。
      </param>
      <param name="userData">
        アンカーの
        <see cref="P:C1.C1Preview.C1Anchor.UserData" />に割り当てられた任意のデータ。
      </param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメントが
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />／
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッドを使って作成されている （すなわち、
          <see cref="P:C1.C1Preview.C1PrintDocument.IsStartEndDocMode" />が
          <b>true</b>である）場合のみ使用できます。
        </para>このメソッドが作成するアンカーのタイプは、ドキュメントの現在の状態で決まります。
        <list type="bullet">
          <item>
            インライン段落が （
            <see cref="M:C1.C1Preview.C1PrintDocument.RenderInline(C1.C1Preview.ParagraphObject,System.Object,System.Object,C1.C1Preview.Style)" />または
            <see cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(System.Object,System.Object,C1.C1Preview.Style,System.Boolean)" />への呼び出しによって）開始されて、 （
            <see cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />や
            <b>RenderBlock()</b>または
            <b>RenderDirect()</b>メソッドのいずれかの呼び出しによって）終了されていない場合は、 このメソッドは現在の段落上に
            <see cref="T:C1.C1Preview.C1AnchorText" />を作成します。
          </item>
          <item>
            そうでない（現在のインライン段落が存在しない）場合は、 このメソッドはブロックフローの現在のポイントに
            <see cref="T:C1.C1Preview.C1Anchor" />を作成します。
          </item>
        </list>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.IsInlineStarted" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.AddAnchor(System.String,System.String)">
      <summary>
        アンカー（
        <see cref="T:C1.C1Preview.C1Anchor" />または
        <see cref="T:C1.C1Preview.C1AnchorText" />）をドキュメントの現在の位置に追加します。
        <see cref="P:C1.C1Preview.C1PrintDocument.IsStartEndDocMode" />が
        <b>true</b>の場合のみ使用できます。
        <para>
          このメソッドは、最後のパラメータ（ユーザーデータ）が
          <b>null</b>値として指定された
          <see cref="M:C1.C1Preview.C1PrintDocument.AddAnchor(System.String,System.String,System.Object)" />と同じです。
        </para>
      </summary>
      <param name="name">
        アンカーの
        <see cref="P:C1.C1Preview.C1Anchor.Name" />に割り当てられた文字列。
      </param>
      <param name="description">
        アンカーの
        <see cref="P:C1.C1Preview.C1Anchor.Description" />に割り当てられた文字列。
      </param>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.AddAnchor(System.String,System.String,System.Object)" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.AddAnchor(System.String)">
      <summary>
        アンカー（
        <see cref="T:C1.C1Preview.C1Anchor" />または
        <see cref="T:C1.C1Preview.C1AnchorText" />）をドキュメントの現在の位置に追加します。
        <see cref="P:C1.C1Preview.C1PrintDocument.IsStartEndDocMode" />が
        <b>true</b>の場合のみ使用できます。
        <para>
          このメソッドは、最後の２つのパラメータ（説明とユーザーデータ）が
          <b>null</b>値として指定された
          <see cref="M:C1.C1Preview.C1PrintDocument.AddAnchor(System.String,System.String,System.Object)" />と同じです。
        </para>
      </summary>
      <param name="name">
        アンカーの
        <see cref="P:C1.C1Preview.C1Anchor.Name" />に割り当てられた文字列。
      </param>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.AddAnchor(System.String,System.String,System.Object)" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRichText(System.String,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>RTF テキストをレンダリングします。</summary>
      <param name="rtf">レンダリングするテキスト。プレーンテキストが使用可能です。</param>
      <param name="width">null の場合は親の幅が使用されます。</param>
      <param name="height">null の場合は自動調整の高さが使用されます。</param>
      <param name="style">オブジェクトのスタイル。</param>
      <returns>オブジェクトのレンダリング中に警告が発生しなかった場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRichText(System.String,System.Object)">
      <summary>自動調整の高さを持つ RTF テキストをレンダリングします。</summary>
      <param name="rtf">レンダリングするテキスト。プレーンテキストが使用可能です。</param>
      <param name="width">null の場合は親の幅が使用されます。</param>
      <returns>オブジェクトのレンダリング中に警告が発生しなかった場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRichText(System.String)">
      <summary>親の幅と自動調整の高さを持つ RTF テキストをレンダリングします。</summary>
      <param name="rtf">レンダリングするテキスト。プレーンテキストが使用可能です。</param>
      <returns>オブジェクトのレンダリング中に警告が発生しなかった場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockImage(System.Drawing.Image,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>画像をレンダリングします。</summary>
      <param name="image">レンダリングする画像。</param>
      <param name="width">画像ボックスの幅。null の場合は幅を自動調整。</param>
      <param name="height">画像ボックスの高さ。null の場合は高さを自動調整。</param>
      <param name="style">画像のスタイル。null の場合は、ドキュメントの画像のスタイルが使用されます。</param>
      <returns>オブジェクトのレンダリング中に警告が発生しなかった場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockImage(System.Drawing.Image,System.Object,System.Object,C1.C1Preview.ImageAlign)">
      <summary>画像をレンダリングします。</summary>
      <param name="image">レンダリングする画像。</param>
      <param name="width">画像ボックスの幅。null の場合は幅を自動調整。</param>
      <param name="height">画像ボックスの高さ。null の場合は高さを自動調整。</param>
      <param name="imageAlign">画像の配置。</param>
      <returns>オブジェクトのレンダリング中に警告が発生しなかった場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockImage(System.Drawing.Image)">
      <summary>画像をレンダリングします。</summary>
      <param name="image">レンダリングする画像。</param>
      <returns>オブジェクトのレンダリング中に警告が発生しなかった場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)">
      <summary>テキストのブロックを現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="text">レンダリングするテキスト。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          レンダリングされたブロックの幅はページ（複数列レイアウトでは列）の幅に設定されます。これは、
          <see cref="T:C1.C1Preview.RenderObject" />の
          <see cref="P:C1.C1Preview.RenderObject.Width" />を
          <b>「parent.width」</b>に設定するのと同じです。
        </para>
        <para>
          レンダリングされたブロックの高さは、
          <b>auto</b>です。 これは
          <see cref="T:C1.C1Preview.RenderObject" />の
          <see cref="P:C1.C1Preview.RenderObject.Height" />を
          <see cref="P:C1.C1Preview.Unit.Auto" />または
          <b>「auto」</b>に設定するのと同じです。
        </para>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String,C1.C1Preview.Style)">
      <summary>
        指定した
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />を使って、 テキストのブロックを現在のドキュメントのブロックフローにレンダリングします。
      </summary>
      <param name="text">レンダリングするテキスト。</param>
      <param name="style">
        使用するスタイル（
        <b>null</b>が使用可能）。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          テキストブロックの幅と高さの設定方法についての詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />を 参照してください。
        </para>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String,System.Drawing.Font,System.Drawing.Color,C1.C1Preview.AlignHorzEnum)">
      <summary>指定したフォント、テキスト色、および水平配置を使って、テキストの ブロックを現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="text">レンダリングするテキスト。</param>
      <param name="font">
        使用する
        <see cref="T:System.Drawing.Font" />（
        <b>null</b>が使用可能）。
      </param>
      <param name="textColor">使用するテキスト色。</param>
      <param name="horzAlign">使用するテキストの水平配置。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          テキストブロックの幅と高さの設定方法についての詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />を 参照してください。
        </para>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String,System.Drawing.Font)">
      <summary>指定したフォントを使って、テキストのブロックを現在のドキュメントの ブロックフローにレンダリングします。</summary>
      <param name="text">レンダリングするテキスト。</param>
      <param name="font">
        使用する
        <see cref="T:System.Drawing.Font" />（
        <b>null</b>が使用可能）。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          テキストブロックの幅と高さの設定方法についての詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />を 参照してください。
        </para>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String,System.Drawing.Font,System.Drawing.Color)">
      <summary>指定したフォントとテキスト色を使って、テキストのブロックを現在の ドキュメントのブロックフローにレンダリングします。</summary>
      <param name="text">レンダリングするテキスト。</param>
      <param name="font">
        使用する
        <see cref="T:System.Drawing.Font" />（
        <b>null</b>が使用可能）。
      </param>
      <param name="textColor">使用するテキスト色。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          テキストブロックの幅と高さの設定方法についての詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />を 参照してください。
        </para>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String,System.Drawing.Font,C1.C1Preview.AlignHorzEnum)">
      <summary>指定したフォントと水平配置を使って、テキストのブロックを現在の ドキュメントのブロックフローにレンダリングします。</summary>
      <param name="text">レンダリングするテキスト。</param>
      <param name="font">
        使用する
        <see cref="T:System.Drawing.Font" />（
        <b>null</b>が使用可能）。
      </param>
      <param name="horzAlign">使用するテキストの水平配置。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          テキストブロックの幅と高さの設定方法についての詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />を 参照してください。
        </para>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String,C1.C1Preview.AlignHorzEnum)">
      <summary>指定した水平配置を使って、テキストのブロックを現在のドキュメントの ブロックフローにレンダリングします。</summary>
      <param name="text">レンダリングするテキスト。</param>
      <param name="horzAlign">使用するテキストの水平配置。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          テキストブロックの幅と高さの設定方法についての詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />を 参照してください。
        </para>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String,System.Drawing.Color)">
      <summary>指定したテキスト色を使って、テキストのブロックを現在のドキュメントの ブロックフローにレンダリングします。</summary>
      <param name="text">レンダリングするテキスト。</param>
      <param name="textColor">使用するテキスト色。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          テキストブロックの幅と高さの設定方法についての詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />を 参照してください。
        </para>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>
        指定された
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />を使用して 指定の幅と高さのテキストブロックをレンダリングし、 現在のドキュメントのブロックフローに出力します。
      </summary>
      <param name="text">レンダリングするテキスト。</param>
      <param name="width">
        レンダリングするブロックの幅（
        <b>null</b>の場合は親の幅を使用）。
      </param>
      <param name="height">
        レンダリングするブロックの高さ（
        <b>null</b>の場合は高さの自動調整を使用）。
      </param>
      <param name="style">
        使用するスタイル（
        <b>null</b>が使用可能）。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          テキストブロックの幅と高さの設定方法についての詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />を 参照してください。
        </para>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockText(System.String)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)">
      <summary>
        指定した
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />とサイズを使って、新しいインライン段落を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />にレンダリングすることを開始します。
      </summary>
      <param name="style">
        段落に使用する
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />。
      </param>
      <param name="width">
        段落の幅。
        <b>null</b>の場合、ページ（複数列レイアウトでは列）の幅が使用されます。
      </param>
      <param name="height">
        段落の高さ。
        <b>null</b>の場合は
        <see cref="P:C1.C1Preview.Unit.Auto" />が使用されます。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        このメソッドを使って、内部保持された
        <see cref="T:C1.C1Preview.RenderParagraph" />オブジェクトの
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />、
        <see cref="P:C1.C1Preview.RenderObject.Width" />、 および
        <see cref="P:C1.C1Preview.RenderObject.Height" />を設定して、後続の
        <b>RenderInline...</b>の各呼び出しに応えます。 指定したパラメータは、
        <see cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />、別の
        <see cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />、もしくは任意の
        <b>RenderBlock...</b>または
        <b>RenderDirect...</b>のメソッドの呼び出しによって、開始された段落が終了されるまで効力があります。
        <para>
          別の
          <b>RenderInline...</b>メソッド（
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderInline(C1.C1Preview.ParagraphObject,System.Object,System.Object,C1.C1Preview.Style)" />または
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderInlineText(System.String,C1.C1Preview.Style)" />）を使用するために このメソッドを呼び出す必要はありませんが、このメソッドを呼び出すと、 後続の
          <b>RenderInline...</b>呼び出しによって入力される段落のスタイルとサイズを設定できます。
        </para><para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd">
      <summary>現在のインライン段落のレンダリングを終了します。</summary>
      <remarks>
        このメソッドは、
        <b>RenderInline...</b>の呼び出しに応えるために使用された内部保持された現在の
        <see cref="T:C1.C1Preview.RenderParagraph" />オブジェクトを終了させます。
        <para>
          現在の段落を終了するには、このメソッドを呼び出す必要はありません。 また、現在の段落は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />や任意の
          <b>RenderBlock...</b>または
          <b>RenderDirect...</b>メソッドを呼び出した場合も自動的に終了されます。
        </para><para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInline(C1.C1Preview.ParagraphObject,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>
        <see cref="T:C1.C1Preview.ParagraphObject" />を現在のインライン段落にレンダリングします。
      </summary>
      <param name="po">
        現在のインライン段落の
        <see cref="P:C1.C1Preview.RenderParagraph.Content" />に追加する
        <see cref="T:C1.C1Preview.ParagraphObject" />オブジェクト。
      </param>
      <param name="width">段落の幅。この呼び出しが新しい段落を開始する場合（現在の段落が存在しない場合）にのみ使用されます。</param>
      <param name="height">段落の高さ。この呼び出しが新しい段落を開始する場合（現在の段落が存在しない場合）にのみ使用されます。</param>
      <param name="style">
        指定した
        <see cref="T:C1.C1Preview.ParagraphObject" />に適用する
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        このメソッドは、指定した
        <see cref="T:C1.C1Preview.ParagraphObject" />を現在の内部保持された
        <see cref="T:C1.C1Preview.RenderParagraph" />オブジェクトに追加します。現在の段落が存在しない場合は新しい段落が開始されます。
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineText(System.String,C1.C1Preview.Style)">
      <summary>指定したスタイルを使って、文字列を現在のインライン段落に レンダリングします。</summary>
      <param name="text">
        現在のインライン段落の
        <see cref="P:C1.C1Preview.RenderParagraph.Content" />に追加する文字列。
      </param>
      <param name="style">
        指定したテキストに適用する
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        このメソッドは、指定したスタイルを持つ新しい
        <see cref="T:C1.C1Preview.ParagraphText" />オブジェクトを作成して、 現在内部保持された
        <see cref="T:C1.C1Preview.RenderParagraph" />オブジェクトに追加します。 現在の段落が存在しない場合は新しい段落が開始されます。
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.ParagraphText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineText(System.String,System.Drawing.Font,System.Drawing.Color)">
      <summary>指定したフォントとテキスト色を使って、文字列を 現在のインライン段落にレンダリングします。</summary>
      <param name="text">
        現在のインライン段落の
        <see cref="P:C1.C1Preview.RenderParagraph.Content" />に追加する文字列。
      </param>
      <param name="font">指定したテキストに使用するフォント。</param>
      <param name="textColor">使用するテキスト色。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        このメソッドは、指定したフォントと色を持つ新しい
        <see cref="T:C1.C1Preview.ParagraphText" />オブジェクトを作成して、 現在の内部保持された
        <see cref="T:C1.C1Preview.RenderParagraph" />オブジェクトに追加します。 現在の段落が存在しない場合は新しい段落が開始されます。
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.ParagraphText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineText(System.String,System.Drawing.Font)">
      <summary>指定したフォントを使って、文字列を現在のインライン段落に レンダリングします。</summary>
      <param name="text">
        現在のインライン段落の
        <see cref="P:C1.C1Preview.RenderParagraph.Content" />に追加する文字列。
      </param>
      <param name="font">指定したテキストに使用するフォント。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        このメソッドは、指定したフォントを持つ新しい
        <see cref="T:C1.C1Preview.ParagraphText" />オブジェクトを作成して、 現在の内部保持された
        <see cref="T:C1.C1Preview.RenderParagraph" />オブジェクトに追加します。 現在の段落が存在しない場合は新しい段落が開始されます。
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.ParagraphText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineText(System.String,System.Drawing.Color)">
      <summary>指定したテキスト色を使って、文字列を現在のインライン段落にレンダリングします。</summary>
      <param name="text">
        現在のインライン段落の
        <see cref="P:C1.C1Preview.RenderParagraph.Content" />に追加する文字列。
      </param>
      <param name="textColor">使用するテキスト色。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        このメソッドは、指定したテキスト色を持つ新しい
        <see cref="T:C1.C1Preview.ParagraphText" />オブジェクトを作成して、 現在の内部保持された
        <see cref="T:C1.C1Preview.RenderParagraph" />オブジェクトに追加します。 現在の段落が存在しない場合は新しい段落が開始されます。
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.ParagraphText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineText(System.String,System.Drawing.FontStyle)">
      <summary>指定したフォントスタイルを使って、文字列を 現在のインライン段落にレンダリングします。</summary>
      <param name="text">
        現在のインライン段落の
        <see cref="P:C1.C1Preview.RenderParagraph.Content" />に追加する文字列。
      </param>
      <param name="fontStyle">
        テキストに使用する
        <see cref="T:System.Drawing.FontStyle" />。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        このメソッドは、指定したフォントスタイルを持つ新しい
        <see cref="T:C1.C1Preview.ParagraphText" />オブジェクトを作成して、 現在の内部保持された
        <see cref="T:C1.C1Preview.RenderParagraph" />オブジェクトに追加します。 現在の段落が存在しない場合は新しい段落が開始されます。
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.ParagraphText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineText(System.String)">
      <summary>文字列を現在のインライン段落にレンダリングします。</summary>
      <param name="text">
        現在のインライン段落の
        <see cref="P:C1.C1Preview.RenderParagraph.Content" />に追加する文字列。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        このメソッドは、新しい
        <see cref="T:C1.C1Preview.ParagraphText" />オブジェクトを作成して、 現在の内部保持された
        <see cref="T:C1.C1Preview.RenderParagraph" />オブジェクトに追加します。 現在の段落が存在しない場合は新しい段落が開始されます。
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.ParagraphText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineImage(System.Drawing.Image)">
      <summary>
        <see cref="T:System.Drawing.Image" />を現在のインライン段落にレンダリングします。
      </summary>
      <param name="image">
        現在のインライン段落の
        <see cref="P:C1.C1Preview.RenderParagraph.Content" />に追加する画像。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        このメソッドは、新しい
        <see cref="T:C1.C1Preview.ParagraphImage" />オブジェクトを作成して、 現在の内部保持された
        <see cref="T:C1.C1Preview.RenderParagraph" />オブジェクトに追加します。 現在の段落が存在しない場合は新しい段落が開始されます。
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.ParagraphImage" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderInlineImage(System.Drawing.Image,C1.C1Preview.Style)">
      <summary>
        指定した
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />を使って、
        <see cref="T:System.Drawing.Image" />を現在のインライン段落にレンダリングします。
      </summary>
      <param name="image">
        現在のインライン段落の
        <see cref="P:C1.C1Preview.RenderParagraph.Content" />に追加する画像。
      </param>
      <param name="style">
        画像に使用する
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        このメソッドは、新しい
        <see cref="T:C1.C1Preview.ParagraphImage" />オブジェクトを作成して、 現在の内部保持された
        <see cref="T:C1.C1Preview.RenderParagraph" />オブジェクトに追加します。 現在の段落が存在しない場合は新しい段落が開始されます。
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.ParagraphImage" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineBegin(C1.C1Preview.Style,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderInlineEnd" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockGraphicsBegin">
      <summary>
        グラフィックスを現在のドキュメントのブロックフローに追加するために使用できる内部保持される
        <see cref="T:C1.C1Preview.RenderGraphics" />オブジェクトを作成します。
      </summary>
      <returns>
        このメソッドは常に
        <b>true</b>を返します。
      </returns>
      <remarks>
        このメソッド呼び出しと
        <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockGraphicsEnd" />呼び出しの間に、
        <see cref="P:C1.C1Preview.C1PrintDocument.CurrentBlockRenderGraphics" />プロパティを使って、 描画に使用できる
        <see cref="T:C1.C1Preview.RenderGraphics" />オブジェクトにアクセスします。
        <para>
          このメソッドは、
          <b>RenderBlockGraphicsBegin</b>への呼び出しがマッチする
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockGraphicsEnd" />を呼び出さずにすでに発行されている場合は、例外をスローします。
        </para><para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockGraphicsEnd" />
      <seealso cref="T:C1.C1Preview.RenderGraphics" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockGraphicsEnd">
      <summary>
        直前の
        <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlockGraphicsBegin" />への呼び出しによって 作成されて内部保持された
        <see cref="T:C1.C1Preview.RenderGraphics" />オブジェクトを 現在のドキュメントのブロックフローに追加します。
      </summary>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        内部的に、このメソッドは、
        <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を呼び出して
        <see cref="P:C1.C1Preview.C1PrintDocument.CurrentBlockRenderGraphics" />をパラメータとして渡して、 この値の保持に使用された内部変数をリセットします。
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlockGraphicsBegin" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CurrentBlockRenderGraphics" />
      <seealso cref="T:C1.C1Preview.RenderGraphics" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockArc(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.Style)">
      <summary>円弧を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">円弧の幅。</param>
      <param name="height">円弧の高さ。</param>
      <param name="startAngle">円弧の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円弧の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="style">
        使用する
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockArc(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>円弧を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">円弧の幅。</param>
      <param name="height">円弧の高さ。</param>
      <param name="startAngle">円弧の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円弧の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="line">
        円弧の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="fillColor">塗りつぶし色。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockArc(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>円弧を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">円弧の幅。</param>
      <param name="height">円弧の高さ。</param>
      <param name="startAngle">円弧の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円弧の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="line">
        円弧の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="fillBrush">塗りつぶしブラシ。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockArc(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef)">
      <summary>円弧を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">円弧の幅。</param>
      <param name="height">円弧の高さ。</param>
      <param name="startAngle">円弧の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円弧の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="line">
        円弧の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockArc(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,System.Drawing.Color,C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>円弧を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">円弧の幅。</param>
      <param name="height">円弧の高さ。</param>
      <param name="startAngle">円弧の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円弧の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <param name="fillColor">円弧の塗りつぶし色</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockArc(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>円弧を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">円弧の幅。</param>
      <param name="height">円弧の高さ。</param>
      <param name="startAngle">円弧の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円弧の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Style)">
      <summary>楕円を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
      <param name="style">
        使用する
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>楕円を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
      <param name="line">
        楕円の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="fillColor">楕円の塗りつぶし色</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>楕円を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
      <param name="line">
        楕円の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="fillBrush">楕円の塗りつぶしブラシ。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>楕円を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
      <param name="line">
        楕円の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Color,C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>楕円を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <param name="fillColor">楕円の塗りつぶし色</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>楕円を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockPie(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.Style)">
      <summary>円形を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">円の幅。</param>
      <param name="height">円の高さ。</param>
      <param name="startAngle">円形の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円形の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="style">
        使用する
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockPie(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>円形を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">円の幅。</param>
      <param name="height">円の高さ。</param>
      <param name="startAngle">円形の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円形の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="line">
        円形の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="fillColor">塗りつぶし色。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockPie(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>円形を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">円の幅。</param>
      <param name="height">円の高さ。</param>
      <param name="startAngle">円形の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円形の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="line">
        円形の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="fillBrush">塗りつぶしブラシ。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockPie(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef)">
      <summary>円形を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">円の幅。</param>
      <param name="height">円の高さ。</param>
      <param name="startAngle">円形の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円形の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="line">
        円形の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockPie(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,System.Drawing.Color,C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>円形を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">円の幅。</param>
      <param name="height">円の高さ。</param>
      <param name="startAngle">円形の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円形の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <param name="fillColor">塗りつぶし色。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockPie(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>円形を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">円の幅。</param>
      <param name="height">円の高さ。</param>
      <param name="startAngle">円形の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円形の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Style)">
      <summary>矩形を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="style">
        使用する
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>矩形を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="line">
        矩形の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="fillColor">塗りつぶし色。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>矩形を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="line">
        矩形の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="fillBrush">塗りつぶしブラシ。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>矩形を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="line">
        矩形の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Color,C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>矩形を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <param name="fillColor">塗りつぶし色。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>矩形を現在のドキュメントのブロックフローにレンダリングします。</summary>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockHorzLine(C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>指定した幅の水平線をページの左から始めて現在のドキュメントの ブロックフローにレンダリングします。</summary>
      <param name="width">線の幅。</param>
      <param name="line">
        線の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderLine" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderBlockVertLine(C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>指定した高さを持つ垂直線を現在の位置から始めて現在のドキュメントの ブロックフローにレンダリングします。</summary>
      <param name="height">線の高さ。</param>
      <param name="line">
        線の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <returns>
        この呼び出しによって警告が発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderLine" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRichText(C1.C1Preview.Unit,C1.C1Preview.Unit,System.String,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>
        RTF 形式の文字列を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        テキストのレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        テキストのレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="rtf">レンダリングする RTF 形式の文字列。</param>
      <param name="width">
        テキスト領域の幅（
        <b>null</b>も
        <b>auto</b>も使用不可)。
      </param>
      <param name="height">
        テキスト領域の高さ（
        <b>null</b>が使用可能。この場合は
        <see cref="P:C1.C1Preview.Unit.Auto" />を使用)。
      </param>
      <param name="style">
        使用する
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />、または
        <b>null</b>。
      </param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRichText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRichText(C1.C1Preview.Unit,C1.C1Preview.Unit,System.String,System.Object)">
      <summary>
        <b>auto</b>の高さを使って、RTF 形式の文字列を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        テキストのレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        テキストのレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="rtf">レンダリングする RTF 形式の文字列。</param>
      <param name="width">
        テキスト領域の幅（
        <b>null</b>も
        <b>auto</b>も使用不可)。
      </param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRichText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectImage(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Image,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>
        <see cref="T:System.Drawing.Image" />を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        画像のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        画像のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="image">レンダリングする画像。</param>
      <param name="width">
        画像の幅（
        <b>null</b>の場合は
        <b>auto</b>を使用）。
      </param>
      <param name="height">
        画像の高さ（
        <b>null</b>の場合は
        <b>auto</b>を使用）。
      </param>
      <param name="style">
        使用する
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />、または
        <b>null</b>。
      </param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderImage" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectImage(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Image,System.Object,System.Object,C1.C1Preview.ImageAlign)">
      <summary>
        <see cref="T:System.Drawing.Image" />を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        画像のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        画像のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="image">レンダリングする画像。</param>
      <param name="width">
        画像の幅（
        <b>null</b>の場合は
        <b>auto</b>を使用）。
      </param>
      <param name="height">
        画像の高さ（
        <b>null</b>の場合は
        <b>auto</b>を使用）。
      </param>
      <param name="imageAlign">使用する画像配置。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderImage" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectImage(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Image)">
      <summary>
        <see cref="T:System.Drawing.Image" />を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        画像のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        画像のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="image">レンダリングする画像。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderImage" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectText(C1.C1Preview.Unit,C1.C1Preview.Unit,System.String,System.Object,System.Object,C1.C1Preview.Style)">
      <summary>
        テキストを現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        画像のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        画像のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="text">レンダリングする文字列。</param>
      <param name="width">
        テキスト領域の幅（
        <b>null</b>の場合は
        <b>auto</b>を使用）。
      </param>
      <param name="height">
        テキスト領域の高さ（
        <b>null</b>の場合は
        <b>auto</b>を使用）。
      </param>
      <param name="style">
        使用する
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />、または
        <b>null</b>。
      </param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectText(C1.C1Preview.Unit,C1.C1Preview.Unit,System.String,System.Object,System.Drawing.Font,System.Drawing.Color,C1.C1Preview.AlignHorzEnum)">
      <summary>
        <b>auto</b>の高さを使って、テキストを現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        画像のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        画像のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="text">レンダリングする文字列。</param>
      <param name="width">
        テキスト領域の幅（
        <b>null</b>の場合は
        <b>auto</b>を使用）。
      </param>
      <param name="font">使用するフォント。</param>
      <param name="textColor">テキスト色。</param>
      <param name="horzAlign">テキストの水平配置。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderText" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectGraphicsBegin(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
        内部的に維持される
        <see cref="T:C1.C1Preview.RenderGraphics" />オブジェクトを作成します。 このオブジェクトは、現在のページ上のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の指定位置に グラフィックスを追加するために使用できます。
      </summary>
      <param name="x">現在のページ上の水平（X）座標。</param>
      <param name="y">現在のページ上の垂直（Y）座標。</param>
      <remarks>
        このメソッド呼び出しと
        <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirectGraphicsEnd" />呼び出しの間に、
        <see cref="P:C1.C1Preview.C1PrintDocument.CurrentDirectRenderGraphics" />プロパティを使って、描画に使用できる
        <see cref="T:C1.C1Preview.RenderGraphics" />オブジェクトにアクセスします。
        <para>
          このメソッドは、
          <b>RenderDirectGraphicsBegin</b>への呼び出しがマッチする
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirectGraphicsEnd" />を呼び出さずに発行されている場合は例外をスローします。
        </para><para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirectGraphicsEnd" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CurrentDirectRenderGraphics" />
      <seealso cref="T:C1.C1Preview.RenderGraphics" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectGraphicsEnd">
      <summary>
        直前の
        <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirectGraphicsBegin(C1.C1Preview.Unit,C1.C1Preview.Unit)" />への 呼び出しによって作成されて内部保持された
        <see cref="T:C1.C1Preview.RenderGraphics" />オブジェクトを ドキュメントの現在のページ上にレンダリングします。
      </summary>
      <remarks>
        内部的に、このメソッドは、
        <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject)" />を呼び出して
        <see cref="P:C1.C1Preview.C1PrintDocument.CurrentDirectRenderGraphics" />をパラメータとして渡して、 この値の保持に使用された内部変数をリセットします。
        <para>
          <see cref="P:C1.C1Preview.C1PrintDocument.CurrentDirectRenderGraphics" />のレンダリング位置の座標は、先行する
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirectGraphicsBegin(C1.C1Preview.Unit,C1.C1Preview.Unit)" />への呼び出しによって決定されます。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirectGraphicsBegin(C1.C1Preview.Unit,C1.C1Preview.Unit)" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CurrentDirectRenderGraphics" />
      <seealso cref="T:C1.C1Preview.RenderGraphics" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Warnings" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectArc(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.Style)">
      <summary>
        円弧を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加します。
      </summary>
      <param name="x">
        円弧のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        円弧のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">円弧の幅。</param>
      <param name="height">円弧の高さ。</param>
      <param name="startAngle">円弧の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円弧の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="style">
        使用する
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />。
      </param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectArc(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
        円弧を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加します。
      </summary>
      <param name="x">
        円弧のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        円弧のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">円弧の幅。</param>
      <param name="height">円弧の高さ。</param>
      <param name="startAngle">円弧の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円弧の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="line">
        円弧の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="fillColor">塗りつぶし色。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectArc(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
        円弧を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加します。
      </summary>
      <param name="x">
        円弧のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        円弧のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">円弧の幅。</param>
      <param name="height">円弧の高さ。</param>
      <param name="startAngle">円弧の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円弧の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="line">
        円弧の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="fillBrush">塗りつぶしブラシ。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectArc(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef)">
      <summary>
        円弧を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加します。
      </summary>
      <param name="x">
        円弧のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        円弧のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">円弧の幅。</param>
      <param name="height">円弧の高さ。</param>
      <param name="startAngle">円弧の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円弧の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="line">
        円弧の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectArc(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,System.Drawing.Color,C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>
        円弧を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加します。
      </summary>
      <param name="x">
        円弧のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        円弧のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">円弧の幅。</param>
      <param name="height">円弧の高さ。</param>
      <param name="startAngle">円弧の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円弧の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <param name="fillColor">塗りつぶし色。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectArc(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>
        円弧を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加します。
      </summary>
      <param name="x">
        円弧のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        円弧のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">円弧の幅。</param>
      <param name="height">円弧の高さ。</param>
      <param name="startAngle">円弧の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円弧の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Style)">
      <summary>
        楕円を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加します。
      </summary>
      <param name="x">
        楕円のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        楕円のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
      <param name="style">
        使用する
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />。
      </param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
        楕円を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加します。
      </summary>
      <param name="x">
        楕円のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        楕円のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
      <param name="line">
        楕円の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="fillColor">塗りつぶし色。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
        楕円を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加します。
      </summary>
      <param name="x">
        楕円のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        楕円のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
      <param name="line">
        楕円の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="fillBrush">塗りつぶしブラシ。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
        楕円を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加します。
      </summary>
      <param name="x">
        楕円のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        楕円のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
      <param name="line">
        楕円の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Color,C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>
        楕円を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加します。
      </summary>
      <param name="x">
        楕円のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        楕円のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <param name="fillColor">塗りつぶし色。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectEllipse(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>
        楕円を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加します。
      </summary>
      <param name="x">
        楕円のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        楕円のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPie(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.Style)">
      <summary>
        円形を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        円形のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        円形のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">円の幅。</param>
      <param name="height">円の高さ。</param>
      <param name="startAngle">円形の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円形の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="style">
        使用する
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />。
      </param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPie(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
        円形を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        円形のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        円形のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">円の幅。</param>
      <param name="height">円の高さ。</param>
      <param name="startAngle">円形の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円形の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="line">
        円形の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="fillColor">塗りつぶし色。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPie(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
        円形を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        円形のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        円形のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">円の幅。</param>
      <param name="height">円の高さ。</param>
      <param name="startAngle">円形の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円形の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="line">
        円形の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="fillBrush">塗りつぶしブラシ。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPie(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef)">
      <summary>
        円形を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        円形のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        円形のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">円の幅。</param>
      <param name="height">円の高さ。</param>
      <param name="startAngle">円形の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円形の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="line">
        円形の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPie(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,System.Drawing.Color,C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>
        円形を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        円形のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        円形のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">円の幅。</param>
      <param name="height">円の高さ。</param>
      <param name="startAngle">円形の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円形の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <param name="fillColor">塗りつぶし色。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPie(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>
        円形を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        円形のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        円形のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">円の幅。</param>
      <param name="height">円の高さ。</param>
      <param name="startAngle">円形の開始角度（度単位。X 軸から時計回りに測定）。</param>
      <param name="sweepAngle">
        円形の掃引角度（度単位。
        <paramref name="startAngle" />から時計回りに測定）。
      </param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Style)">
      <summary>
        矩形を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        矩形のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        矩形のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="style">
        使用する
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />。
      </param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
        矩形を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        矩形のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        矩形のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="line">
        矩形の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="fillColor">塗りつぶし色。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
        矩形を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        矩形のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        矩形のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="line">
        矩形の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="fillBrush">塗りつぶしブラシ。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
        矩形を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        矩形のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        矩形のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="line">
        矩形の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Color,C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>
        矩形を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        矩形のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        矩形のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <param name="fillColor">塗りつぶし色。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectRectangle(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>
        矩形を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="x">
        矩形のレンダリング位置の水平（X）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="y">
        矩形のレンダリング位置の垂直（Y）座標（
        <b>auto</b>は使用不可）。
      </param>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectLine(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
        線を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="fromX">線が結合する第１ポイントの X 座標。</param>
      <param name="fromY">線が結合する第１ポイントの Y 座標。</param>
      <param name="toX">線が結合する第２ポイントの X 座標。</param>
      <param name="toY">線が結合する第２ポイントの Y 座標。</param>
      <param name="line">
        線の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderLine" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectLine(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>
        線を現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Body" />の 現在のページ上の指定位置に追加して解決します。
      </summary>
      <param name="fromX">線が結合する第１ポイントの X 座標。</param>
      <param name="fromY">線が結合する第１ポイントの Y 座標。</param>
      <param name="toX">線が結合する第２ポイントの X 座標。</param>
      <param name="toY">線が結合する第２ポイントの Y 座標。</param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderLine" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPolygon(System.Collections.IEnumerable,System.Boolean,C1.C1Preview.Style)">
      <summary>
        <see cref="T:C1.C1Preview.RenderPolygon" />を
        <see cref="T:C1.C1Preview.UnitPoint" />オブジェクトのコレクションから作成して、 現在のページ上のポイント座標で指定された位置にレンダリングします。
      </summary>
      <param name="points">
        <see cref="T:C1.C1Preview.UnitPoint" />オブジェクトのコレクション （
        <see cref="T:C1.C1Preview.UnitPoint" />で
        <b>ない</b>オブジェクトがコレクションに見つかった場合は例外が発生します）。
      </param>
      <param name="closed">多角形が閉じた状態（すなわち、最後のポイントが最初のポイントに結合されている）かどうかを示す値。</param>
      <param name="style">
        使用する
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />。
      </param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.CreateRenderPolygon(System.Collections.IEnumerable,System.Boolean)" />
      <seealso cref="T:C1.C1Preview.RenderPolygon" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPolygon(System.Collections.IEnumerable,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
        <see cref="T:C1.C1Preview.RenderPolygon" />を
        <see cref="T:C1.C1Preview.UnitPoint" />オブジェクトのコレクションから作成して、 現在のページ上のポイント座標で指定された位置にレンダリングします。
        <para>
          <paramref name="fillColor" />が空でなく不透明な色の場合は多角形は閉じた状態、 その他の場合は開いた状態。
        </para>
      </summary>
      <param name="points">
        <see cref="T:C1.C1Preview.UnitPoint" />オブジェクトのコレクション （
        <see cref="T:C1.C1Preview.UnitPoint" />で
        <b>ない</b>オブジェクトがコレクションに見つかった場合は例外が発生します）。
      </param>
      <param name="line">
        多角形の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="fillColor">塗りつぶし色（空または透明の場合は多角形は閉じた状態、その以外の場合は開いた状態）。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.CreateRenderPolygon(System.Collections.IEnumerable,System.Boolean)" />
      <seealso cref="T:C1.C1Preview.RenderPolygon" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPolygon(System.Collections.IEnumerable,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
        <see cref="T:C1.C1Preview.RenderPolygon" />を
        <see cref="T:C1.C1Preview.UnitPoint" />オブジェクトのコレクションから作成して、 現在のページ上のポイント座標で指定された位置にレンダリングします。
        <para>
          <paramref name="fillBrush" />が
          <b>null</b>の場合は多角形は開いた状態、その以外の場合は閉じた状態です。
        </para>
      </summary>
      <param name="points">
        <see cref="T:C1.C1Preview.UnitPoint" />オブジェクトのコレクション （
        <see cref="T:C1.C1Preview.UnitPoint" />で
        <b>ない</b>オブジェクトがコレクションに見つかった場合は例外が発生します）。
      </param>
      <param name="line">
        多角形の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="fillBrush">
        塗りつぶし色（
        <b>null</b>の場合は多角形は開いた状態、その以外の場合は閉じた状態）。
      </param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.CreateRenderPolygon(System.Collections.IEnumerable,System.Boolean)" />
      <seealso cref="T:C1.C1Preview.RenderPolygon" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPolygon(System.Collections.IEnumerable,C1.C1Preview.LineDef)">
      <summary>
        開いた
        <see cref="T:C1.C1Preview.RenderPolygon" />を
        <see cref="T:C1.C1Preview.UnitPoint" />オブジェクトのコレクションから作成して、 現在のページ上のポイント座標で指定された位置にレンダリングします。
      </summary>
      <param name="points">
        <see cref="T:C1.C1Preview.UnitPoint" />オブジェクトのコレクション （
        <see cref="T:C1.C1Preview.UnitPoint" />で
        <b>ない</b>オブジェクトがコレクションに見つかった場合は例外が発生します）。
      </param>
      <param name="line">
        多角形の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.CreateRenderPolygon(System.Collections.IEnumerable,System.Boolean)" />
      <seealso cref="T:C1.C1Preview.RenderPolygon" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPolygon(System.Collections.IEnumerable,System.Drawing.Color,C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>
        <see cref="T:C1.C1Preview.RenderPolygon" />を
        <see cref="T:C1.C1Preview.UnitPoint" />オブジェクトのコレクションから作成して、 現在のページ上のポイント座標で指定された位置にレンダリングします。
        <para>
          <paramref name="fillColor" />が空でなく不透明な色の場合は多角形は閉じた状態、 その以外の場合は開いた状態。
        </para>
      </summary>
      <param name="points">
        <see cref="T:C1.C1Preview.UnitPoint" />オブジェクトのコレクション （
        <see cref="T:C1.C1Preview.UnitPoint" />で
        <b>ない</b>オブジェクトがコレクションに見つかった場合は例外が発生します）。
      </param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <param name="fillColor">塗りつぶし色（空または透明の場合は多角形は閉じた状態、その以外の場合は開いた状態）。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.CreateRenderPolygon(System.Collections.IEnumerable,System.Boolean)" />
      <seealso cref="T:C1.C1Preview.RenderPolygon" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.RenderDirectPolygon(System.Collections.IEnumerable,System.Drawing.Color,C1.C1Preview.Unit)">
      <summary>
        開いた
        <see cref="T:C1.C1Preview.RenderPolygon" />を
        <see cref="T:C1.C1Preview.UnitPoint" />オブジェクトのコレクションから作成して、 現在のページ上のポイント座標で指定された位置にレンダリングします。
      </summary>
      <param name="points">
        <see cref="T:C1.C1Preview.UnitPoint" />オブジェクトのコレクション （
        <see cref="T:C1.C1Preview.UnitPoint" />で
        <b>ない</b>オブジェクトがコレクションに見つかった場合は例外が発生します）。
      </param>
      <param name="lineColor">線の色。</param>
      <param name="lineThickness">線の太さ。</param>
      <remarks>
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。 詳細は、
          <see cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />を参照してください。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.CreateRenderPolygon(System.Collections.IEnumerable,System.Boolean)" />
      <seealso cref="T:C1.C1Preview.RenderPolygon" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderDirect(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.RenderObject,System.Object,System.Object)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromRdl(System.String)">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />クラスの新しいインスタンスを作成し、 作成されたドキュメントに RDL レポート定義をインポートします。
      </summary>
      <param name="fileName">レポート定義を含むファイルの名前。</param>
      <returns>
        作成された
        <see cref="T:C1.C1Preview.C1PrintDocument" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ImportRdl(System.String)">
      <summary>RDL レポート定義を現在のドキュメントにインポートします。</summary>
      <param name="fileName">レポート定義を含むファイルの名前。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FromC1Report(System.String,System.String)">
      <summary>
        指定された
        <see cref="T:C1.C1Report.C1Report" />を表す
        <see cref="T:C1.C1Preview.C1PrintDocument" />クラスの新しいインスタンスを作成します。
      </summary>
      <param name="fileName">レポート定義を含むファイルの名前。</param>
      <param name="reportName">
        <paramref name="fileName" />内のレポートの名前。
      </param>
      <returns>
        作成された
        <see cref="T:C1.C1Preview.C1PrintDocument" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.ImportC1Report(System.String,System.String)">
      <summary>C1Report のレポート定義ファイルをインポートします。</summary>
      <param name="fileName">レポート定義ファイル名。</param>
      <param name="reportName">レポート名。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.String,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>ドキュメントをディスクファイルにエクスポートします。</summary>
      <param name="fileName">出力ファイル名。ファイルの拡張子によってエクスポート形式が決まります。</param>
      <param name="outputRange">エクスポートするページの範囲（すべてのページをエクスポートする場合は null）。</param>
      <param name="showProgress">進捗ダイアログを表示するかどうかを示すフラグ。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.String,System.Boolean)">
      <summary>ドキュメントをディスクファイルにエクスポートします。</summary>
      <param name="fileName">出力ファイル名。ファイルの拡張子によってエクスポート形式が決まります。</param>
      <param name="showProgress">進捗ダイアログを表示するかどうかを示すフラグ。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.String)">
      <summary>ドキュメントをディスクファイルにエクスポートします。</summary>
      <param name="fileName">出力ファイル名。ファイルの拡張子によってエクスポート形式が決まります。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.IO.Stream,C1.C1Preview.Export.ExportProvider,System.Boolean)">
      <summary>ドキュメントをストリームにエクスポートします。</summary>
      <param name="stream">エクスポート先のストリーム。</param>
      <param name="exportProvider">エクスポートプロバイダ。C1.C1Preview.Export.ExportProviders クラスにある静的エクスポートプロバイダのいずれかを使用します。</param>
      <param name="showProgress">進捗ダイアログを表示するかどうかを示すフラグ。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.IO.Stream,C1.C1Preview.Export.ExportProvider)">
      <summary>ドキュメントをストリームにエクスポートします。</summary>
      <param name="stream">エクスポート先のストリーム。</param>
      <param name="exportProvider">エクスポートプロバイダ。C1.C1Preview.Export.ExportProviders クラスにある静的エクスポートプロバイダのいずれかを使用します。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.String,C1.C1Preview.Export.ExportProvider,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>ドキュメントをディスクファイルにエクスポートします。</summary>
      <param name="fileName">出力ファイル名。ファイルの拡張子によってエクスポート形式が決まります。</param>
      <param name="exportProvider">エクスポートプロバイダ。C1.C1Preview.Export.ExportProviders クラスにある静的エクスポートプロバイダのいずれかを使用します。</param>
      <param name="outputRange">エクスポートするページの範囲（すべてのページをエクスポートする場合は null）。</param>
      <param name="showProgress">進捗ダイアログを表示するかどうかを示すフラグ。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Export(System.IO.Stream,C1.C1Preview.Export.ExportProvider,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>ドキュメントをストリームにエクスポートします。</summary>
      <param name="stream">エクスポート先のストリーム。</param>
      <param name="exportProvider">エクスポートプロバイダ。C1.C1Preview.Export.ExportProviders クラスにある静的エクスポートプロバイダのいずれかを使用します。</param>
      <param name="outputRange">エクスポートするページの範囲（すべてのページをエクスポートする場合は null）。</param>
      <param name="showProgress">進捗ダイアログを表示するかどうかを示すフラグ。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print">
      <summary>印刷の進行状況ダイアログを表示せずに、現在のドキュメントを デフォルトプリンタ設定で印刷します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings)">
      <summary>ドキュメントを印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,System.Boolean)">
      <summary>ドキュメントを印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="showProgress">進捗ダイアログを表示するかどうかを示すフラグ。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,C1.C1Preview.OutputRange)">
      <summary>ドキュメントを印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="outputRange">エクスポートするページの範囲（すべてのページをエクスポートする場合は null）。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>ドキュメントを印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="outputRange">エクスポートするページの範囲（すべてのページをエクスポートする場合は null）。</param>
      <param name="showProgress">進捗ダイアログを表示するかどうかを示すフラグ。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,C1.C1Preview.OutputRange)">
      <summary>ドキュメントを印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="defaultPageSettings">使用するデフォルトのページ設定。</param>
      <param name="outputRange">エクスポートするページの範囲（すべてのページをエクスポートする場合は null）。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,System.Boolean)">
      <summary>ドキュメントを印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="defaultPageSettings">使用するデフォルトのページ設定。</param>
      <param name="showProgress">進捗ダイアログを表示するかどうかを示すフラグ。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>ドキュメントを印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="defaultPageSettings">使用するデフォルトのページ設定。</param>
      <param name="outputRange">エクスポートするページの範囲（すべてのページをエクスポートする場合は null）。</param>
      <param name="showProgress">進捗ダイアログを表示するかどうかを示すフラグ。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.PrintDialog">
      <summary>標準印刷ダイアログを表示して、ユーザーに現在のドキュメントの印刷を許可します。</summary>
      <returns>
        ドキュメントが印刷された場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.PrintDialog(System.Drawing.Printing.PrinterSettings,System.Int32[],System.Boolean)">
      <summary>標準印刷ダイアログを表示して、ユーザーに現在のドキュメントの印刷を許可します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="selectedPageNumbers">
        選択されたページ番号のリスト。 このパラメータが
        <b>null</b>でない場合、ダイアログの［
        <b>選択</b>］オプションが使用可能になります。
      </param>
      <param name="showProgress">印刷の進行状況を表示するかどうか。</param>
      <returns>
        ドキュメントが印刷された場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.AdvanceBlockFlow(C1.C1Preview.Unit)">
      <summary>現在のブロックフロー位置を指定した距離だけ進みます。</summary>
      <param name="distance">ブロックフロー位置を進む量（負を設定可能）。</param>
      <remarks>
        指定した
        <paramref name="distance" />は、絶対値を指定する必要があります（式またはパーセンテージは使用不可）が、 負の値に設定して、現在のブロックフロー位置を現在のページの上方向に移動できます。
        <para>
          このメソッドは、現在のドキュメント上の
          <see cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />メソッド呼び出しと
          <see cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />メソッド呼び出しの間でのみ使用できます。
        </para>
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.RenderBlock(C1.C1Preview.RenderObject)" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.StartDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.EndDoc" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.Generate" />
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.PageAsMetafile(System.Int32)">
      <summary>
        指定したページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />を返します。
      </summary>
      <param name="pageNo">１から始まるページ番号。</param>
      <returns>
        指定したページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />。ページが見つからなかった場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.GetLengthAbsValue(C1.C1Preview.LengthAbs,System.Drawing.Font)">
      <summary>
        <see cref="T:C1.C1Preview.LengthAbs" />オブジェクトによって表された絶対長さを現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の
        <b>double</b>値に変換します。
      </summary>
      <param name="length">
        変換する長さ。
        <see cref="F:C1.C1Preview.UnitTypeEnum.Default" />で表されている場合は、 現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.DefaultUnit" />単位が使用されます。
      </param>
      <param name="font">
        <paramref name="length" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Em" />、
        <see cref="F:C1.C1Preview.UnitTypeEnum.Ex" />または
        <see cref="F:C1.C1Preview.UnitTypeEnum.LineSpacing" />で表されている場合に 使用するフォント（その他の場合は
        <b>null</b>が使用可能）。
      </param>
      <returns>
        変換された
        <b>double</b>値。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.GetLengthAbsValue(C1.C1Preview.LengthAbs,C1.C1Preview.Style,C1.C1Preview.Scripting.IScriptContext)">
      <summary>
        <see cref="T:C1.C1Preview.LengthAbs" />オブジェクトによって表された絶対長さを現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位の
        <b>double</b>値に変換します。
      </summary>
      <param name="length">
        変換する長さ。
        <see cref="F:C1.C1Preview.UnitTypeEnum.Default" />で表されている場合は、 現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.DefaultUnit" />単位が使用されます。
      </param>
      <param name="style">
        フォントを提供する
        <see cref="P:C1.C1Preview.C1PrintDocument.Style" />。
        <paramref name="length" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Em" />、
        <see cref="F:C1.C1Preview.UnitTypeEnum.Ex" />、または
        <see cref="F:C1.C1Preview.UnitTypeEnum.LineSpacing" />で表されている場合に必要です（その他の場合は
        <b>null</b>が使用可能）。
      </param>
      <param name="context">
        計算されたプロパティの取得に使用される
        <see cref="T:C1.C1Preview.Scripting.IScriptContext" />。
      </param>
      <returns>
        変換された
        <b>double</b>値。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FindAnchor(System.String)">
      <summary>
        現在のドキュメント内の指定した
        <see cref="P:C1.C1Preview.C1Anchor.Name" />を持つ
        <see cref="T:C1.C1Preview.C1Anchor" />を検索します。
      </summary>
      <param name="anchorName">検索する名前。</param>
      <returns>
        見つかったアンカーに関する情報を含む
        <see cref="T:C1.C1Preview.C1AnchorInfo" />オブジェクト。見つからなかった場合は null。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1PrintDocument.FindInputFragment(System.Int32,System.Boolean)">
      <summary>最初の RenderInputFragment オブジェクトを検索します。</summary>
      <param name="startPageIndex">開始ページのインデックス。</param>
      <param name="forward">前方または後方検索するかどうかを指定します。</param>
      <returns>検索された RenderInputFragment オブジェクトまたは null を返します。</returns>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CreationDevice">
      <summary>
        ドキュメントの生成時に参照グラフィックスの提供に使用される デバイスのタイプを取得または設定します。 このプロパティが
        <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Printer" />に設定された場合、
        <see cref="P:C1.C1Preview.C1PrintDocument.CreationPrinterName" />はプリンタを指定します。
      </summary>
      <remarks>
        <para>
          <see cref="N:C1.C1Report" />または
          <see cref="T:C1.C1Preview.C1PrintDocument" />のレンダリング時に使用される参照デバイスを決定するデフォルト動作は、 静的プロパティである
          <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementDevice" />と
          <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementPrinterName" />で指定されます。 （静的でない）
          <see cref="P:C1.C1Preview.C1PrintDocument.CreationDevice" />、
          <see cref="P:C1.C1Preview.C1PrintDocument.CreationPrinterName" />、および
          <see cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" />プロパティは、個別のコンポーネントの動作をオーバーライドできます。
        </para>
        <para>
          通常、すべてのインストールされているプリンタが 高解像度の参照
          <see cref="T:System.Drawing.Graphics" />オブジェクトを取得するためにスキャンされます。 この処理を省略するには、このプロパティを
          <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Screen" />に設定します。 これでレンダリングをスピードアップできますが、 その際にレイアウトの精度が多少失われる場合があります。
        </para>
      </remarks>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationPrinterName" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationGraphics" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationPrinterName" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CreationPrinterName">
      <summary>
        ドキュメントの生成時に参照グラフィックスの提供に使用される プリンタの名前を取得または設定します。
        <para>
          このプロパティは
          <see cref="P:C1.C1Preview.C1PrintDocument.CreationDevice" />を
          <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Printer" />に設定した場合にのみ使用されます。
        </para><para>
          このプロパティを
          <b>null</b>設定すると、参照プリンタを自動的に選択します。
        </para>
      </summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDevice" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationGraphics" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationPrinterName" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CreationDpi">
      <summary>ドキュメントの生成時に使用される dpi を取得します。</summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDevice" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationPrinterName" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationGraphics" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationPrinterName" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CreationGraphics">
      <summary>ドキュメントの生成に使用される Graphics オブジェクトを取得します。</summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDevice" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationPrinterName" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationPrinterName" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ActualCreationDevice">
      <summary>
        ドキュメントの生成に使用された実際の測定デバイスを取得します。 このデバイスは、
        <see cref="P:C1.C1Preview.C1PrintDocument.CreationDevice" />での指定と異なることができます （
        <see cref="P:C1.C1Preview.C1PrintDocument.CreationDevice" />を
        <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Printer" />に設定した場合に 現在のシステムにプリンタがインストールされていない場合など）。
      </summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDevice" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationPrinterName" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationGraphics" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ActualCreationPrinterName">
      <summary>
        ドキュメントの生成に使用された実際の測定プリンタの名前を取得します。 これは、
        <see cref="P:C1.C1Preview.C1PrintDocument.CreationPrinterName" />で指定された名前と異なることができます （該当するプリンタがないシステム上でレポートがレンダリングされた場合など）。
      </summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDevice" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationPrinterName" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationDpi" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.CreationGraphics" />
      <seealso cref="P:C1.C1Preview.C1PrintDocument.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.UsePrinterForDefaultPageSettings">
      <summary>デフォルトのページ設定をデフォルトのプリンタから取得するか（プリンタがネットワークプリンタの場合は処理速度が遅くなることがある）、現在のロケールに基づいて計算するかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.MeasurementDpi">
      <summary>MeasurementGraphics の dpi を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.MeasurementGraphics">
      <summary>ドキュメントのレイアウトの測定に使用される Graphics オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.MeasurementPrinterName">
      <summary>ドキュメントのレイアウトの測定に使用される Graphics を提供するプリンタの名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.MeasurementDevice">
      <summary>ドキュメントのレイアウトの測定に使用される Graphics を提供するデバイスのタイプを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.PageNumberingChange">
      <summary>
        ドキュメントの最初のページに適用される
        <see cref="P:C1.C1Preview.C1PrintDocument.PageNumberingChange" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.MaxPages">
      <summary>
        生成されるドキュメントの最大ページ数を制限する値を取得または設定します。
        <para>デフォルト値は -1 です。これは、ドキュメントのページ数が無制限であることを示します。</para><para>
          このプロパティは、
          <see cref="M:C1.C1Preview.C1PrintDocument.Generate" />メソッドを使用してドキュメントを作成する場合にのみ関連します。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CreationMode">
      <summary>ドキュメント作成のモードを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.BusyState">
      <summary>ドキュメントのビジー状態を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.EmfType">
      <summary>このドキュメントによって作成されるメタファイルのタイプを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentInfo">
      <summary>ドキュメントに関する一般情報（作成者、キャプションなど）を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ResolvedUnit">
      <summary>オブジェクトフラグメントの境界を指定する際の測定単位を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.PageLayout">
      <summary>ドキュメントのページレイアウトを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.PageLayouts">
      <summary>ドキュメントで使用されるページレイアウトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Stacking">
      <summary>ドキュメントのスタック規則を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DefaultUnit">
      <summary>デフォルトの測定単位を定義します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Body">
      <summary>ページ本体を表すオブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Tags">
      <summary>ユーザーによって定義されたドキュメントのタグのコレクションを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.TagOpenParen">
      <summary>タグの先頭文字を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.TagCloseParen">
      <summary>タグの終端文字を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.TagEscapeString">
      <summary>タグ指定文字を出力するために用いられるエスケープ文字を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ThrowExceptionOnError">
      <summary>生成時にエラーが発生すると例外が発生することを示します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AllowNonReflowableDocs">
      <summary>リフロー可能でないドキュメントをユーザーが作成できるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ClipPage">
      <summary>コンテンツをページマージンでクリップするかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DisableUserReflow">
      <summary>エンドユーザーが複数のページ設定でドキュメントをリフローできるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.UseGdiPlusTextRendering">
      <summary>GDI+ を使用して文字列を描画するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DoEvents">
      <summary>
        ドキュメントの生成中に、
        <see cref="T:C1.C1Preview.C1PrintDocument" />が Windows メッセージを処理するかどうかを指定します。
      </summary>
      <remarks>
        <para>このプロパティを true に設定すると、ドキュメントの生成中に、ユーザーがフォームをサイズ変更したり、ボタンをクリックすることができます。これにより、アプリケーションの応答性がよくなります。また、ドキュメントの生成を停止するためのキャンセルボタンを提供する場合には必要です。そうしないと、生成が終了するまで、ユーザーはキャンセルボタンをクリックできなくなります。</para>
        <para>このプロパティを false に設定すると、ドキュメントが多少速く生成されます。</para>
      </remarks>
      <example>
        <para>
          次のコードは、
          <see cref="T:C1.C1Preview.C1PrintDocument" />に関連付けられた［生成］ボタンと［キャンセル］ボタンを実装します。
        </para>
        <para>
          ［生成］ボタンは、ドキュメントの生成を開始する前にドキュメントがビジー状態かどうかをチェックします。ドキュメントが生成を終了する前に、ユーザーが連続して［生成］ボタンをクリックする可能性があるため、この処理は必要です。コンポーネントがビジー状態のときに
          <see cref="M:C1.C1Preview.C1PrintDocument.Generate" />メソッドを呼び出すと、例外が生成されます。
        </para>
        <para>
          ［キャンセル］ボタンは、ドキュメントが現在生成中かどうかをチェックし、生成中の場合は
          <see cref="P:C1.C1Preview.C1PrintDocument.Cancel" />プロパティを true に設定します。
        </para>
        <code>
          <![CDATA[
          _doc.DoEvents = true;
          
          private void Generate_Click(object sender, EventArgs e)
          {
            if (_doc.BusyState != BusyStateEnum.Ready)
              Console.WriteLine("現在ドキュメントはビジーのため、生成できません。");
            else
              _doc.Generate();
          }
          
          private void Cancel_Click(object sender, EventArgs e)
          {
            if (_doc.BusyState != BusyStateEnum.Ready)
              _doc.Cancel = true;
            else
              Console.WriteLine("ドキュメントは生成中でないため、キャンセルできません。");
          }
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Style">
      <summary>ドキュメントのメインスタイル。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Outlines">
      <summary>ドキュメントのアウトラインを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Dictionary">
      <summary>ドキュメントの辞書を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.FormsKeyActionTab">
      <summary>このドキュメントに接続されている C1PreviewPane コントロールで［Tab］キーが押されたときに実行されるアクションを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.FormsKeyActionEnter">
      <summary>このドキュメントに接続されている C1PreviewPane コントロールで［Enter］キーが押されたときに実行されるアクションを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.FormsStyle">
      <summary>ドキュメントの RenderInputXXX オブジェクトの外観を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AddWarningsWhenErrorInScript">
      <summary>
        スクリプトエラーが見つからなかったときにメッセージを現在のドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.Warnings" />コレクションに追加するかどうかを示す値を 取得または設定します。
        <para>デフォルト値は false です。</para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ShowTagsInputDialog">
      <summary>
        ドキュメントが生成される前に、一部またはすべてのユーザー定義タグ （
        <see cref="P:C1.C1Preview.C1PrintDocument.Tags" />コレクションの要素）の値を入力できるダイアログが ユーザーに表示されるかどうかを示す値を取得または設定します。 タグをダイアログに包含または除外するには、
        <see cref="P:C1.C1Preview.Tag.ShowInDialog" />を使用します。
        <para>デフォルト値は false です。</para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.TagsInputDialogClass">
      <summary>
        タグ値の入力に使用されるフォームのタイプを取得または設定します （フォームは
        <see cref="P:C1.C1Preview.C1PrintDocument.ShowTagsInputDialog" />が true の場合に表示されます)。 フォームタイプは
        <see cref="T:C1.C1Preview.Forms.TagsInputFormBase" />から派生する必要があります。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.TagsInputDialogClassName">
      <summary>
        タグ値の入力に使用されるフォームのタイプ名を取得または設定します （フォームは
        <see cref="P:C1.C1Preview.C1PrintDocument.ShowTagsInputDialog" />が true の場合に表示されます)。 フォームタイプは
        <see cref="T:C1.C1Preview.Forms.TagsInputFormBase" />から派生する必要があります。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.BuildSerializerLog">
      <summary>シリアル化操作および逆シリアル化操作の実行中にログを構築するかどうかを示す値を取得または設定します。 例外が発生した場合、例外データからログを参照できます。 このプロパティを true に設定すると、 原因特定の困難なシリアル化エラーのデバッグに役立ちます。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentFormatVersion">
      <summary>C1D 形式のバージョンを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.FormatVersion">
      <summary>このアセンブリによってサポートされる C1D 形式のバージョンを示す C1FormatVersion オブジェクトを取得します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.DefaultUnitChanged">
      <summary>DefaultUnit の値が変更されると発生します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.ResolvedUnitChanged">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />の値が変更されると発生します。
      </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.LongOperation">
      <summary>ドキュメント生成の進行状況を示します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.BusyStateChanged">
      <summary>BusyState の値が変更されると発生します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Document">
      <summary>
        現在のドキュメントを標準の印刷プレビューコントロールにレンダリングするために使用できる
        <see cref="T:System.Drawing.Printing.PrintDocument" />オブジェクトを取得します。 ComponentOne プレビューコントロールを使用している場合は不要で、推奨していません。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AutoEmbedFonts">
      <summary>ドキュメントの生成時に、使用されるフォントが EmbeddedFonts コレクションに自動的に挿入されるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.FontHandling">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.C1PrintDocument" />によるフォントの 埋め込みと置き換えの処理方法を示す値を取得します。
        <para>
          使用可能なオプションについての詳細は、
          <see cref="T:C1.C1Preview.FontHandling" />列挙体の メンバを参照してください。
        </para><para>
          このプロパティが
          <see cref="F:C1.C1Preview.FontHandling.EmbedFonts" />または
          <see cref="F:C1.C1Preview.FontHandling.EmbedActualFonts" />以外の値に設定される （すなわち、フォントが自動的に埋め込まれない）場合は、 埋め込む特定のフォントをドキュメントの
          <see cref="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts" />コレクションに 手動で追加できることに注意してください。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.IsPageCountFinal">
      <summary>
        すべてのページが生成中のドキュメントに 追加されたかどうかを示す値を取得します。
        <para>
          たとえば、ドキュメントに総ページ数を含むフッターまたはヘッダーがある場合（「X/Y ページ」など）、 このプロパティは新しいページの追加中に
          <b>false</b>になりますが、 新しいページの追加が完了し、 描画済みのページ上で総ページ数が更新されると
          <b>true</b>になります。
        </para><para>
          ドキュメントが生成中でない場合（
          <see cref="P:C1.C1Preview.C1PrintDocument.IsGenerating" />を参照）は
          <b>true</b>になります。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.GeneratingComplete">
      <summary>
        現在のドキュメントが生成中の場合（
        <see cref="P:C1.C1Preview.C1PrintDocument.IsGenerating" />を参照）、 0（0% 完了）～1（100% 完了）の範囲でおおよその完了率を取得します。 ドキュメントが現在生成中でない場合は、１になります。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.UserData">
      <summary>現在のドキュメントに関連付けられている任意のデータを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts">
      <summary>埋め込みフォントのコレクションを取得します。</summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.DocumentFonts" />
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentFonts">
      <summary>
        現在のドキュメントに使用されるフォントを記述する
        <see cref="T:C1.C1Preview.DocumentFont" />オブジェクトの コレクションを取得します。
        <para>
          このコレクションは、ドキュメント上の
          <see cref="P:C1.C1Preview.C1PrintDocument.FontHandling" />プロパティの値に応じて、 ドキュメントの生成時に自動的にデータが読み込まれます。
        </para>
      </summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts" />
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.SystemTags">
      <summary>[PageNo]、[PageCount] などのシステムドキュメントタグの配列。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.UsageInfo">
      <summary>
        現在のドキュメントの使用に関する情報（生成日時、 ドキュメントの保存またはロードに最後に使用されたファイル名など）を含む
        <see cref="P:C1.C1Preview.C1PrintDocument.UsageInfo" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.HasGenerateDocumentHandler">
      <summary>ドキュメントの GenerateDocument イベントにハンドラが関連付けられているかどうかを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ExportProviders">
      <summary>
        すべての登録された
        <see cref="T:C1.C1Preview.Export.ExportProvider" />オブジェクトのコレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentPageLayout">
      <summary>現在のページレイアウトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AcceptButton">
      <summary>ドキュメントの受け入れボタンを表す RenderInputButton オブジェクトを取得します（AcceptButton == true である最初の RenderInputButton オブジェクト）。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentBlockRenderGraphics">
      <summary>RenderBlockGraphicsBegin によって開かれた現在の RenderGraphics オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentBlockGraphics">
      <summary>RenderBlockGraphicsBegin メソッドによって開かれた現在の Graphics オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentDirectRenderGraphics">
      <summary>RenderDirectGraphicsBegin によって開かれた現在の RenderGraphics オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentDirectGraphics">
      <summary>RenderDirectGraphicsBegin メソッドによって開かれた現在の Graphics オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.IsGenerating">
      <summary>ドキュメントがコンテンツの生成中かどうかを示します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.IsStartEndDocMode">
      <summary>ドキュメントが StartDoc() メソッドと EndDoc() メソッドを使って生成中かどうかを示します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Reflowable">
      <summary>ドキュメントがリフロー可能かどうかを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Warnings">
      <summary>ドキュメント生成後に、ドキュメントの警告のコレクションが含まれます。</summary>
      <seealso cref="T:C1.C1Preview.Warning" />
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ErrorCode">
      <summary>ドキュメントの生成時に発生するエラーのコードを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ErrorDesc">
      <summary>ドキュメントの生成時に発生するエラーの詳細を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Pages">
      <summary>ドキュメントのページのコレクションを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DataSchema">
      <summary>データスキーマ組み込みドキュメントを含むこの C1PrintDocument オブジェクトによって所有されている C1DataSchema オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.Cancel">
      <summary>ドキュメントの生成をキャンセルするかどうかを示す値を取得または設定します。</summary>
      <remarks>
        このプロパティの
        <b>true</b>設定は、現在のドキュメントが生成されている （
        <see cref="P:C1.C1Preview.C1PrintDocument.BusyState" />プロパティの値が
        <see cref="F:C1.C1Preview.BusyStateEnum.Generating" />に等しい）場合のみ行うことができます。 ドキュメントが生成されていないときにこのプロパティを
        <b>true</b>に設定しようとすると、例外が発生します。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentPage">
      <summary>現在生成中のページを取得します。ドキュメントが生成中の状態でない場合は null を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CurrentPageArea">
      <summary>現在生成中のページ領域を取得します。ドキュメントが生成中の状態でない場合は null を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AvailableBlockFlowHeight">
      <summary>現在生成中のページ領域内のブロックフローで利用可能な垂直方向のスペース。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AvailableBlockFlowWidth">
      <summary>現在生成中のページ領域内のブロックフローで利用可能な水平方向のスペース。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ScriptingOptions">
      <summary>この C1PrintDocument オブジェクトのスクリプトオプションを定義する ScriptingOptions オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.CompatibilityOptions">
      <summary>C1PrintDocument の以前のバージョンとの互換性を判定する CompatibilityOptions オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.FontProcessingOptions">
      <summary>
        ドキュメントの生成時にフォントの代替と埋め込みを処理する方法を決定する
        <see cref="P:C1.C1Preview.C1PrintDocument.FontProcessingOptions" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentFileName">
      <summary>現在のドキュメントに関連付けられているファイル名を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentDirectoryName">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.DocumentFileName" />のディレクトリを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentStartingScript">
      <summary>現在のドキュメントが生成を開始するときに実行されるスクリプトを取得または設定します。</summary>
      <remarks>
        <para>
          このとき、
          <see cref="T:C1.C1Preview.C1PrintDocument" />は
          <see cref="E:C1.C1Preview.C1PrintDocument.DocumentStarting" />イベントも発生させます。
        </para>
        <para>イベントとスクリプトの違いは、イベントハンドラがアプリケーションコードに属するのに対して、スクリプトはドキュメントに属することです。このため、イベントハンドラは、アプリケーション全体のロジックを実装し、処理中の特定のドキュメントには依存しないタスクを実行するために使用することをお勧めします。</para>
        <para>一方、スクリプトは、ドキュメント自体に直接関連するタスクを実行するために使用してください。ドキュメントにアタッチされているスクリプトは、現在のアプリケーションに関係なく実行されます（別のプログラムによってファイルからロードされた後でドキュメントが再生成される場合など）。たとえば、ドキュメントには、エラーが発生した場合に、ドキュメント内のフィールドの値を変更するスクリプトを入れることができます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.DocumentEndedScript">
      <summary>現在のドキュメントが生成を終了したときに実行されるスクリプトを取得または設定します。</summary>
      <remarks>
        <para>
          このとき、
          <see cref="T:C1.C1Preview.C1PrintDocument" />は
          <see cref="E:C1.C1Preview.C1PrintDocument.DocumentEnded" />イベントも発生させます。
        </para>
        <para>イベントとスクリプトの違いは、イベントハンドラがアプリケーションコードに属するのに対して、スクリプトはドキュメントに属することです。このため、イベントハンドラは、アプリケーション全体のロジックを実装し、処理中の特定のドキュメントには依存しないタスクを実行するために使用することをお勧めします。</para>
        <para>一方、スクリプトは、ドキュメント自体に直接関連するタスクを実行するために使用してください。ドキュメントにアタッチされているスクリプトは、現在のアプリケーションに関係なく実行されます（別のプログラムによってファイルからロードされた後でドキュメントが再生成される場合など）。たとえば、ドキュメントには、エラーが発生した場合に、ドキュメント内のフィールドの値を変更するスクリプトを入れることができます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.PageConfigureScript">
      <summary>新しいページがドキュメントに追加されるときに実行されるスクリプトを取得または設定します。</summary>
      <remarks>
        <para>
          このスクリプトは、ページが
          <see cref="P:C1.C1Preview.C1PrintDocument.Pages" />コレクションに追加された後で、ページが解決される前に（ページのコンテンツがまだレイアウトされていない）実行されます。
        </para>
        <para>このスクリプトは、ページレイアウトを変更するためにのみ使用してください。エラーになる可能性があるため、このスクリプトを使用して、ページのコンテンツを変更しないでください。</para>
        <para>
          このとき、
          <see cref="T:C1.C1Preview.C1PrintDocument" />は
          <see cref="E:C1.C1Preview.C1PrintDocument.PageConfigure" />イベントも発生させます。
        </para>
        <para>イベントとスクリプトの違いは、イベントハンドラがアプリケーションコードに属するのに対して、スクリプトはドキュメントに属することです。このため、イベントハンドラは、アプリケーション全体のロジックを実装し、処理中の特定のドキュメントには依存しないタスクを実行するために使用することをお勧めします。</para>
        <para>一方、スクリプトは、ドキュメント自体に直接関連するタスクを実行するために使用してください。ドキュメントにアタッチされているスクリプトは、現在のアプリケーションに関係なく実行されます（別のプログラムによってファイルからロードされた後でドキュメントが再生成される場合など）。たとえば、ドキュメントには、エラーが発生した場合に、ドキュメント内のフィールドの値を変更するスクリプトを入れることができます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.ErrorScript">
      <summary>ドキュメントにアタッチされているスクリプトでエラーが発生したときに実行されるスクリプトを取得または設定します。</summary>
      <remarks>
        <para>
          このとき、
          <see cref="T:C1.C1Preview.C1PrintDocument" />は
          <see cref="!:ScriptError" />イベントも発生させます。
        </para>
        <para>イベントとスクリプトの違いは、イベントハンドラがアプリケーションコードに属するのに対して、スクリプトはドキュメントに属することです。このため、イベントハンドラは、アプリケーション全体のロジックを実装し、処理中の特定のドキュメントには依存しないタスクを実行するために使用することをお勧めします。</para>
        <para>一方、スクリプトは、ドキュメント自体に直接関連するタスクを実行するために使用してください。ドキュメントにアタッチされているスクリプトは、現在のアプリケーションに関係なく実行されます（別のプログラムによってファイルからロードされた後でドキュメントが再生成される場合など）。たとえば、ドキュメントには、エラーが発生した場合に、ドキュメント内のフィールドの値を変更するスクリプトを入れることができます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1PrintDocument.AssemblyVersion">
      <summary>C1PrintDocument アセンブリのバージョンを取得します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.DocumentStarting">
      <summary>ドキュメントの構築が開始すると発生します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.DocumentEnded">
      <summary>ドキュメントの構築が終了すると発生します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.PageConfigure">
      <summary>新しい空のページが作成されてドキュメントに追加されると発生します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.PageAdded">
      <summary>ドキュメントの生成時に、ドキュメントのページの生成が終了し、ページが Pages コレクションに追加され、他のページへの切り替えが行われたときに呼び出されます。</summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.PageUpdated">
      <summary>ドキュメントのページが変更されるときに発生します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.PageChanged">
      <summary>ドキュメントの生成中に、ドキュメントに追加されたドキュメントのページが変更されるときに発生します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.PageDeleted">
      <summary>ページがドキュメントから（Pages コレクションから）削除されるときに発生します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.PagesClear">
      <summary>ページのコレクションがクリアされるときに発生します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.BeforePagesClear">
      <summary>ページコレクションがクリアされる前に発生します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.GenerateDocument">
      <summary>イベントハンドラでドキュメントコンテンツを構築できるようにします。</summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.InputValueChanged">
      <summary>ドキュメント内で RenderInputBase オブジェクトの値が変更されるときに発生します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintDocument.FormsStyleChanged">
      <summary>FormsStyle プロパティの値が変更されたときに発生します。</summary>
    </member>
    <member name="T:C1.C1Preview.Debug.DebugUtils">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Debug.DebugUtils.WriteLine(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="s"></param>
    </member>
    <member name="M:C1.C1Preview.Debug.DebugUtils.WriteLine(System.String,System.Object[])">
      <summary>これは内部使用専用です。</summary>
      <param name="formatMask"></param>
      <param name="args"></param>
    </member>
    <member name="M:C1.C1Preview.Debug.DebugUtils.GetRenderFragmentCaption(C1.C1Preview.RenderFragment)">
      <summary>これは内部使用専用です。</summary>
      <param name="rf"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Debug.DebugUtils.DumpFragment(System.String,C1.C1Preview.RenderFragment,System.Int32)">
      <summary>これは内部使用専用です。</summary>
      <param name="caption"></param>
      <param name="rf"></param>
      <param name="level"></param>
    </member>
    <member name="T:C1.C1Preview.DictionaryItem">
      <summary>すべての辞書項目の抽象基本クラス。</summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.Dictionary" />
    </member>
    <member name="T:C1.C1Preview.NamedCollectionItem">
      <summary>各要素が一意の名前を持つ要素を表すための抽象基本クラス。</summary>
    </member>
    <member name="T:C1.C1Preview.IOwnedCollectionItem">
      <summary>
        <para>これは内部使用専用です。</para>
        <see cref="T:C1.C1Preview.OwnedCollection" />の要素は、このインタフェースを実装する必要があります。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IOwnedCollectionItem.Owner">
      <summary>コレクション項目のオーナーを取得または設定します。</summary>
    </member>
    <member name="M:C1.C1Preview.NamedCollectionItem.SetNameInt(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="newName"></param>
    </member>
    <member name="M:C1.C1Preview.NamedCollectionItem.SetName(System.String)">
      <summary>現在の項目の名前を設定します。</summary>
      <param name="newName">項目の新しい名前。</param>
    </member>
    <member name="M:C1.C1Preview.NamedCollectionItem.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.NamedCollectionItem.Clone">
      <summary>このオブジェクトのクローンを作成します。</summary>
      <returns>作成されたオブジェクトを返します。</returns>
    </member>
    <member name="P:C1.C1Preview.NamedCollectionItem.Owner">
      <summary>このオブジェクトを含む NamedCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.NamedCollectionItem.Name">
      <summary>コレクション内の NamedCollectionItem オブジェクトの一意の名前を取得または設定します。</summary>
    </member>
    <member name="M:C1.C1Preview.DictionaryItem.#ctor(System.String)">
      <summary>DictionaryItem クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">辞書項目の名前。</param>
      <seealso cref="P:C1.C1Preview.NamedCollectionItem.Name" />
    </member>
    <member name="M:C1.C1Preview.DictionaryItem.SetName(System.String)">
      <summary>オーバーライドされます。 現在の項目の名前を設定します。</summary>
      <param name="newName">新しい名前。</param>
    </member>
    <member name="P:C1.C1Preview.DictionaryItem.Owner">
      <summary>所有者である辞書を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.Dictionary">
      <summary>画像、アイコンなどを保持するために使用できる C1PrintDocument 辞書を表します。</summary>
    </member>
    <member name="T:C1.C1Preview.NamedCollection">
      <summary>NamedCollectionItem オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="T:C1.C1Preview.OwnedCollection">
      <summary>RenderObjectCollection と ParagraphObjectCollection の基本クラス。</summary>
    </member>
    <member name="T:C1.C1Preview.OwnedCollectionBase">
      <summary>
        オーナーオブジェクトのあるコレクションを表します。 オーナーが
        <see cref="T:C1.C1Preview.ICollectionOwner" />インタフェースをサポートしている場合、 コレクションで発生した重要イベントがオーナーに通知されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.OwnedCollectionBase" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.#ctor(System.Object)">
      <summary>
        <see cref="T:C1.C1Preview.OwnedCollectionBase" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">コレクションのオーナー。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.OnClear">
      <summary>コレクションがクリアされようとするときに呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.OnClearComplete">
      <summary>コレクションがクリアされた後に呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.OnInsert(System.Int32,System.Object)">
      <summary>項目が挿入されようとするときに呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.OnInsertComplete(System.Int32,System.Object)">
      <summary>項目が挿入された後に呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.OnRemove(System.Int32,System.Object)">
      <summary>項目が削除されようとするときに呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.OnRemoveComplete(System.Int32,System.Object)">
      <summary>項目が削除された後に呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.OnSet(System.Int32,System.Object,System.Object)">
      <summary>項目が設定されようとするときに呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="oldValue">古い項目。</param>
      <param name="newValue">新しい項目。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>項目が設定された後に呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="oldValue">古い項目。</param>
      <param name="newValue">新しい項目。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.AddInt(System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="item"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.InsertInt(System.Int32,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="index"></param>
      <param name="item"></param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.RemoveInt(System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="item"></param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.GetByIndex(System.Int32)">
      <summary>これは内部使用専用です。</summary>
      <param name="index"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.SetByIndex(System.Int32,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="index"></param>
      <param name="value"></param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.AssignFrom(C1.C1Preview.OwnedCollectionBase)">
      <summary>
        現在のコレクションをクリアして、別のコレクションからの項目をコピーします。 各項目はクローンを使用してコピーされるため、
        <see cref="T:System.ICloneable" />インタフェースをサポートする必要があります（サポートされない項目が発生した場合は例外が発生します）。
      </summary>
      <param name="source">
        項目のコピー元の
        <see cref="T:C1.C1Preview.OwnedCollectionBase" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.IndexOf(System.Object)">
      <summary>指定したオブジェクトを検索して、 コレクション全体で最初に見つかった指定値のゼロから始まるインデックスを返します。</summary>
      <param name="obj">コレクション内で検索するオブジェクト。 値は null 参照が可能です。</param>
      <returns>コレクション全体で最初に見つかった値のゼロから始まるインデックス。見つからなかった場合は -１。</returns>
    </member>
    <member name="M:C1.C1Preview.OwnedCollectionBase.Exchange(System.Int32,System.Int32)">
      <summary>コレクション内の２つの項目を入れ替えます。</summary>
      <param name="item1">第１項目のインデックス。</param>
      <param name="item2">第２の項目のインデックス。</param>
    </member>
    <member name="P:C1.C1Preview.OwnedCollectionBase.Owner">
      <summary>コレクションのオーナーを取得します。</summary>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.OwnedCollection" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Preview.OwnedCollection" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">コレクションのオーナー。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.OnClear">
      <summary>コレクションがクリアされようとするときに呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.OnInsert(System.Int32,System.Object)">
      <summary>項目がクリアされようとするときに呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.OnInsertComplete(System.Int32,System.Object)">
      <summary>項目が挿入された後に呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary>項目が削除された後に呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>項目が設定されようとするときに呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="oldValue">古い項目。</param>
      <param name="newValue">新しい項目。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>項目が設定された後に呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="oldValue">古い項目。</param>
      <param name="newValue">新しい項目。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedCollection.GetItemType">
      <summary>コレクション内の要素のタイプを取得します。 このメソッドが null を返す場合は、異なるタイプの項目をコレクションに追加できます。 その以外の場合は、このメソッドが返すタイプの項目のみを追加できます。</summary>
    </member>
    <member name="P:C1.C1Preview.OwnedCollection.Owner">
      <summary>このオブジェクトを含む所有者オブジェクトを取得します。</summary>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Preview.NamedCollection" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">コレクションのオーナー。</param>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Preview.NamedCollectionItem" />タイプ。
      </returns>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.OnClearComplete">
      <summary>コレクションがクリアされた後に呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary>項目が削除された後に呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>項目が設定された後に呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="oldValue">古い項目。</param>
      <param name="newValue">新しい項目。</param>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>項目が設定されようとするときに呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="oldValue">古い項目。</param>
      <param name="newValue">新しい項目。</param>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.OnInsert(System.Int32,System.Object)">
      <summary>項目がクリアされようとするときに呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.IndexOfName(System.String)">
      <summary>NamedCollection から、指定された名前の NamedCollectionItem オブジェクトの０から始まるインデックスを返します。</summary>
      <param name="name">NamedCollection 内で検索する名前です。</param>
      <returns>名前が NamedCollection 内にある場合は、名前の０から始まるインデックス。そうでない場合は -1。</returns>
    </member>
    <member name="M:C1.C1Preview.NamedCollection.FindByName(System.String)">
      <summary>
        指定された名前の
        <see cref="T:C1.C1Preview.NamedCollectionItem" />を返します。
      </summary>
      <param name="name">検索する項目の名前。</param>
      <returns>指定された項目。</returns>
    </member>
    <member name="M:C1.C1Preview.Dictionary.GetItemType">
      <summary>この辞書に追加できる項目のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Preview.DictionaryItem" />タイプ。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Dictionary.Add(C1.C1Preview.DictionaryItem)">
      <summary>辞書項目を追加します。</summary>
      <param name="di">追加する辞書項目。</param>
      <returns>辞書に追加された項目のインデックスを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.Dictionary.Remove(C1.C1Preview.DictionaryItem)">
      <summary>項目を現在の辞書から削除します。</summary>
      <param name="di">
        削除する
        <see cref="T:C1.C1Preview.DictionaryItem" />。
      </param>
    </member>
    <member name="P:C1.C1Preview.Dictionary.Document">
      <summary>辞書に関連付けられているドキュメントを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Dictionary.Item(System.String)">
      <summary>名前に基づいて DictionaryItem オブジェクトを返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Dictionary.Item(System.Int32)">
      <summary>インデックスに基づいて DictionaryItem オブジェクトを返します。</summary>
    </member>
    <member name="T:C1.C1Preview.DictionaryImage">
      <summary>辞書に画像を登録するためのクラス。</summary>
    </member>
    <member name="M:C1.C1Preview.DictionaryImage.#ctor">
      <summary>DictionaryImage クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.DictionaryImage.#ctor(System.String)">
      <summary>DictionaryImage クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">辞書項目の名前。</param>
    </member>
    <member name="M:C1.C1Preview.DictionaryImage.#ctor(System.String,System.Drawing.Image)">
      <summary>DictionaryImage クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">辞書項目の名前。</param>
      <param name="image">辞書に登録する画像。</param>
    </member>
    <member name="M:C1.C1Preview.DictionaryImage.ShouldSerializeImage">
      <summary>
        <see cref="P:C1.C1Preview.DictionaryImage.Image" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.DictionaryImage.Image" />をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryImage.ShouldSerializeOpenXmlImage">
      <summary>
        <b>OpenXmlImage</b>プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <b>OpenXmlImage</b>をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryImage.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.DictionaryImage" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.DictionaryImage.Image">
      <summary>辞書に登録する画像を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.DictionaryIcon">
      <summary>辞書にアイコンを登録するためのクラス。</summary>
    </member>
    <member name="M:C1.C1Preview.DictionaryIcon.#ctor">
      <summary>DictionaryIcon クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.DictionaryIcon.#ctor(System.String)">
      <summary>DictionaryIcon クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">辞書項目の名前。</param>
    </member>
    <member name="M:C1.C1Preview.DictionaryIcon.#ctor(System.String,System.Drawing.Icon)">
      <summary>DictionaryIcon クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">辞書項目の名前。</param>
      <param name="icon">辞書に登録するアイコン。</param>
    </member>
    <member name="M:C1.C1Preview.DictionaryIcon.ShouldSerializeIcon">
      <summary>
        <see cref="P:C1.C1Preview.DictionaryIcon.Icon" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.DictionaryIcon.Icon" />をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryIcon.ShouldSerializeOpenXmlIcon">
      <summary>
        <b>OpenXmlIcon</b>プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <b>OpenXmlIcon</b>をシリアル化する必要がある場合は true、その他の場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryIcon.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.DictionaryIcon" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.DictionaryIcon.Icon">
      <summary>辞書に登録するアイコンを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.IDictionaryItemLinkOwner">
      <summary>
        <para>これは内部使用専用です。</para>このインタフェースは、クラスが
        <see cref="P:C1.C1Preview.IDictionaryItemLinkOwner.Dictionary" />のオブジェクトへのリンク （参照）を保持する必要がある場合、そのクラスに実装されます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IDictionaryItemLinkOwner.Dictionary">
      <summary>
        <see cref="T:C1.C1Preview.DictionaryItem" />の格納先の
        <see cref="P:C1.C1Preview.IDictionaryItemLinkOwner.Dictionary" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.DictionaryItemLink">
      <summary>
        <see cref="T:C1.C1Preview.DictionaryItem" />へのリンク（参照）を記述する基本クラス。 基本機能を提供します。
        <see cref="T:C1.C1Preview.DictionaryImageLink" />や
        <see cref="T:C1.C1Preview.DictionaryIconLink" />などの派生クラスは 特定タイプの辞書項目へのリンクを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DictionaryItemLink.#ctor(C1.C1Preview.IDictionaryItemLinkOwner)">
      <summary>
        <see cref="T:C1.C1Preview.DictionaryItemLink" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">このインスタンスのオーナー。</param>
    </member>
    <member name="M:C1.C1Preview.DictionaryItemLink.GetItemData">
      <summary>項目を表すデータを取得します。</summary>
      <returns>項目を表すデータ。</returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryItemLink.AssignFrom(C1.C1Preview.DictionaryItemLink)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.DictionaryItemLink" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source"></param>
    </member>
    <member name="P:C1.C1Preview.DictionaryItemLink.DataInt">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.DictionaryItemLink.Owner">
      <summary>現在の辞書項目のオーナーを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DictionaryItemLink.Document">
      <summary>
        現在のディクショナリ項目を含む
        <see cref="T:C1.C1Preview.C1PrintDocument" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.DictionaryItemLink.Data">
      <summary>辞書に格納されたオブジェクトを表すデータを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DictionaryItemLink.ItemName">
      <summary>辞書内の項目名を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DictionaryItemLink.HasData">
      <summary>
        <see cref="T:C1.C1Preview.DictionaryItemLink" />にデータが含まれているかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.DictionaryImageLink">
      <summary>
        <see cref="T:C1.C1Preview.DictionaryItemLink" />クラスを特殊化して、
        <see cref="T:System.Drawing.Image" />へのリンクを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DictionaryImageLink.#ctor(C1.C1Preview.IDictionaryItemLinkOwner)">
      <summary>
        <see cref="T:C1.C1Preview.DictionaryImageLink" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">このインスタンスのオーナー。</param>
    </member>
    <member name="M:C1.C1Preview.DictionaryImageLink.ShouldSerializeImage">
      <summary>
        <see cref="P:C1.C1Preview.DictionaryImageLink.Image" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.DictionaryImageLink.Image" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryImageLink.ShouldSerializeMetafile">
      <summary>
        <see cref="P:C1.C1Preview.DictionaryImageLink.Metafile" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.DictionaryImageLink.Metafile" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryImageLink.ShouldSerializeOpenXmlMetafile">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryImageLink.ShouldSerializeOpenXmlImage">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryImageLink.GetItemData">
      <summary>項目を表すデータを取得します。</summary>
      <returns>項目を表すデータ。</returns>
    </member>
    <member name="P:C1.C1Preview.DictionaryImageLink.Image">
      <summary>
        現在の項目に関連付けられた
        <see cref="T:System.Drawing.Image" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.DictionaryIconLink">
      <summary>
        <see cref="T:C1.C1Preview.DictionaryItemLink" />クラスを特殊化して、
        <see cref="T:System.Drawing.Icon" />へのリンクを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DictionaryIconLink.#ctor(C1.C1Preview.IDictionaryItemLinkOwner)">
      <summary>
        <see cref="T:C1.C1Preview.DictionaryIconLink" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">このインスタンスのオーナー。</param>
    </member>
    <member name="M:C1.C1Preview.DictionaryIconLink.ShouldSerializeIcon">
      <summary>
        <see cref="P:C1.C1Preview.DictionaryIconLink.Icon" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.DictionaryIconLink.Icon" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryIconLink.ShouldSerializeOpenXmlIcon">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.DictionaryIconLink.GetItemData">
      <summary>項目を表すデータを取得します。</summary>
      <returns>項目を表すデータ。</returns>
    </member>
    <member name="P:C1.C1Preview.DictionaryIconLink.Icon">
      <summary>
        現在の項目に関連付けられた
        <see cref="T:System.Drawing.Icon" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.DocumentBody">
      <summary>ドキュメントの本体を表し、ドキュメントの生成を管理します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentBody.Document">
      <summary>このオブジェクトを含む C1Preview オブジェクトを返します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentBody.Stacking">
      <summary>スタック規則を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentBody.HasChildren">
      <summary>ドキュメント本体に子オブジェクトが含まれるかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentBody.Children">
      <summary>ドキュメント本体に含まれる描画オブジェクトのコレクションを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.DocumentInfoFields">
      <summary>DocumentInfo のフィールドを列挙します。</summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.None">
      <summary>フィールドなし。</summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Title">
      <summary>ドキュメントのタイトル。</summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Author">
      <summary>ドキュメントの作成者。</summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Operator">
      <summary>ドキュメントの最終変更者。</summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Manager">
      <summary>作成者の管理者。</summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Company">
      <summary>作成者の会社名。</summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Subject">
      <summary>ドキュメントのサブタイトル。</summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Comment">
      <summary>ドキュメントのコメント。</summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.CreationTime">
      <summary>ドキュメントが作成された日時。</summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.RevisionTime">
      <summary>ドキュメントが最後に変更された日時。</summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Creator">
      <summary>元のドキュメントを作成したアプリケーション。</summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Keywords">
      <summary>ドキュメントのキーワード。</summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.Producer">
      <summary>ドキュメントを作成したアプリケーション。</summary>
    </member>
    <member name="F:C1.C1Preview.DocumentInfoFields.All">
      <summary>すべてのフィールド。</summary>
    </member>
    <member name="T:C1.C1Preview.DocumentInfo">
      <summary>C1Preview に関する一般情報（作成者、サブタイトル、作成時刻など）を表します。</summary>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.#ctor">
      <summary>DocumentInfo クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerialize">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.DocumentInfo" />オブジェクトがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        現在の
        <see cref="T:C1.C1Preview.DocumentInfo" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeTitle">
      <summary>
        <see cref="P:C1.C1Preview.DocumentInfo.Title" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.DocumentInfo.Title" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeAuthor">
      <summary>
        <see cref="P:C1.C1Preview.DocumentInfo.Author" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.DocumentInfo.Author" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeOperator">
      <summary>
        <see cref="P:C1.C1Preview.DocumentInfo.Operator" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.DocumentInfo.Operator" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeSubject">
      <summary>
        <see cref="P:C1.C1Preview.DocumentInfo.Subject" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.DocumentInfo.Subject" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeCreator">
      <summary>
        <see cref="P:C1.C1Preview.DocumentInfo.Creator" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.DocumentInfo.Creator" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeProducer">
      <summary>
        <see cref="P:C1.C1Preview.DocumentInfo.Producer" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.DocumentInfo.Producer" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeCompany">
      <summary>
        <see cref="P:C1.C1Preview.DocumentInfo.Company" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.DocumentInfo.Company" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeCreationTime">
      <summary>
        <see cref="P:C1.C1Preview.DocumentInfo.CreationTime" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.DocumentInfo.CreationTime" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeRevisionTime">
      <summary>
        <see cref="P:C1.C1Preview.DocumentInfo.RevisionTime" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.DocumentInfo.RevisionTime" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeManager">
      <summary>
        <see cref="P:C1.C1Preview.DocumentInfo.Manager" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.DocumentInfo.Manager" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeComment">
      <summary>
        <see cref="P:C1.C1Preview.DocumentInfo.Comment" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.DocumentInfo.Comment" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.ShouldSerializeKeywords">
      <summary>
        <see cref="P:C1.C1Preview.DocumentInfo.Keywords" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.DocumentInfo.Keywords" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.AssignFrom(C1.C1Preview.DocumentInfo)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.DocumentInfo" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.Clone">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.DocumentInfo" />オブジェクトのコピーを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.DocumentInfo" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.GetKeywordsAsText">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.DocumentInfo.Keywords" />コレクションを 単一のスペース区切りの文字列として返します。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.DocumentInfo.SetKeywordsAsText(System.String)">
      <summary>
        キーワードのスペース区切りのリストを含む単一の文字列から、
        <see cref="P:C1.C1Preview.DocumentInfo.Keywords" />コレクションを 現在のオブジェクトに割り当てます。（
        <see cref="P:C1.C1Preview.DocumentInfo.Keywords" />コレクションは 割り当て前にこのメソッドによってクリアされることに注意してください）。
      </summary>
      <param name="value">スペース区切りのキーワードリスト。</param>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Title">
      <summary>ドキュメントのタイトルを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Author">
      <summary>ドキュメントの作成者を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Operator">
      <summary>ドキュメントの最終変更者を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.CreationTime">
      <summary>ドキュメントが作成された日時を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.RevisionTime">
      <summary>ドキュメントが最後に変更された日時を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Subject">
      <summary>ドキュメントのサブタイトルを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Producer">
      <summary>ドキュメントを作成したアプリケーションを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Creator">
      <summary>元のドキュメントを作成したアプリケーションを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Company">
      <summary>作成者の会社名を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Keywords">
      <summary>ドキュメントのキーワードを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Manager">
      <summary>作成者の管理者を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.Comment">
      <summary>ドキュメントのコメントを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentInfo.UserData">
      <summary>
        ドキュメントに関連付けられたカスタムユーザー定義の文字列キーと文字列の
        <see cref="T:System.Collections.Generic.Dictionary`2" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Util.FastList">
      <summary>自分自身の要素の高速検索を提供するリストを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.Util.FastList.FindObjectIndex(System.Object,System.Int32@)">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.Util.FastList" />内の指定したオブジェクトの高速検索を実行します。
      </summary>
      <param name="obj">検索するオブジェクト。</param>
      <param name="index">
        出力：現在のリスト内の
        <paramref name="obj" />。オブジェクトが見つからなかった場合は 0。
      </param>
      <returns>
        <paramref name="obj" />が見つかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Util.FastList.Add(System.IComparable)">
      <summary>
        <see cref="T:System.IComparable" />インタフェースを実装するオブジェクトを現在のリストに追加します。
      </summary>
      <param name="obj">追加するオブジェクト（現在のリストがこのオブジェクトをすでに含んでいる場合は、例外がスローされます）。</param>
      <returns>現在のリストに追加されたオブジェクトのインデックス。</returns>
    </member>
    <member name="M:C1.C1Preview.Util.FastList.Remove(System.Object)">
      <summary>指定した要素を現在のリストから削除します。</summary>
      <param name="obj">削除する要素。</param>
    </member>
    <member name="M:C1.C1Preview.Util.FastList.Insert(System.Int32,System.Object)">
      <summary>要素を指定されたインデックスに挿入します。</summary>
      <param name="index">要素のインデックス。</param>
      <param name="obj">挿入する要素。</param>
    </member>
    <member name="M:C1.C1Preview.Util.FastList.RemoveAt(System.Int32)">
      <summary>指定したインデックスの要素を現在のリストから削除します。</summary>
      <param name="index">削除する要素のインデックス。</param>
    </member>
    <member name="M:C1.C1Preview.Util.FastList.Clear">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.Util.FastList" />をクリアします。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Util.FastList.IndexOf(System.Object)">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.Util.FastList" />内の指定したオブジェクトのインデックスを返します （
        <see cref="M:C1.C1Preview.Util.FastList.FindObjectIndex(System.Object,System.Int32@)" />メソッドを使って高速検索を実行します）。
      </summary>
      <param name="obj">検索するオブジェクト。</param>
      <returns>現在のリスト内の指定したオブジェクトのインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="P:C1.C1Preview.Util.FastList.InnerList">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.Util.FastList" />の要素を格納するために内部的に使用される
        <see cref="T:System.Collections.Generic.List`1" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.EventCollection">
      <summary>変更時にイベントを発生するコレクションを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.EventCollection.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Preview.EventCollection" />の新しいインスタンスを初期化します。
      </summary>
      <param name="owner"></param>
    </member>
    <member name="M:C1.C1Preview.EventCollection.OnClear">
      <summary>
        コレクションがクリアされようとするときに呼び出されます。
        <see cref="E:C1.C1Preview.EventCollection.Changing" />イベントを起こします。
      </summary>
    </member>
    <member name="M:C1.C1Preview.EventCollection.OnClearComplete">
      <summary>
        コレクションがクリアされた後に呼び出されます。
        <see cref="E:C1.C1Preview.EventCollection.Changed" />イベントを起こします。
      </summary>
    </member>
    <member name="M:C1.C1Preview.EventCollection.OnInsert(System.Int32,System.Object)">
      <summary>
        項目がクリアされようとするときに呼び出されます。
        <see cref="E:C1.C1Preview.EventCollection.Changing" />イベントを起こします。
      </summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.EventCollection.OnInsertComplete(System.Int32,System.Object)">
      <summary>
        項目が挿入された後に呼び出されます。
        <see cref="E:C1.C1Preview.EventCollection.Changed" />イベントを起こします。
      </summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.EventCollection.OnRemove(System.Int32,System.Object)">
      <summary>
        項目が削除されようとするときに呼び出されます。
        <see cref="E:C1.C1Preview.EventCollection.Changing" />イベントを起こします。
      </summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.EventCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary>
        項目が削除された後に呼び出されます。
        <see cref="E:C1.C1Preview.EventCollection.Changed" />イベントを起こします。
      </summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.EventCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
        項目が設定されようとするときに呼び出されます。
        <see cref="E:C1.C1Preview.EventCollection.Changing" />イベントを起こします。
      </summary>
      <param name="index">項目のインデックス。</param>
      <param name="oldValue">古い項目。</param>
      <param name="newValue">新しい項目。</param>
    </member>
    <member name="M:C1.C1Preview.EventCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>
        項目が設定された後に呼び出されます。
        <see cref="E:C1.C1Preview.EventCollection.Changed" />イベントを起こします。
      </summary>
      <param name="index">項目のインデックス。</param>
      <param name="oldValue">古い項目。</param>
      <param name="newValue">新しい項目。</param>
    </member>
    <member name="E:C1.C1Preview.EventCollection.Changing">
      <summary>コレクションの変更前に発生します。</summary>
    </member>
    <member name="E:C1.C1Preview.EventCollection.Changed">
      <summary>コレクションの変更後に発生します。</summary>
    </member>
    <member name="T:C1.C1Preview.EventCollectionChangeTypeEnum">
      <summary>コレクションの変更のタイプを定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.EventCollectionChangeTypeEnum.InsertItem">
      <summary>項目が挿入されます。</summary>
    </member>
    <member name="F:C1.C1Preview.EventCollectionChangeTypeEnum.SetItem">
      <summary>項目が設定されます（変更されます）。</summary>
    </member>
    <member name="F:C1.C1Preview.EventCollectionChangeTypeEnum.DeleteItem">
      <summary>項目が削除されます。</summary>
    </member>
    <member name="F:C1.C1Preview.EventCollectionChangeTypeEnum.Reset">
      <summary>コレクションがクリアされます。</summary>
    </member>
    <member name="T:C1.C1Preview.EventCollectionChangeEventHandler">
      <summary>コレクションの変更時に発生するイベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントのパラメータ。</param>
    </member>
    <member name="T:C1.C1Preview.EventCollectionChangeEventArgs">
      <summary>EventCollection が変更されると発生するイベントのデータを含みます。</summary>
    </member>
    <member name="M:C1.C1Preview.EventCollectionChangeEventArgs.#ctor(C1.C1Preview.EventCollectionChangeTypeEnum,System.Object,System.Object,System.Int32)">
      <summary>
        <see cref="T:C1.C1Preview.EventCollectionChangeEventArgs" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="changeType">コレクションの変更タイプ。</param>
      <param name="oldItem">古い項目、または null。</param>
      <param name="newItem">新しい項目、または null。</param>
      <param name="index">項目インデックス、または -1。</param>
    </member>
    <member name="M:C1.C1Preview.EventCollectionChangeEventArgs.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.EventCollectionChangeEventArgs" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.EventCollectionChangeEventArgs.ChangeType">
      <summary>コレクションの変更のタイプを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.EventCollectionChangeEventArgs.OldItem">
      <summary>指定されたインデックス位置にある古いオブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.EventCollectionChangeEventArgs.NewItem">
      <summary>指定されたインデックス位置にある新しいオブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.EventCollectionChangeEventArgs.Index">
      <summary>変更が行われるコレクション内のインデックスを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.OwnedFastListBase">
      <summary>
        オーナーオブジェクトを持つ
        <see cref="T:C1.C1Preview.Util.FastList" />を表します。 オーナーが
        <see cref="T:C1.C1Preview.ICollectionOwner" />インタフェースをサポートしている場合、 コレクションで発生した重要イベントがオーナーに通知されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.OwnedFastList" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.#ctor(System.Object)">
      <summary>
        <see cref="T:C1.C1Preview.OwnedFastList" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">コレクションのオーナー。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.OnRemove(System.Int32,System.Object)">
      <summary>項目が削除されようとするときに呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.OnRemoveComplete(System.Int32,System.Object)">
      <summary>項目が削除された後に呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.OnInsert(System.Int32,System.Object)">
      <summary>項目が挿入されようとするときに呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.OnInsertComplete(System.Int32,System.Object)">
      <summary>項目が挿入された後に呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.OnClear">
      <summary>リストがクリアされようとするときに呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.OnClearComplete">
      <summary>リストがクリアされた後に呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.RemoveAt(System.Int32)">
      <summary>指定した要素を現在のリストから削除します。</summary>
      <param name="obj">削除する要素。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.Insert(System.Int32,System.Object)">
      <summary>要素を指定されたインデックスに挿入します。</summary>
      <param name="index">要素のインデックス。</param>
      <param name="obj">挿入する要素。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastListBase.Clear">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.OwnedFastListBase" />をクリアします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.OwnedFastListBase.Owner">
      <summary>コレクションのオーナーを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.OwnedFastList">
      <summary>
        オーナーを持つ
        <see cref="T:C1.C1Preview.Util.FastList" />を説明します。
        <see cref="T:C1.C1Preview.C1PageCollection" />の基本クラス。
        <see cref="T:C1.C1Preview.OwnedFastListBase" />に加え、
        <see cref="T:C1.C1Preview.IOwnedCollectionItem" />インタフェースをサポートしている場合は、 項目の Owner プロパティを更新します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedFastList.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.OwnedFastList" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.OwnedFastList.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Preview.OwnedFastList" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">コレクションのオーナー。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastList.OnClear">
      <summary>リストがクリアされようとするときに呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Preview.OwnedFastList.OnInsert(System.Int32,System.Object)">
      <summary>項目が挿入されようとするときに呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastList.OnInsertComplete(System.Int32,System.Object)">
      <summary>項目が挿入された後に呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastList.OnRemoveComplete(System.Int32,System.Object)">
      <summary>項目が削除された後に呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.OwnedFastList.GetItemType">
      <summary>コレクション内の項目のタイプを取得します。 このメソッドが null を返す場合は、異なるタイプの項目をコレクションに追加できます。 そうでない場合は、このメソッドが返すタイプの項目のみを追加できます。</summary>
    </member>
    <member name="P:C1.C1Preview.OwnedFastList.Owner">
      <summary>コレクションのオーナーを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.PageNumberingChange">
      <summary>ページ番号の変更を記述します。</summary>
    </member>
    <member name="M:C1.C1Preview.PageNumberingChange.#ctor(C1.C1Preview.PageNumberingChangeModeEnum,System.Int32)">
      <summary>
        <see cref="T:C1.C1Preview.PageNumberingChange" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="mode">ページ番号付けモード。</param>
      <param name="value">
        ページ番号値（意味は
        <paramref name="mode" />に依存）。
      </param>
    </member>
    <member name="M:C1.C1Preview.PageNumberingChange.GetPageNo(System.Int32)">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.PageNumberingChange" />オブジェクトによって変更されたページ番号を取得します。
      </summary>
      <param name="curPageNo">現在のページ番号。</param>
      <returns>変更後のページ番号。</returns>
    </member>
    <member name="M:C1.C1Preview.PageNumberingChange.ToString">
      <summary>現在のオブジェクトを文字列に変換します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:C1.C1Preview.PageNumberingChange.Parse(System.String,System.Boolean)">
      <summary>文字列を PageNumberingChange オブジェクトに変換します。</summary>
      <param name="s">変換する文字列。</param>
      <param name="throwException">文字列を PageNumberingChange に変換できない場合に例外が生成されることを示します。</param>
      <returns>PageNumberingChange オブジェクト。文字列が無効で、throwException が false の場合は null。</returns>
    </member>
    <member name="P:C1.C1Preview.PageNumberingChange.Mode">
      <summary>ページ番号の変更方法を記述する値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageNumberingChange.Value">
      <summary>現在のページ番号を変更するために使用される値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.PageNumberingChange.TypeConverter">
      <summary>
        <see cref="T:C1.C1Preview.PageNumberingChange" />のタイプコンバータを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.PageNumberingChange.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
        文字列を
        <see cref="T:C1.C1Preview.PageNumberingChange" />オブジェクトに変換します。
      </summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="str">変換する文字列。</param>
      <returns>変換された値。</returns>
    </member>
    <member name="M:C1.C1Preview.PageNumberingChange.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>オブジェクトを文字列に変換します。</summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="o">変換するオブジェクト。</param>
      <returns>変換された文字列。</returns>
    </member>
    <member name="T:C1.C1Preview.StackingRulesEnum">
      <summary>スタック規則を定義します（ブロックフローまたはインラインフロー、LeftToRight または TopToBottom）。</summary>
    </member>
    <member name="F:C1.C1Preview.StackingRulesEnum.BlockTopToBottom">
      <summary>コンテナ内の各オブジェクトはそれぞれ別のオブジェクトの１つ下に配置されます。現在のページの下端に到達すると、新しいページが追加されます。これはデフォルトです。</summary>
    </member>
    <member name="F:C1.C1Preview.StackingRulesEnum.BlockLeftToRight">
      <summary>オブジェクトは左から右に配置されます。現在のページの右端に到達すると、新しい「水平方向」ページが追加されます。水平方向ページは論理的に前のページを右に拡張します。C1PreviewPane はデフォルトでこの位置を認識し、これらのページを並べて表示します。</summary>
    </member>
    <member name="F:C1.C1Preview.StackingRulesEnum.InlineLeftToRight">
      <summary>オブジェクトはインラインで左から右に配置されます。現在のページの右端に到達すると、続きは次の行に折り返されます。現在のページの下端に到達すると、新しいページが追加されます。</summary>
    </member>
    <member name="T:C1.C1Preview.MeasurementDeviceEnum">
      <summary>ドキュメント要素のサイズを測定する場合に使用されるデバイス（プリンタまたは画面）を定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.MeasurementDeviceEnum.Printer">
      <summary>プリンタデバイスを使用して、ドキュメント要素のサイズを測定します。</summary>
    </member>
    <member name="F:C1.C1Preview.MeasurementDeviceEnum.Screen">
      <summary>システム画面デバイスを使用して、ドキュメント要素のサイズを測定します。</summary>
    </member>
    <member name="T:C1.C1Preview.DocumentCreationMode">
      <summary>ドキュメントの作成モードを表します。</summary>
    </member>
    <member name="F:C1.C1Preview.DocumentCreationMode.Unknown">
      <summary>ドキュメントが生成されなかったため、作成モードは不明です。</summary>
    </member>
    <member name="F:C1.C1Preview.DocumentCreationMode.Generate">
      <summary>ドキュメントは、Generate() メソッドを使って作成されました。</summary>
    </member>
    <member name="F:C1.C1Preview.DocumentCreationMode.StartEndDoc">
      <summary>ドキュメントは、StartDoc()／EndDoc() メソッドを使って作成されました。</summary>
    </member>
    <member name="T:C1.C1Preview.PageNumberingChangeModeEnum">
      <summary>ページ番号の変更のタイプを記述します。</summary>
    </member>
    <member name="F:C1.C1Preview.PageNumberingChangeModeEnum.Set">
      <summary>ページ番号を絶対値に設定します。</summary>
    </member>
    <member name="F:C1.C1Preview.PageNumberingChangeModeEnum.Increment">
      <summary>ページ番号を指定された値だけ変更します。</summary>
    </member>
    <member name="T:C1.C1Preview.BusyStateEnum">
      <summary>ドキュメントのビジー状態を表します。</summary>
    </member>
    <member name="F:C1.C1Preview.BusyStateEnum.Ready">
      <summary>ドキュメントを操作可能です。</summary>
    </member>
    <member name="F:C1.C1Preview.BusyStateEnum.Generating">
      <summary>ドキュメントを生成中です。</summary>
    </member>
    <member name="F:C1.C1Preview.BusyStateEnum.Saving">
      <summary>ドキュメントを保存中です。</summary>
    </member>
    <member name="F:C1.C1Preview.BusyStateEnum.Loading">
      <summary>ドキュメントを読み込み中です。</summary>
    </member>
    <member name="T:C1.C1Preview.GraphicsUtils">
      <summary>グラフィック描画のための静的ユーティリティメソッドを提供します。</summary>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.ReadMetafileFromMemory(System.Byte[])">
      <summary>
        バイト配列から
        <see cref="T:System.Drawing.Imaging.Metafile" />を読み取ります。
      </summary>
      <param name="imageData">
        <see cref="T:System.Drawing.Imaging.Metafile" />データを含むバイト配列。
      </param>
      <returns>
        新しく作成された
        <see cref="T:System.Drawing.Imaging.Metafile" />。
      </returns>
      <seealso cref="M:C1.C1Preview.GraphicsUtils.WriteMetafileToMemory(System.Drawing.Imaging.Metafile)" />
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.WriteMetafileToMemory(System.Drawing.Imaging.Metafile)">
      <summary>
        <see cref="T:System.Drawing.Imaging.Metafile" />をバイト配列に書き込みます。
      </summary>
      <param name="metafile">
        書き込む
        <see cref="T:System.Drawing.Imaging.Metafile" />。
      </param>
      <returns>
        <paramref name="metafile" />データを含むバイト配列。
      </returns>
      <seealso cref="M:C1.C1Preview.GraphicsUtils.ReadMetafileFromMemory(System.Byte[])" />
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.WriteMetafileToStream(System.Drawing.Imaging.Metafile,System.IO.Stream)">
      <summary>
        <see cref="T:System.Drawing.Imaging.Metafile" />を
        <see cref="T:System.IO.Stream" />にシリアル化します。
      </summary>
      <param name="metafile">
        シリアル化する
        <see cref="T:System.Drawing.Imaging.Metafile" />。
      </param>
      <param name="stream">
        ターゲット
        <see cref="T:System.IO.Stream" />。
      </param>
      <seealso cref="M:C1.C1Preview.GraphicsUtils.WriteMetafileToMemory(System.Drawing.Imaging.Metafile)" />
      <seealso cref="M:C1.C1Preview.GraphicsUtils.WriteMetafileToFile(System.Drawing.Imaging.Metafile,System.String)" />
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.WriteMetafileToFile(System.Drawing.Imaging.Metafile,System.String)">
      <summary>
        <see cref="T:System.Drawing.Imaging.Metafile" />をディスクファイルにシリアル化します。
      </summary>
      <param name="metafile">
        シリアル化する
        <see cref="T:System.Drawing.Imaging.Metafile" />。
      </param>
      <param name="fileName">ターゲットファイル名。</param>
      <seealso cref="M:C1.C1Preview.GraphicsUtils.WriteMetafileToStream(System.Drawing.Imaging.Metafile,System.IO.Stream)" />
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.SaveImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
      <summary>画像をストリームに保存します。</summary>
      <param name="image">保存する画像。</param>
      <param name="imageFormat">画像を保存する形式。画像がメタファイルの場合、このパラメータは無視されます。</param>
      <returns>画像データを含む MemoryStream オブジェクトを返します。保存時にエラーが発生した場合は null を返します。</returns>
      <remarks>
        <para>画像がメタファイルの場合は、メタファイルとして保存します。一方、標準の Metafile.Save メソッドは、メタファイルを PNG 形式で保存します。</para>
      </remarks>
      <seealso cref="M:C1.C1Preview.GraphicsUtils.SaveImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.Boolean)" />
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.SaveImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.Boolean)">
      <summary>
        <see cref="T:System.Drawing.Image" />を
        <see cref="T:System.IO.Stream" />に保存します。
      </summary>
      <param name="image">
        保存する
        <see cref="T:System.Drawing.Image" />。
      </param>
      <param name="imageFormat">
        画像の保存に使用する
        <see cref="T:System.Drawing.Imaging.ImageFormat" />（
        <paramref name="image" />が
        <see cref="T:System.Drawing.Imaging.Metafile" />で、
        <paramref name="keepAsMetafile" />が
        <b>true</b>の場合は無視）。
      </param>
      <param name="keepAsMetafile">
        <b>true</b>の場合、メタファイルは
        <paramref name="imageFormat" />を無視して、変換なしで保存されます。 その以外の場合は、画像は指定した形式に保存されます。
      </param>
      <returns>
        画像データを含む
        <see cref="T:System.IO.MemoryStream" />オブジェクト。保存中にエラーが発生した場合は
        <b>null</b>。
      </returns>
      <remarks>
        標準
        <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)" />メソッドと異なり、 このメソッドは、変換なしで
        <see cref="T:System.Drawing.Imaging.Metafile" />オブジェクトをメタファイルとして保存できます （標準メソッドは、そのような変換が要求されない場合でも保存する前にメタファイルを PNG 形式に変換します）。
      </remarks>
      <seealso cref="M:C1.C1Preview.GraphicsUtils.SaveImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)" />
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.SaveImageToMemory(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.Boolean)">
      <summary>
        <see cref="T:System.Drawing.Image" />をバイト配列に保存します。
      </summary>
      <param name="image">
        保存する
        <see cref="T:System.Drawing.Image" />。
      </param>
      <param name="imageFormat">
        画像の保存に使用する
        <see cref="T:System.Drawing.Imaging.ImageFormat" />（
        <paramref name="image" />が
        <see cref="T:System.Drawing.Imaging.Metafile" />で、
        <paramref name="keepAsMetafile" />が
        <b>true</b>の場合は無視されます）。
      </param>
      <param name="keepAsMetafile">
        <b>true</b>の場合、メタファイルは
        <paramref name="imageFormat" />を無視して、変換なしで保存されます。 そうでない場合は、画像は指定した形式に保存されます。
      </param>
      <returns>
        画像データを含む
        <see cref="T:System.IO.MemoryStream" />オブジェクト。保存中にエラーが発生した場合は
        <b>null</b>。
      </returns>
      <remarks>
        標準
        <see cref="M:System.Drawing.Image.Save(System.IO.Stream,System.Drawing.Imaging.ImageFormat)" />メソッドと異なり、 このメソッドは、変換なしで
        <see cref="T:System.Drawing.Imaging.Metafile" />オブジェクトをメタファイルとして保存できます（標準メソッドは、 そのような変換が要求されない場合でも保存する前にメタファイルを PNG 形式に変換します）。
      </remarks>
      <seealso cref="M:C1.C1Preview.GraphicsUtils.SaveImageToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)" />
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.LoadImageFromMemory(System.Byte[])">
      <summary>バイト配列から画像を作成します。</summary>
      <param name="data">画像データを含むバイト配列。</param>
      <returns>
        <see cref="T:System.Drawing.Image" />オブジェクト。画像を作成できなかった場合は null。
      </returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.FindImageCodecInfo(System.Drawing.Imaging.ImageFormat)">
      <summary>
        指定した画像形式の
        <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />、 または
        <c>null</c>を返します。
      </summary>
      <param name="imageFormat">
        画像形式（例：
        <see cref="P:System.Drawing.Image.RawFormat" />の戻り値）。
      </param>
      <returns>
        対応する
        <see cref="T:System.Drawing.Imaging.ImageCodecInfo" />。見つからなかった場合は
        <c>null</c>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GetDcDpiX(System.IntPtr)">
      <summary>指定されたデバイスコンテキストの水平解像度を返します。</summary>
      <param name="dc">デバイスコンテキストのハンドル。</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GetDcDpiY(System.IntPtr)">
      <summary>指定されたデバイスコンテキストの垂直解像度を返します。</summary>
      <param name="dc">デバイスコンテキストのハンドル。</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GetMetafileInfo(System.Drawing.Imaging.Metafile,C1.C1Preview.MetafileInfo@)">
      <summary>メタファイルに関する情報を取得します。</summary>
      <param name="metafile">メタファイル。</param>
      <param name="metafileInfo">メタファイル情報。</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GetMetafileSize(System.Drawing.Imaging.Metafile,C1.C1Preview.UnitTypeEnum,System.Single,System.Single)">
      <summary>メタファイルのサイズを取得します。</summary>
      <param name="metafile">サイズの取得先のメタファイル。</param>
      <param name="destType">測定のターゲット単位。</param>
      <param name="destDpiX">
        ターゲット水平解像度（
        <paramref name="destType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合に使用）。
      </param>
      <param name="destDpiY">
        ターゲット垂直解像度（
        <paramref name="destType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合に使用）。
      </param>
      <returns>
        <paramref name="metafile" />のサイズ（
        <paramref name="destType" />によって指定された単位）。
      </returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GetImageSize(System.Drawing.Image,C1.C1Preview.UnitTypeEnum,System.Single,System.Single)">
      <summary>画像のサイズを取得します。</summary>
      <param name="image">サイズの取得先の画像。</param>
      <param name="destType">測定のターゲット単位。</param>
      <param name="destDpiX">
        ターゲット水平解像度（
        <paramref name="destType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合に使用）。
      </param>
      <param name="destDpiY">
        ターゲット垂直解像度（
        <paramref name="destType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合に使用）。
      </param>
      <returns>
        <paramref name="image" />のサイズ（
        <paramref name="destType" />によって指定された単位）。
      </returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GetImageDpi(System.Drawing.Image)">
      <summary>
        画像の解像度を取得します。 画像が
        <see cref="T:C1.C1Preview.MetafileInfo" />を含む
        <see cref="T:System.Drawing.Imaging.Metafile" />の場合、 解像度はその情報から取得されます。
      </summary>
      <param name="image">画像。</param>
      <returns>画像解像度（DPI）。</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,C1.C1Preview.IImageAlign,C1.C1Preview.IMetafilePainter,System.Boolean)">
      <summary>
        指定された
        <see cref="T:System.Drawing.Image" />を描画します。
      </summary>
      <param name="graphics">
        描画先の
        <see cref="T:System.Drawing.Graphics" />。
      </param>
      <param name="image">
        描画する
        <see cref="T:System.Drawing.Image" />。
      </param>
      <param name="drawRect">配置矩形。</param>
      <param name="clipRect">クリッピング矩形。クリッピングを適用しない場合は null でも構いません。</param>
      <param name="align">
        画像配置（
        <b>null</b>の場合、
        <see cref="P:C1.C1Preview.ImageAlign.Default" />が使用されます）。
      </param>
      <param name="metafilePainter">
        <see cref="T:C1.C1Preview.IMetafilePainter" />を実装するオブジェクト。
        <param name="useClassicDrawMethod">Graphics.DrawImage(image, dstRect, srcRect, GraphicsUnit) ではなく、Graphics.DrawImage(image, dstRect) メソッドを使用します。まれにパラメータが２つのメソッドの方が良い結果になることがあります。</param><b>null</b>でなく、
        <paramref name="image" />が
        <see cref="T:System.Drawing.Imaging.Metafile" />の場合、画像の描画に使用されます。
      </param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.ConvertToEmf(System.Drawing.Imaging.Metafile,System.Drawing.Graphics)">
      <summary>メタファイルを EmfPlusOnly または EmfPlusDual から EmfOnly に変換します。</summary>
      <param name="metafile">変換するメタファイル。</param>
      <param name="referenceGraphics">変換で使用される Graphics オブジェクト。null を指定すると、画面 DC が使用されます。</param>
      <returns>変換された EmfOnly メタファイルを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.CreateRoundRectPath(System.Drawing.RectangleF,System.Drawing.SizeF)">
      <summary>
        角が丸い矩形を表す
        <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />を作成します。
      </summary>
      <param name="rectangle">結果のベースとなる矩形。</param>
      <param name="ellipse">丸みのある角の描画に使用される楕円のサイズ。</param>
      <returns>
        <paramref name="ellipse" />を使って角が丸くなった
        <paramref name="rectangle" />を表す
        <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.CreateRoundRectPath(System.Drawing.Rectangle,System.Drawing.Size)">
      <summary>
        角が丸い矩形を表す
        <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />を作成します。
      </summary>
      <param name="rectangle">結果のベースとなる矩形。</param>
      <param name="ellipse">丸みのある角の描画に使用される楕円のサイズ。</param>
      <returns>
        <paramref name="ellipse" />を使って角が丸くなった
        <paramref name="rectangle" />を表す
        <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.DrawRoundRect(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF,System.Drawing.SizeF)">
      <summary>
        指定した
        <see cref="T:System.Drawing.Pen" />で指定した
        <see cref="T:System.Drawing.Graphics" />上に角が丸い矩形を描画します。
      </summary>
      <param name="graphics">
        描画先の
        <see cref="T:System.Drawing.Graphics" />。
      </param>
      <param name="pen">
        描画に使用する
        <see cref="T:System.Drawing.Pen" />。
      </param>
      <param name="rectangle">
        角が丸い矩形のベースとして使用する
        <see cref="T:System.Drawing.RectangleF" />。
      </param>
      <param name="ellipse">丸みのある角の描画に使用される楕円のサイズ。</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.FillRoundRect(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.SizeF)">
      <summary>
        指定した
        <see cref="T:System.Drawing.Brush" />で指定した
        <see cref="T:System.Drawing.Graphics" />上の角が丸い矩形を塗りつぶします。
      </summary>
      <param name="graphics">
        描画先の
        <see cref="T:System.Drawing.Graphics" />。
      </param>
      <param name="brush">
        使用する塗りつぶし
        <see cref="T:System.Drawing.Brush" />。
      </param>
      <param name="rectangle">
        角が丸い矩形のベースとして使用する
        <see cref="T:System.Drawing.RectangleF" />。
      </param>
      <param name="ellipse">丸みのある角の描画に使用される楕円のサイズ。</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.DrawRoundRect(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Rectangle,System.Drawing.Size)">
      <summary>
        指定した
        <see cref="T:System.Drawing.Pen" />で指定した
        <see cref="T:System.Drawing.Graphics" />上に角が丸い矩形を描画します。
      </summary>
      <param name="graphics">
        描画先の
        <see cref="T:System.Drawing.Graphics" />。
      </param>
      <param name="pen">
        描画に使用する
        <see cref="T:System.Drawing.Pen" />。
      </param>
      <param name="rectangle">
        角が丸い矩形のベースとして使用する
        <see cref="T:System.Drawing.RectangleF" />。
      </param>
      <param name="ellipse">丸みのある角の描画に使用される楕円のサイズ。</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.FillRoundRect(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.Rectangle,System.Drawing.Size)">
      <summary>
        指定した
        <see cref="T:System.Drawing.Brush" />で指定した
        <see cref="T:System.Drawing.Graphics" />上の角が丸い矩形を塗りつぶします。
      </summary>
      <param name="graphics">
        描画先の
        <see cref="T:System.Drawing.Graphics" />。
      </param>
      <param name="brush">
        使用する塗りつぶし
        <see cref="T:System.Drawing.Brush" />。
      </param>
      <param name="rectangle">
        角が丸い矩形のベースとして使用する
        <see cref="T:System.Drawing.RectangleF" />。
      </param>
      <param name="ellipse">丸みのある角の描画に使用される楕円のサイズ。</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.IsImagesContentEqual(System.Drawing.Image,System.Drawing.Image)">
      <summary>２つの画像をコンテンツで比較します。</summary>
      <param name="i1">
        比較する１つめの
        <see cref="T:System.Drawing.Image" />。
      </param>
      <param name="i2">
        比較する２つめの
        <see cref="T:System.Drawing.Image" />。
      </param>
      <returns>
        画像が同じコンテンツを持つ場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.IsImagesContentEqual(System.Drawing.Image,System.Drawing.Image,System.Boolean)">
      <summary>２つの画像をコンテンツで比較します。オプションであいまい比較を使用します。</summary>
      <param name="i1">
        比較する１つめの
        <see cref="T:System.Drawing.Image" />。
      </param>
      <param name="i2">
        比較する２つめの
        <see cref="T:System.Drawing.Image" />。
      </param>
      <param name="useFuzzyComparison">
        あいまい比較（小さい違いを無視）を使用する場合は
        <b>true</b>、 厳密な比較を使用する場合は
        <b>false</b>。
      </param>
      <returns>
        画像が同じコンテンツを持つ場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.IsImageEqualToolStripItemImage(System.Drawing.Image,System.Windows.Forms.ToolStripItem)">
      <summary>
        画像のコンテンツが
        <see cref="T:System.Windows.Forms.ToolStripItem" />の
        <see cref="P:System.Windows.Forms.ToolStripItem.Image" />に等しいかどうかをテストします。 このメソッドは、あいまい比較（
        <see cref="M:C1.C1Preview.GraphicsUtils.IsImagesContentEqual(System.Drawing.Image,System.Drawing.Image,System.Boolean)" />を参照）を実行します。
      </summary>
      <param name="image">比較する画像。</param>
      <param name="item">
        比較する
        <see cref="T:System.Windows.Forms.ToolStripItem" />。
      </param>
      <returns>
        画像が等しい場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.PixelFormatToBytesPerPixel(System.Drawing.Imaging.PixelFormat)">
      <summary>
        <see cref="T:System.Drawing.Imaging.PixelFormat" />に基づいて１ピクセルあたりのバイトを計算します。
      </summary>
      <param name="pixelFormat">
        テストする
        <see cref="T:System.Drawing.Imaging.PixelFormat" />。
      </param>
      <returns>１ピクセルあたりのバイト。</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.IsBitmapsContentEqual(System.Drawing.Bitmap,System.Drawing.Bitmap)">
      <summary>２つのビットマップのコンテンツを比較します。</summary>
      <param name="bmp1">比較する１つめのビットマップ。</param>
      <param name="bmp2">比較する２つめのビットマップ。</param>
      <returns>
        ビットマップが同じコンテンツを持つ場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.IsBitmapsContentEqual(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Boolean)">
      <summary>２つのビットマップのコンテンツを比較します。 オプションであいまい比較を実行します。</summary>
      <param name="bmp1">比較する１つめのビットマップ。</param>
      <param name="bmp2">比較する２つめのビットマップ。</param>
      <param name="useFuzzyComparison">
        あいまい比較を使用する場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </param>
      <returns>
        ビットマップが同じコンテンツを持つ場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="P:C1.C1Preview.GraphicsUtils.RealDpiX">
      <summary>画面の物理的な水平解像度を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsUtils.RealDpiY">
      <summary>画面の物理的な垂直解像度を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsUtils.ScreenDpiX">
      <summary>画面の論理的な水平解像度を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsUtils.ScreenDpiY">
      <summary>画面の論理的な垂直解像度を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.GraphicsUtils.GdiDc">
      <summary>GDI デバイスコンテキストを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.#ctor(System.IntPtr,System.Boolean)">
      <summary>
        <see cref="T:C1.C1Preview.GraphicsUtils.GdiDc" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="dc">使用する GDI DC。</param>
      <param name="saveClipRegion">クリップ領域を保存するかどうかを示します。</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.#ctor(System.Drawing.Graphics,System.Boolean)">
      <summary>
        <see cref="T:C1.C1Preview.GraphicsUtils.GdiDc" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="graphics">使用するグラフィックス。</param>
      <param name="saveClipRegion">クリップ領域を保存するかどうかを示します。</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.Finalize">
      <summary>このインスタンスを破壊します。</summary>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.Dispose">
      <summary>このインスタンスを破棄します。</summary>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.GetClipRegion">
      <summary>クリッピング領域を返します。</summary>
      <returns>クリッピング領域へのハンドル。</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.SetClipRegion(System.IntPtr,System.Int32)">
      <summary>クリッピング領域を設定します。</summary>
      <param name="region">クリッピング領域。</param>
      <param name="mode">使用するモード。</param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.SetClipRegion(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>クリッピング領域を設定します。</summary>
      <param name="left"></param>
      <param name="top"></param>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.SetClipRegion(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>クリッピング領域を設定します。</summary>
      <param name="left"></param>
      <param name="top"></param>
      <param name="width"></param>
      <param name="height"></param>
      <param name="mode"></param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.SetClipRegion(System.Single,System.Single,System.Single,System.Single)">
      <summary>クリッピング領域を設定します。</summary>
      <param name="left"></param>
      <param name="top"></param>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.SetClipRegion(System.Drawing.RectangleF)">
      <summary>クリッピング領域を設定します。</summary>
      <param name="rect"></param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.SetClipRegion(System.Drawing.Rectangle)">
      <summary>クリッピング領域を設定します。</summary>
      <param name="rect"></param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.SetClipRegion(System.Drawing.Rectangle,System.Int32)">
      <summary>クリッピング領域を設定します。</summary>
      <param name="rect"></param>
      <param name="mode"></param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.DrawFrameRectangle(System.Drawing.Rectangle,System.Drawing.Color)">
      <summary>フレーム矩形を描画します。</summary>
      <param name="rect"></param>
      <param name="color"></param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.FillRect(System.Drawing.Rectangle,System.Drawing.Color)">
      <summary>矩形を塗りつぶします。</summary>
      <param name="rect"></param>
      <param name="color"></param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.DrawFocusRect(System.Drawing.Rectangle)">
      <summary>フォーカス矩形を描画します。</summary>
      <param name="rect"></param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.DrawText(System.String,System.Drawing.Rectangle,System.Drawing.Font,System.Drawing.Color,System.Int32)">
      <summary>テキストを描画します。</summary>
      <param name="s"></param>
      <param name="bounds"></param>
      <param name="font"></param>
      <param name="color"></param>
      <param name="formatFlags"></param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.DrawDisabledText(System.String,System.Drawing.Rectangle,System.Drawing.Font,System.Int32)">
      <summary>無効なテキストを描画します。</summary>
      <param name="s"></param>
      <param name="bounds"></param>
      <param name="font"></param>
      <param name="formatFlags"></param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.Line(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>線を描画します。</summary>
      <param name="x1"></param>
      <param name="y1"></param>
      <param name="x2"></param>
      <param name="y2"></param>
      <param name="color"></param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.Rectangle(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
      <summary>矩形を描画します。</summary>
      <param name="bounds"></param>
      <param name="borderColor"></param>
      <param name="fillColor"></param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.FrameRect(System.Drawing.Rectangle,System.Drawing.Color)">
      <summary>フレーム矩形を描画します。</summary>
      <param name="bounds"></param>
      <param name="color"></param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.FillRect(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
      <summary>矩形を塗りつぶします。</summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="width"></param>
      <param name="height"></param>
      <param name="brush"></param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.DrawCheck(System.Drawing.Rectangle,System.Drawing.Color)">
      <summary>チェックマークを描画します。</summary>
      <param name="bounds"></param>
      <param name="color"></param>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GdiDc.Ellipse(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
      <summary>楕円を描画します。</summary>
      <param name="bounds"></param>
      <param name="borderColor"></param>
      <param name="fillColor"></param>
    </member>
    <member name="P:C1.C1Preview.GraphicsUtils.GdiDc.Dc">
      <summary>DC を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsUtils.GdiDc.DpiX">
      <summary>水平 DPI を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsUtils.GdiDc.DpiY">
      <summary>垂直 DPI を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.GraphicsUtils.GdiDc.TextAlign">
      <summary>テキスト配置を示します。</summary>
    </member>
    <member name="F:C1.C1Preview.GraphicsUtils.GdiDc.TextAlign.Near">
      <summary>左揃え（左から右に使用する形式の場合）。</summary>
    </member>
    <member name="F:C1.C1Preview.GraphicsUtils.GdiDc.TextAlign.Center">
      <summary>中央揃え。</summary>
    </member>
    <member name="F:C1.C1Preview.GraphicsUtils.GdiDc.TextAlign.Far">
      <summary>右揃え（左から右に使用する形式の場合）。</summary>
    </member>
    <member name="T:C1.C1Preview.GraphicsHolder">
      <summary>グラフィックスオブジェクトと合わせて、 作成に使用された（プリンタ）デバイスまたはビットマップを保持します（ある場合）。 重要なのは、グラフィックスが不要になったときにデバイスまたはビットマップも合わせて廃棄する点です（リソース漏れ防止のため）。</summary>
    </member>
    <member name="F:C1.C1Preview.GraphicsHolder.Empty">
      <summary>空のグラフィックスホルダインスタンス。</summary>
    </member>
    <member name="M:C1.C1Preview.GraphicsHolder.FromDC(System.IntPtr)">
      <summary>デバイスコンテキストからグラフィックスホルダを作成します。 ホルダが廃棄されると、 グラフィックスとデバイスコンテキストの両方が解放されます（デバイスコンテキストで DeleteDC が呼び出されます）。</summary>
      <param name="dc">グラフィックスの作成に使用するデバイスコンテキスト。</param>
      <returns>グラフィックスホルダの新しいインスタンス。</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsHolder.FromGraphics(System.Drawing.Graphics)">
      <summary>グラフィックスインスタンスからグラフィックスホルダを作成します。 ホルダが廃棄されるときに、グラフィックスはそのまま残されます（廃棄されません）。</summary>
      <param name="g">新しいホルダに格納するグラフィックス。</param>
      <returns>グラフィックスホルダの新しいインスタンス。</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsHolder.FromScreen">
      <summary>画面からグラフィックスホルダを作成します。 失敗した場合（Azure 上など）、グラフィックスはビットマップから作成されます。 ホルダが廃棄されると、グラフィックスとビットマップの両方が解放されます。</summary>
      <returns>グラフィックスホルダの新しいインスタンス。</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsHolder.FromBitmap">
      <summary>ビットマップからグラフィックスホルダを作成します。 グラフィックスとビットマップはホルダが廃棄されると解放されます。 これが失敗することはありません。</summary>
      <returns>グラフィックスホルダの新しいインスタンス。</returns>
    </member>
    <member name="M:C1.C1Preview.GraphicsHolder.Dispose">
      <summary>現在のグラフィックスホルダを廃棄します。</summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsHolder.Graphics">
      <summary>現在のオブジェクトによって保持されているグラフィックスオブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsHolder.DpiX">
      <summary>現在のインスタンスによって保持されているグラフィックスの水平解像度を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsHolder.DpiY">
      <summary>現在のインスタンスによって保持されているグラフィックスの垂直解像度を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.IC1Printable">
      <summary>C1PrintDocument の RenderC1Printable を介したレンダリングをサポートするには、コントロールがこのインタフェースを実装する必要があります。</summary>
    </member>
    <member name="M:C1.C1Preview.IC1Printable.C1PrintableGetImage">
      <summary>コントロールのコンテンツを画像として取得します。</summary>
      <returns>コントロールのコンテンツを表す Image オブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.IC1Printable.C1PrintableGetTree">
      <summary>コントロールのコンテンツをストリームでシリアライズされる C1 ドキュメントとして取得します。</summary>
      <returns>ドキュメントのツリーを含むストリームオブジェクト。</returns>
    </member>
    <member name="T:C1.C1Preview.PageDirectionEnum">
      <summary>新しいページを追加する方向を示します。</summary>
    </member>
    <member name="F:C1.C1Preview.PageDirectionEnum.Default">
      <summary>現在のスタック規則に基づいて、追加される方向が決定されます。</summary>
    </member>
    <member name="F:C1.C1Preview.PageDirectionEnum.Vertical">
      <summary>次のページは現在のページの下に追加されます。</summary>
    </member>
    <member name="F:C1.C1Preview.PageDirectionEnum.Horizontal">
      <summary>次のページは現在のページの右に追加されます。</summary>
    </member>
    <member name="T:C1.C1Preview.LayoutChangeBase">
      <summary>オブジェクトの描画前後にレイアウトを変更する方法の基本クラスを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.LayoutChangeBase.AssignFrom(C1.C1Preview.LayoutChangeBase)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.LayoutChangeBase" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.LayoutChangeBase.Clone">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.LayoutChangeBase" />オブジェクトのコピーを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.LayoutChangeBase" />オブジェクト。
      </returns>
    </member>
    <member name="T:C1.C1Preview.LayoutChangeNewPage">
      <summary>改ページを実行する方法を表します。</summary>
      <seealso cref="T:C1.C1Preview.LayoutChangeBase" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNewColumn" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNewLine" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNoBreak" />
    </member>
    <member name="M:C1.C1Preview.LayoutChangeNewPage.#ctor">
      <summary>LayoutChangeNewPage クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.LayoutChangeNewPage.#ctor(C1.C1Preview.PageLayout)">
      <summary>LayoutChangeNewPage クラスの新しいインスタンスを初期化します。</summary>
      <param name="pageLayout">新しいページのレイアウト。</param>
    </member>
    <member name="M:C1.C1Preview.LayoutChangeNewPage.AssignFrom(C1.C1Preview.LayoutChangeBase)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.LayoutChangeBase" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.LayoutChangeNewPage.PageLayout">
      <summary>新しいページのレイアウトを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.LayoutChangeNewPage.Direction">
      <summary>新しいページを追加する方向を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.LayoutChangeNewPage.Nested">
      <summary>新しいページが終了したときにレイアウトを元に戻すかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.LayoutChangeNewColumn">
      <summary>段区切りを実行する方法を表します。</summary>
      <seealso cref="T:C1.C1Preview.LayoutChangeBase" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNewPage" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNewLine" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNoBreak" />
    </member>
    <member name="T:C1.C1Preview.LayoutChangeNewLine">
      <summary>インラインフロー内で改行する方法を記述します。</summary>
      <seealso cref="T:C1.C1Preview.LayoutChangeBase" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNewPage" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNewColumn" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNoBreak" />
    </member>
    <member name="T:C1.C1Preview.LayoutChangeNoBreak">
      <summary>改ページを実行せずに次のページのレイアウトを変更する方法を表します。</summary>
      <seealso cref="T:C1.C1Preview.LayoutChangeBase" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNewPage" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNewColumn" />
      <seealso cref="T:C1.C1Preview.LayoutChangeNewLine" />
    </member>
    <member name="M:C1.C1Preview.LayoutChangeNoBreak.#ctor">
      <summary>LayoutChangeNoBreak クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.LayoutChangeNoBreak.#ctor(C1.C1Preview.PageLayout)">
      <summary>LayoutChangeNoBreak クラスの新しいインスタンスを初期化します。</summary>
      <param name="pageLayout">次のページのレイアウト。</param>
    </member>
    <member name="M:C1.C1Preview.LayoutChangeNoBreak.AssignFrom(C1.C1Preview.LayoutChangeBase)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.LayoutChangeBase" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source"></param>
    </member>
    <member name="P:C1.C1Preview.LayoutChangeNoBreak.PageLayout">
      <summary>次のページのレイアウトを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.LongOperationEventArgs">
      <summary>時間がかかる操作によって定期的に発生させるイベントの引数を記述します。</summary>
    </member>
    <member name="M:C1.C1Preview.LongOperationEventArgs.#ctor">
      <summary>デフォルトのプロパティ（Complete=0、CanCancel=false）を使用して、LongOperationEventArgs の新しいインスタンスを作成します。</summary>
    </member>
    <member name="M:C1.C1Preview.LongOperationEventArgs.#ctor(System.Double)">
      <summary>指定された Complete 値と CanCancel=false を使用して、LongOperationEventArgs の新しいインスタンスを作成します。</summary>
      <param name="complete">完了状況（０～１）。</param>
    </member>
    <member name="M:C1.C1Preview.LongOperationEventArgs.#ctor(System.Double,System.Boolean)">
      <summary>指定された Complete 値と CanCancel 値を使用して、LongOperationEventArgs の新しいインスタンスを作成します。</summary>
      <param name="complete">完了状況（０～１）。</param>
      <param name="canCancel">操作をキャンセルできるかどうかを示します。</param>
    </member>
    <member name="M:C1.C1Preview.LongOperationEventArgs.#ctor(System.Boolean)">
      <summary>指定された CanCancel 値と Complete=0 を使用して、LongOperationEventArgs の新しいインスタンスを作成します。</summary>
      <param name="canCancel">操作をキャンセルできるかどうかを示します。</param>
    </member>
    <member name="P:C1.C1Preview.LongOperationEventArgs.Complete">
      <summary>0（０％完了）から1（100％完了）までの概算完了率を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.LongOperationEventArgs.CanCancel">
      <summary>
        <see cref="P:C1.C1Preview.LongOperationEventArgs.Cancel" />プロパティを
        <b>true</b>に設定することによって、 イベントハンドラが現在の長い演算をキャンセルできるかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LongOperationEventArgs.Cancel">
      <summary>
        現在の長い演算が取り消されるかどうかを示す値を取得または設定します（このプロパティは
        <see cref="P:C1.C1Preview.LongOperationEventArgs.CanCancel" />が
        <b>false</b>の場合は無視されます）。
      </summary>
    </member>
    <member name="T:C1.C1Preview.LongOperationEventHandler">
      <summary>時間がかかる操作によって定期的に発生するイベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントのパラメータ。</param>
    </member>
    <member name="T:C1.C1Preview.SerializerBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.SerializerBase.Deserialize(System.String,System.Object,System.Type,C1.C1Preview.C1DocumentFormatEnum)">
      <summary>これは内部使用専用です。</summary>
      <param name="fileName"></param>
      <param name="o"></param>
      <param name="type"></param>
      <param name="format"></param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.OutlineNode">
      <summary>ドキュメントのアウトラインノードを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.OutlineNode.#ctor">
      <summary>OutlineNode クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.OutlineNode.#ctor(System.String)">
      <summary>
        <see cref="T:C1.C1Preview.OutlineNode" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="caption">ノードキャプション。</param>
    </member>
    <member name="M:C1.C1Preview.OutlineNode.#ctor(System.String,C1.C1Preview.IDocumentLocation)">
      <summary>OutlineNode クラスの新しいインスタンスを初期化します。</summary>
      <param name="caption">アウトラインノードのキャプション。</param>
      <param name="location">アウトラインノードの位置。</param>
    </member>
    <member name="M:C1.C1Preview.OutlineNode.#ctor(System.String,C1.C1Preview.C1LinkTarget)">
      <summary>
        <see cref="T:C1.C1Preview.OutlineNode" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="caption">ノードキャプション。</param>
      <param name="linkTarget">
        このノードに関連付ける
        <see cref="T:C1.C1Preview.C1LinkTarget" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.OutlineNode.#ctor(System.String,C1.C1Preview.IDocumentLocation,System.Drawing.Icon)">
      <summary>OutlineNode クラスの新しいインスタンスを初期化します。</summary>
      <param name="caption">アウトラインノードのキャプション。</param>
      <param name="location">アウトラインノードの位置。</param>
      <param name="icon">アウトラインノードのアイコン。</param>
    </member>
    <member name="M:C1.C1Preview.OutlineNode.Clone">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.OutlineNode" />のコピーを作成します。 このメソッドでは Children プロパティはコピーされません。
      </summary>
      <returns>新しく作成されたオブジェクト。</returns>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.LinkTarget">
      <summary>現在のハイパーリンクのターゲットを決定します。</summary>
      <remarks>
        <para>
          ハイパーリンクターゲットは、
          <see cref="T:C1.C1Preview.C1LinkTarget" />から派生したクラスのインスタンスによって記述され、 以下のいずれかです。
        </para>
        <list type="bullet">
          <item>
            <term>
              <see cref="T:C1.C1Preview.C1LinkTargetAnchor" />
            </term>
            <description>現在のドキュメント内で定義されたアンカー。</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.C1LinkTargetDocumentLocation" />
            </term>
            <description>現在のドキュメント内の位置。</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.C1LinkTargetExternalAnchor" />
            </term>
            <description>保存済みの C1D ドキュメント内で定義されたアンカー。</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.C1LinkTargetFile" />
            </term>
            <description>外部ドキュメント、プログラム、または URL。 リンクの呼び出しには ShellExecute API が使用されます。</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.C1LinkTargetPage" />
            </term>
            <description>現在のドキュメント内のページ。</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.C1LinkTargetUser" />
            </term>
            <description>ハイパーリンクターゲットはユーザーイベントハンドラによって決定されます。</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.Owner">
      <summary>所有者のコレクションオブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.Parent">
      <summary>親ノードを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.Level">
      <summary>アウトラインレベルを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.Location">
      <summary>アウトラインノードのドキュメント中の位置を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.Caption">
      <summary>アウトラインノードのキャプションを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.Icon">
      <summary>アウトラインノードのアイコンを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.IconName">
      <summary>アウトラインノードのアイコン名を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.Children">
      <summary>子ノードのコレクションを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.HasChildren">
      <summary>子ノードが存在するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.TopParent">
      <summary>ルートノードを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.OutlineNode.Document">
      <summary>アウトラインノードに関連付けられたドキュメントを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.OutlineNodeCollection">
      <summary>
        <see cref="T:C1.C1Preview.OutlineNode" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.OutlineNodeCollection.GetItemType">
      <summary>このコレクション内の要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Preview.OutlineNode" />タイプ。
      </returns>
    </member>
    <member name="M:C1.C1Preview.OutlineNodeCollection.Add(C1.C1Preview.OutlineNode)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="node">追加するオブジェクト。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.OutlineNodeCollection.Add(System.String)">
      <summary>指定したキャプションと位置を持つノードを現在のコレクションに追加します。</summary>
      <param name="caption">追加するノードのキャプション。</param>
      <returns>現在のコレクション内の新しく追加されたノードのインデックス。</returns>
    </member>
    <member name="M:C1.C1Preview.OutlineNodeCollection.Add(System.String,C1.C1Preview.IDocumentLocation)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="caption">追加するノードのキャプション。</param>
      <param name="location">追加するノードの位置。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.OutlineNodeCollection.Add(System.String,C1.C1Preview.C1LinkTarget)">
      <summary>ノードのキャプションとリンクターゲットを指定して現在のコレクションに追加します。</summary>
      <param name="caption">追加するノードのキャプション。</param>
      <param name="linkTarget">
        ノードに関連付ける
        <see cref="T:C1.C1Preview.C1LinkTarget" />。
      </param>
      <returns>現在のコレクション内の新しく追加されたノードのインデックス。</returns>
    </member>
    <member name="M:C1.C1Preview.OutlineNodeCollection.Add(System.String,C1.C1Preview.IDocumentLocation,System.Drawing.Icon)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="caption">追加するノードのキャプション。</param>
      <param name="location">追加するノードの位置。</param>
      <param name="icon">追加するノードのアイコン。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.OutlineNodeCollection.Remove(C1.C1Preview.OutlineNode)">
      <summary>ノードを現在のコレクションから削除します。</summary>
      <param name="node">削除するノード。</param>
    </member>
    <member name="P:C1.C1Preview.OutlineNodeCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得または設定します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>指定したインデックスの要素。</returns>
    </member>
    <member name="T:C1.C1Preview.PageColumnDef">
      <summary>１つのページ列のパラメータを定義します。</summary>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.PageColumnDef" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:C1.C1Preview.PageColumnDef" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="width">
        現在の列の
        <see cref="P:C1.C1Preview.PageColumnDef.Width" />を表す
        <see cref="T:C1.C1Preview.Unit" />値に変換される文字列。
      </param>
      <param name="spacing">
        現在の列の
        <see cref="P:C1.C1Preview.PageColumnDef.Spacing" />を表す
        <see cref="T:C1.C1Preview.Unit" />値に変換される文字列。
      </param>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
        <see cref="T:C1.C1Preview.PageColumnDef" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="width">
        現在の列の
        <see cref="P:C1.C1Preview.PageColumnDef.Width" />を表す
        <see cref="T:C1.C1Preview.Unit" />値。
      </param>
      <param name="spacing">
        現在の列の
        <see cref="P:C1.C1Preview.PageColumnDef.Spacing" />を表す
        <see cref="T:C1.C1Preview.Unit" />値。
      </param>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.ShouldSerializeWidth">
      <summary>
        <see cref="P:C1.C1Preview.PageColumnDef.Width" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.PageColumnDef.Width" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.ShouldSerializeSpacing">
      <summary>
        <see cref="P:C1.C1Preview.PageColumnDef.Spacing" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.PageColumnDef.Spacing" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.Clone">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.PageColumnDef" />オブジェクトのコピーを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.PageColumnDef" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.AssignFrom(C1.C1Preview.PageColumnDef)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.PageColumnDef" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.Compare(C1.C1Preview.PageColumnDef)">
      <summary>
        現在のオブジェクトのプロパティを別の
        <see cref="T:C1.C1Preview.PageColumnDef" />と比較します。
      </summary>
      <param name="other">
        現在のオブジェクトと比較する
        <see cref="T:C1.C1Preview.PageColumnDef" />。
      </param>
      <returns>
        ２つのオブジェクトのプロパティが等しい場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="P:C1.C1Preview.PageColumnDef.Width">
      <summary>列の幅。</summary>
    </member>
    <member name="P:C1.C1Preview.PageColumnDef.Spacing">
      <summary>現在の列と次の列の間隔。</summary>
    </member>
    <member name="T:C1.C1Preview.PageColumnDef.TypeConverter2">
      <summary>
        <see cref="T:C1.C1Preview.PageColumnDef" />のタイプコンバータを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.TypeConverter2.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>現在のコンバータがこのオブジェクトを指定したタイプに変換できるかどうかをテストします。</summary>
      <param name="context">コンバータコンテキスト。</param>
      <param name="type">ターゲットタイプ。</param>
      <returns>
        オブジェクトを変換できる場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.PageColumnDef.TypeConverter2.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>オブジェクトを指定したタイプに変換します。</summary>
      <param name="context">コンバータコンテキスト。</param>
      <param name="culture">カルチャ。</param>
      <param name="value">変換する値。</param>
      <param name="type">ターゲットタイプ。</param>
      <returns>変換されたオブジェクト。</returns>
    </member>
    <member name="T:C1.C1Preview.PageColumnDefCollection">
      <summary>
        <see cref="T:C1.C1Preview.PageColumnDef" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.PageColumnDefCollection.Add(C1.C1Preview.PageColumnDef)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="pageColumnDef">追加するオブジェクト。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.PageColumnDefCollection.Add(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="columnWidth">列の幅。</param>
      <param name="columnSpacing">列の間隔。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.PageColumnDefCollection.Add">
      <summary>新しいオブジェクト作成してコレクションに追加します。</summary>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.PageColumnDefCollection.Insert(System.Int32,C1.C1Preview.PageColumnDef)">
      <summary>
        <see cref="T:C1.C1Preview.PageColumnDef" />を現在のコレクションに挿入します。
      </summary>
      <param name="index">
        指定した
        <see cref="T:C1.C1Preview.PageColumnDef" />の挿入先のインデックス。
      </param>
      <param name="pageColumnDef">挿入する列定義。</param>
    </member>
    <member name="M:C1.C1Preview.PageColumnDefCollection.Remove(C1.C1Preview.PageColumnDef)">
      <summary>
        <see cref="T:C1.C1Preview.PageColumnDef" />を現在のコレクションから削除します。
      </summary>
      <param name="pageColumnDef">削除する列定義。</param>
    </member>
    <member name="M:C1.C1Preview.PageColumnDefCollection.IndexOf(C1.C1Preview.PageColumnDef)">
      <summary>
        現在のコレクション内の指定した
        <see cref="T:C1.C1Preview.PageColumnDef" />のインデックスを返します。
      </summary>
      <param name="pageColumnDef">
        検索する
        <see cref="T:C1.C1Preview.PageColumnDef" />。
      </param>
      <returns>現在のコレクション内の指定した列定義のインデックス。</returns>
    </member>
    <member name="M:C1.C1Preview.PageColumnDefCollection.Compare(C1.C1Preview.PageColumnDefCollection)">
      <summary>
        現在のコレクションを別のコレクションと比較します。
        <see cref="M:C1.C1Preview.PageColumnDef.Compare(C1.C1Preview.PageColumnDef)" />を使って、 対応する位置の要素をプロパティの値によって比較します。
      </summary>
      <param name="other">
        現在と比較する
        <see cref="T:C1.C1Preview.PageColumnDefCollection" />。
      </param>
      <returns>
        ２つのコレクションが同じ位置に同じ要素を持つ場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="P:C1.C1Preview.PageColumnDefCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得または設定します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>指定したインデックスの要素。</returns>
    </member>
    <member name="T:C1.C1Preview.PageLayoutKindEnum">
      <summary>ドキュメント内のさまざまな種類のページレイアウトを定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.PageLayoutKindEnum.None">
      <summary>ページレイアウトはドキュメントにリンクされません。</summary>
    </member>
    <member name="F:C1.C1Preview.PageLayoutKindEnum.Default">
      <summary>デフォルトのページレイアウト。</summary>
    </member>
    <member name="F:C1.C1Preview.PageLayoutKindEnum.FirstPage">
      <summary>最初のページのページレイアウト。</summary>
    </member>
    <member name="F:C1.C1Preview.PageLayoutKindEnum.LastPage">
      <summary>最後のページのページレイアウト。</summary>
    </member>
    <member name="F:C1.C1Preview.PageLayoutKindEnum.EvenPages">
      <summary>偶数ページのページレイアウト。</summary>
    </member>
    <member name="F:C1.C1Preview.PageLayoutKindEnum.OddPages">
      <summary>奇数ページのページレイアウト。</summary>
    </member>
    <member name="T:C1.C1Preview.PageLayout">
      <summary>C1PrintDocument のページレイアウトを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.PageLayout.#ctor">
      <summary>PageLayout クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.PageLayout.#ctor(C1.C1Preview.C1PageSettings)">
      <summary>
        <see cref="T:C1.C1Preview.PageLayout" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="pageSettings">使用するページ設定。</param>
    </member>
    <member name="M:C1.C1Preview.PageLayout.#ctor(C1.C1Preview.C1PageSettings,C1.C1Preview.PageColumnDef[])">
      <summary>
        <see cref="T:C1.C1Preview.PageLayout" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="pageSettings">現在のページレイアウトに使用するページ設定。</param>
      <param name="columns">現在のページレイアウトに使用する列定義。</param>
    </member>
    <member name="M:C1.C1Preview.PageLayout.ShouldSerializeColumns">
      <summary>
        <see cref="P:C1.C1Preview.PageLayout.Columns" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.PageLayout.Columns" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>です。
      </returns>
    </member>
    <member name="M:C1.C1Preview.PageLayout.Clone">
      <summary>現在のインスタンスをコピーして新しい PageLayout オブジェクトを作成します。</summary>
      <returns>このインスタンスをコピーした新しいオブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.PageLayout.AssignFrom(C1.C1Preview.PageLayout)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.PageLayout.Clear">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.PageLayout" />オブジェクトをクリアします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.Document">
      <summary>このオブジェクトの接続先の C1PrintDocument オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.Kind">
      <summary>ドキュメント内のページレイアウトの種類を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.PageSettings">
      <summary>このページレイアウトに関連付けられたページ設定を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.PageHeader">
      <summary>このページレイアウトに関連付けられたページヘッダーを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.PageFooter">
      <summary>このページレイアウトに関連付けられたページフッターを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.Watermark">
      <summary>このページレイアウトに関連付けられた透かし模様を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.Overlay">
      <summary>このページレイアウトに関連付けられたオーバーレイを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.HasColumns">
      <summary>このページレイアウトに複数の列が含まれているかどうかを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageLayout.Columns">
      <summary>このページレイアウトに定義された列のコレクションを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.DocumentPageLayouts">
      <summary>ドキュメントで使用されるページレイアウトを記述します。</summary>
    </member>
    <member name="M:C1.C1Preview.DocumentPageLayouts.#ctor(C1.C1Preview.C1PrintDocument)">
      <summary>DocumentPageLayouts クラスの新しいインスタンスを初期化します。</summary>
      <param name="owner">所有者となる C1PrintDocument オブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.DocumentPageLayouts.Clear">
      <summary>ページレイアウトを初期化します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.Owner">
      <summary>このオブジェクトを含む C1PrintDocument オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.Item(C1.C1Preview.PageLayoutKindEnum)">
      <summary>すべてのページレイアウトを種類別に列挙します。</summary>
      <param name="kind">ページレイアウトオブジェクトの種類。</param>
      <returns>指定された種類のページレイアウトオブジェクト。</returns>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.FirstPage">
      <summary>ドキュメントの最初のページのレイアウトを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.LastPage">
      <summary>ドキュメントの最後のページのレイアウトを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.EvenPages">
      <summary>ドキュメントの偶数ページのレイアウトを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.OddPages">
      <summary>ドキュメントの奇数ページのレイアウトを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.Default">
      <summary>ドキュメントのデフォルトのページレイアウトを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.PrintHeaderOnFirstPage">
      <summary>ドキュメントの最初のページにページヘッダーを印刷するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.PrintFooterOnFirstPage">
      <summary>ドキュメントの最初のページにページフッターを印刷するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.PrintHeaderOnLastPage">
      <summary>ドキュメントの最後のページにページヘッダーを印刷するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.PrintFooterOnLastPage">
      <summary>ドキュメントの最後のページにページフッターを印刷するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentPageLayouts.SuppressEmptyLastPage">
      <summary>ドキュメントの最後のオブジェクトの後に改ページがある場合、ドキュメントの最後に空のページを追加しないようにするかどうかを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.PrinterUtil">
      <summary>プリンタ情報を取得するための静的ユーティリティメソッドを提供します。</summary>
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.CreatePrinterIC(System.String)">
      <summary>指定されたプリンタの情報コンテキストを作成します。</summary>
      <param name="printerName">プリンタの名前。</param>
      <returns>コンテキストのハンドル。エラーが発生した場合は IntPtr.Zero。</returns>
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.GetPrinterDpi(System.String)">
      <summary>指定されたプリンタの dpi を取得します。</summary>
      <param name="printerName">プリンタの名前。</param>
      <returns>PointF 構造体。PointF.X は水平 dpi、PointF.Y は垂直 dpi です。エラーが発生した場合は PointF.Empty を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.GetDcDpi(System.IntPtr)">
      <summary>指定されたプリンタの dpi を取得します。</summary>
      <param name="dc">テストするデバイスコンテキスト。</param>
      <returns>PointF 構造体。PointF.X は水平 dpi、PointF.Y は垂直 dpi です。エラーが発生した場合は PointF.Empty を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.IsPrinterValid(System.String)">
      <summary>指定されたプリンタ名をテストします。</summary>
      <param name="printerName">プリンタの名前。</param>
      <returns>プリンタ名が有効な場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.FindPrinterDc(System.Single,System.IntPtr@,System.String@)">
      <summary>指定した解像度を持つプリンタを検索します。</summary>
      <param name="dpi">解像度（必須）。</param>
      <param name="printerDc">OUT:見つかったプリンタの DC（デバイスコンテキスト）、または IntPtr.Zero。</param>
      <param name="printerName">OUT:プリンタの名前。見つからなかった場合は null。</param>
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.FindBestPrinter(System.Single,System.Single@,System.IntPtr@,System.String@)">
      <summary>指定した最小解像度、 および同じ水平と垂直解像度を持つプリンタを検索します。</summary>
      <param name="minDpi">
        アクセス可能な最小 DPI。 このパラメータが
        <b>０</b>の場合、同じ水平と垂直解像度を持つ最初の使用可能なプリンタが返されます。
      </param>
      <param name="printerDpi">
        OUT:見つかったプリンタの dpi。プリンタが見つからなかった場合は
        <b>０</b>。
      </param>
      <param name="printerDc">
        OUT:見つかったプリンタの DC。プリンタが見つからなかった場合は
        <b>IntPtr.Zero</b>。
      </param>
      <param name="printerName">
        OUT:見つかったプリンタの名前。プリンタが見つからなかった場合は
        <b>null</b>。
      </param>
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.FindBestPrinter(System.Single,System.Single@)">
      <summary>指定された最小 dpi のプリンタを検索します。</summary>
      <param name="minDpi">最小 dpi。このパラメータが０の場合は、「スクエアな」dpi を持つ最初のプリンタが選択されます。</param>
      <param name="printerDpi">出力：検索されたプリンタの dpi。見つからなかった場合は０。</param>
      <returns>検索されたプリンタの名前。検索が失敗した場合は null。</returns>
      <seealso cref="M:C1.C1Preview.PrinterUtil.FindBestPrinter(System.Single)" />
    </member>
    <member name="M:C1.C1Preview.PrinterUtil.FindBestPrinter(System.Single)">
      <summary>指定された最小 dpi のプリンタを検索します。</summary>
      <param name="minDpi">最小 dpi。このパラメータが０の場合は、「スクエアな」dpi を持つ最初のプリンタが選択されます。</param>
      <returns>検索されたプリンタの名前。検索が失敗した場合は null。</returns>
      <seealso cref="M:C1.C1Preview.PrinterUtil.FindBestPrinter(System.Single,System.Single@)" />
    </member>
    <member name="T:C1.C1Preview.PropsHashtable`1">
      <summary>
        <para>これは内部使用専用です。</para>プロパティとその値のハッシュテーブルを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.PropsHashtable`1.Clear">
      <summary>現在のインスタンスをクリアします。</summary>
    </member>
    <member name="M:C1.C1Preview.PropsHashtable`1.GetPropIndex(System.Int32)">
      <summary>
        <see cref="P:C1.C1Preview.PropsHashtable`1.Keys" />と
        <see cref="P:C1.C1Preview.PropsHashtable`1.Values" />配列内のプロパティのインデックスを取得します。
      </summary>
      <param name="propKey">プロパティキー。</param>
      <returns>
        <see cref="P:C1.C1Preview.PropsHashtable`1.Keys" />と
        <see cref="P:C1.C1Preview.PropsHashtable`1.Values" />配列内の指定したプロパティの０から始まるインデックス。
      </returns>
    </member>
    <member name="M:C1.C1Preview.PropsHashtable`1.SetPropValue(System.Int32,`0)">
      <summary>プロパティの値を設定します。</summary>
      <param name="propKey">プロパティキー。</param>
      <param name="value">設定するプロパティ値。</param>
    </member>
    <member name="M:C1.C1Preview.PropsHashtable`1.DeletePropValue(System.Int32)">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.PropsHashtable`1" />からのプロパティ値を削除します。
      </summary>
      <param name="propKey">削除するプロパティキー。</param>
    </member>
    <member name="M:C1.C1Preview.PropsHashtable`1.IsEmpty">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.PropsHashtable`1" />が空かどうかを示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.PropsHashtable`1.IsPropExists(System.Int32)">
      <summary>
        プロパティが現在の
        <see cref="T:C1.C1Preview.PropsHashtable`1" />内に設定されているかどうかをテストします。
      </summary>
      <param name="propKey">プロパティキー。</param>
      <returns>
        指定したプロパティが現在の
        <see cref="T:C1.C1Preview.PropsHashtable`1" />上で設定されている場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="P:C1.C1Preview.PropsHashtable`1.Count">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.PropsHashtable`1" />上に設定されたプロパティ値の数を取得します。 この値は、
        <see cref="P:C1.C1Preview.PropsHashtable`1.Keys" />と
        <see cref="P:C1.C1Preview.PropsHashtable`1.Values" />コレクションの要素の数と同じです。
      </summary>
    </member>
    <member name="P:C1.C1Preview.PropsHashtable`1.Keys">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.PropsHashtable`1" />内に設定されたプロパティキーの配列を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.PropsHashtable`1.Values">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.PropsHashtable`1" />上に設定されたプロパティ値の配列を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderArea">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />オブジェクトの汎用コンテナを表します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderObject">
      <summary>すべての描画オブジェクトの抽象基本クラス。</summary>
    </member>
    <member name="T:C1.C1Preview.IResolvedInfoOwner">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.IResolvedInfoOwner.Document">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.ISplitBehaviorObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.ISplitBehaviorObject.GetPageBounds(C1.C1Preview.RenderFragment)">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.ISplitBehaviorObject.RenderObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderObject" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeClip">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.Clip" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns>このプロパティをシリアル化する必要がある場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeFlags">
      <summary>Flags プロパティをシリアル化する必要があるかどうかをテストします。</summary>
      <returns>このプロパティをシリアル化する必要がある場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeName">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns>このプロパティをシリアル化する必要がある場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeX">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.X" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns>このプロパティをシリアル化する必要がある場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeY">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.Y" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns>このプロパティをシリアル化する必要がある場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeWidth">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.Width" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns>このプロパティをシリアル化する必要がある場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeHeight">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.Height" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns>このプロパティをシリアル化する必要がある場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeSplitVertBehavior">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.SplitVertBehavior" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns>このプロパティをシリアル化する必要がある場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeSplitHorzBehavior">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.SplitHorzBehavior" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns>このプロパティをシリアル化する必要がある場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeStyle">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.Style" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns>このプロパティをシリアル化する必要がある場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ShouldSerializeChildren">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.Children" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns>このプロパティをシリアル化する必要がある場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.CreateSame">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderObject" />オブジェクトと同じ型のオブジェクトのインスタンスを作成します。
      </summary>
      <returns>作成された描画オブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.InitRenderObject">
      <summary>何らかの初期化を実行します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetDefaultClip">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.Clip" />プロパティのデフォルト値を取得します。
      </summary>
      <returns>true。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetDefaultWidth">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.Width" />プロパティのデフォルト値を取得します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.Unit.Auto" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetDefaultHeight">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.Height" />プロパティのデフォルト値を取得します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.Unit.Auto" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetDefaultFlags">
      <summary>Flags プロパティのデフォルト値を取得します。</summary>
      <returns>０。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetDefaultSplitVertBehavior">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.SplitVertBehavior" />プロパティのデフォルト値を取得します。
      </summary>
      <returns>SplitBehaviorEnum.Never</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetDefaultSplitHorzBehavior">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.SplitHorzBehavior" />プロパティのデフォルト値を取得します。
      </summary>
      <returns>SplitBehaviorEnum.Never</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetFlag(System.Int32)">
      <summary>
        フラグの値を返します。このオブジェクトはプライベートフィールド
        <code>
          <![CDATA[
          private int _flags;
          ]]>
        </code>
        を持ちます。 このフィールドは、さまざまなブール型プロパティ（CanSplitHorz、CanSplitVert など）の 格納に使用できます。たとえば、CanSplitHorz プロパティは
        <code>
          <![CDATA[
          public bool CanSplitHorz
          {
            get
            {
              return GetFlag(c_flgCanSplitVert);
            }
            set
            {
              SetFlag(c_flgCanSplitVert, value);
            }
          }
          ]]>
        </code>
        のように定義されます。
      </summary>
      <param name="flagMask">フラグのマスク。</param>
      <returns>指定したフラグが設定される場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.SetFlag(System.Int32,System.Boolean)">
      <summary>
        フラグの値を設定します。
        <seealso cref="M:C1.C1Preview.RenderObject.GetFlag(System.Int32)" />
      </summary>
      <param name="flagMask">フラグのマスク。</param>
      <param name="value">フラグの値。</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.OnChildAdd(C1.C1Preview.RenderObject)">
      <summary>新しい子の RenderObject オブジェクトを Children コレクションに追加した後に呼び出されます。 このオブジェクトがこのオブジェクトの子として追加できない場合、ユーザーは例外をスローできます。</summary>
      <param name="child">子の RenderObject オブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.OnChildRemove(C1.C1Preview.RenderObject)">
      <summary>子の RenderObject オブジェクトを Children コレクションから削除した後に呼び出されます。 このオブジェクトが削除できない場合、ユーザーは例外をスローできます。</summary>
      <param name="child">子の RenderObject オブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.OnParentAdd(C1.C1Preview.RenderObject)">
      <summary>このオブジェクトを別のオブジェクトの Children コレクションに追加した後に呼び出されます。 このオブジェクトがこのオブジェクトの子として追加できない場合、 ユーザーは例外をスローできます。</summary>
      <param name="parent">このオブジェクトの新しい親オブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.OnParentRemove(C1.C1Preview.RenderObject)">
      <summary>このオブジェクトを別のオブジェクトの Children コレクションから削除した後に 呼び出されます。</summary>
      <param name="parent">このオブジェクトの親オブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetWidth">
      <summary>このメソッドをオーバーライドして、オブジェクトの Width プロパティの値が読み取られるときに追加のアクションを実行します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.SetWidth(C1.C1Preview.Unit)">
      <summary>このメソッドをオーバーライドして、オブジェクトの Width プロパティの値が定義されるときに追加のアクションを実行します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetHeight">
      <summary>このメソッドをオーバーライドして、オブジェクトの Height プロパティの値が読み取られるときに追加のアクションを実行します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.SetHeight(C1.C1Preview.Unit)">
      <summary>このメソッドをオーバーライドして、オブジェクトの Height プロパティの値が定義されるときに追加のアクションを実行します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.SetSplitVertBehavior(C1.C1Preview.SplitBehaviorEnum)">
      <summary>このメソッドをオーバーライドして、オブジェクトの SplitVertBehavior プロパティの値が定義されるときに追加のアクションを実行します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.SetSplitHorzBehavior(C1.C1Preview.SplitBehaviorEnum)">
      <summary>このメソッドをオーバーライドして、オブジェクトの SplitHorzBehavior プロパティの値が定義されるときに追加のアクションを実行します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetAmbientPropValueForChild(C1.C1Preview.RenderObject,System.Int32,C1.C1Preview.Scripting.IScriptContext)">
      <summary>子のアンビエントスタイルプロパティの値を取得します。</summary>
      <param name="roChild">
        子
        <see cref="T:C1.C1Preview.RenderObject" />。
      </param>
      <param name="propKey">スタイルプロパティキー。</param>
      <param name="context">
        計算されたプロパティの評価に使用する
        <see cref="T:C1.C1Preview.Scripting.IScriptContext" />。
      </param>
      <returns>スタイルプロパティ値。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetNonAmbientPropValueForChild(C1.C1Preview.RenderObject,System.Int32,C1.C1Preview.Scripting.IScriptContext)">
      <summary>子の非アンビエントスタイルプロパティの値を取得します。</summary>
      <param name="roChild">
        子
        <see cref="T:C1.C1Preview.RenderObject" />。
      </param>
      <param name="propKey">スタイルプロパティキー。</param>
      <param name="context">
        計算されたプロパティの評価に使用する
        <see cref="T:C1.C1Preview.Scripting.IScriptContext" />。
      </param>
      <returns>スタイルプロパティ値。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetAssignChildren">
      <summary>このメソッドをオーバーライドして、このオブジェクトの子オブジェクトを手動でコピーする場合は false を返します。このメソッドはデフォルトで true を返します。</summary>
      <returns>子オブジェクトが AssignFrom メソッドにコピーされることを示すブール値。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
      <param name="assignDataBinding">DataBinding プロパティがコピーされるかどうか。</param>
      <param name="assignChildren">子のリストがコピーされるかどうか。</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 フラグメントのリスト（
        <see cref="P:C1.C1Preview.RenderObject.Fragments" />プロパティ）はコピーも変更もされません。
        <see cref="P:C1.C1Preview.RenderObject.UserData" />と
        <see cref="P:C1.C1Preview.RenderObject.PageNumberingChange" />プロパティ は参照によってコピーされます。
        <see cref="P:C1.C1Preview.RenderObject.Name" />コレクションはコピーされません。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="P:C1.C1Preview.RenderObject.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
      <param name="assignDataBinding">DataBinding プロパティがコピーされるかどうか。</param>
      <param name="assignChildren">子のリストがコピーされるかどうか。</param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="P:C1.C1Preview.RenderObject.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.Clone(System.Boolean,System.Boolean)">
      <summary>オブジェクトのクローンを作成します。</summary>
      <param name="assignDataBinding">DataBinding プロパティが新しく作成されたオブジェクトに割り当てられることを示します。</param>
      <param name="assignChildren">Children リストが新しく作成されたオブジェクトに割り当てられることを示します。</param>
      <returns>新しく作成されたオブジェクトを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.Clone(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>オブジェクトのクローンを作成します。</summary>
      <param name="assignDataBinding">DataBinding プロパティが新しく作成されたオブジェクトに割り当てられることを示します。</param>
      <param name="assignChildren">Children リストが新しく作成されたオブジェクトに割り当てられることを示します。</param>
      <param name="assignAnchors">Anchors リストが新しく作成されたオブジェクトに割り当てられることを示します。</param>
      <param name="assignHyperlink">Hyperlink が新しく作成されたオブジェクトに割り当てられることを示します。</param>
      <param name="assignName">Name が新しく作成されたオブジェクトに割り当てられることを示します。</param>
      <param name="assignStyle">
        <see cref="P:C1.C1Preview.RenderObject.Style" />プロパティがクローンされるかどうかを示します。
      </param>
      <returns>新しく作成されたオブジェクトを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.Clone(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderObject" />をクローンします。
      </summary>
      <param name="assignDataBinding">
        <see cref="P:C1.C1Preview.RenderObject.DataBinding" />プロパティがクローンされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />プロパティがクローンされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />プロパティがクローンされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがクローンされるかどうかを示します。
      </param>
      <returns>新しく作成されたオブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.Clone">
      <summary>オブジェクトのクローンを作成します。</summary>
      <returns>新しく作成されたオブジェクトを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetOwnedObjectCount">
      <summary>このオブジェクトによって所有されるオブジェクトの数を計算します。</summary>
      <remarks>
        <para>このメソッドは、次のオブジェクトを計算に入れます。</para>
        <list type="bullet">
          <item>
            <term></term>
            <description>子オブジェクト（およびその子）</description>
          </item>
          <item>
            <term></term>
            <description>ページレイアウト内に指定される PageHeader、PageFooter などのオブジェクト。</description>
          </item>
        </list>
      </remarks>
      <returns>所有されるオブジェクトの数を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetNestedObjectCount">
      <summary>このオブジェクト内にネストしたオブジェクトの数を計算します。</summary>
      <returns>ネストしたオブジェクトの数を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetDocumentLocationDescription">
      <summary>ドキュメント内の現在のオブジェクトの位置の人間が判読可能なテキスト記述を返します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetApproximateCountOfFragmentsToProcess">
      <summary>オブジェクト内のフラグメントの概数を返します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.InternalClearTemporaryInfo">
      <summary>ドキュメントの解決中に作成された一時情報をクリアします。 このメソッドをオーバーライドして、描画オブジェクトタイプ固有のデータをクリアします （ただし、共通データををクリアする場合はベースメソッドを呼び出します）。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.OnMainFragmentBuilt">
      <summary>このメソッドは各オブジェクトに１回呼び出されます。 このメソッドをオーバーライドしてカスタムの初期化を実行します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.InternalResetLayoutDimensions(C1.C1Preview.RefDim)">
      <summary>これは内部使用専用です。</summary>
      <param name="dimensions"></param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.InternalResolvingFinished">
      <summary>
        このメソッドは、現在の
        <see cref="T:C1.C1Preview.RenderObject" />が完全に解決された後に一度呼び出されます。 呼び出しの時点で、すべての
        <see cref="T:C1.C1Preview.RenderFragment" />オブジェクトが各ページ上に構築されて配置されます。 このメソッドをオーバーライドして、その時点でカスタム処理を実行します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.InternalResolveCalculatedValues">
      <summary>オブジェクトの計算されたフィールドの値を解決します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.InternalResolveStyles">
      <summary>オブジェクトのスタイルの計算された値を解決します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.InternalClearCalculatedValues(System.Boolean)">
      <summary>計算されたプロパティの値をクリアします。ドキュメントが再生成されるときに呼び出されます。</summary>
      <param name="clearDataBindingDependent">データフィールドに応じた値もクリアされることを示します。</param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetCalculatedValue(System.Int32,System.Object@)">
      <summary>これは内部使用専用です。</summary>
      <param name="propKey"></param>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetCalculatedValue(System.Int32)">
      <summary>これは内部使用専用です。</summary>
      <param name="propKey"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.SetCalculatedValue(System.Int32,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="propKey"></param>
      <param name="value"></param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.SetCalculatedValue(System.Int32,System.Object,System.Boolean)">
      <summary>これは内部使用専用です。</summary>
      <param name="propKey"></param>
      <param name="value"></param>
      <param name="dataDependent"></param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.HasCalculatedValue(System.Int32)">
      <summary>これは内部使用専用です。</summary>
      <param name="propKey"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.CreateDataBindingCopy(C1.C1Preview.OutlineNode)">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ResolveChildrenDataBinding(C1.C1Preview.RenderObject,C1.C1Preview.OutlineNode)">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetProcessChildrenWhenDataBindingResolved">
      <summary>
        子オブジェクト上のデータバインディングを自動的に処理するかどうかを示します。 デフォルト実装は
        <b>true</b>を返します。 カスタムの子データバインディング処理が必要な場合は、これをオーバーライドして
        <b>false</b>を返します。
      </summary>
      <returns>
        <b>true</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.GetDataBindingForChild(C1.C1Preview.RenderObject)">
      <summary>
        指定した子オブジェクトの
        <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />オブジェクトを返します。
      </summary>
      <param name="child">
        現在のオブジェクトの子である
        <see cref="T:C1.C1Preview.RenderObject" />オブジェクト。
      </param>
      <returns>
        指定した子オブジェクトの
        <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />オブジェクト。 子にデータバインディングが指定されていない場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.ResolveStyleProperties(C1.C1Preview.Style,C1.C1Preview.Style)">
      <summary>
        これは内部使用専用です。
        <see cref="P:C1.C1Preview.RenderObject.Style" />オブジェクトの計算されたプロパティを解決します。
      </summary>
      <param name="styleWithExprs">
        解決される
        <see cref="P:C1.C1Preview.RenderObject.Style" />オブジェクトのプロパティ。
      </param>
      <param name="destStyle">
        計算されたプロパティの
        <see cref="P:C1.C1Preview.RenderObject.Style" />オブジェクト。
        <paramref name="styleWithExprs" />と
        <paramref name="destStyle" />は同じに設定できます。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderObject.IndexOfFragment(C1.C1Preview.RenderFragment)">
      <summary>オブジェクトのフラグメントのインデックスを返します。</summary>
      <param name="rf">インデックスを返す RenderFragment オブジェクト。</param>
      <returns>
        <see cref="P:C1.C1Preview.RenderObject.Fragments" />内の指定したフラグメントの０から始まるインデックス。 任意のフラグメントまたは指定したフラグメントが見つからなかった場合は
        <b>-1</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderObject.CalcSize(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>オブジェクトのサイズを計算します。</summary>
      <param name="width">オブジェクトの幅には、auto または絶対単位を指定できます。</param>
      <param name="height">オブジェクトの高さには、auto または絶対単位を指定できます。</param>
      <returns>
        オブジェクトのサイズを
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位で返します。
      </returns>
      <remarks>
        <para>オブジェクトの自動サイズの決定に使用できます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderObject.m_Flags">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.FireProgressEvent">
      <summary>
        作成中： この描画オブジェクトの解決時に、プログレスイベントを生成する必要があるかどうかを示す値を取得または設定します。 このプロパティは、デフォルトでは
        <b>false</b>です。オブジェクトが大きく、 その解決に時間がかかる場合は、このプロパティを
        <b>true</b>に設定して、ドキュメントのレンダリング中にハングアップする時間を抑制できます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.BordersSplitVertMode">
      <summary>オブジェクトが高過ぎるため複数のページに分割される場合、 枠を描画する方法を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.BordersSplitHorzMode">
      <summary>オブジェクトの幅が広過ぎるため水平方向の複数のページに分割される場合、 枠を描画する方法を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Table">
      <summary>
        現在の描画オブジェクトを含む最もネストした
        <see cref="T:C1.C1Preview.RenderTable" />を取得します。 現在のオブジェクトがテーブルに含まれない場合は
        <b>null</b>。
      </summary>
      <seealso cref="P:C1.C1Preview.RenderObject.TableRow" />
      <seealso cref="P:C1.C1Preview.RenderObject.TableCol" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.TableRow">
      <summary>
        現在の描画オブジェクトを含む最もネストした
        <see cref="T:C1.C1Preview.RenderTable" />内の行の ０から始まるインデックスを取得します。現在のオブジェクトが テーブルに含まれない場合は
        <b>-1</b>。
      </summary>
      <seealso cref="P:C1.C1Preview.RenderObject.Table" />
      <seealso cref="P:C1.C1Preview.RenderObject.TableCol" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.TableCol">
      <summary>
        現在の描画オブジェクトを含む最もネストした
        <see cref="T:C1.C1Preview.RenderTable" />内の列の ０から始まるインデックスを取得します。現在のオブジェクトが テーブルに含まれない場合は
        <b>-1</b>。
      </summary>
      <seealso cref="P:C1.C1Preview.RenderObject.Table" />
      <seealso cref="P:C1.C1Preview.RenderObject.TableRow" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.Clip">
      <summary>描画オブジェクトを表示領域で切り取るかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Document">
      <summary>このオブジェクトを含む C1Preview オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Collection">
      <summary>このオブジェクトを含む RenderObjectCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.IndexInOwner">
      <summary>所有者オブジェクトのインデックスを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Parent">
      <summary>親の RenderObject オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Name">
      <summary>オブジェクトの一意の名前。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.UserData">
      <summary>オブジェクトに関連付けられた任意のデータを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.HasChildren">
      <summary>オブジェクトに子オブジェクトがある場合は true を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Children">
      <summary>子オブジェクトのコレクションを返します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Stacking">
      <summary>現在のオブジェクトの子の配列に使用される積み重ねの規則を取得または設定します。</summary>
      <remarks>
        ブロックフローの場合、フロー内の子オブジェクトの配置は現在のオブジェクトの
        <see cref="P:C1.C1Preview.Style.FlowAlignChildren" />プロパティ、および子の
        <see cref="P:C1.C1Preview.Style.FlowAlign" />プロパティによって決定されます。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderObject.SplitVertBehavior">
      <summary>オブジェクトが高すぎて現在のページの垂直方向のスペースに入らない場合に、オブジェクトをどのように処理するかを決定する値を取得または設定します。</summary>
      <seealso cref="P:C1.C1Preview.RenderObject.SplitHorzBehavior" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.SplitHorzBehavior">
      <summary>オブジェクトが広すぎて現在のページの水平方向のスペースに入らない場合に、オブジェクトをどのように処理するかを決定する値を取得または設定します。</summary>
      <seealso cref="P:C1.C1Preview.RenderObject.SplitVertBehavior" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.CanSplitHorz">
      <summary>オブジェクトが改ページ上にある場合に、オブジェクトを水平方向に分割できるかどうかを示します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.CanSplitVert">
      <summary>オブジェクトが改ページ上にある場合に、オブジェクトを垂直方向に分割できるかどうかを示します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.ZOrder">
      <summary>オブジェクトの Z 順を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.X">
      <summary>オブジェクトの X 座標。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Y">
      <summary>オブジェクトの Y 座標。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Width">
      <summary>オブジェクトの幅。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Height">
      <summary>オブジェクトの高さ。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.BreakBefore">
      <summary>このオブジェクトの前にある区切りのタイプを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.BreakAfter">
      <summary>このオブジェクトの後にある区切りのタイプを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.LayoutChangeBefore">
      <summary>オブジェクトの前でページレイアウトの変更を定義する LayoutChangeBase オブジェクトを取得または設定します。</summary>
      <remarks>
        <see cref="T:C1.C1Preview.LayoutChangeBase" />は抽象クラスです。 このクラスから派生した以下のような非抽象クラスのインスタンスをこのプロパティに割り当てることができます。
        <list type="bullet">
          <item>
            <term>
              <see cref="T:C1.C1Preview.LayoutChangeNoBreak" />
            </term>
            <description>区切りを挿入しません。現在のフローを中断せずに次ページのページレイアウトを変更する機能を提供します。</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.LayoutChangeNewLine" />
            </term>
            <description>インラインフローに改行を挿入します。ブロックフローを分割しません。</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.LayoutChangeNewColumn" />
            </term>
            <description>新しい列を複数列レイアウトで開始します。その以外の場合は新しいページ。</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.LayoutChangeNewPage" />
            </term>
            <description>新しいページを開始します。</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderObject.LayoutChangeAfter">
      <summary>オブジェクトの後でページレイアウトの変更を定義する LayoutChangeBase オブジェクトを取得または設定します。</summary>
      <remarks>
        <see cref="T:C1.C1Preview.LayoutChangeBase" />は抽象クラスです。 このクラスから派生した以下のような非抽象クラスのインスタンスをこのプロパティに割り当てることができます。
        <list type="bullet">
          <item>
            <term>
              <see cref="T:C1.C1Preview.LayoutChangeNoBreak" />
            </term>
            <description>区切りを挿入しません。現在のフローを中断せずに次ページのページレイアウトを変更する機能を提供します。</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.LayoutChangeNewLine" />
            </term>
            <description>インラインフローに改行を挿入します。ブロックフローを分割しません。</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.LayoutChangeNewColumn" />
            </term>
            <description>新しい列を複数列レイアウトで開始します。その以外の場合は新しいページ。</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.LayoutChangeNewPage" />
            </term>
            <description>新しいページを開始します。</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Style">
      <summary>このオブジェクトのスタイル。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.PageNumberingChange">
      <summary>ページ番号の変更を記述する PageNumberingChange オブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Hyperlink">
      <summary>この描画オブジェクトに関連付けられたハイパーリンクを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Anchors">
      <summary>この描画オブジェクト関連付けられたアンカーのコレクションを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.HasAnchors">
      <summary>
        現在のオブジェクトがそれに関連付けられたアンカーを持つかどうか （
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションが存在して空でないかどうか）を示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.TableCell">
      <summary>このオブジェクトが属しているテーブルセルを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.KeepTogether">
      <summary>現在のオブジェクトと同じページに印刷される描画オブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Visibility">
      <summary>オブジェクトの表示状態を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.CalculatedValues">
      <summary>計算値を含むハッシュテーブルを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.HasCalculatedValues">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.CalculatedValues" />ハッシュテーブルが存在し、空でないかどうかを示す値を取得します。
      </summary>
      <remarks>
        <see cref="P:C1.C1Preview.RenderObject.CalculatedValues" />は、必要に応じて初期化を行って常に
        <b>null</b>でない ハッシュテーブルを返すため、そのような副作用なく
        <see cref="P:C1.C1Preview.RenderObject.CalculatedValues" />の存在をテストするには、 このプロパティを使用してください。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderObject.HasFragments">
      <summary>オブジェクトに構築されたフラグメントがあるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.Fragments">
      <summary>オブジェクトのフラグメントのコレクションを返します。</summary>
      <remarks>
        このプロパティは常に非
        <b>null</b>のフラグメントコレクションを、 まだ初期化されていない場合は初期化して返します。
        <see cref="P:C1.C1Preview.RenderObject.HasFragments" />を使って、
        <see cref="P:C1.C1Preview.RenderObject.Fragments" />を初期化せずにフラグメントが存在するかどうかをテストします。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderObject.FirstFragment">
      <summary>最初のオブジェクトのフラグメントを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.LastFragment">
      <summary>最後のオブジェクトのフラグメントを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObject.DataBinding">
      <summary>この RenderObject オブジェクトのデータ連結の設定内容を表す C1DataBinding クラスのインスタンスを取得します。</summary>
      <remarks>
        このプロパティは常に
        <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />オブジェクトを、 まだ初期化されていない場合は初期化して返します。
        <see cref="P:C1.C1Preview.RenderObject.DataBindingDefined" />を使って、 現在のオブジェクトが
        <see cref="P:C1.C1Preview.RenderObject.DataBinding" />を初期化せずにデータバインディングされているかどうかをテストします。
      </remarks>
      <seealso cref="P:C1.C1Preview.RenderObject.Original" />
      <seealso cref="P:C1.C1Preview.RenderObject.Copies" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBindingMode" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBindingDefined" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.DataBindingMode">
      <summary>描画オブジェクトのデータ連結モードを取得します。</summary>
      <seealso cref="P:C1.C1Preview.RenderObject.Original" />
      <seealso cref="P:C1.C1Preview.RenderObject.Copies" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBinding" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBindingDefined" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.DataBindingDefined">
      <summary>このオブジェクトがデータ連結されているかどうかを取得します。</summary>
      <seealso cref="P:C1.C1Preview.RenderObject.Original" />
      <seealso cref="P:C1.C1Preview.RenderObject.Copies" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBinding" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBindingMode" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.Copies">
      <summary>データ連結の結果として生成される描画オブジェクトのコレクションを取得します。</summary>
      <seealso cref="P:C1.C1Preview.RenderObject.Original" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBinding" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBindingMode" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBindingDefined" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.Original">
      <summary>データ連結の処理中に、このオブジェクトの生成元の RenderObject オブジェクトを取得します。</summary>
      <seealso cref="P:C1.C1Preview.RenderObject.Copies" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBinding" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBindingMode" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBindingDefined" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.FormatDataBindingInstanceScript">
      <summary>データバインドにより描画オブジェクトの新しいインスタンスが生成される時に実行されるスクリプトを取得または設定します。</summary>
      <seealso cref="P:C1.C1Preview.RenderObject.DataBinding" />
    </member>
    <member name="P:C1.C1Preview.RenderObject.ObjectResolvedScript">
      <summary>
        現在のオブジェクトが完全に解決され、すべてのそのフラグメントが作成され、 現在のオブジェクトの
        <see cref="P:C1.C1Preview.RenderObject.Fragments" />コレクションに 追加されたときに実行されるスクリプトを取得または設定します。
      </summary>
      <remarks>
        このスクリプトを使って、解決した後のオブジェクトの外観を調整できます。 たとえば、オブジェクトの背景はオブジェクトを複数のページに分割された （
        <see cref="P:C1.C1Preview.RenderObject.Fragments" />コレクションが 複数の要素を含んでいる）かどうかに応じて設定できます。以下のコードは、
        <see cref="T:C1.C1Preview.RenderArea" />の背景を、複数ページに分割された場合は赤色、 および分割されなかった場合は緑色に設定します。
        <code>
          <![CDATA[
          C1PrintDocument doc = new C1PrintDocument();
          RenderArea ra = new RenderArea();
          ra.ObjectResolvedScript = "if RenderObject.Fragments.Count &gt; 1 then\r\n" + 
            "RenderObject.Style.BackColor = Color.Red\r\n" + 
            "else\r\n" + 
            "RenderObject.Style.BackColor = Color.Green\r\n" + 
            "end if\r\n";
          ra.Style.Borders.All = LineDef.DefaultBold;
          
          // ... ra にサンプルコンテンツを入力します:
          for (int i = 0; i &lt; 30; i++)
            ra.Children.Add(new RenderText("Line " + i.ToString()));
          doc.Body.Children.Add(ra);
          ]]>
        </code>
        オブジェクト上の任意のスタイルプロパティを調整できますが、 オブジェクトのサイズと位置はそれに影響するプロパティ（フォントサイズなど）が 変更される場合でも再計算されないことに注意してください （そのため、フォントサイズが大きくなるとクリッピングが発生する場合などがあります）。 基本的に、これは、通常はオブジェクトのレイアウトに影響しない プロパティ（テキストや背景色など）のみがこのスクリプトで 変更されることを意味します。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderObject.FragmentResolvedScript">
      <summary>
        現在の描画オブジェクトの
        <see cref="T:C1.C1Preview.RenderFragment" />が作成されて、 現在のオブジェクト上の
        <see cref="P:C1.C1Preview.RenderObject.Fragments" />コレクションに追加されるたびに 実行されるスクリプトを取得または設定します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderArea.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderArea" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderArea.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderArea" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderArea" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderArea.GetDefaultFlags">
      <summary>Flags プロパティのデフォルト値を取得します。</summary>
      <returns>デフォルトフラグ、および CanSplitHorz／CanSplitVert。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderArea.GetDefaultSplitHorzBehavior">
      <summary>デフォルト水平分割動作（領域が広過ぎる）を取得します。</summary>
      <returns>
        <see cref="F:C1.C1Preview.SplitBehaviorEnum.SplitIfNeeded" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderArea.GetDefaultSplitVertBehavior">
      <summary>デフォルト垂直分割動作（領域が高過ぎる）を取得します。</summary>
      <returns>
        <see cref="F:C1.C1Preview.SplitBehaviorEnum.SplitIfNeeded" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderArea.GetDefaultWidth">
      <summary>デフォルト領域幅を取得します。</summary>
      <returns>親の幅。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderArea.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderArea" />の場合は、
        <see cref="T:C1.C1Preview.RenderArea" />固有のプロパティもコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderArea.HeaderVert">
      <summary>現在のレンダリング領域が高すぎて１ページに収まらないためにレンダリング領域が垂直方向に分割される場合、すべてのページ（または列）で繰り返し表示される描画オブジェクトを取得または設定します。</summary>
      <remarks>
        指定された描画オブジェクトは、別の描画オブジェクトの子であってはなりません。現在のレンダリング領域の子を指定できます。現在のレンダリング領域の子でない場合は、現在のレンダリング領域の
        <see cref="!:Children" />コレクションに追加されます。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderArea.HeaderHorz">
      <summary>現在のレンダリング領域が広すぎて１ページに収まらないためにレンダリング領域が水平方向に分割される場合、すべての「水平方向」のページで繰り返し表示される描画オブジェクトを取得または設定します。</summary>
      <remarks>
        <para>
          指定された描画オブジェクトは、別の描画オブジェクトの子であってはなりません。現在のレンダリング領域の子を指定できます。現在のレンダリング領域の子でない場合は、現在のレンダリング領域の
          <see cref="!:Children" />コレクションに追加されます。
        </para>
      </remarks>
    </member>
    <member name="T:C1.C1Preview.RenderEmpty">
      <summary>高さと幅が０の空の描画オブジェクト。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderEmpty.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderEmpty" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderEmpty.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
        指定した幅と高さを使って、
        <see cref="T:C1.C1Preview.RenderEmpty" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="width">
        現在の
        <see cref="T:C1.C1Preview.RenderEmpty" />オブジェクトの
        <see cref="T:C1.C1Preview.Unit" />幅。
      </param>
      <param name="height">
        現在の
        <see cref="T:C1.C1Preview.RenderEmpty" />オブジェクトの
        <see cref="T:C1.C1Preview.Unit" />高さ。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderEmpty.#ctor(C1.C1Preview.Unit)">
      <summary>
        指定した高さを使って、
        <see cref="T:C1.C1Preview.RenderEmpty" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="height">
        現在の
        <see cref="T:C1.C1Preview.RenderEmpty" />オブジェクトの
        <see cref="T:C1.C1Preview.Unit" />高さ。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderEmpty.#ctor(C1.C1Preview.BreakEnum)">
      <summary>
        ゼロの高さと指定した
        <see cref="P:C1.C1Preview.RenderObject.BreakAfter" />値を使って、
        <see cref="T:C1.C1Preview.RenderEmpty" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="brk">このオブジェクトの後に挿入される区切りのタイプ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderEmpty.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderEmpty" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderEmpty" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderEmpty.GetDefaultHeight">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.Height" />プロパティのデフォルト値を取得します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.Unit.Empty" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderEmpty.GetDefaultWidth">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.Width" />プロパティのデフォルト値を取得します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.Unit.Empty" />。
      </returns>
    </member>
    <member name="T:C1.C1Preview.RenderGraphics">
      <summary>画像をレンダリングする描画オブジェクトを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderGraphics.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderGraphics" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderGraphics.ShouldSerializeContent">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderGraphics" />オブジェクトのコンテンツが シリアル化される（空でない）かどうかを示します。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderGraphics.ShouldSerializeOpenXmlContent">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderGraphics.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderGraphics" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderGraphics" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderGraphics.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderGraphics" />の場合は、
        <see cref="T:C1.C1Preview.RenderGraphics" />固有のプロパティもコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderGraphics.Clear">
      <summary>現在のグラフィックをクリアします。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderGraphics.UseClassicDrawMethod">
      <summary>オブジェクトの内容の描画に、 Graphics.DrawImage(Image, dstRect, srcRect, GraphicsUnit) ではなく、 Graphics.DrawImage(Image, dstRect) メソッドを使用するかどうかを示す値を取得または設定します。 より適切な結果が得られることが稀にあります。 デフォルトは false です。 RenderGraphics コンテンツの描画で問題が発生した場合は、この値を true に設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderGraphics.GraphicsSizeEqualToObjectSize">
      <summary>
        この
        <see cref="T:C1.C1Preview.RenderGraphics" />によって管理される
        <see cref="P:C1.C1Preview.RenderGraphics.Graphics" />オブジェクトのサイズが
        <see cref="T:C1.C1Preview.RenderGraphics" />サイズと同じであるかどうかを示す値を取得または設定します。 正確なサイズの画像を作成する場合は、このプロパティを
        <b>true</b>に設定します。 このプロパティが
        <b>true</b>の場合は、
        <see cref="!:Width" />および
        <see cref="!:Height" />を絶対値で指定する必要があります（たとえば、10mm、1inch）。
        <see cref="P:C1.C1Preview.RenderGraphics.Graphics" />プロパティにアクセスする
        <b>前に</b>、
        <see cref="P:C1.C1Preview.RenderGraphics.GraphicsSizeEqualToObjectSize" />を
        <b>true</b>に指定し、
        <see cref="!:Width" />および
        <see cref="!:Height" />を 絶対単位で指定する必要があります。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderGraphics.EmfType">
      <summary>このオブジェクトによって作成されるメタファイルのタイプを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderGraphics.Graphics">
      <summary>描画先の Graphics オブジェクト。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderGraphics.ReferenceGraphics">
      <summary>基底のメタファイルを作成するために使用される参照グラフィックを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderImage">
      <summary>画像をレンダリングする描画オブジェクトを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderImage.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderImage" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderImage.#ctor(System.Drawing.Image)">
      <summary>
        <see cref="P:C1.C1Preview.RenderImage.Image" />プロパティを割り当てて、
        <see cref="T:C1.C1Preview.RenderImage" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="image">
        <see cref="P:C1.C1Preview.RenderImage.Image" />プロパティに割り当てられる
        <see cref="T:System.Drawing.Image" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderImage.#ctor(System.String)">
      <summary>
        <see cref="P:C1.C1Preview.RenderImage.ImageName" />プロパティを割り当てて、
        <see cref="T:C1.C1Preview.RenderImage" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="imageName">
        <see cref="P:C1.C1Preview.RenderImage.ImageName" />プロパティに割り当てられる文字列。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderImage.#ctor(System.Drawing.Image,C1.C1Preview.Style)">
      <summary>
        <see cref="P:C1.C1Preview.RenderImage.Image" />プロパティを割り当てて、 使用する
        <see cref="T:C1.C1Preview.Style" />を指定して、
        <see cref="T:C1.C1Preview.RenderImage" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="image">
        <see cref="P:C1.C1Preview.RenderImage.Image" />プロパティに割り当てられる
        <see cref="T:System.Drawing.Image" />。
      </param>
      <param name="style">
        使用する
        <see cref="T:C1.C1Preview.Style" />（
        <see cref="M:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)" />メソッドを使って、 指定したスタイルを現在のオブジェクトの
        <see cref="P:C1.C1Preview.RenderObject.Style" />にコピーします）。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderImage.#ctor(System.String,C1.C1Preview.Style)">
      <summary>
        <see cref="P:C1.C1Preview.RenderImage.Image" />プロパティを割り当てて、 使用する
        <see cref="T:C1.C1Preview.Style" />を指定して、
        <see cref="T:C1.C1Preview.RenderImage" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="imageName">
        <see cref="P:C1.C1Preview.RenderImage.ImageName" />プロパティに割り当てられる文字列。
      </param>
      <param name="style">
        使用する
        <see cref="T:C1.C1Preview.Style" />（
        <see cref="M:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)" />メソッドを使って、 指定したスタイルを現在のオブジェクトの
        <see cref="P:C1.C1Preview.RenderObject.Style" />にコピーします）。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderImage.#ctor(System.Drawing.Image,C1.C1Preview.ImageAlign)">
      <summary>
        <see cref="P:C1.C1Preview.RenderImage.Image" />プロパティを割り当てて、 使用する
        <see cref="T:C1.C1Preview.ImageAlign" />を指定して、
        <see cref="T:C1.C1Preview.RenderImage" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="image">
        <see cref="P:C1.C1Preview.RenderImage.Image" />プロパティに割り当てられる
        <see cref="T:System.Drawing.Image" />。
      </param>
      <param name="imageAlign">
        現在のオブジェクトの
        <see cref="T:C1.C1Preview.Style" />の
        <see cref="P:C1.C1Preview.Style.ImageAlign" />に割り当てられる
        <see cref="T:C1.C1Preview.ImageAlign" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderImage.#ctor(System.String,C1.C1Preview.ImageAlign)">
      <summary>
        <see cref="P:C1.C1Preview.RenderImage.Image" />プロパティを割り当てて、 使用する
        <see cref="T:C1.C1Preview.ImageAlign" />を指定して、
        <see cref="T:C1.C1Preview.RenderImage" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="imageName">
        <see cref="P:C1.C1Preview.RenderImage.ImageName" />プロパティに割り当てられる文字列。
      </param>
      <param name="imageAlign">
        現在のオブジェクトの
        <see cref="T:C1.C1Preview.Style" />の
        <see cref="P:C1.C1Preview.Style.ImageAlign" />に割り当てられる
        <see cref="T:C1.C1Preview.ImageAlign" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderImage.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderImage" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderImage" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderImage.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderGraphics" />の場合は、
        <see cref="T:C1.C1Preview.RenderGraphics" />固有のプロパティもコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderImage.UseClassicDrawMethod">
      <summary>オブジェクトの内容の描画に、 Graphics.DrawImage(Image, dstRect, srcRect, GraphicsUnit) ではなく、 Graphics.DrawImage(Image, dstRect) メソッドを使用するかどうかを示す値を取得または設定します。 より適切な結果が得られることが稀にあります。 デフォルトは false です。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderImage.Image">
      <summary>レンダリングする画像を定義します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderImage.ImageName">
      <summary>ドキュメントの辞書内の画像の名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderImage.Control">
      <summary>レンダリングするコントロール。</summary>
      <remarks>
        <para>
          現在の
          <b>RenderImage</b>オブジェクトの
          <see cref="P:C1.C1Preview.RenderObject.Style" />の
          <see cref="P:C1.C1Preview.Style.ClientAreaOnly" />プロパティは、コ ントロール全体またはそのクライアント領域のみがレンダリングされるかどうかを決定します。
        </para>
        <para>
          このプロパティは、ユーザー入力に使用できる実際のコントロールではなく、 指定したコントロールを表す視覚的な画像のみを現在のオブジェクトにレンダリングさせることに注意してください。 実際のコントロール動作については、
          <see cref="T:C1.C1Preview.RenderInputBase" />と派生クラスを参照してください。
        </para>
      </remarks>
    </member>
    <member name="T:C1.C1Preview.IndexEntryOccurrence">
      <summary>
        ドキュメント内の
        <see cref="T:C1.C1Preview.IndexEntry" />の１回の発生を表します。 このタイプの要素は、
        <see cref="T:C1.C1Preview.IndexEntry" />の
        <see cref="P:C1.C1Preview.IndexEntry.Occurrences" />コレクションに含まれます。
        <para>
          このクラスの主機能プロパティは、ドキュメント内の発生位置を指定する
          <see cref="T:C1.C1Preview.C1LinkTarget" />タイプの
          <see cref="P:C1.C1Preview.IndexEntryOccurrence.Target" />です。
        </para>
      </summary>
      <seealso cref="T:C1.C1Preview.RenderIndex" />
      <seealso cref="T:C1.C1Preview.IndexEntry" />
      <seealso cref="T:C1.C1Preview.IndexEntryCollection" />
      <seealso cref="T:C1.C1Preview.IndexEntryStyles" />
      <seealso cref="T:C1.C1Preview.C1LinkTarget" />
    </member>
    <member name="M:C1.C1Preview.IndexEntryOccurrence.#ctor(C1.C1Preview.C1LinkTarget)">
      <summary>
        <see cref="T:C1.C1Preview.IndexEntryOccurrence" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="target">
        現在の発生の
        <see cref="P:C1.C1Preview.IndexEntryOccurrence.Target" />に割り当てられる
        <see cref="T:C1.C1Preview.C1LinkTarget" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.IndexEntryOccurrence.#ctor(C1.C1Preview.C1LinkTarget,System.Boolean,System.Boolean)">
      <summary>
        <see cref="T:C1.C1Preview.IndexEntryOccurrence" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="target">
        現在の発生の
        <see cref="P:C1.C1Preview.IndexEntryOccurrence.Target" />に割り当てられる
        <see cref="T:C1.C1Preview.C1LinkTarget" />。
      </param>
      <param name="bold">
        現在の発生の
        <see cref="P:C1.C1Preview.IndexEntryOccurrence.Bold" />プロパティに割り当てられる
        <b>bold</b>フラグ。
      </param>
      <param name="italic">
        現在の発生の
        <see cref="P:C1.C1Preview.IndexEntryOccurrence.Italic" />プロパティに割り当てられる
        <i>italic</i>フラグ。
      </param>
    </member>
    <member name="M:C1.C1Preview.IndexEntryOccurrence.Clone">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.IndexEntryOccurrence" />オブジェクトのコピーを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.IndexEntryOccurrence" />オブジェクト。
      </returns>
    </member>
    <member name="P:C1.C1Preview.IndexEntryOccurrence.Target">
      <summary>
        現在の発生に関連付けられた
        <see cref="T:C1.C1Preview.C1LinkTarget" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IndexEntryOccurrence.Bold">
      <summary>
        <b>bold face</b>を使用してエントリの特定の発生に対応する ページ番号の強調表示を可能にするブール値を取得または設定します （たとえば、インデックスエントリの主定義が提供される位置の 強調表示に使用できます）。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IndexEntryOccurrence.Italic">
      <summary>
        <i>italic face</i>を使用してエントリの特定の発生に対応するページ番号の 強調表示を可能にするブール値を取得または設定します （たとえば、インデックスエントリの主定義が提供される位置の 強調表示に使用できます）。
      </summary>
    </member>
    <member name="T:C1.C1Preview.IndexEntry">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />の単語インデックスのエントリを表します。
        <see cref="T:C1.C1Preview.RenderIndex" />（このクラスのインスタンスで表現）の最上位エントリは インデックスオブジェクト上の
        <see cref="P:C1.C1Preview.RenderIndex.Entries" />コレクションに含まれます。 ネストしたエントリは、親エントリの
        <see cref="P:C1.C1Preview.IndexEntry.Children" />に含まれます。 ドキュメント内の現在のエントリの発生は、
        <see cref="T:C1.C1Preview.IndexEntryOccurrence" />クラスのインスタンスによって表され、エントリの
        <see cref="P:C1.C1Preview.IndexEntry.Occurrences" />コレクションに含まれます。
      </summary>
      <seealso cref="P:C1.C1Preview.IndexEntry.RenderIndex" />
      <seealso cref="T:C1.C1Preview.IndexEntryOccurrence" />
      <seealso cref="T:C1.C1Preview.IndexEntryCollection" />
      <seealso cref="T:C1.C1Preview.IndexEntryStyles" />
      <seealso cref="T:C1.C1Preview.C1LinkTarget" />
    </member>
    <member name="M:C1.C1Preview.IndexEntry.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.IndexEntry" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IndexEntry.#ctor(System.String)">
      <summary>
        <see cref="T:C1.C1Preview.IndexEntry" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="caption">
        現在のインデックスエントリの
        <see cref="P:C1.C1Preview.IndexEntry.Caption" />に割り当てられる文字列。
      </param>
    </member>
    <member name="M:C1.C1Preview.IndexEntry.#ctor(System.String,C1.C1Preview.IndexEntryOccurrence[])">
      <summary>
        <see cref="T:C1.C1Preview.IndexEntry" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="caption">
        現在のインデックスエントリの
        <see cref="P:C1.C1Preview.IndexEntry.Caption" />に割り当てられる文字列。
      </param>
      <param name="occurrences">
        このインデックスエントリの
        <see cref="P:C1.C1Preview.IndexEntry.Occurrences" />コレクションに追加される１つまたは複数の
        <see cref="T:C1.C1Preview.IndexEntryOccurrence" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.IndexEntry.#ctor(System.String,C1.C1Preview.C1LinkTarget[])">
      <summary>
        <see cref="T:C1.C1Preview.IndexEntry" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="caption">
        現在のインデックスエントリの
        <see cref="P:C1.C1Preview.IndexEntry.Caption" />に割り当てられる文字列。
      </param>
      <param name="targets">
        <see cref="T:C1.C1Preview.C1LinkTarget" />オブジェクトのリスト。 このリストのターゲットごとに、
        <see cref="T:C1.C1Preview.IndexEntryOccurrence" />が作成され、現在のインデックス項目の
        <see cref="P:C1.C1Preview.IndexEntry.Occurrences" />に追加されます。
      </param>
    </member>
    <member name="M:C1.C1Preview.IndexEntry.Clone">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.IndexEntry" />オブジェクトのコピーを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.IndexEntry" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.IndexEntry.AssignFrom(C1.C1Preview.IndexEntry)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.IndexEntry" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.Caption">
      <summary>生成されたインデックス内で現在のインデックスエントリを表す文字列を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.Occurrences">
      <summary>
        ドキュメント内の現在のインデックスエントリの発生を表す
        <see cref="T:C1.C1Preview.IndexEntryOccurrence" />オブジェクトの
        <see cref="T:System.Collections.Generic.List`1" />を取得します。 生成されたインデックスでは、各発生はドキュメント内の発生位置への ハイパーリンクであるページ番号に置き換えられます （連続するページ番号は範囲に折りたたまれます）。
      </summary>
      <remarks>
        このメソッドは常に非
        <b>null</b>の
        <see cref="T:System.Collections.Generic.List`1" />を、 存在しなかった場合は作成して返します。 インデックスエントリがすでに
        <see cref="P:C1.C1Preview.IndexEntry.Occurrences" />コレクションを作成せずに発生を含むかどうかをテストするには、
        <see cref="P:C1.C1Preview.IndexEntry.HasOccurrences" />プロパティを使用します。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.HasOccurrences">
      <summary>
        <see cref="P:C1.C1Preview.IndexEntry.Occurrences" />コレクションが作成されて １つまたは複数の要素を含んでいるかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.Children">
      <summary>
        ネストしたインデックスエントリ、すなわち現在のインデックスエントリのサブエントリを含む
        <see cref="T:C1.C1Preview.IndexEntryCollection" />を取得します。
      </summary>
      <remarks>
        このメソッドは常に非
        <b>null</b>の
        <see cref="T:C1.C1Preview.IndexEntryCollection" />を、 存在しなかった場合は作成して返します。 インデックスエントリが
        <see cref="P:C1.C1Preview.IndexEntry.Children" />コレクションを作成せずに、 すでにサブエントリを含むかどうかをテストするには、
        <see cref="P:C1.C1Preview.IndexEntry.HasChildren" />プロパティを使用します。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.HasChildren">
      <summary>
        <see cref="P:C1.C1Preview.IndexEntry.Children" />コレクションが作成されて １つまたは複数の要素を含んでいるかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.SeeAlso">
      <summary>
        現在のインデックスエントリに関連する
        <see cref="T:C1.C1Preview.IndexEntry" />の
        <see cref="T:System.Collections.Generic.List`1" />を取得します。 生成されたインデックスでは、これらのエントリは現在から 別のエントリへの「参照」クロス参照としてリストされます。
      </summary>
      <remarks>
        このメソッドは常に非
        <b>null</b>の
        <see cref="T:System.Collections.Generic.List`1" />を、 存在しなかった場合は作成して返します。
        <see cref="P:C1.C1Preview.IndexEntry.SeeAlso" />コレクションを作成せずに、 インデックスエントリがすでに任意の「参照」参照を含んでいるかどうかをテストするには、
        <see cref="P:C1.C1Preview.IndexEntry.HasSeeAlso" />プロパティを使用します。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.HasSeeAlso">
      <summary>
        <see cref="P:C1.C1Preview.IndexEntry.SeeAlso" />コレクションが作成されて １つまたは複数の要素を含んでいるかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.Style">
      <summary>
        現在のインデックスエントリの
        <see cref="T:C1.C1Preview.Style" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.SeeAlsoStyle">
      <summary>
        現在のインデックスエントリの「参照」参照（
        <see cref="P:C1.C1Preview.IndexEntry.SeeAlso" />を参照）の
        <see cref="T:C1.C1Preview.Style" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IndexEntry.Level">
      <summary>
        現在のインデックスエントリのレベルを取得します。 最上位エントリのレベルは
        <b>0</b>、サブエントリのレベルは
        <b>1</b>、のように続きます。 現在のインデックスエントリが
        <see cref="P:C1.C1Preview.IndexEntry.RenderIndex" />オブジェクト またはこのオブジェクトのネストしたエントリに追加されていなかった場合、このプロパティは
        <b>-1</b>を返すか、
        <see cref="T:C1.C1Preview.IndexEntry" />に戻ります。
      </summary>
      <seealso cref="P:C1.C1Preview.IndexEntry.RenderIndex" />
    </member>
    <member name="P:C1.C1Preview.IndexEntry.RenderIndex">
      <summary>
        特定のレベル、最上位エントリまたはネストしたエントリにある現在のインデックスエントリを含む
        <see cref="P:C1.C1Preview.IndexEntry.RenderIndex" />オブジェクトを取得します。
      </summary>
      <seealso cref="P:C1.C1Preview.IndexEntry.Level" />
    </member>
    <member name="P:C1.C1Preview.IndexEntry.Document">
      <summary>
        現在のインデックスエントリを含む
        <see cref="T:C1.C1Preview.C1PrintDocument" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.IndexEntryCollection">
      <summary>
        <see cref="T:C1.C1Preview.IndexEntry" />オブジェクトのコレクションを表します。
        <see cref="T:C1.C1Preview.RenderIndex" />クラス上の
        <see cref="P:C1.C1Preview.RenderIndex.Entries" />プロパティ、 および
        <see cref="T:C1.C1Preview.IndexEntry" />クラス上の
        <see cref="P:C1.C1Preview.IndexEntry.Children" />プロパティは このタイプのコレクションを格納します。
      </summary>
      <seealso cref="T:C1.C1Preview.RenderIndex" />
    </member>
    <member name="M:C1.C1Preview.IndexEntryCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="index"></param>
      <param name="oldValue"></param>
      <param name="newValue"></param>
    </member>
    <member name="M:C1.C1Preview.IndexEntryCollection.OnInsertComplete(System.Int32,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="index"></param>
      <param name="value"></param>
    </member>
    <member name="M:C1.C1Preview.IndexEntryCollection.GetItemType">
      <summary>コレクションの項目のタイプを返します。</summary>
      <returns>
        <see cref="T:C1.C1Preview.IndexEntry" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.IndexEntryCollection.Add(C1.C1Preview.IndexEntry)">
      <summary>
        <see cref="T:C1.C1Preview.IndexEntry" />を現在のコレクションに追加します。
      </summary>
      <param name="item">追加する項目。</param>
      <returns>現在のコレクションに新しく追加された項目のインデックス。</returns>
    </member>
    <member name="M:C1.C1Preview.IndexEntryCollection.Remove(C1.C1Preview.IndexEntry)">
      <summary>
        <see cref="T:C1.C1Preview.IndexEntry" />を現在のコレクションから削除します。
      </summary>
      <param name="item">追加する項目。</param>
    </member>
    <member name="M:C1.C1Preview.IndexEntryCollection.Insert(System.Int32,C1.C1Preview.IndexEntry)">
      <summary>
        <see cref="T:C1.C1Preview.IndexEntry" />を現在のコレクションに挿入します。
      </summary>
      <param name="index">コレクションに挿入された項目の位置。</param>
      <param name="item">挿入する項目。</param>
    </member>
    <member name="P:C1.C1Preview.IndexEntryCollection.Item(System.Int32)">
      <summary>指定したインデックスの要素を取得または設定します。</summary>
      <param name="index">現在のコレクション内のインデックス。</param>
      <returns>指定したインデックスの要素。</returns>
    </member>
    <member name="T:C1.C1Preview.IndexEntryStyles">
      <summary>
        <see cref="T:C1.C1Preview.RenderIndex" />の異なるネストレベルにある
        <see cref="T:C1.C1Preview.IndexEntry" />オブジェクトの レンダリングに使用される
        <see cref="T:C1.C1Preview.Style" />のコレクションを表します。 このコレクションのインデックス 0 のスタイルは最上位レベルのエントリのレンダリングに使用され、 インデックス 1 のスタイルはサブエントリのレンダリングに使用される、のように続きます。
      </summary>
      <seealso cref="T:C1.C1Preview.RenderIndex" />
      <seealso cref="T:C1.C1Preview.IndexEntry" />
    </member>
    <member name="P:C1.C1Preview.IndexEntryStyles.Owner">
      <summary>
        現在のコレクションのオーナーである
        <see cref="T:C1.C1Preview.RenderIndex" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IndexEntryStyles.Item(System.Int32)">
      <summary>
        指定したインデックスの
        <see cref="T:C1.C1Preview.Style" />を取得します。 必要に応じて欠けているスタイルを作成します（すなわち
        <b>Style[2]</b>が アクセスされる場合、インデックス
        <b>0</b>、
        <b>1</b>、および
        <b>2</b>が 先に作成されていなければ作成されます）。
      </summary>
      <param name="index">現在のコレクション内のインデックス。</param>
      <returns>指定したインデックスの要素。</returns>
    </member>
    <member name="T:C1.C1Preview.RenderIndex">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />内のアルファベット順の単語インデックスを、オプションでマルチレベルで表します。
      </summary>
      <remarks>
        インデックスを作成するには、以下の手順に従います。
        <list type="bullet">
          <item>
            <see cref="T:C1.C1Preview.RenderIndex" />クラスのインスタンスを作成して、ローカル変数に格納します。
          </item><item>
            インデックスエントリごとに、
            <see cref="T:C1.C1Preview.IndexEntry" />クラスのインスタンスを作成します。
          </item><item>
            ドキュメント内の各インデックスエントリの発生ごとに、
            <see cref="T:C1.C1Preview.IndexEntryOccurrence" />クラスのインスタンスを作成し、 その
            <see cref="P:C1.C1Preview.IndexEntryOccurrence.Target" />を設定して、ドキュメント内のその発生の位置を指定させます。
          </item><item>
            すべての発生が各エントリに追加され、すべてのエントリが
            <see cref="P:C1.C1Preview.RenderIndex.Entries" />に追加された後、 最初の手順で作成された
            <see cref="T:C1.C1Preview.RenderIndex" />オブジェクトをドキュメントに追加します。 ドキュメントが生成されると、そのオブジェクトはクリック可能なページ番号を持つアルファベット順にソートされた単語インデックスを作成します。
          </item><see cref="T:C1.C1Preview.RenderIndex" />は、すべてのエントリのすべての発生が含められた
          <b>後</b>に追加される必要があることに注意してください。 所属先となる
          <see cref="T:C1.C1Preview.RenderIndex" />より後に現れる発生は、インデックスの作成時に無視されます。
        </list>
      </remarks>
      <seealso cref="T:C1.C1Preview.IndexEntry" />
      <seealso cref="T:C1.C1Preview.IndexEntryOccurrence" />
      <seealso cref="T:C1.C1Preview.IndexEntryCollection" />
      <seealso cref="T:C1.C1Preview.IndexEntryStyles" />
      <seealso cref="T:C1.C1Preview.C1LinkTarget" />
    </member>
    <member name="M:C1.C1Preview.RenderIndex.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderIndex" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializeRunInDelimiter">
      <summary>
        <see cref="P:C1.C1Preview.RenderIndex.RunInDelimiter" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializePageRangeFormat">
      <summary>
        <see cref="P:C1.C1Preview.RenderIndex.PageRangeFormat" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializeSeeAlsoFormat">
      <summary>
        <see cref="P:C1.C1Preview.RenderIndex.SeeAlsoFormat" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializeOccurrenceDelimiter">
      <summary>
        <see cref="P:C1.C1Preview.RenderIndex.OccurrenceDelimiter" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializeTermDelimiter">
      <summary>
        <see cref="P:C1.C1Preview.RenderIndex.TermDelimiter" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializeLetterFormat">
      <summary>
        <see cref="P:C1.C1Preview.RenderIndex.LetterFormat" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializeEntryIndent">
      <summary>
        <see cref="P:C1.C1Preview.RenderIndex.EntryIndent" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializeEntryHangingIndent">
      <summary>
        <see cref="P:C1.C1Preview.RenderIndex.EntryHangingIndent" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializeHeadingStyle">
      <summary>
        <see cref="P:C1.C1Preview.RenderIndex.HeadingStyle" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns>このプロパティをシリアル化する必要がある場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.ShouldSerializeSeeAlsoStyle">
      <summary>
        <see cref="P:C1.C1Preview.RenderIndex.SeeAlsoStyle" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns>このプロパティをシリアル化する必要がある場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.InitRenderObject">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderIndex" />オブジェクトを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderIndex.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderArea.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderIndex" />の場合は、
        <see cref="T:C1.C1Preview.RenderIndex" />固有のプロパティもコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.EntrySplitBehavior">
      <summary>
        単一のエントリを垂直方向に分割する方法を決定します。 このプロパティはすべてのレベルのエントリに適用されます。
        <para>
          デフォルトは
          <see cref="F:C1.C1Preview.SplitBehaviorEnum.SplitIfLarge" />です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.RunIn">
      <summary>
        サブエントリが、個別のインデントされた行上でなく、主見出しの インラインで表示されるかどうかを示す値を取得または設定します。
        <para>
          デフォルトは
          <b>false</b>です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.PageNumbersAtRight">
      <summary>
        生成されたインデックス内のページ番号が右揃えされるかどうかを示す値を 取得または設定します。
        <para>
          デフォルトは
          <b>false</b>です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.FillChar">
      <summary>
        インデックスエントリの
        <see cref="P:C1.C1Preview.IndexEntry.Caption" />と そのエントリの発生を参照する単一または複数のページ番号の間の 空白のフィルに使用される文字を取得または設定します。 このプロパティは、現在の
        <see cref="T:C1.C1Preview.RenderIndex" />の
        <see cref="P:C1.C1Preview.RenderIndex.PageNumbersAtRight" />が
        <b>true</b>に設定されている場合にのみ使用されます。
        <para>
          デフォルトはドット（
          <b>「.」</b>）です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.EntryIndent">
      <summary>
        メインインデックスエントリに相対的なサブエントリのインデントを取得または設定します。
        <para>デフォルトは 1/4 インチです。</para>
      </summary>
      <remarks>
        このプロパティが
        <see cref="T:C1.C1Preview.Unit" />タイプを持つ場合、 絶対値（「10mm」、「0.5in」など。
        <see cref="P:C1.C1Preview.Unit.IsAbs" />を参照）のみを 割り当てることができます。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.EntryHangingIndent">
      <summary>
        後続の行に相対的なエントリの段落の先頭行のぶら下げインデントを 取得または設定します（エントリの発生およびクロス参照のリストが長過ぎるため １行に収まらないときに使用されます）。
        <para>デフォルトは 1/8 インチです。</para>
      </summary>
      <remarks>
        このプロパティが
        <see cref="T:C1.C1Preview.Unit" />タイプを持つ場合、 絶対値（「10mm」、「0.5in」など。
        <see cref="P:C1.C1Preview.Unit.IsAbs" />を参照）のみを 割り当てることができます。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.Entries">
      <summary>
        現在のインデックスの最上位レベルのエントリ（
        <see cref="T:C1.C1Preview.IndexEntry" />タイプの要素）の コレクションを取得します。
      </summary>
      <remarks>
        このメソッドは常に非
        <b>null</b>の
        <see cref="T:C1.C1Preview.IndexEntryCollection" />を、 存在しなかった場合は作成して返します。現在のインデックスが
        <see cref="P:C1.C1Preview.RenderIndex.Entries" />コレクションを作成せずに すでにエントリを含んでいるかどうかをテストするには、
        <see cref="P:C1.C1Preview.RenderIndex.HasEntries" />プロパティを使用します。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.HasEntries">
      <summary>
        <see cref="P:C1.C1Preview.RenderIndex.Entries" />コレクションが作成されて １つまたは複数の要素を含んでいるかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.SeeAlsoStyle">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderIndex" />のエントリ間の クロス参照のリストに使用される
        <b>「See (...)」</b>テキストの
        <see cref="T:C1.C1Preview.Style" />を取得します。
        <para>
          このスタイルは、
          <see cref="P:C1.C1Preview.RenderIndex.SeeAlsoFormat" />書式文字列の静的テキストにのみ適用されますが、 その書式によって出力されたエントリのリストには適用されないことに注意してください。
        </para>
      </summary>
      <remarks>
        インデックスが生成されると、新しいオブジェクトが「See also」クロス参照を表すために作成されます。
        <see cref="T:C1.C1Preview.C1PrintDocument" />内のすべてのコンテンツオブジェクトと同様に、 このようなオブジェクトはそれぞれ、そのオブジェクトを実際にレンダリングするために使用される インラインスタイルを持ちます。スタイルはオンザフライで作成され、
        <b>SeeAlsoStyle</b>はその
        <see cref="T:C1.C1Preview.Style" />の
        <see cref="P:C1.C1Preview.Style.Parent" />と
        <see cref="P:C1.C1Preview.Style.AmbientParent" />プロパティに割り当てられます。
      </remarks>
      <seealso cref="P:C1.C1Preview.RenderIndex.SeeAlsoFormat" />
    </member>
    <member name="P:C1.C1Preview.RenderIndex.HeadingStyle">
      <summary>
        現在のインデックスによって生成された文字見出しに使用される
        <see cref="T:C1.C1Preview.Style" />を取得します（ 見出しはその文字から始まるエントリのグループに先行する文字です）。
      </summary>
      <remarks>
        インデックスが生成されるとき、新しいオブジェクトが見出しを表すために作成されます。
        <see cref="T:C1.C1Preview.C1PrintDocument" />内のすべてのコンテンツオブジェクトと同様に、 このようなオブジェクトはそれぞれ、そのオブジェクトを実際にレンダリングするために使用される インラインスタイルを持ちます。スタイルはオンザフライで作成され、
        <b>HeadingStyle</b>はその
        <see cref="T:C1.C1Preview.Style" />の
        <see cref="P:C1.C1Preview.Style.Parent" />と
        <see cref="P:C1.C1Preview.Style.AmbientParent" />プロパティに割り当てられます。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.EntryStyles">
      <summary>
        異なるレベルの現在の
        <see cref="T:C1.C1Preview.RenderIndex" />のエントリのレンダリングに使用される
        <see cref="T:C1.C1Preview.IndexEntryStyles" />コレクションを取得します。
      </summary>
      <remarks>
        インデックスが生成されると、新しいオブジェクトがインデックスエントリを表すために作成されます。
        <see cref="T:C1.C1Preview.C1PrintDocument" />内のすべてのコンテンツオブジェクトと同様に、 このようなオブジェクトはそれぞれ、そのオブジェクトを実際にレンダリングするために使用されるインラインスタイルを持ちます。 スタイルはオンザフライで作成され、対応する位置（最上位レベルエントリでは 0、 サブエントリでは 1 のように続く）の
        <b>EntryStyles</b>コレクションの要素はその
        <see cref="T:C1.C1Preview.Style" />の
        <see cref="P:C1.C1Preview.Style.Parent" />と
        <see cref="P:C1.C1Preview.Style.AmbientParent" />プロパティに割り当てられます。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.EntryStyle">
      <summary>
        最上位レベルのインデックスエントリのスタイルを取得します。 これは、
        <see cref="P:C1.C1Preview.RenderIndex.EntryStyles" />コレクションの 先頭（インデックス 0）要素へのショートカットです。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.LetterSplitBehavior">
      <summary>
        文字グループ（同じ文字で始まるエントリ）を垂直方向に分割する方法を決定する
        <see cref="T:C1.C1Preview.SplitBehaviorEnum" />を取得または設定します。 デフォルトは
        <see cref="F:C1.C1Preview.SplitBehaviorEnum.SplitIfNeeded" />です。 見出し（デフォルトでそれぞれの文字で表現）は常に各先頭エントリと共に印刷されることに 注意してください。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.LetterFormat">
      <summary>
        文字グループ見出しの書式設定に使用される文字列を取得または設定します。
        <para>
          デフォルトは
          <b>「{0}」</b>です。
        </para>
      </summary>
      <seealso cref="P:C1.C1Preview.RenderIndex.HeadingStyle" />
    </member>
    <member name="P:C1.C1Preview.RenderIndex.TermDelimiter">
      <summary>
        生成されたインデックス内のインデックスエントリとそのエントリの発生（ページ番号）の リストを区切るために使用される文字列を取得または設定します。
        <para>
          デフォルトは
          <b>「, 」</b>（カンマと後続スペース）です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.OccurrenceDelimiter">
      <summary>
        生成されたインデックス内のインデックスエントリの発生の区切り（ページ番号）に使用される 文字列を取得または設定します。
        <para>
          デフォルトは
          <b>「, 」</b>（カンマと後続スペース）です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.PageRangeFormat">
      <summary>
        生成されたインデックス内のインデックスエントリの発生のページ範囲の書式設定に使用される 書式文字列を取得または設定します。
        <para>
          デフォルトは
          <b>「{0}-{1}」</b>です。
        </para>
      </summary>
      <remarks>
        インデックスエントリがドキュメント内の連続ページ（ページ 3、4、5 など）で発生する場合、 それらの発生は範囲（この場合は「3-5」）に折りたたまれます。
        <b>PageRangeFormat</b>がそれらの範囲の書式設定に使用されます。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderIndex.SeeAlsoFormat">
      <summary>
        生成されたインデックス内の「See also」クロス参照の書式設定に使用される 書式文字列を取得または設定します。
        <para>
          デフォルトは
          <b>「(see {0})」</b>です。
        </para>
      </summary>
      <seealso cref="P:C1.C1Preview.RenderIndex.SeeAlsoStyle" />
    </member>
    <member name="P:C1.C1Preview.RenderIndex.RunInDelimiter">
      <summary>
        追い込み（
        <see cref="P:C1.C1Preview.RenderIndex.RunIn" />を参照）インデックスが 現在の
        <see cref="T:C1.C1Preview.RenderIndex" />によって生成されるときにエントリの区切りに使用される文字列を取得または設定します。
        <para>
          デフォルトは
          <b>「;」</b>（セミコロン）です。
        </para>
      </summary>
    </member>
    <member name="T:C1.C1Preview.UserActionEnum">
      <summary>ユーザーが入力コントロールを操作したときの操作内容を示します。</summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.Click">
      <summary>コントロールがクリックされたことを示します。</summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.MouseUp">
      <summary>マウスポインタがコントロールの上にあってマウスボタンが放されたことを示します。</summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.MouseDown">
      <summary>マウスポインタがコントロールの上にあってマウスボタンが押されたことを示します。</summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.MouseEnter">
      <summary>マウスポインタがコントロールに入ったことを示します。</summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.MouseLeave">
      <summary>マウスポインタがコントロールから離れたことを示します。</summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.Enter">
      <summary>入力フォーカスがコントロールに入ったことを示します。</summary>
    </member>
    <member name="F:C1.C1Preview.UserActionEnum.Leave">
      <summary>入力フォーカスがコントロールから離れたことを示します。</summary>
    </member>
    <member name="T:C1.C1Preview.FormsKeyActionTabEnum">
      <summary>プレビュー画面で Tab キーが押されたときに実行されるアクションを記述します。</summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossPage">
      <summary>フォーカスは、ページ内の次のコントロールに移動し、最後まで移動したら停止します。</summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossDoc">
      <summary>フォーカスは、ドキュメント内の次のコントロールに移動し、最後まで移動したら停止します。</summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossPageCycle">
      <summary>フォーカスは、ページ内の次のコントロールに移動し、最後まで移動したらページ内の最初のコントロールに戻ります。</summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossDocCycle">
      <summary>フォーカスは、ドキュメント内の次のコントロールに移動し、最後まで移動したらドキュメント内の最初のコントロールに戻ります。</summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossPageOut">
      <summary>フォーカスは、ページ内の次のコントロールに移動し、最後まで移動したらフォーム内の次のコントロールに移動します。</summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionTabEnum.MoveAccrossDocOut">
      <summary>フォーカスは、ドキュメント内の次のコントロールに移動し、最後まで移動したらフォーム内の次のコントロールに移動します。</summary>
    </member>
    <member name="T:C1.C1Preview.FormsKeyActionEnterEnum">
      <summary>プレビュー画面で Enter キーが押されたときに実行されるアクションを記述します。</summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionEnterEnum.None">
      <summary>何も実行されません。</summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionEnterEnum.LikeTab">
      <summary>Tab キーと同じように動作します。</summary>
    </member>
    <member name="F:C1.C1Preview.FormsKeyActionEnterEnum.InvokeAcceptButton">
      <summary>AcceptButton として設定されたボタンがクリックされます。</summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerBase">
      <summary>ユーザーが入力コントロールを操作したときに実行される処理を定義するための抽象基本クラス。</summary>
      <remarks>
        <para>
          １つまたは複数の
          <see cref="T:C1.C1Preview.RenderInputBase" />派生オブジェクトを含む
          <see cref="T:C1.C1Preview.C1PrintDocument" />が
          <b>C1PrintPreviewControl</b>などのサポートするビューアコントロールによって表示される場合、 各
          <b>RenderInputBase</b>オブジェクトは、対応するコントロールをドキュメントページ上に生成します。 たとえば、
          <see cref="T:C1.C1Preview.RenderInputText" />は、ユーザーがテキストを入力できる
          <b>textbox</b>コントロールを生成し、
          <see cref="T:C1.C1Preview.RenderInputButton" />は
          <b>pushbutton</b>を生成します。
        </para>
        <para>
          ドキュメント内のそれらの入力コントロールの機能は「アクションハンドラ」を介して展開できます。 アクションハンドラは、多くの .NET コンポーネントのイベントに割り当てられる C# または VB イベントハンドラに似ています。 サポートされるイベントリストには、
          <see cref="T:C1.C1Preview.UserActionEnum" />列挙体によって指定され、 マウスの click、マウスの enter／leave、キーボードフォーカスの enter／leave、 およびマウスの up／down のイベントが含まれます。
        </para>
        <para>
          <see cref="T:C1.C1Preview.RenderInputBase" />派生オブジェクト上のユーザーアクションに ハンドラを作成してアタッチするには、以下の一般的な手順に従います。
        </para>
        <list type="bullet">
          <item>
            ハイパーリンクジャンプやファイル操作など、実行する必要があるアクションに一致する具象タイプの
            <see cref="T:C1.C1Preview.ActionHandlerBase" />派生クラスのインスタンスを作成します （それらのクラスには
            <see cref="T:C1.C1Preview.ActionHandlerLink" />、
            <see cref="T:C1.C1Preview.ActionHandlerFileOpen" />、
            <see cref="T:C1.C1Preview.ActionHandlerFileSave" />、
            <see cref="T:C1.C1Preview.ActionHandlerPageSetup" />、
            <see cref="T:C1.C1Preview.ActionHandlerPrint" />、
            <see cref="T:C1.C1Preview.ActionHandlerReflow" />、
            <see cref="T:C1.C1Preview.ActionHandlerPageView" />、
            <see cref="T:C1.C1Preview.ActionHandlerHistoryPrev" />、および
            <see cref="T:C1.C1Preview.ActionHandlerHistoryNext" />が含まれます）。
          </item>
          <item>
            それらのクラスの一部は、アクション固有のプロパティ （
            <see cref="P:C1.C1Preview.ActionHandlerFile.FileName" />など）を公開します。 必要に応じて、それらのプロパティの値を調整します。
          </item>
          <item>
            <see cref="T:C1.C1Preview.InputAction" />クラスのインスタンスを作成して、その
            <see cref="P:C1.C1Preview.InputAction.UserAction" />プロパティを希望のユーザーアクション（click またはフォーカスの enter など）を設定して、 その
            <see cref="P:C1.C1Preview.InputAction.ActionHandler" />プロパティを先行の手順で作成された
            <see cref="T:C1.C1Preview.ActionHandlerBase" />インスタンスに設定します。
          </item>
          <item>
            <see cref="T:C1.C1Preview.InputAction" />を
            <see cref="T:C1.C1Preview.RenderInputBase" />オブジェクトの
            <see cref="P:C1.C1Preview.RenderInputBase.InputActions" />コレクションに追加します。
          </item>
        </list>
        <para>
          複数の
          <see cref="T:C1.C1Preview.InputAction" />オブジェクトを 単一の描画入力コントロールに関連付けることができることに注意してください。
        </para>
      </remarks>
      <example>
        次の例では、クリックされたときに現在のドキュメントの最終ページにジャンプする ボタンをドキュメントに追加する方法を示します。
        <code>
          <![CDATA[
          C1PrintDocument doc = new C1PrintDocument();
          
          // 最終ページにジャンプするアクションハンドラを作成します
          ActionHandlerLink ahl = new ActionHandlerLink(new C1LinkTargetPage(PageJumpTypeEnum.Last));
          
          // 入力アクションを作成して、そのプロパティを設定します
          InputAction ia = new InputAction();
          ia.ActionHandler = ahl;
          ia.UserAction = UserActionEnum.Click;
          
          // ボタンを作成して、入力アクションをそのアクションに追加します
          RenderInputButton rbtn = new RenderInputButton("Jump to last page");
          rbtn.InputActions.Add(ia);
          
          // ボタンをドキュメントに追加します
          doc.Body.Children.Add(rbtn);
          
          // その他のコンテンツをドキュメントに追加します
          ]]>
        </code>
      </example>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerLink">
      <summary>ハイパーリンクのリンクターゲットにジャンプします。</summary>
      <remarks>
        <para>C1Preview でサポートされるすべてのリンクタイプを利用可能です。</para>
        <list type="bullet">
          <item>
            <term></term>
            <description>同じドキュメント内のアンカーにジャンプする。</description>
          </item>
          <item>
            <term></term>
            <description>別のドキュメント内のアンカーにジャンプする。</description>
          </item>
          <item>
            <term></term>
            <description>同じドキュメントの別のページにジャンプする。</description>
          </item>
          <item>
            <term></term>
            <description>外部のプログラムまたはファイルを開く。</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ActionHandlerLink.#ctor(C1.C1Preview.C1LinkTarget)">
      <summary>ActionHandlerLink クラスの新しいインスタンスを初期化します。</summary>
      <param name="linkTarget">リンクターゲット。</param>
    </member>
    <member name="P:C1.C1Preview.ActionHandlerLink.LinkTarget">
      <summary>リンクターゲットを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerFile">
      <summary>ファイル処理を定義するための抽象基本クラス。</summary>
      <remarks>
        アクションハンドラの使用についての詳細は、
        <see cref="T:C1.C1Preview.ActionHandlerBase" />を参照してください。
      </remarks>
      <seealso cref="T:C1.C1Preview.ActionHandlerFileOpen" />
      <seealso cref="T:C1.C1Preview.ActionHandlerFileSave" />
    </member>
    <member name="M:C1.C1Preview.ActionHandlerFile.#ctor">
      <summary>ActionHandlerFile クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.ActionHandlerFile.#ctor(System.String)">
      <summary>ActionHandlerFile クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName">ファイル名。</param>
    </member>
    <member name="P:C1.C1Preview.ActionHandlerFile.FileName">
      <summary>ファイル名を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerFileSave">
      <summary>ドキュメントをファイルに保存します。</summary>
      <remarks>
        このアクションハンドラが呼び出されるときに
        <see cref="P:C1.C1Preview.ActionHandlerFile.FileName" />が指定されていない場合は、 ファイルの保存ダイアログがユーザーに表示されます。
        <para>
          アクションハンドラの使用についての詳細は、
          <see cref="T:C1.C1Preview.ActionHandlerBase" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.ActionHandlerFile" />
      <seealso cref="T:C1.C1Preview.ActionHandlerFileOpen" />
    </member>
    <member name="M:C1.C1Preview.ActionHandlerFileSave.#ctor">
      <summary>ActionHandlerFileSave クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.ActionHandlerFileSave.#ctor(System.String)">
      <summary>ActionHandlerFileSave クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName">ファイル名。</param>
    </member>
    <member name="M:C1.C1Preview.ActionHandlerFileSave.#ctor(System.String,C1.C1Preview.Export.ExportProvider)">
      <summary>ActionHandlerFileSave クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName">ファイル名。</param>
      <param name="exportProvider">ファイル保存で使用するエクスポートプロバイダ。</param>
    </member>
    <member name="P:C1.C1Preview.ActionHandlerFileSave.ExportProvider">
      <summary>ファイル保存で使用するエクスポートプロバイダを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerFileOpen">
      <summary>ドキュメントをファイルから読み込みます。</summary>
      <remarks>
        このアクションハンドラが呼び出されるときに
        <see cref="P:C1.C1Preview.ActionHandlerFile.FileName" />が指定されていない場合は、 ファイルを開くダイアログがユーザーに表示されます。
        <para>
          アクションハンドラの使用についての詳細は、
          <see cref="T:C1.C1Preview.ActionHandlerBase" />を参照してください。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.ActionHandlerFile" />
      <seealso cref="T:C1.C1Preview.ActionHandlerFileSave" />
    </member>
    <member name="M:C1.C1Preview.ActionHandlerFileOpen.#ctor">
      <summary>ActionHandlerFileOpen クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.ActionHandlerFileOpen.#ctor(System.String)">
      <summary>ActionHandlerFileOpen クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName">ファイル名。</param>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerPageSetup">
      <summary>ドキュメントの用紙設定を変更するためのページ設定ダイアログを表示します。</summary>
      <remarks>
        アクションハンドラの使用についての詳細は、
        <see cref="T:C1.C1Preview.ActionHandlerBase" />を参照してください。
      </remarks>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerPrint">
      <summary>ドキュメントを印刷します。</summary>
      <remarks>
        アクションハンドラの使用についての詳細は、
        <see cref="T:C1.C1Preview.ActionHandlerBase" />を参照してください。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ActionHandlerPrint.#ctor">
      <summary>ActionHandlerPrint クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.ActionHandlerPrint.#ctor(System.String)">
      <summary>ActionHandlerPrint クラスの新しいインスタンスを初期化します。</summary>
      <param name="printerName">印刷に用いるプリンタ名。</param>
    </member>
    <member name="P:C1.C1Preview.ActionHandlerPrint.PrinterName">
      <summary>印刷に用いるプリンタ名を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerReflow">
      <summary>ドキュメントをリフローします。</summary>
      <remarks>
        アクションハンドラの使用についての詳細は、
        <see cref="T:C1.C1Preview.ActionHandlerBase" />を参照してください。
      </remarks>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerPageView">
      <summary>プレビューウィンドウでドキュメントの表示を変更するアクションハンドラを記述します。</summary>
      <remarks>
        アクションハンドラの使用についての詳細は、
        <see cref="T:C1.C1Preview.ActionHandlerBase" />を参照してください。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ActionHandlerPageView.#ctor(System.Boolean,System.Boolean)">
      <summary>ActionHandlerPageView クラスの新しいインスタンスを初期化します。</summary>
      <param name="facing">見開きページ形式で表示するかどうか。</param>
      <param name="continuous">連続ページ形式で表示するかどうか。</param>
    </member>
    <member name="P:C1.C1Preview.ActionHandlerPageView.Facing">
      <summary>見開きページ形式で表示するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.ActionHandlerPageView.Continuous">
      <summary>連続ページ形式で表示するかどうかを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerHistoryPrev">
      <summary>前の履歴エントリに移動します。</summary>
      <remarks>
        アクションハンドラの使用についての詳細は、
        <see cref="T:C1.C1Preview.ActionHandlerBase" />を参照してください。
      </remarks>
    </member>
    <member name="T:C1.C1Preview.ActionHandlerHistoryNext">
      <summary>次の履歴エントリに移動します。</summary>
    </member>
    <member name="T:C1.C1Preview.InputAction">
      <summary>入力コントロールに対するユーザー操作と実行される処理を表します。</summary>
      <remarks>
        異なるユーザーアクションの処理を記述するこのタイプのオブジェクトは、
        <see cref="T:C1.C1Preview.RenderInputBase" />オブジェクトの
        <see cref="P:C1.C1Preview.RenderInputBase.InputActions" />コレクションに格納され、 そのオブジェクトによって生成されるコントロール上のさまざまなユーザーアクションの処理方法を定義します。
        <para>
          アクションハンドラの使用についての詳細は、
          <see cref="T:C1.C1Preview.ActionHandlerBase" />を参照してください。
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Preview.InputAction.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.InputAction" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.InputAction.#ctor(C1.C1Preview.UserActionEnum,C1.C1Preview.ActionHandlerBase)">
      <summary>InputAction クラスの新しいインスタンスを初期化します。</summary>
      <param name="userAction">入力コントロールに対するユーザー操作。</param>
      <param name="actionHandler">ユーザーが入力コントロールを操作したときに実行される処理。</param>
    </member>
    <member name="M:C1.C1Preview.InputAction.AssignFrom(C1.C1Preview.InputAction)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.InputAction.UserAction">
      <summary>入力コントロールに対するユーザー操作を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.InputAction.ActionHandler">
      <summary>ユーザーが入力コントロールを操作したときに実行される処理を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.InputActionCollection">
      <summary>
        <see cref="T:C1.C1Preview.InputAction" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.InputActionCollection.Add(C1.C1Preview.InputAction)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="inputAction">追加するオブジェクト。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.InputActionCollection.Add(C1.C1Preview.UserActionEnum,C1.C1Preview.ActionHandlerBase)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="userAction">入力コントロールに対するユーザー操作。</param>
      <param name="actionHandler">ユーザーが入力コントロールを操作したときに実行される処理。</param>
      <returns>コレクションに追加されたオブジェクトを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.InputActionCollection.Insert(System.Int32,C1.C1Preview.InputAction)">
      <summary>要素を現在のコレクションに挿入します。</summary>
      <param name="index">要素の挿入先のインデックス。</param>
      <param name="inputAction">挿入する要素。</param>
    </member>
    <member name="M:C1.C1Preview.InputActionCollection.Remove(C1.C1Preview.InputAction)">
      <summary>要素を現在のコレクションから削除します。</summary>
      <param name="inputAction">削除する要素。</param>
    </member>
    <member name="M:C1.C1Preview.InputActionCollection.IndexOf(C1.C1Preview.InputAction)">
      <summary>現在のコレクション内の指定した要素のインデックスを返します。</summary>
      <param name="inputAction">返すインデックスの要素。</param>
      <returns>現在のコレクション内の指定した要素のインデックス。</returns>
    </member>
    <member name="P:C1.C1Preview.InputActionCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得または設定します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>指定したインデックスの要素。</returns>
    </member>
    <member name="T:C1.C1Preview.RenderInputBase">
      <summary>入力コントロール描画オブジェクトの抽象基本クラス。</summary>
      <remarks>
        派生クラスには、
        <see cref="T:C1.C1Preview.RenderInputButton" />、
        <see cref="T:C1.C1Preview.RenderInputCheckBox" />、
        <see cref="T:C1.C1Preview.RenderInputComboBox" />、
        <see cref="T:C1.C1Preview.RenderInputRadioButton" />、および
        <see cref="T:C1.C1Preview.RenderInputText" />が含まれます。
      </remarks>
      <seealso cref="T:C1.C1Preview.ActionHandlerBase" />
    </member>
    <member name="T:C1.C1Preview.IValueProvider">
      <summary>
        <see cref="P:C1.C1Preview.IValueProvider.Value" />プロパティを公開するオブジェクトを表します。 値が変更されたときに発生するイベントを提供します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IValueProvider.Value">
      <summary>値を取得または設定します。</summary>
    </member>
    <member name="E:C1.C1Preview.IValueProvider.ValueChanged">
      <summary>
        <see cref="P:C1.C1Preview.IValueProvider.Value" />が変更されたときに発生します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderInputBase" />オブジェクトの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.ShouldSerializeCursor">
      <summary>
        <see cref="P:C1.C1Preview.RenderInputBase.Cursor" />がシリアル化されるかどうかを示します。
      </summary>
      <returns>カーソルをシリアル化する必要がある場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.GetDefaultFlags">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.GetDefaultCursor">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.InitRenderObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.SetSplitHorzBehavior(C1.C1Preview.SplitBehaviorEnum)">
      <summary>これは内部使用専用です。</summary>
      <param name="value"></param>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.SetSplitVertBehavior(C1.C1Preview.SplitBehaviorEnum)">
      <summary>これは内部使用専用です。</summary>
      <param name="value"></param>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderInputBase" />の場合は、
        <see cref="T:C1.C1Preview.RenderInputBase" />固有のプロパティもコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.GetValue">
      <summary>入力値を取得します。</summary>
      <returns>入力値。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.SetValue(System.Object)">
      <summary>入力値を設定します。</summary>
      <param name="value">設定する値。</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.OnValueChanged">
      <summary>
        <see cref="P:C1.C1Preview.IValueProvider.Value" />が変更されたときに呼び出されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.GetControlType">
      <summary>コントロールタイプを取得します。</summary>
      <returns>コントロールタイプ。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.InitControl(System.Windows.Forms.Control,C1.C1Preview.Scripting.IScriptContext)">
      <summary>入力コントロールを初期化します。</summary>
      <param name="control">初期化するコントロール。</param>
      <param name="context">計算されたスタイルプロパティの取得に使用されるコンテキスト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.GetAutoSize(C1.C1Preview.Scripting.IScriptContext,System.Int32@,System.Int32@)">
      <summary>入力コントロールの優先サイズをピクセル単位で返します。</summary>
      <param name="context">計算されたスタイルプロパティの取得に使用されるコンテキスト。</param>
      <param name="width">出力：コントロールの幅。</param>
      <param name="height">出力：コントロールの高さ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.IsControlNeededParentForWmPrint">
      <summary>WM_PRINT メッセージを処理するために親を必要とするかどうかを示します。</summary>
      <returns>true（このメソッドをオーバーライドして変更します）。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.IsResetSelectionNeeded">
      <summary>入力フォーカスを受け取ったときに選択範囲がリセットされるかどうかを示します。</summary>
      <returns>false（このメソッドをオーバーライドして変更します）。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputBase.CreateControl(C1.C1Preview.Scripting.IScriptContext)">
      <summary>
        基底の
        <see cref="T:System.Windows.Forms.Control" />を作成します。
      </summary>
      <param name="context">計算されたスタイルプロパティの取得に使用されるコンテキスト。</param>
      <returns>新しく作成されたコントロール。</returns>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.ReadOnly">
      <summary>コントロールが読み取り専用かどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.Printable">
      <summary>コントロールが出力されるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.StatusText">
      <summary>プレビュー画面のステータス行に表示されるテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.ToolTip">
      <summary>コントロールに関連付けられたツールチップを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.Cursor">
      <summary>マウスポインタがコントロール内にあるときに使用されるカーソルを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.InputActions">
      <summary>入力コントロールに対するユーザー操作と実行される処理のコレクションを取得します。</summary>
      <remarks>
        このプロパティは常に非
        <b>null</b>の入力アクションのコレクションを、 まだ初期化されていない場合は初期化して返します。
        <see cref="P:C1.C1Preview.RenderInputBase.HasInputActions" />を使って、
        <see cref="P:C1.C1Preview.RenderInputBase.InputActions" />を初期化せずに入力アクションが存在するかどうかをテストします。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderInputBase.HasInputActions">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.RenderInputBase.InputActions" />コレクションが初期化されて １つまたは複数のフラグメントを含んでいるかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputButton">
      <summary>プッシュボタンを提供する入力コントロール。</summary>
      <seealso cref="T:C1.C1Preview.RenderInputBase" />
      <seealso cref="T:C1.C1Preview.RenderInputButtonBase" />
      <seealso cref="T:C1.C1Preview.ActionHandlerBase" />
    </member>
    <member name="T:C1.C1Preview.RenderInputButtonBase">
      <summary>ボタン形式の入力コントロール描画オブジェクトの抽象基本クラス。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputButtonBase.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderInputButtonBase" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputButtonBase.ShouldSerializeTextAlign">
      <summary>
        <see cref="P:C1.C1Preview.RenderInputButtonBase.TextAlign" />がシリアル化されるかどうかを示します。
      </summary>
      <returns>TextAlign をシリアル化する必要がある場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputButtonBase.GetDefaultCursor">
      <summary>デフォルトのカーソルを取得します。</summary>
      <returns>
        <see cref="P:System.Windows.Forms.Cursors.Hand" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputButtonBase.InitRenderObject">
      <summary>描画オブジェクトを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputButtonBase.GetDefaultTextAlign">
      <summary>デフォルトテキスト配置を取得します。</summary>
      <returns>
        <see cref="F:System.Drawing.ContentAlignment.MiddleCenter" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputButtonBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderInputBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出して、 ソースが
        <see cref="T:C1.C1Preview.RenderInputButtonBase" />である場合、
        <see cref="T:C1.C1Preview.RenderInputButtonBase" />固有のプロパティをコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputButtonBase.InitControl(System.Windows.Forms.Control,C1.C1Preview.Scripting.IScriptContext)">
      <summary>コントロールを初期化します。</summary>
      <param name="control">
        初期化する
        <see cref="T:System.Windows.Forms.Control" />。
      </param>
      <param name="context">計算されたスタイルプロパティの取得に使用されるコンテキスト。</param>
    </member>
    <member name="P:C1.C1Preview.RenderInputButtonBase.Text">
      <summary>ボタンのテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputButtonBase.TextAlign">
      <summary>テキストの水平および垂直方向の配置を取得または設定します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputButton.#ctor">
      <summary>RenderInputButton クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputButton.#ctor(System.String)">
      <summary>RenderInputButton クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">テキスト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputButton.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderInputButton" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderInputButton" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputButton.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderInputButtonBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputButton.GetValue">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputButton.SetValue(System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="value"></param>
    </member>
    <member name="M:C1.C1Preview.RenderInputButton.GetControlType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputButton.InitControl(System.Windows.Forms.Control,C1.C1Preview.Scripting.IScriptContext)">
      <summary>これは内部使用専用です。</summary>
      <param name="control"></param>
      <param name="context"></param>
    </member>
    <member name="M:C1.C1Preview.RenderInputButton.GetAutoSize(C1.C1Preview.Scripting.IScriptContext,System.Int32@,System.Int32@)">
      <summary>コントロールの優先サイズをピクセル単位で返します。</summary>
      <param name="context">計算されたスタイルプロパティの取得に使用されるコンテキスト。</param>
      <param name="width">出力：コントロールの幅。</param>
      <param name="height">出力：コントロールの高さ。</param>
    </member>
    <member name="P:C1.C1Preview.RenderInputButton.AcceptButton">
      <summary>Enter キーを押したときにボタンがクリックされるかどうかを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.CheckMarkStyleEnum">
      <summary>チェックボックスのマークのスタイルを記述します。</summary>
    </member>
    <member name="F:C1.C1Preview.CheckMarkStyleEnum.Default">
      <summary>デフォルトのスタイル（Windows 形式）。</summary>
    </member>
    <member name="F:C1.C1Preview.CheckMarkStyleEnum.Cross">
      <summary>クロス（Microsoft Office 形式）。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputCheckBox">
      <summary>チェックボックスを提供する入力コントロール。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.#ctor">
      <summary>RenderInputCheckBox クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.#ctor(System.String)">
      <summary>RenderInputCheckBox クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">テキスト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderInputCheckBox" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderInputCheckBox" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.InitRenderObject">
      <summary>描画オブジェクトを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.GetDefaultTextAlign">
      <summary>デフォルトテキスト配置を取得します。</summary>
      <returns>
        <see cref="F:System.Drawing.ContentAlignment.MiddleLeft" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderInputButtonBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出して、 ソースが
        <see cref="T:C1.C1Preview.RenderInputCheckBox" />である場合、
        <see cref="T:C1.C1Preview.RenderInputCheckBox" />固有のプロパティをコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.GetValue">
      <summary>チェックボックス値を取得します。</summary>
      <returns>チェックボックスがオンにされている場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.SetValue(System.Object)">
      <summary>チェックボックス値を設定します。</summary>
      <param name="value">
        <see cref="T:System.Boolean" />値。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.GetControlType">
      <summary>チェックボックスコントロールタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Preview.ScalableCheckBox" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.InitControl(System.Windows.Forms.Control,C1.C1Preview.Scripting.IScriptContext)">
      <summary>コントロールを初期化します。</summary>
      <param name="control">
        初期化する
        <see cref="T:C1.C1Preview.ScalableCheckBox" />。
      </param>
      <param name="context"></param>
    </member>
    <member name="M:C1.C1Preview.RenderInputCheckBox.GetAutoSize(C1.C1Preview.Scripting.IScriptContext,System.Int32@,System.Int32@)">
      <summary>コントロールの希望の（auto）サイズを取得します。</summary>
      <param name="context">計算されたスタイルプロパティの取得に使用されるコンテキスト。</param>
      <param name="width">出力：コントロールの幅。</param>
      <param name="height">出力：コントロールの高さ。</param>
    </member>
    <member name="P:C1.C1Preview.RenderInputCheckBox.Checked">
      <summary>チェックボックスがオンかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputCheckBox.CheckMarkStyle">
      <summary>チェックマークのスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputCheckBox.CheckAlign">
      <summary>チェックボックスの水平および垂直方向の配置を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputComboBoxItem">
      <summary>コンボボックスコレクション内の項目を表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItem.#ctor">
      <summary>RenderInputComboBoxItem クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItem.#ctor(System.String)">
      <summary>RenderInputComboBoxItem クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">ドロップダウンリストに表示されるテキスト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItem.#ctor(System.String,System.Object)">
      <summary>RenderInputComboBoxItem クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">ドロップダウンリストに表示されるテキスト。</param>
      <param name="userData">項目に関連付けられた任意のデータ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItem.AssignFrom(C1.C1Preview.RenderInputComboBoxItem)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItem.ToString">
      <summary>現在のオブジェクトの文字列表現を返します。</summary>
      <returns>
        <see cref="P:C1.C1Preview.RenderInputComboBoxItem.Text" />プロパティの値。
      </returns>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBoxItem.Text">
      <summary>ドロップダウンリストに表示されるテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBoxItem.UserData">
      <summary>項目に関連付けられた任意のデータを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputComboBoxItemCollection">
      <summary>
        <see cref="T:C1.C1Preview.RenderInputComboBoxItem" />オブジェクトのコレクションを表します。
      </summary>
      <seealso cref="P:C1.C1Preview.RenderInputComboBox.Items" />
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItemCollection.Add(C1.C1Preview.RenderInputComboBoxItem)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="item">追加するオブジェクト。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItemCollection.Add(System.String)">
      <summary>
        テキストを指定して
        <see cref="T:C1.C1Preview.RenderInputComboBoxItem" />オブジェクトをコレクションに追加します。
      </summary>
      <param name="itemText">ドロップダウンリストに表示されるテキスト。</param>
      <returns>追加されたオブジェクトのコレクション内のインデックス。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItemCollection.Insert(System.Int32,C1.C1Preview.RenderInputComboBoxItem)">
      <summary>
        <see cref="T:C1.C1Preview.RenderInputComboBoxItem" />を現在のコレクションに挿入します。
      </summary>
      <param name="index">項目の挿入先の位置。</param>
      <param name="item">挿入する項目。</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItemCollection.Remove(C1.C1Preview.RenderInputComboBoxItem)">
      <summary>
        <see cref="T:C1.C1Preview.RenderInputComboBoxItem" />を現在のコレクションから削除します。
      </summary>
      <param name="item">削除する項目。</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBoxItemCollection.IndexOf(C1.C1Preview.RenderInputComboBoxItem)">
      <summary>
        現在のコレクション内の
        <see cref="T:C1.C1Preview.RenderInputComboBoxItem" />のインデックスを返します。
      </summary>
      <param name="item">検索する項目。</param>
      <returns>
        指定した項目のインデックス。見つからなかった場合は
        <b>-1</b>。
      </returns>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBoxItemCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得または設定します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>指定したインデックスの要素。</returns>
    </member>
    <member name="T:C1.C1Preview.RenderInputComboBox">
      <summary>ドロップダウンリスト付きのテキスト入力を提供する入力コントロール。</summary>
      <seealso cref="T:C1.C1Preview.RenderInputBase" />
      <seealso cref="T:C1.C1Preview.RenderInputComboBoxItem" />
      <seealso cref="T:C1.C1Preview.ActionHandlerBase" />
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderInputComboBox" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.#ctor(System.String[])">
      <summary>RenderInputComboBox クラスの新しいインスタンスを初期化します。</summary>
      <param name="items">ドロップダウンリストに表示されるテキストの配列。</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderInputComboBox" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderInputComboBox" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.GetDefaultCursor">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderInputBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderInputComboBox" />の場合は、
        <see cref="T:C1.C1Preview.RenderInputComboBox" />固有のプロパティもコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.GetValue">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.SetValue(System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="value"></param>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.GetControlType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.InitControl(System.Windows.Forms.Control,C1.C1Preview.Scripting.IScriptContext)">
      <summary>これは内部使用専用です。</summary>
      <param name="control"></param>
      <param name="context"></param>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.IsResetSelectionNeeded">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputComboBox.GetAutoSize(C1.C1Preview.Scripting.IScriptContext,System.Int32@,System.Int32@)">
      <summary>コントロールの優先サイズをピクセル単位で返します。</summary>
      <param name="context">計算されたスタイルプロパティの取得に使用されるコンテキスト。</param>
      <param name="width">出力：コントロールの幅。</param>
      <param name="height">出力：コントロールの高さ。</param>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.Text">
      <summary>入力済みのテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.PasswordChar">
      <summary>パスワードの入力時に実際の入力文字を隠すための文字を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.DropDownStyle">
      <summary>コンボボックスのスタイルを指定する値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.Items">
      <summary>この ComboBox に含まれるアイテムのコレクションを取得します。</summary>
      <remarks>
        このメソッドは常に非
        <b>null</b>の
        <see cref="T:C1.C1Preview.RenderInputComboBoxItemCollection" />を、 存在しなかった場合は初期化して返します。 コンボボックスが
        <see cref="P:C1.C1Preview.RenderInputComboBox.Items" />コレクションを作成せずに 項目をすでに含んでいるかどうかをテストするには、
        <see cref="P:C1.C1Preview.RenderInputComboBox.HasItems" />プロパティを使用します。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.HasItems">
      <summary>
        <see cref="P:C1.C1Preview.RenderInputComboBox.Items" />コレクションが初期化されて １つまたは複数の要素を含んでいるかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.AcceptsReturn">
      <summary>複数行 TextBox コントロールで改行を挿入できるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputComboBox.BorderVisible">
      <summary>現在の入力コントロールの周囲に枠線を描画するかどうかを示す値を 取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputRadioButton">
      <summary>ラジオボタンを提供する入力コントロール。</summary>
      <remarks>
        複数の
        <see cref="T:C1.C1Preview.RenderInputRadioButton" />オブジェクトを１つのグループ内に組み合わせることができます。 この場合、１つのボタンをオンにするとグループ内のその他のボタンはオフになります （詳細は、
        <see cref="P:C1.C1Preview.RenderInputRadioButton.GroupIndex" />プロパティを参照）。
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderInputBase" />
      <seealso cref="T:C1.C1Preview.RenderInputButtonBase" />
      <seealso cref="T:C1.C1Preview.ActionHandlerBase" />
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.#ctor">
      <summary>RenderInputRadioButton クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.#ctor(System.String)">
      <summary>RenderInputRadioButton クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">テキスト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.#ctor(System.String,System.String)">
      <summary>RenderInputRadioButton クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">コントロール名。</param>
      <param name="text">テキスト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.#ctor(System.String,System.String,System.Int32)">
      <summary>RenderInputRadioButton クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">コントロール名。</param>
      <param name="text">テキスト。</param>
      <param name="groupIndex">グループインデックス。</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.#ctor(System.String,System.Int32)">
      <summary>RenderInputRadioButton クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">テキスト。</param>
      <param name="groupIndex">グループインデックス。</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderInputRadioButton" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderInputRadioButton" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.InitRenderObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.GetDefaultTextAlign">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderInputButtonBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderInputRadioButton" />の場合は、
        <see cref="T:C1.C1Preview.RenderInputRadioButton" />固有のプロパティもコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.GetValue">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.SetValue(System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="value"></param>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.GetControlType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.InitControl(System.Windows.Forms.Control,C1.C1Preview.Scripting.IScriptContext)">
      <summary>これは内部使用専用です。</summary>
      <param name="control"></param>
      <param name="context"></param>
    </member>
    <member name="M:C1.C1Preview.RenderInputRadioButton.GetAutoSize(C1.C1Preview.Scripting.IScriptContext,System.Int32@,System.Int32@)">
      <summary>コントロールの優先サイズをピクセル単位で返します。</summary>
      <param name="context">計算されたスタイルプロパティの取得に使用されるコンテキスト。</param>
      <param name="width">出力：コントロールの幅。</param>
      <param name="height">出力：コントロールの高さ。</param>
    </member>
    <member name="P:C1.C1Preview.RenderInputRadioButton.Checked">
      <summary>チェックボックスがオンかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputRadioButton.CheckAlign">
      <summary>チェックボックスの水平および垂直方向の配置を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputRadioButton.GroupIndex">
      <summary>ラジオボタンのグループインデックスを取得または設定します。</summary>
      <remarks>
        <para>同じグループインデックスを持つコントロールが複数存在する場合、グループ内の１つのボタンだけをオンにできます。</para>
      </remarks>
    </member>
    <member name="T:C1.C1Preview.RenderInputText">
      <summary>テキスト入力を提供する入力コントロール。</summary>
      <seealso cref="T:C1.C1Preview.RenderInputBase" />
      <seealso cref="T:C1.C1Preview.ActionHandlerBase" />
    </member>
    <member name="M:C1.C1Preview.RenderInputText.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderInputText" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.#ctor(System.String)">
      <summary>RenderInputText クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">入力済みのテキスト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderInputText" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderInputText" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.GetDefaultCursor">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderInputBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderInputText" />の場合は、
        <see cref="T:C1.C1Preview.RenderInputText" />固有のプロパティもコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.GetValue">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.SetValue(System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="value"></param>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.GetControlType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.InitControl(System.Windows.Forms.Control,C1.C1Preview.Scripting.IScriptContext)">
      <summary>これは内部使用専用です。</summary>
      <param name="control"></param>
      <param name="context"></param>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.IsResetSelectionNeeded">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputText.GetAutoSize(C1.C1Preview.Scripting.IScriptContext,System.Int32@,System.Int32@)">
      <summary>コントロールの優先サイズをピクセル単位で返します。</summary>
      <param name="context">計算されたスタイルプロパティの取得に使用されるコンテキスト。</param>
      <param name="width">出力：コントロールの幅。</param>
      <param name="height">出力：コントロールの高さ。</param>
    </member>
    <member name="P:C1.C1Preview.RenderInputText.Text">
      <summary>入力済みのテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputText.PasswordChar">
      <summary>パスワードの入力時に実際の入力文字を隠すための文字を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputText.AcceptsReturn">
      <summary>複数行 TextBox コントロールで改行を挿入できるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderInputText.BorderVisible">
      <summary>現在の入力コントロールの周囲に枠線を描画するかどうかを示す値を 取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.BordersSplitMode">
      <summary>オブジェクトがページ間で分割されたときに枠を描画する方法を指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.BordersSplitMode.None">
      <summary>オブジェクトが分割された場所に枠は描画されません。</summary>
    </member>
    <member name="F:C1.C1Preview.BordersSplitMode.Square">
      <summary>オブジェクトが分割された場所に正方形の枠が描画されます。</summary>
    </member>
    <member name="F:C1.C1Preview.BordersSplitMode.Round">
      <summary>
        オブジェクトが分割された場所に枠が表示されます。 角に丸みのある枠線（
        <see cref="P:C1.C1Preview.IBorders.RadiusX" />、
        <see cref="P:C1.C1Preview.IBorders.RadiusY" />を参照)の場合、 オブジェクトが分割される場所に角に丸みのある枠線が描画されます。
      </summary>
    </member>
    <member name="T:C1.C1Preview.SplitBehaviorEnum">
      <summary>描画オブジェクトの分割動作を定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitBehaviorEnum.Never">
      <summary>オブジェクトはページ間で分割されません。つまり、必ず１ページに一緒に表示されます。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitBehaviorEnum.SplitIfNeeded">
      <summary>現在のページにオブジェクトが収まらない場合は、オブジェクトが分割されます。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitBehaviorEnum.SplitIfLarge">
      <summary>オブジェクトが大きすぎて空のページに収まらない場合にのみ、オブジェクトが分割されます。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitBehaviorEnum.SplitNewPage">
      <summary>オブジェクトが現在のページ（列）に収まらない場合は、新しいページ（列）が開始されます。</summary>
    </member>
    <member name="T:C1.C1Preview.BreakEnum">
      <summary>描画オブジェクトの前後に挿入できるさまざまな区切りを定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.BreakEnum.None">
      <summary>区切りなし。</summary>
    </member>
    <member name="F:C1.C1Preview.BreakEnum.Page">
      <summary>新しいページが開始されます。</summary>
    </member>
    <member name="F:C1.C1Preview.BreakEnum.Column">
      <summary>新しい列が開始されます。</summary>
    </member>
    <member name="F:C1.C1Preview.BreakEnum.Line">
      <summary>インラインフローで新しい行が開始されます。</summary>
    </member>
    <member name="T:C1.C1Preview.VisibilityEnum">
      <summary>オブジェクトの表示状態を指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.VisibilityEnum.Visible">
      <summary>オブジェクトは表示されています。</summary>
    </member>
    <member name="F:C1.C1Preview.VisibilityEnum.Hidden">
      <summary>オブジェクトは表示されていませんが、スペースを占有し、表示されている場合と同様に他のオブジェクトのレイアウトに影響します。</summary>
    </member>
    <member name="F:C1.C1Preview.VisibilityEnum.Collapse">
      <summary>オブジェクトは表示されていません。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderObjectCollection">
      <summary>
        <see cref="T:C1.C1Preview.RenderObject" />オブジェクトのコレクションを表します。
      </summary>
      <summary>
        <see cref="T:C1.C1Preview.RenderObject" />オブジェクトのコレクションを表します。
      </summary>
      <seealso cref="P:C1.C1Preview.DocumentBody.Children" />
      <seealso cref="P:C1.C1Preview.RenderObject.Children" />
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.OnClearComplete">
      <summary>コレクションがクリアされた後に呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary>項目が削除された後に呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>項目が設定された後に呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="oldValue">古い項目。</param>
      <param name="newValue">新しい項目。</param>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>項目が設定されようとするときに呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="oldValue">古い項目。</param>
      <param name="newValue">新しい項目。</param>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.OnInsert(System.Int32,System.Object)">
      <summary>項目がクリアされようとするときに呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.GetItemType">
      <summary>
        typeof(
        <see cref="T:C1.C1Preview.RenderObject" />) を返します。
      </summary>
      <returns>
        typeof(
        <see cref="T:C1.C1Preview.RenderObject" />)。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.Add(C1.C1Preview.RenderObject)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="ro">追加するオブジェクト。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.Remove(C1.C1Preview.RenderObject)">
      <summary>
        指定した
        <see cref="T:C1.C1Preview.RenderObject" />を現在のコレクションから削除します。
      </summary>
      <param name="ro">削除するオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.Insert(System.Int32,C1.C1Preview.RenderObject)">
      <summary>
        指定した
        <see cref="T:C1.C1Preview.RenderObject" />を現在のコレクションに挿入します。
      </summary>
      <param name="index">オブジェクトの挿入先のインデックス。</param>
      <param name="ro">挿入するオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.IndexOfName(System.String)">
      <summary>
        現在のコレクション内で指定した
        <see cref="P:C1.C1Preview.RenderObject.Name" />を持つオブジェクトを検索します。
      </summary>
      <param name="name">検索する名前。</param>
      <returns>現在のコレクション内のオブジェクトのインデックス。オブジェクトが見つからなかった場合は -1。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.FindByName(System.String)">
      <summary>
        現在のコレクション内で指定した
        <see cref="P:C1.C1Preview.RenderObject.Name" />を持つオブジェクトを検索します。
      </summary>
      <param name="name">検索する名前。</param>
      <returns>現在のコレクション内のオブジェクト。オブジェクトが見つからなかった場合は null。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.FindByAnchorName(System.String,C1.C1Preview.C1Anchor@)">
      <summary>含まれるアンカーの名前に基づいてレンダリングオブジェクトを検索します。</summary>
      <param name="anchorName">検索するアンカーの名前。</param>
      <param name="anchor">出力：検索された名前の C1Anchor オブジェクトを保持します。</param>
      <returns>見つかったレンダリングオブジェクトを返します。見つからなかった場合は null を返します。</returns>
      <returns>見つかったレンダリングオブジェクトを返します。見つからなかった場合は null を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.FindById(System.Int32)">
      <summary>
        現在のコレクション内で
        <see cref="P:C1.C1Preview.RenderObject.Id" />プロパティの指定した値を持つ
        <see cref="T:C1.C1Preview.RenderObject" />を検索します。
      </summary>
      <param name="id">検索する ID。</param>
      <returns>指定した ID を持つ描画オブジェクト。このオブジェクトが見つからなかった場合は null。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderObjectCollection.FindByOriginal(C1.C1Preview.RenderObject)">
      <summary>
        現在のコレクション内で
        <see cref="P:C1.C1Preview.RenderObject.Original" />プロパティの指定した値を持つ
        <see cref="T:C1.C1Preview.RenderObject" />を検索します。
      </summary>
      <param name="original">検索する元のオブジェクト。</param>
      <returns>
        指定した
        <see cref="P:C1.C1Preview.RenderObject.Original" />を持つ描画オブジェクト。このオブジェクトが見つからなかった場合は null。
      </returns>
    </member>
    <member name="P:C1.C1Preview.RenderObjectCollection.Item(System.String)">
      <summary>コレクション内の指定した名前のオブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderObjectCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderParagraph">
      <summary>段落描画オブジェクトを記述します。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderTextBase">
      <summary>RenderText と RenderParagraph の抽象基本クラス。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderTextBase.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderTextBase" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderTextBase.ShouldSerializeTabPositions">
      <summary>
        <see cref="P:C1.C1Preview.RenderTextBase.TabPositions" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.RenderTextBase.TabPositions" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderTextBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderTextBase" />の場合は、
        <see cref="T:C1.C1Preview.RenderTextBase" />固有のプロパティもコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderTextBase.HasText">
      <summary>オブジェクトにテキストがある場合は true を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderTextBase.TextLength">
      <summary>テキストの長さを返します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderTextBase.TabPositions">
      <summary>テキスト内のタブのコレクション。</summary>
      <remarks>
        このメソッドは常に非
        <b>null</b>の
        <see cref="T:C1.C1Preview.TabPositionCollection" />を、 存在しなかった場合は初期化して返します。 現在のオブジェクトが
        <see cref="P:C1.C1Preview.RenderTextBase.TabPositions" />コレクションを作成せずに 定義されたタブストップをすでに持っているかどうかをテストするには、
        <see cref="P:C1.C1Preview.RenderTextBase.HasTabPositions" />プロパティを使用します。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderTextBase.HasTabPositions">
      <summary>TabPositions コレクションが空でないかどうかを取得します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor">
      <summary>RenderParagraph クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.Style)">
      <summary>RenderParagraph クラスの新しいインスタンスを初期化します。</summary>
      <param name="style">この RenderParagraph オブジェクトに使用するスタイル。</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(System.Drawing.Font)">
      <summary>RenderParagraph クラスの新しいインスタンスを初期化します。</summary>
      <param name="font">この RenderParagraph オブジェクトに使用するフォント。</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(System.Drawing.Font,System.Drawing.Color)">
      <summary>RenderParagraph クラスの新しいインスタンスを初期化します。</summary>
      <param name="font">この RenderParagraph オブジェクトに使用するフォント。</param>
      <param name="textColor">この RenderParagraph オブジェクトに使用するテキスト色。</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(System.Drawing.Font,System.Drawing.Color,C1.C1Preview.AlignHorzEnum)">
      <summary>RenderParagraph クラスの新しいインスタンスを初期化します。</summary>
      <param name="font">この RenderParagraph オブジェクトに使用するフォント。</param>
      <param name="textColor">この RenderParagraph オブジェクトに使用するテキスト色。</param>
      <param name="horzAlign">この RenderParagraph オブジェクトに使用する水平方向の配置。</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(System.Drawing.Font,C1.C1Preview.AlignHorzEnum)">
      <summary>RenderParagraph クラスの新しいインスタンスを初期化します。</summary>
      <param name="font">この RenderParagraph オブジェクトに使用するフォント。</param>
      <param name="horzAlign">この RenderParagraph オブジェクトに使用する水平方向の配置。</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.#ctor(C1.C1Preview.AlignHorzEnum)">
      <summary>RenderParagraph クラスの新しいインスタンスを初期化します。</summary>
      <param name="horzAlign">この RenderParagraph オブジェクトに使用する水平方向の配置。</param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderParagraph" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderParagraph" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderParagraph.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderParagraph.Content">
      <summary>この RenderParagraph オブジェクトのコンテンツを表す ParagraphObjectCollection を取得します。</summary>
      <remarks>
        このメソッドは常に非
        <b>null</b>の
        <see cref="T:C1.C1Preview.ParagraphObjectCollection" />を、 存在しなかった場合は初期化して返します。 段落が
        <see cref="P:C1.C1Preview.RenderParagraph.Content" />コレクションを作成せずに コンテンツをすでに含んでいるかどうかをテストするには、
        <see cref="P:C1.C1Preview.RenderParagraph.HasContent" />プロパティを使用します。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderParagraph.HasContent">
      <summary>現在の RenderParagraph オブジェクトにコンテンツがあるかどうかを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderParagraph.HasText">
      <summary>オーバーライドされます。現在の RenderParagraph オブジェクトにコンテンツがあるかどうかを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderParagraph.TextLength">
      <summary>段落内のテキストの長さを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderParagraph.Text">
      <summary>現在の段落のテキストを取得または設定します。</summary>
      <remarks>
        <para>
          このプロパティの getter は、現在の段落内のすべての
          <see cref="T:C1.C1Preview.ParagraphText" />オブジェクトのテキストを 連結して返します。
        </para>
        <para>
          この setter は、現在の段落の
          <see cref="P:C1.C1Preview.RenderParagraph.Content" />をクリアして、 指定した
          <paramref name="value" />を単一の
          <see cref="T:C1.C1Preview.ParagraphText" />として追加します。
        </para>
      </remarks>
    </member>
    <member name="T:C1.C1Preview.ParagraphObject">
      <summary>段落コンテンツの抽象基本クラス。</summary>
      <seealso cref="T:C1.C1Preview.ParagraphText" />
      <seealso cref="T:C1.C1Preview.ParagraphImage" />
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.#ctor">
      <summary>ParagraphObject クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.ShouldSerializeStyle">
      <summary>
        <see cref="P:C1.C1Preview.ParagraphObject.Style" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.ParagraphObject.Style" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.GetLength">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.CreateSame">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.ParagraphObject" />オブジェクトと同じ型のオブジェクトのインスタンスを作成します。
      </summary>
      <returns>作成された段落オブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.AssignFrom(C1.C1Preview.ParagraphObject)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.Clone">
      <summary>現在の ParagraphObject を複製します。</summary>
      <returns>新しく作成されたオブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.ClearCalculatedValues(System.Boolean)">
      <summary>これは内部使用専用です。</summary>
      <param name="clearDataBindingDependent"></param>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.ResolveCalculatedValues">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.GetCalculatedValue(System.Int32,System.Object@)">
      <summary>これは内部使用専用です。</summary>
      <param name="propKey"></param>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.GetCalculatedValue(System.Int32)">
      <summary>これは内部使用専用です。</summary>
      <param name="propKey"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.SetCalculatedValue(System.Int32,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="propKey"></param>
      <param name="value"></param>
    </member>
    <member name="M:C1.C1Preview.ParagraphObject.HasCalculatedValue(System.Int32)">
      <summary>これは内部使用専用です。</summary>
      <param name="propKey"></param>
      <returns></returns>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.Hyperlink">
      <summary>このオブジェクトに関連付けられたハイパーリンクを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.Style">
      <summary>このオブジェクトに関連付けられているスタイルを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.Owner">
      <summary>このオブジェクトを含む ParagraphObjectCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.RenderParagraph">
      <summary>このオブジェクトを含む RenderParagraph を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.Document">
      <summary>このオブジェクトを含む C1PrintDocument を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.IndexInOwner">
      <summary>ParagraphObjectCollection 内のこのオブジェクトのインデックスを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.PositionInText">
      <summary>テキスト内のこの ParagraphObject の位置を取得します。</summary>
      <seealso cref="P:C1.C1Preview.RenderParagraph.TextLength" />
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.TextLength">
      <summary>この ParagraphObjec の長さを文字数単位で取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.UserData">
      <summary>現在の段落オブジェクトに関連付けられた任意のデータを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.CalculatedValues">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.HasCalculatedValues">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.FirstFragment">
      <summary>この ParagraphObject が存在する RenderParagraph オブジェクトの最初のフラグメントを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObject.LastFragment">
      <summary>この ParagraphObject が存在する RenderParagraph オブジェクトの最後のフラグメントを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.ParagraphText">
      <summary>RenderParagraph に含まれるテキストを表します。</summary>
      <seealso cref="T:C1.C1Preview.ParagraphObject" />
      <seealso cref="T:C1.C1Preview.ParagraphImage" />
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor">
      <summary>ParagraphText クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,C1.C1Preview.Style)">
      <summary>ParagraphText クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">この ParagraphText オブジェクトのテキスト。</param>
      <param name="style">この ParagraphText オブジェクトに使用するスタイル。</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String)">
      <summary>ParagraphText クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">この ParagraphText オブジェクトのテキスト。</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Font)">
      <summary>ParagraphText クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">この ParagraphText オブジェクトのテキスト。</param>
      <param name="font">この ParagraphText オブジェクトに使用するフォント。</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Color)">
      <summary>ParagraphText クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">この ParagraphText オブジェクトのテキスト。</param>
      <param name="textColor">この ParagraphText オブジェクトに使用するテキスト色。</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,C1.C1Preview.TextPositionEnum)">
      <summary>ParagraphText クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">この ParagraphText オブジェクトのテキスト。</param>
      <param name="textPosition">この ParagraphText オブジェクトに使用するテキスト位置。</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Font,System.Drawing.Color)">
      <summary>ParagraphText クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">この ParagraphText オブジェクトのテキスト。</param>
      <param name="font">この ParagraphText オブジェクトに使用するフォント。</param>
      <param name="textColor">この ParagraphText オブジェクトに使用するテキスト色。</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Font,C1.C1Preview.TextPositionEnum)">
      <summary>ParagraphText クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">この ParagraphText オブジェクトのテキスト。</param>
      <param name="font">この ParagraphText オブジェクトに使用するフォント。</param>
      <param name="textPosition">この ParagraphText オブジェクトに使用するテキスト位置。</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Color,C1.C1Preview.TextPositionEnum)">
      <summary>ParagraphText クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">この ParagraphText オブジェクトのテキスト。</param>
      <param name="textColor">この ParagraphText オブジェクトに使用するテキスト色。</param>
      <param name="textPosition">この ParagraphText オブジェクトに使用するテキスト位置。</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.#ctor(System.String,System.Drawing.Font,System.Drawing.Color,C1.C1Preview.TextPositionEnum)">
      <summary>ParagraphText クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">この ParagraphText オブジェクトのテキスト。</param>
      <param name="font">この ParagraphText オブジェクトに使用するフォント。</param>
      <param name="textColor">この ParagraphText オブジェクトに使用するテキスト色。</param>
      <param name="textPosition">この ParagraphText オブジェクトに使用するテキスト位置。</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.CreateSame">
      <summary>
        新しい空の
        <see cref="T:C1.C1Preview.ParagraphText" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.ParagraphText" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.GetLength">
      <summary>この ParagraphText オブジェクトの長さを返します。</summary>
      <returns>テキストの長さ。</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.AssignFrom(C1.C1Preview.ParagraphObject)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphText.ResolveCalculatedValues">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphText.Text">
      <summary>この ParagraphText によって表されるテキストを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.ParagraphImage">
      <summary>RenderParagraph に含まれるインライン画像を表します。</summary>
      <seealso cref="T:C1.C1Preview.ParagraphObject" />
      <seealso cref="T:C1.C1Preview.ParagraphText" />
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.#ctor">
      <summary>ParagraphImage クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.#ctor(System.Drawing.Image,C1.C1Preview.Style)">
      <summary>ParagraphImage クラスの新しいインスタンスを初期化します。</summary>
      <param name="image">この ParagraphImage オブジェクトの画像。</param>
      <param name="style">この ParagraphImage オブジェクトに使用するスタイル。</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.#ctor(System.Drawing.Image)">
      <summary>ParagraphImage クラスの新しいインスタンスを初期化します。</summary>
      <param name="image">この ParagraphImage オブジェクトの画像。</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.#ctor(System.String)">
      <summary>ParagraphImage クラスの新しいインスタンスを初期化します。</summary>
      <param name="imageName">この ParagraphImage オブジェクトの画像の辞書名。</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.CreateSame">
      <summary>
        新しい空の
        <see cref="T:C1.C1Preview.ParagraphImage" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.ParagraphImage" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.GetLength">
      <summary>現在の段落オブジェクトの長さを返します。</summary>
      <returns>1.</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphImage.AssignFrom(C1.C1Preview.ParagraphObject)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.ParagraphImage.Image">
      <summary>この ParagraphImage オブジェクトによって表される画像を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphImage.ImageName">
      <summary>この ParagraphImage オブジェクトによって表される画像の辞書名を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.ParagraphObjectCollection">
      <summary>
        <see cref="T:C1.C1Preview.ParagraphObject" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.GetItemType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.Add(C1.C1Preview.ParagraphObject)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="po">追加するオブジェクト。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.Remove(C1.C1Preview.ParagraphObject)">
      <summary>
        <see cref="T:C1.C1Preview.ParagraphObject" />を現在の段落コンテンツから削除します。
      </summary>
      <param name="po">削除するオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String)">
      <summary>指定されたテキスト文字列を現在の段落に追加します。</summary>
      <param name="text">追加する文字列。</param>
      <returns>指定されたテキスト文字列を表すために作成された ParagraphText オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphText" />を作成し、 指定したテキストで初期化して、現在のコレクションに 追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,C1.C1Preview.Style)">
      <summary>指定されたテキスト文字列を現在の段落に追加します。</summary>
      <param name="text">追加する文字列。</param>
      <param name="style">文字列のレンダリングに使用するスタイル。</param>
      <returns>指定されたテキスト文字列を表すために作成された ParagraphText オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphText" />を作成し、 指定したテキストとスタイルで初期化して、現在のコレクションに 追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font)">
      <summary>指定されたテキスト文字列を現在の段落に追加します。</summary>
      <param name="text">追加する文字列。</param>
      <param name="font">文字列のレンダリングに使用するフォント。</param>
      <returns>指定されたテキスト文字列を表すために作成された ParagraphText オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphText" />を作成し、 指定したテキストとフォントで初期化して、現在のコレクションに 追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Color)">
      <summary>指定されたテキスト文字列を現在の段落に追加します。</summary>
      <param name="text">追加する文字列。</param>
      <param name="textColor">文字列のレンダリングに使用するテキストの色。</param>
      <returns>指定されたテキスト文字列を表すために作成された ParagraphText オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphText" />を作成し、 指定したテキストとテキスト色で初期化して、現在のコレクションに 追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,C1.C1Preview.TextPositionEnum)">
      <summary>指定されたテキスト文字列を現在の段落に追加します。</summary>
      <param name="text">追加する文字列。</param>
      <param name="textPosition">文字列のレンダリングに使用するテキストの位置。</param>
      <returns>指定されたテキスト文字列を表すために作成された ParagraphText オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphText" />を作成し、 指定したテキストとテキスト位置で初期化して、現在のコレクションに 追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font,System.Drawing.Color)">
      <summary>指定されたテキスト文字列を現在の段落に追加します。</summary>
      <param name="text">追加する文字列。</param>
      <param name="font">文字列のレンダリングに使用するフォント。</param>
      <param name="textColor">文字列のレンダリングに使用するテキストの色。</param>
      <returns>指定されたテキスト文字列を表すために作成された ParagraphText オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphText" />を作成し、 指定したテキスト、フォント、およびテキスト色で初期化して、 現在のコレクションに追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font,C1.C1Preview.TextPositionEnum)">
      <summary>指定されたテキスト文字列を現在の段落に追加します。</summary>
      <param name="text">追加する文字列。</param>
      <param name="font">文字列のレンダリングに使用するフォント。</param>
      <param name="textPosition">文字列のレンダリングに使用するテキストの位置。</param>
      <returns>指定されたテキスト文字列を表すために作成された ParagraphText オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphText" />を作成し、 指定したテキスト、フォント、およびテキスト位置で初期化して、 現在のコレクションに追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Color,C1.C1Preview.TextPositionEnum)">
      <summary>指定されたテキスト文字列を現在の段落に追加します。</summary>
      <param name="text">追加する文字列。</param>
      <param name="textColor">文字列のレンダリングに使用するテキストの色。</param>
      <param name="textPosition">文字列のレンダリングに使用するテキストの位置。</param>
      <returns>指定されたテキスト文字列を表すために作成された ParagraphText オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphText" />を作成し、 指定したテキスト、テキスト色および位置で初期化して、現在のコレクションに 追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddText(System.String,System.Drawing.Font,System.Drawing.Color,C1.C1Preview.TextPositionEnum)">
      <summary>指定されたテキスト文字列を現在の段落に追加します。</summary>
      <param name="text">追加する文字列。</param>
      <param name="font">文字列のレンダリングに使用するフォント。</param>
      <param name="textColor">文字列のレンダリングに使用するテキストの色。</param>
      <param name="textPosition">文字列のレンダリングに使用するテキストの位置。</param>
      <returns>指定されたテキスト文字列を表すために作成された ParagraphText オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphText" />を作成し、 指定したテキスト、フォント、テキスト色および位置で初期化して、 現在のコレクションに追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,System.String)">
      <summary>現在の段落にハイパーリンクを追加します。</summary>
      <param name="text">ハイパーリンクを表す文字列。</param>
      <param name="anchorName">このハイパーリンクのターゲットのアンカーの名前。</param>
      <returns>ハイパーリンクを表すために作成された ParagraphText オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphText" />を作成して、 指定したテキストを使って初期化します。そのオブジェクト上の
        <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" />を
        <paramref name="anchorName" />を使って初期化された
        <see cref="T:C1.C1Preview.C1Hyperlink" />に設定して、 現在のコレクションに追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,System.String,C1.C1Preview.Style)">
      <summary>現在の段落にハイパーリンクを追加します。</summary>
      <param name="text">ハイパーリンクを表す文字列。</param>
      <param name="anchorName">このハイパーリンクのターゲットのアンカーの名前。</param>
      <param name="style">このハイパーリンクのレンダリングに使用するスタイル。</param>
      <returns>ハイパーリンクを表すために作成された ParagraphText オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphText" />を作成して、 指定したテキストとスタイルを使って初期化します。そのオブジェクト上の
        <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" />を
        <paramref name="anchorName" />を使って初期化された
        <see cref="T:C1.C1Preview.C1Hyperlink" />に設定して、 現在のコレクションに追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1Preview.C1LinkTarget)">
      <summary>現在の段落にハイパーリンクを追加します。</summary>
      <param name="text">ハイパーリンクを表す文字列。</param>
      <param name="target">このハイパーリンクのターゲット。</param>
      <returns>ハイパーリンクを表すために作成された ParagraphText オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphText" />を作成して、 指定したテキストを使って初期化します。そのオブジェクト上の
        <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" />を
        <paramref name="target" />を使って初期化された
        <see cref="T:C1.C1Preview.C1Hyperlink" />に設定して、 現在のコレクションに追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1Preview.C1LinkTarget,C1.C1Preview.Style)">
      <summary>現在の段落にハイパーリンクを追加します。</summary>
      <param name="text">ハイパーリンクを表す文字列。</param>
      <param name="target">このハイパーリンクのターゲット。</param>
      <param name="style">このハイパーリンクのレンダリングに使用するスタイル。</param>
      <returns>ハイパーリンクを表すために作成された ParagraphText オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphText" />を作成して、 指定したテキストとスタイルを使って初期化します。 そのオブジェクト上の
        <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" />を
        <paramref name="target" />を使って初期化された
        <see cref="T:C1.C1Preview.C1Hyperlink" />に設定して、 現在のコレクションに追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1Preview.RenderObject)">
      <summary>現在の段落にハイパーリンクを追加します。</summary>
      <param name="text">ハイパーリンクを表す文字列。</param>
      <param name="renderObject">このハイパーリンクのターゲットの RenderObject。</param>
      <returns>ハイパーリンクを表すために作成された ParagraphText オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphText" />を作成して、 指定したテキストを使って初期化します。そのオブジェクト上の
        <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" />を
        <paramref name="renderObject" />を使って初期化された
        <see cref="T:C1.C1Preview.C1Hyperlink" />に設定して、 現在のコレクションに追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.String,C1.C1Preview.ParagraphObject)">
      <summary>現在の段落にハイパーリンクを追加します。</summary>
      <param name="text">ハイパーリンクを表す文字列。</param>
      <param name="paragraphObject">このハイパーリンクのターゲットの ParagraphObject。</param>
      <returns>ハイパーリンクを表すために作成された ParagraphText オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphText" />を作成して、 指定したテキストを使って初期化します。そのオブジェクト上の
        <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" />を
        <paramref name="paragraphObject" />を使って初期化された
        <see cref="T:C1.C1Preview.C1Hyperlink" />に設定して、 現在のコレクションに追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,System.String)">
      <summary>現在の段落にハイパーリンクを追加します。</summary>
      <param name="image">ハイパーリンクを表す画像。</param>
      <param name="anchorName">このハイパーリンクのターゲットのアンカーの名前。</param>
      <returns>ハイパーリンクを表すために作成された ParagraphImage オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphImage" />を作成して、 指定した画像を使って初期化します。 そのオブジェクト上の
        <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" />を
        <paramref name="anchorName" />を使って初期化された
        <see cref="T:C1.C1Preview.C1Hyperlink" />に設定して、 現在のコレクションに追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,C1.C1Preview.C1LinkTarget)">
      <summary>現在の段落にハイパーリンクを追加します。</summary>
      <param name="image">ハイパーリンクを表す画像。</param>
      <param name="target">このハイパーリンクのターゲット。</param>
      <returns>ハイパーリンクを表すために作成された ParagraphImage オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphImage" />を作成して、 指定した画像を使って初期化します。 そのオブジェクト上の
        <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" />を
        <paramref name="target" />を使って初期化された
        <see cref="T:C1.C1Preview.C1Hyperlink" />に設定して、 現在のコレクションに追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,C1.C1Preview.RenderObject)">
      <summary>現在の段落にハイパーリンクを追加します。</summary>
      <param name="image">ハイパーリンクを表す画像。</param>
      <param name="renderObject">このハイパーリンクのターゲットの RenderObject。</param>
      <returns>ハイパーリンクを表すために作成された ParagraphImage オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphImage" />を作成して、 指定した画像を使って初期化します。 そのオブジェクト上の
        <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" />を
        <paramref name="renderObject" />を使って初期化された
        <see cref="T:C1.C1Preview.C1Hyperlink" />に設定して、 現在のコレクションに追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddHyperlink(System.Drawing.Image,C1.C1Preview.ParagraphObject)">
      <summary>現在の段落にハイパーリンクを追加します。</summary>
      <param name="image">ハイパーリンクを表す画像。</param>
      <param name="paragraphObject">このハイパーリンクのターゲットの ParagraphObject。</param>
      <returns>ハイパーリンクを表すために作成された ParagraphImage オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphImage" />を作成して、 指定した画像を使って初期化します。そのオブジェクト上の
        <see cref="P:C1.C1Preview.ParagraphObject.Hyperlink" />を
        <paramref name="paragraphObject" />を使って初期化された
        <see cref="T:C1.C1Preview.C1Hyperlink" />に設定して、 現在のコレクションに追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddImage(System.Drawing.Image)">
      <summary>インライン画像を現在の段落に追加します。</summary>
      <param name="image">段落に追加する画像。</param>
      <returns>画像を表すために作成された ParagraphImage オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphImage" />を作成し、 指定した画像で初期化して、現在のコレクションに 追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddImage(System.String)">
      <summary>インライン画像を現在の段落に追加します。</summary>
      <param name="imageName">段落に追加する画像の辞書名。</param>
      <returns>画像を表すために作成された ParagraphImage オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphImage" />を作成し、 指定した画像名で初期化して、現在のコレクションに 追加します。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ParagraphObjectCollection.AddImage(System.Drawing.Image,C1.C1Preview.Style)">
      <summary>インライン画像を現在の段落に追加します。</summary>
      <param name="image">段落に追加する画像。</param>
      <param name="style">画像のレンダリングに使用するスタイル。</param>
      <returns>画像を表すために作成された ParagraphImage オブジェクト。</returns>
      <remarks>
        このメソッドは、
        <see cref="T:C1.C1Preview.ParagraphImage" />を作成し、 指定した画像とスタイルで初期化して、現在のコレクションに 追加します。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.ParagraphObjectCollection.RenderParagraph">
      <summary>この ParagraphObject を含む RenderParagraph オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.ParagraphObjectCollection.Item(System.Int32)">
      <summary>コレクション内の指定されたインデックス位置にある ParagraphObject を示します。</summary>
      <param name="index">コレクションから取得する ParagraphObject のインデックス。</param>
      <returns>コレクション内の指定されたインデックス位置にある ParagraphObject。</returns>
    </member>
    <member name="T:C1.C1Preview.RenderRichText">
      <summary>RTF テキストをレンダリングする描画オブジェクトを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderRichText" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.#ctor(System.String,C1.C1Preview.Style)">
      <summary>
        指定した RTF 文字列とスタイルを使って、
        <see cref="T:C1.C1Preview.RenderRichText" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="rtf">
        <see cref="P:C1.C1Preview.RenderRichText.Rtf" />プロパティに割り当てられた
        <b>RTF</b>書式文字列。
      </param>
      <param name="style">
        使用する
        <see cref="T:C1.C1Preview.Style" />（
        <see cref="M:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)" />メソッドを使って、 指定したスタイルを現在のオブジェクトの
        <see cref="P:C1.C1Preview.RenderObject.Style" />にコピーします）。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.#ctor(System.String)">
      <summary>
        指定した RTF 文字列とスタイルを使って、
        <see cref="T:C1.C1Preview.RenderRichText" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="rtf">
        <see cref="P:C1.C1Preview.RenderRichText.Rtf" />プロパティに割り当てられた
        <b>RTF</b>書式文字列。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderRichText" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderRichText" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.GetDefaultFlags">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.GetDefaultSplitVertBehavior">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.GetDefaultWidth">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.SetWidth(C1.C1Preview.Unit)">
      <summary>これは内部使用専用です。</summary>
      <param name="value"></param>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderRichText" />の場合は、
        <see cref="T:C1.C1Preview.RenderRichText" />固有のプロパティもコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.Load(System.String)">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderRichText" />のコンテンツを
        <b>RTF</b>形式のデータを含む ディスクファイルからロードします。
      </summary>
      <param name="fileName">ロードするファイルの名前。</param>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.Load(System.String,System.Windows.Forms.RichTextBoxStreamType)">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderRichText" />のコンテンツを指定した形式のデータを含む ディスクファイルからロードします。
      </summary>
      <param name="fileName">ロードするファイルの名前。</param>
      <param name="streamType">ファイルのデータのタイプ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.Load(System.IO.Stream)">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderRichText" />のコンテンツを
        <b>RTF</b>形式のデータを含む ストリームからロードします。
      </summary>
      <param name="stream">データのロード元のストリーム。</param>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.Load(System.IO.Stream,System.Windows.Forms.RichTextBoxStreamType)">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderRichText" />のコンテンツを指定した形式のデータを含む ストリームからロードします。
      </summary>
      <param name="stream">データのロード元のストリーム。</param>
      <param name="streamType">ストリームのデータタイプ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderRichText.GetApproximateCountOfFragmentsToProcess">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="P:C1.C1Preview.RenderRichText.HasRtf">
      <summary>オブジェクトに RTF テキストがある場合は true を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderRichText.Rtf">
      <summary>RTF 形式のテキスト。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderRichText.DetectUrls">
      <summary>割り当てられた RTF テキストに URL が含まれる場合に、RenderRichText がその URL を自動的に書式設定するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderRichText.TextLength">
      <summary>
        <see cref="P:C1.C1Preview.RenderRichText.Rtf" />プロパティに割り当てられたテキストの「実際」の長さを取得します。 実際のテキスト文字のみが数えられ、
        <b>RTF</b>タグは数に含まれません。
      </summary>
    </member>
    <member name="T:C1.C1Preview.ShapeProps">
      <summary>図形の幾何学的プロパティを表すための抽象基本クラス。</summary>
    </member>
    <member name="M:C1.C1Preview.ShapeProps.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.ShapeProps" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.ShapeProps.AssignFrom(C1.C1Preview.ShapeProps)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.ShapeProps" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="T:C1.C1Preview.RenderShapeBase">
      <summary>図形をレンダリングする描画オブジェクトの抽象基本クラス。</summary>
      <seealso cref="T:C1.C1Preview.RenderLineBase" />
      <seealso cref="T:C1.C1Preview.RenderLine" />
      <seealso cref="T:C1.C1Preview.RenderPolygon" />
      <seealso cref="T:C1.C1Preview.RenderRectangle" />
      <seealso cref="T:C1.C1Preview.RenderEllipse" />
      <seealso cref="T:C1.C1Preview.RenderPie" />
      <seealso cref="T:C1.C1Preview.RenderArc" />
      <seealso cref="T:C1.C1Preview.RenderRoundRectangle" />
    </member>
    <member name="M:C1.C1Preview.RenderShapeBase.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderShapeBase" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderShapeBase.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderShapeBase" />の場合は、
        <see cref="T:C1.C1Preview.RenderShapeBase" />固有のプロパティもコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderShapeBase.DrawShape(System.Drawing.Graphics,System.Drawing.Rectangle,C1.C1Preview.RenderShapeBase.ShapeParams,C1.C1Preview.PageDrawParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="g"></param>
      <param name="drawBoundsPx"></param>
      <param name="shapeParams"></param>
    </member>
    <member name="P:C1.C1Preview.RenderShapeBase.Shape">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderShapeBase" />オブジェクトによって表される 幾何学的な形状を記述する
        <see cref="T:C1.C1Preview.ShapeProps" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.LinePropsBase">
      <summary>RenderLine オブジェクトと RenderPolygon オブジェクトのプロパティの抽象基本クラス。</summary>
    </member>
    <member name="M:C1.C1Preview.LinePropsBase.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.LinePropsBase" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.LinePropsBase.AssignFrom(C1.C1Preview.ShapeProps)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.ShapeProps" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="T:C1.C1Preview.RenderLineBase">
      <summary>すべての直線図形（RenderLine、RenderPolygon など）の抽象基本クラスを表します。</summary>
      <seealso cref="T:C1.C1Preview.RenderLine" />
      <seealso cref="T:C1.C1Preview.RenderPolygon" />
    </member>
    <member name="M:C1.C1Preview.RenderLineBase.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderLineBase" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderLineBase.DrawShape(System.Drawing.Graphics,System.Drawing.Rectangle,C1.C1Preview.RenderShapeBase.ShapeParams,C1.C1Preview.PageDrawParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="g"></param>
      <param name="drawBoundsPx"></param>
      <param name="shapeParams"></param>
    </member>
    <member name="P:C1.C1Preview.RenderLineBase.Line">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderLineBase" />オブジェクトによって表される幾何学的な線を記述する
        <see cref="T:C1.C1Preview.LinePropsBase" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.LineProps">
      <summary>RenderLine オブジェクトの幾何学的プロパティを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.LineProps.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.LineProps" />クラスの新しいインスタンスを初期化します。 この線が結合する各ポイントは、所属先の
        <see cref="T:C1.C1Preview.RenderLine" />オブジェクトの 左上隅と右下隅に設定されます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LineProps.X1">
      <summary>直線の始点のX座標。</summary>
    </member>
    <member name="P:C1.C1Preview.LineProps.Y1">
      <summary>直線の始点のY座標。</summary>
    </member>
    <member name="P:C1.C1Preview.LineProps.X2">
      <summary>直線の終点のX座標。</summary>
    </member>
    <member name="P:C1.C1Preview.LineProps.Y2">
      <summary>直線の終点のY座標。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderLine">
      <summary>直線をレンダリングする描画オブジェクトを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderLine.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderLine" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderLine.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
        線が結合する２つのポイントの座標を割り当てて、
        <see cref="T:C1.C1Preview.RenderLine" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="x1">
        線が結合する２つのポイントの第１の
        <b>X</b>座標。
      </param>
      <param name="y1">
        線が結合する２つのポイントの第１の
        <b>Y</b>座標。
      </param>
      <param name="x2">
        線が結合する２つのポイントの第２の
        <b>X</b>座標。
      </param>
      <param name="y2">
        線が結合する２つのポイントの第２の
        <b>Y</b>座標。
      </param>
      <param name="shapeLine"></param>
    </member>
    <member name="M:C1.C1Preview.RenderLine.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderLine" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderLine" />オブジェクト。
      </returns>
    </member>
    <member name="P:C1.C1Preview.RenderLine.Line">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderLine" />オブジェクトによって表される幾何学的な線を記述する
        <see cref="T:C1.C1Preview.LineProps" />オブジェクトを取得します。 線の座標は、現在の
        <see cref="T:C1.C1Preview.RenderLine" />オブジェクトの 左上隅に相対的です。
      </summary>
    </member>
    <member name="T:C1.C1Preview.PolygonProps">
      <summary>RenderPolygon オブジェクトの幾何学的プロパティを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.PolygonProps.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.PolygonProps" />クラスの新しいインスタンスを初期化します。
        <see cref="P:C1.C1Preview.PolygonProps.Points" />プロパティは
        <b>null</b>に設定されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.PolygonProps.AssignFrom(C1.C1Preview.ShapeProps)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.ShapeProps" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.PolygonProps.Points">
      <summary>折れ線を定義するポイント。</summary>
    </member>
    <member name="P:C1.C1Preview.PolygonProps.Closed">
      <summary>折れ線が閉じているか開いているかを示します。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderPolygon">
      <summary>多角形をレンダリングする描画オブジェクトを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderPolygon.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderPolygon" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderPolygon.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderPolygon" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderPolygon" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderPolygon.CreateProps">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="P:C1.C1Preview.RenderPolygon.Line">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderPolygon" />オブジェクトによって表される幾何学的な多角形を記述する
        <see cref="T:C1.C1Preview.PolygonProps" />オブジェクトを取得します。 ポイントの座標は、現在の
        <see cref="T:C1.C1Preview.RenderPolygon" />オブジェクトの 左上隅に相対的です。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RectangleProps">
      <summary>四角形ベースのすべての図形（四角形、楕円、円弧、扇形など）のプロパティの基本クラス。</summary>
    </member>
    <member name="M:C1.C1Preview.RectangleProps.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RectangleProps" />クラスの新しいインスタンスを初期化します。 矩形の位置とサイズは、所属先の
        <see cref="T:C1.C1Preview.RenderRectangle" />オブジェクトの 位置とサイズに設定されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RectangleProps.AssignFrom(C1.C1Preview.ShapeProps)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.ShapeProps" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.RectangleProps.X">
      <summary>
        現在の矩形の
        <b>X</b>座標を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleProps.Y">
      <summary>
        現在の矩形の
        <b>Y</b>座標を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleProps.Width">
      <summary>現在の矩形の幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RectangleProps.Height">
      <summary>現在の矩形の高さを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderRectangle">
      <summary>四角形をレンダリングする描画オブジェクトを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderRectangle" />クラスの新しいインスタンスを初期化します。 矩形の位置とサイズは、現在の
        <see cref="T:C1.C1Preview.RenderRectangle" />オブジェクトの位置とサイズに設定されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
        矩形の幅と高さを割り当てて、
        <see cref="T:C1.C1Preview.RenderRectangle" />クラスの 新しいインスタンスを初期化します。 矩形の位置は、現在の
        <see cref="T:C1.C1Preview.RenderRectangle" />の位置に設定されます。
      </summary>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
        矩形の幅と高さ、およびその描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />を割り当てて、
        <see cref="T:C1.C1Preview.RenderRectangle" />クラスの新しいインスタンスを初期化します。 矩形の位置は、現在の
        <see cref="T:C1.C1Preview.RenderRectangle" />の位置に設定されます。
      </summary>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="shapeLine">
        矩形の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
        矩形の幅と高さ、その描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、および塗りつぶし色を割り当てて、
        <see cref="T:C1.C1Preview.RenderRectangle" />クラスの新しいインスタンスを初期化します。 矩形の位置は、現在の
        <see cref="T:C1.C1Preview.RenderRectangle" />の位置に設定されます。
      </summary>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="shapeLine">
        矩形の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillColor">矩形の塗りつぶしに使用される色。</param>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
        矩形の幅と高さ、その描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、および塗りつぶしブラシを割り当てて、
        <see cref="T:C1.C1Preview.RenderRectangle" />クラスの新しいインスタンスを初期化します。 矩形の位置は、現在の
        <see cref="T:C1.C1Preview.RenderRectangle" />の位置に設定されます。
      </summary>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="shapeLine">
        矩形の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillBrush">矩形の塗りつぶしに使用されるブラシ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
        矩形の位置とサイズを割り当てて、
        <see cref="T:C1.C1Preview.RenderRectangle" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        現在のオブジェクトの位置に相対的な矩形の
        <b>X</b>座標。
      </param>
      <param name="y">
        現在のオブジェクトの位置に相対的な矩形の
        <b>Y</b>座標。
      </param>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
        矩形の位置とサイズ、およびその描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />を割り当てて、
        <see cref="T:C1.C1Preview.RenderRectangle" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        現在のオブジェクトの位置に相対的な矩形の
        <b>X</b>座標。
      </param>
      <param name="y">
        現在のオブジェクトの位置に相対的な矩形の
        <b>Y</b>座標。
      </param>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="shapeLine">
        矩形の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
        矩形の位置とサイズ、その描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、および塗りつぶし色を割り当てて、
        <see cref="T:C1.C1Preview.RenderRectangle" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        現在のオブジェクトの位置に相対的な矩形の
        <b>X</b>座標。
      </param>
      <param name="y">
        現在のオブジェクトの位置に相対的な矩形の
        <b>Y</b>座標。
      </param>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="shapeLine">
        矩形の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillColor">矩形の塗りつぶしに使用される色。</param>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
        矩形の位置とサイズ、その描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、および塗りつぶしブラシを割り当てて、
        <see cref="T:C1.C1Preview.RenderRectangle" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        現在のオブジェクトの位置に相対的な矩形の
        <b>X</b>座標。
      </param>
      <param name="y">
        現在のオブジェクトの位置に相対的な矩形の
        <b>Y</b>座標。
      </param>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="shapeLine">
        矩形の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillBrush">矩形の塗りつぶしに使用されるブラシ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderRectangle.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderRectangle" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderRectangle" />オブジェクト。
      </returns>
    </member>
    <member name="P:C1.C1Preview.RenderRectangle.Rectangle">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderRectangle" />オブジェクトによって表される 幾何学的な矩形を記述する
        <see cref="T:C1.C1Preview.RectangleProps" />オブジェクトを取得します。 矩形の座標は、現在の
        <see cref="T:C1.C1Preview.RenderRectangle" />オブジェクトの 左上隅に相対的です。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderEllipse">
      <summary>楕円をレンダリングする描画オブジェクトを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderEllipse" />クラスの新しいインスタンスを初期化します。 楕円の位置とサイズは現在の
        <see cref="T:C1.C1Preview.RenderEllipse" />オブジェクトの位置とサイズに設定されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
        楕円の幅と高さを割り当てて、
        <see cref="T:C1.C1Preview.RenderEllipse" />クラスの 新しいインスタンスを初期化します。 楕円の位置は、現在の
        <see cref="T:C1.C1Preview.RenderEllipse" />の位置に設定されます。
      </summary>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
        楕円の幅と高さ、およびその描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />を割り当てて、
        <see cref="T:C1.C1Preview.RenderEllipse" />クラスの新しいインスタンスを初期化します。 楕円の位置は、現在の
        <see cref="T:C1.C1Preview.RenderEllipse" />の位置に設定されます。
      </summary>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
      <param name="shapeLine">
        楕円の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
        楕円の幅と高さ、その描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、および塗りつぶし色を割り当てて、
        <see cref="T:C1.C1Preview.RenderEllipse" />クラスの新しいインスタンスを初期化します。 楕円の位置は、現在の
        <see cref="T:C1.C1Preview.RenderEllipse" />の位置に設定されます。
      </summary>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
      <param name="shapeLine">
        楕円の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillColor">塗りつぶし色。</param>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
        楕円の幅と高さ、その描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、および塗りつぶしブラシを割り当てて、
        <see cref="T:C1.C1Preview.RenderEllipse" />クラスの新しいインスタンスを初期化します。 楕円の位置は、現在の
        <see cref="T:C1.C1Preview.RenderEllipse" />の位置に設定されます。
      </summary>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
      <param name="shapeLine">
        楕円の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillBrush">塗りつぶしブラシ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
        楕円の位置とサイズを割り当てて、
        <see cref="T:C1.C1Preview.RenderEllipse" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        楕円の
        <b>X</b>座標。
      </param>
      <param name="y">
        楕円の
        <b>Y</b>座標。
      </param>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
        楕円の位置とサイズ、およびその描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />を割り当てて、
        <see cref="T:C1.C1Preview.RenderEllipse" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        楕円の
        <b>X</b>座標。
      </param>
      <param name="y">
        楕円の
        <b>Y</b>座標。
      </param>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
      <param name="shapeLine">
        楕円の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
        楕円の位置とサイズ、その描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、および塗りつぶし色を割り当てて、
        <see cref="T:C1.C1Preview.RenderEllipse" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        楕円の
        <b>X</b>座標。
      </param>
      <param name="y">
        楕円の
        <b>Y</b>座標。
      </param>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
      <param name="shapeLine">
        楕円の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillColor">塗りつぶし色。</param>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
        楕円の位置とサイズ、その描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、および塗りつぶしブラシを割り当てて、
        <see cref="T:C1.C1Preview.RenderEllipse" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        楕円の
        <b>X</b>座標。
      </param>
      <param name="y">
        楕円の
        <b>Y</b>座標。
      </param>
      <param name="width">楕円の幅。</param>
      <param name="height">楕円の高さ。</param>
      <param name="shapeLine">
        楕円の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillBrush">塗りつぶしブラシ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderEllipse.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderEllipse" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderEllipse" />オブジェクト。
      </returns>
    </member>
    <member name="P:C1.C1Preview.RenderEllipse.Ellipse">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderEllipse" />オブジェクトによって表される幾何学的な楕円を記述する
        <see cref="T:C1.C1Preview.RectangleProps" />オブジェクトを取得します。 楕円の座標は、現在の
        <see cref="T:C1.C1Preview.RenderEllipse" />オブジェクトの 左上隅に相対的です。
      </summary>
    </member>
    <member name="T:C1.C1Preview.EllipsePartProps">
      <summary>楕円の一部から成る図形（円弧または扇形）のプロパティを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.EllipsePartProps.#ctor">
      <summary>EllipsePartProps クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.EllipsePartProps.AssignFrom(C1.C1Preview.ShapeProps)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.ShapeProps" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.EllipsePartProps.StartAngle">
      <summary>扇形の最初の辺を x 軸から時計回りで測った角度。</summary>
    </member>
    <member name="P:C1.C1Preview.EllipsePartProps.SweepAngle">
      <summary>扇形の２番目の辺を startAngle パラメータから時計回りで測った角度。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderPie">
      <summary>楕円のウェッジをレンダリングする描画オブジェクトを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderPie.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderPie" />クラスの新しいインスタンスを初期化します。 扇形の開始角度は 0 に設定され、掃引角度は 360 度に設定されるため、 完全な楕円になります。 楕円の位置とサイズは現在の
        <see cref="T:C1.C1Preview.RenderPie" />オブジェクトの位置とサイズに設定されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderPie.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single)">
      <summary>
        扇形形状の幅、高さ、および開始／掃引角度を割り当てて、
        <see cref="T:C1.C1Preview.RenderPie" />クラスの新しいインスタンスを初期化します。 この形状の位置は、現在の
        <see cref="T:C1.C1Preview.RenderPie" />の位置に設定されます。
      </summary>
      <param name="width">扇形形状を含む楕円の幅。</param>
      <param name="height">扇形形状を含む楕円の高さ。</param>
      <param name="startAngle">
        <b>X</b>軸から扇形の円弧の開始点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="sweepAngle">
        <paramref name="startAngle" />から扇形の円弧の終了点まで、 時計回りに測定した角度（度単位）。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderPie.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef)">
      <summary>
        扇形形状の幅、高さ、開始／掃引角度、およびこの形状の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />を割り当てて、
        <see cref="T:C1.C1Preview.RenderPie" />クラスの 新しいインスタンスを初期化します。 この形状の位置は、現在の
        <see cref="T:C1.C1Preview.RenderPie" />の位置に設定されます。
      </summary>
      <param name="width">扇形形状を含む楕円の幅。</param>
      <param name="height">扇形形状を含む楕円の高さ。</param>
      <param name="startAngle">
        <b>X</b>軸から扇形の円弧の開始点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="sweepAngle">
        <paramref name="startAngle" />から扇形の円弧の終了点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="shapeLine">
        扇形形状の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderPie.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
        扇形形状の幅、高さ、開始／掃引角度、この形状の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、および塗りつぶし色を割り当てて、
        <see cref="T:C1.C1Preview.RenderPie" />クラスの新しいインスタンスを初期化します。 この形状の位置は、現在の
        <see cref="T:C1.C1Preview.RenderPie" />の位置に設定されます。
      </summary>
      <param name="width">扇形形状を含む楕円の幅。</param>
      <param name="height">扇形形状を含む楕円の高さ。</param>
      <param name="startAngle">
        <b>X</b>軸から扇形の円弧の開始点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="sweepAngle">
        <paramref name="startAngle" />から扇形の円弧の終了点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="shapeLine">
        扇形形状の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillColor">形状の塗りつぶし色</param>
    </member>
    <member name="M:C1.C1Preview.RenderPie.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
        扇形形状の幅、高さ、開始／掃引角度、この形状の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、および塗りつぶしブラシを割り当てて、
        <see cref="T:C1.C1Preview.RenderPie" />クラスの新しいインスタンスを初期化します。 この形状の位置は、現在の
        <see cref="T:C1.C1Preview.RenderPie" />の位置に設定されます。
      </summary>
      <param name="width">扇形形状を含む楕円の幅。</param>
      <param name="height">扇形形状を含む楕円の高さ。</param>
      <param name="startAngle">
        <b>X</b>軸から扇形の円弧の開始点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="sweepAngle">
        <paramref name="startAngle" />から扇形の円弧の終了点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="shapeLine">
        扇形形状の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillBrush">形状の塗りつぶしブラシ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderPie.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single)">
      <summary>
        扇形形状の位置、サイズ、および開始／掃引角度を割り当てて、
        <see cref="T:C1.C1Preview.RenderPie" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        扇形形状を含む楕円の
        <b>X</b>座標。
      </param>
      <param name="y">
        扇形形状を含む楕円の
        <b>Y</b>座標。
      </param>
      <param name="width">扇形形状を含む楕円の幅。</param>
      <param name="height">扇形形状を含む楕円の高さ。</param>
      <param name="startAngle">
        <b>X</b>軸から扇形の円弧の開始点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="sweepAngle">
        <paramref name="startAngle" />から扇形の円弧の終了点まで、 時計回りに測定した角度（度単位）。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderPie.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef)">
      <summary>
        扇形形状の位置、サイズ、開始／掃引角度、およびこの形状の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />を割り当てて、
        <see cref="T:C1.C1Preview.RenderPie" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        扇形形状を含む楕円の
        <b>X</b>座標。
      </param>
      <param name="y">
        扇形形状を含む楕円の
        <b>Y</b>座標。
      </param>
      <param name="width">扇形形状を含む楕円の幅。</param>
      <param name="height">扇形形状を含む楕円の高さ。</param>
      <param name="startAngle">
        <b>X</b>軸から扇形の円弧の開始点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="sweepAngle">
        <paramref name="startAngle" />から扇形の円弧の終了点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="shapeLine">
        扇形形状の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderPie.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
        扇形形状の位置、サイズ、開始／掃引角度、この形状の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、および塗りつぶし色を割り当てて、
        <see cref="T:C1.C1Preview.RenderPie" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        扇形形状を含む楕円の
        <b>X</b>座標。
      </param>
      <param name="y">
        扇形形状を含む楕円の
        <b>Y</b>座標。
      </param>
      <param name="width">扇形形状を含む楕円の幅。</param>
      <param name="height">扇形形状を含む楕円の高さ。</param>
      <param name="startAngle">
        <b>X</b>軸から扇形の円弧の開始点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="sweepAngle">
        <paramref name="startAngle" />から扇形の円弧の終了点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="shapeLine">
        扇形形状の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillColor">形状の塗りつぶし色</param>
    </member>
    <member name="M:C1.C1Preview.RenderPie.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
        扇形形状の位置、サイズ、開始／掃引角度、この形状の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、および塗りつぶしブラシを割り当てて、
        <see cref="T:C1.C1Preview.RenderPie" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        扇形形状を含む楕円の
        <b>X</b>座標。
      </param>
      <param name="y">
        扇形形状を含む楕円の
        <b>Y</b>座標。
      </param>
      <param name="width">扇形形状を含む楕円の幅。</param>
      <param name="height">扇形形状を含む楕円の高さ。</param>
      <param name="startAngle">
        <b>X</b>軸から扇形の円弧の開始点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="sweepAngle">
        <paramref name="startAngle" />から扇形の円弧の終了点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="shapeLine">
        扇形形状の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillBrush">形状の塗りつぶしブラシ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderPie.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderPie" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderPie" />オブジェクト。
      </returns>
    </member>
    <member name="P:C1.C1Preview.RenderPie.Pie">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderPie" />オブジェクトによって表される扇形形状を記述する
        <see cref="T:C1.C1Preview.EllipsePartProps" />オブジェクトを取得します。 扇形形状を含む楕円の座標は、現在の
        <see cref="T:C1.C1Preview.RenderPie" />オブジェクトの 左上隅に相対的です。
      </summary>
    </member>
    <member name="T:C1.C1Preview.ArcProps">
      <summary>
        円弧の幾何学的なプロパティを表します。
        <see cref="T:C1.C1Preview.RenderArc" />クラスで使用されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.ArcProps.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.ArcProps" />クラスの新しいインスタンスを初期化します。
        <see cref="P:C1.C1Preview.ArcProps.Closed" />は false に設定されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.ArcProps.AssignFrom(C1.C1Preview.ShapeProps)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.ShapeProps" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.ArcProps.Closed">
      <summary>現在の円弧が閉じられるかどうか（円弧の開始点と 終了点が直線で結合されるかどうか）を示す値を 取得または設定します。</summary>
      <remarks>
        このプロパティのデフォルト値は
        <b>false</b>です。
      </remarks>
    </member>
    <member name="T:C1.C1Preview.RenderArc">
      <summary>楕円のウェッジをレンダリングする描画オブジェクトを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderArc.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderArc" />クラスの新しいインスタンスを初期化します。 円弧の開始角度は 0 に設定され、掃引角度は 360 度に設定されるため、 完全な楕円になります。 円弧の位置とサイズは現在の
        <see cref="T:C1.C1Preview.RenderArc" />オブジェクトの位置とサイズに設定されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderArc.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single)">
      <summary>
        円弧の幅、高さ、および開始／掃引角度を割り当てて、
        <see cref="T:C1.C1Preview.RenderArc" />クラスの 新しいインスタンスを初期化します。 円弧の楕円の位置は、現在の
        <see cref="T:C1.C1Preview.RenderPie" />の位置に設定されます。
      </summary>
      <param name="width">円弧を含む楕円の幅。</param>
      <param name="height">円弧を含む楕円の高さ。</param>
      <param name="startAngle">
        <b>X</b>軸から円弧の開始点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="sweepAngle">
        <paramref name="startAngle" />から円弧の終了点まで、 時計回りに測定した角度（度単位）。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderArc.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef)">
      <summary>
        円弧の幅、高さ、サイズ、開始／掃引角度、および円弧の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />を割り当てて、
        <see cref="T:C1.C1Preview.RenderArc" />クラスの 新しいインスタンスを初期化します。 円弧の楕円の位置は、現在の
        <see cref="T:C1.C1Preview.RenderPie" />の位置に設定されます。
      </summary>
      <param name="width">円弧を含む楕円の幅。</param>
      <param name="height">円弧を含む楕円の高さ。</param>
      <param name="startAngle">
        <b>X</b>軸から円弧の開始点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="sweepAngle">
        <paramref name="startAngle" />から円弧の終了点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="shapeLine">
        円弧の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderArc.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
        円弧の幅、高さ、開始／掃引角度、円弧の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、 円弧によって形成されるセグメントの塗りつぶしに使用されるブラシ、 および各端点を結合する線を割り当てて、
        <see cref="T:C1.C1Preview.RenderArc" />クラスの 新しいインスタンスを初期化します。 円弧の楕円の位置は、現在の
        <see cref="T:C1.C1Preview.RenderPie" />の位置に設定されます。
      </summary>
      <param name="width">円弧を含む楕円の幅。</param>
      <param name="height">円弧を含む楕円の高さ。</param>
      <param name="startAngle">
        <b>X</b>軸から円弧の開始点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="sweepAngle">
        <paramref name="startAngle" />から円弧の終了点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="shapeLine">
        円弧の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillColor">塗りつぶし色。</param>
    </member>
    <member name="M:C1.C1Preview.RenderArc.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
        円弧の幅、高さ、開始／掃引角度、円弧の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、 円弧によって形成されるセグメントの塗りつぶしに使用されるブラシ、 および各端点を結合する線を割り当てて、
        <see cref="T:C1.C1Preview.RenderArc" />クラスの 新しいインスタンスを初期化します。 円弧の楕円の位置は、現在の
        <see cref="T:C1.C1Preview.RenderPie" />の位置に設定されます。
      </summary>
      <param name="width">円弧を含む楕円の幅。</param>
      <param name="height">円弧を含む楕円の高さ。</param>
      <param name="startAngle">
        <b>X</b>軸から円弧の開始点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="sweepAngle">
        <paramref name="startAngle" />から円弧の終了点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="shapeLine">
        円弧の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillBrush">塗りつぶしブラシ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderArc.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single)">
      <summary>
        円弧の位置、サイズ、開始／掃引角度を割り当てて、
        <see cref="T:C1.C1Preview.RenderArc" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        円弧を含む楕円の
        <b>X</b>座標。
      </param>
      <param name="y">
        円弧を含む楕円の
        <b>Y</b>座標。
      </param>
      <param name="width">円弧を含む楕円の幅。</param>
      <param name="height">円弧を含む楕円の高さ。</param>
      <param name="startAngle">
        <b>X</b>軸から円弧の開始点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="sweepAngle">
        <paramref name="startAngle" />から円弧の終了点まで、 時計回りに測定した角度（度単位）。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderArc.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef)">
      <summary>
        円弧の位置、サイズ、開始／掃引角度、および円弧の描画に使用する
        <see cref="T:C1.C1Preview.LineDef" />を割り当てて、
        <see cref="T:C1.C1Preview.RenderArc" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        円弧を含む楕円の
        <b>X</b>座標。
      </param>
      <param name="y">
        円弧を含む楕円の
        <b>Y</b>座標。
      </param>
      <param name="width">円弧を含む楕円の幅。</param>
      <param name="height">円弧を含む楕円の高さ。</param>
      <param name="startAngle">
        <b>X</b>軸から円弧の開始点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="sweepAngle">
        <paramref name="startAngle" />から円弧の終了点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="shapeLine">
        円弧の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderArc.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
        円弧の位置、サイズ、開始／掃引角度、円弧の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、円弧によって形成されるセグメントの塗りつぶしに使用される色、 および各端点を結合する線を割り当てて、
        <see cref="T:C1.C1Preview.RenderArc" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        円弧を含む楕円の
        <b>X</b>座標。
      </param>
      <param name="y">
        円弧を含む楕円の
        <b>Y</b>座標。
      </param>
      <param name="width">円弧を含む楕円の幅。</param>
      <param name="height">円弧を含む楕円の高さ。</param>
      <param name="startAngle">
        <b>X</b>軸から円弧の開始点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="sweepAngle">
        <paramref name="startAngle" />から円弧の終了点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="shapeLine">
        円弧の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillColor">塗りつぶし色。</param>
    </member>
    <member name="M:C1.C1Preview.RenderArc.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,System.Single,System.Single,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
        円弧の位置、サイズ、開始／掃引角度、円弧の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、円弧によって形成されるセグメントの 塗りつぶしに使用されるブラシ、および各端点を結合する線を割り当てて、
        <see cref="T:C1.C1Preview.RenderArc" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        円弧を含む楕円の
        <b>X</b>座標。
      </param>
      <param name="y">
        円弧を含む楕円の
        <b>Y</b>座標。
      </param>
      <param name="width">円弧を含む楕円の幅。</param>
      <param name="height">円弧を含む楕円の高さ。</param>
      <param name="startAngle">
        <b>X</b>軸から円弧の開始点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="sweepAngle">
        <paramref name="startAngle" />から円弧の終了点まで、 時計回りに測定した角度（度単位）。
      </param>
      <param name="shapeLine">
        円弧の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillBrush">塗りつぶしブラシ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderArc.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />オブジェクト。
      </returns>
    </member>
    <member name="P:C1.C1Preview.RenderArc.Arc">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderArc" />オブジェクトによって表される円弧を記述する
        <see cref="T:C1.C1Preview.EllipsePartProps" />オブジェクトを取得します。 円弧を含む楕円の座標は、現在の
        <see cref="T:C1.C1Preview.RenderArc" />オブジェクトの 左上隅に相対的です。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RoundRectangleProps">
      <summary>RenderRoundRectanlge オブジェクトのプロパティを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RoundRectangleProps.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RoundRectangleProps" />クラスの新しいインスタンスを初期化します。 矩形の位置とサイズは、所属先の
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />オブジェクトの 位置とサイズに設定されます。 丸みのある角の描画に使用される楕円のディメンションは、 対応する矩形のサイズの
        <b>5%</b>に設定されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RoundRectangleProps.ShouldSerializeEllipseWidth">
      <summary>
        <see cref="P:C1.C1Preview.RoundRectangleProps.EllipseWidth" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.RoundRectangleProps.EllipseWidth" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RoundRectangleProps.ShouldSerializeEllipseHeight">
      <summary>
        <see cref="P:C1.C1Preview.RoundRectangleProps.EllipseHeight" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.RoundRectangleProps.EllipseHeight" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RoundRectangleProps.AssignFrom(C1.C1Preview.ShapeProps)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.ShapeProps" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.RoundRectangleProps.EllipseWidth">
      <summary>
        矩形の丸みのある角の描画に使用される楕円の幅を取得または設定します。 このプロパティのデフォルト値は、矩形の
        <b>5%</b>として計算されます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RoundRectangleProps.EllipseHeight">
      <summary>
        矩形の丸みのある角の描画に使用される楕円の高さを取得または設定します。 このプロパティのデフォルト値は、矩形の
        <b>5%</b>として計算されます。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderRoundRectangle">
      <summary>角丸四角形をレンダリングする描画オブジェクトを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />クラスの新しいインスタンスを初期化します。 矩形の位置とサイズは、現在の
        <see cref="T:C1.C1Preview.RenderRectangle" />オブジェクトの位置とサイズに設定されます。 丸みのある角の描画に使用される楕円のディメンションは、対応する 矩形のサイズの
        <b>5%</b>に設定されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
        矩形の幅と高さを割り当てて、
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />クラスの 新しいインスタンスを初期化します。 矩形の位置は、現在の
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />の位置に設定されます。 丸みのある角の描画に使用される楕円のディメンションは、 対応する矩形のサイズの
        <b>5%</b>に設定されます。
      </summary>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
        矩形の幅と高さ、およびその描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />を割り当てて、
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />クラスの新しいインスタンスを初期化します。 矩形の位置は、現在の
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />の位置に設定されます。 丸みのある角の描画に使用される楕円のディメンションは、 対応する矩形のサイズの
        <b>5%</b>に設定されます。
      </summary>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="shapeLine">
        矩形の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
        矩形の幅と高さ、その描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、および塗りつぶし色を割り当てて、
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />クラスの新しいインスタンスを初期化します。 矩形の位置は、現在の
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />の位置に設定されます。 丸みのある角の描画に使用される楕円のディメンションは、 対応する矩形のサイズの
        <b>5%</b>に設定されます。
      </summary>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="shapeLine">
        矩形の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillColor">矩形の塗りつぶしに使用される色。</param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
        矩形の幅と高さ、その描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、および塗りつぶしブラシを割り当てて、
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />クラスの新しいインスタンスを初期化します。 矩形の位置は、現在の
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />の位置に設定されます。 丸みのある角の描画に使用される楕円のディメンションは、 対応する矩形のサイズの
        <b>5%</b>に設定されます。
      </summary>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="shapeLine">
        矩形の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillBrush">矩形の塗りつぶしに使用されるブラシ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
        矩形の位置とサイズを割り当てて、
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />クラスの 新しいインスタンスを初期化します。 丸みのある角の描画に使用される楕円のディメンションは、 対応する矩形のサイズの
        <b>5%</b>に設定されます。
      </summary>
      <param name="x">
        現在のオブジェクトの位置に相対的な矩形の
        <b>X</b>座標。
      </param>
      <param name="y">
        現在のオブジェクトの位置に相対的な矩形の
        <b>Y</b>座標。
      </param>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef)">
      <summary>
        矩形の位置とサイズ、およびその描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />を割り当てて、
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />クラスの新しいインスタンスを初期化します。 丸みのある角の描画に使用される楕円のディメンションは、 対応する矩形のサイズの
        <b>5%</b>に設定されます。
      </summary>
      <param name="x">
        現在のオブジェクトの位置に相対的な矩形の
        <b>X</b>座標。
      </param>
      <param name="y">
        現在のオブジェクトの位置に相対的な矩形の
        <b>Y</b>座標。
      </param>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="shapeLine">
        矩形の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
        矩形の位置とサイズ、その描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、および塗りつぶし色を割り当てて、
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />クラスの新しいインスタンスを初期化します。 丸みのある角の描画に使用される楕円のディメンションは、 対応する矩形のサイズの
        <b>5%</b>に設定されます。
      </summary>
      <param name="x">
        現在のオブジェクトの位置に相対的な矩形の
        <b>X</b>座標。
      </param>
      <param name="y">
        現在のオブジェクトの位置に相対的な矩形の
        <b>Y</b>座標。
      </param>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="shapeLine">
        矩形の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillColor">矩形の塗りつぶしに使用される色。</param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
        矩形の位置とサイズ、その描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、および塗りつぶしブラシを割り当てて、
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />クラスの新しいインスタンスを初期化します。 丸みのある角の描画に使用される楕円のディメンションは、 対応する矩形のサイズの
        <b>5%</b>に設定されます。
      </summary>
      <param name="x">
        現在のオブジェクトの位置に相対的な矩形の
        <b>X</b>座標。
      </param>
      <param name="y">
        現在のオブジェクトの位置に相対的な矩形の
        <b>Y</b>座標。
      </param>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="shapeLine">
        矩形の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillBrush">矩形の塗りつぶしに使用されるブラシ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Color)">
      <summary>
        矩形の位置、サイズ、丸み、その描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、および塗りつぶし色を割り当てて、
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        現在のオブジェクトの位置に相対的な矩形の
        <b>X</b>座標。
      </param>
      <param name="y">
        現在のオブジェクトの位置に相対的な矩形の
        <b>Y</b>座標。
      </param>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="ellipseWidth">
        丸みのある角の描画に使用される楕円の幅（
        <b>「5%width」</b>など）。
      </param>
      <param name="ellipseHeight">
        丸みのある角の描画に使用される楕円の高さ（
        <b>「5%height」</b>など）。
      </param>
      <param name="shapeLine">
        矩形の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillColor">矩形の塗りつぶしに使用される色。</param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.Unit,C1.C1Preview.LineDef,System.Drawing.Brush)">
      <summary>
        矩形の位置、サイズ、丸み、その描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />、および塗りつぶしブラシを割り当てて、
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        現在のオブジェクトの位置に相対的な矩形の
        <b>X</b>座標。
      </param>
      <param name="y">
        現在のオブジェクトの位置に相対的な矩形の
        <b>Y</b>座標。
      </param>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
      <param name="ellipseWidth">
        丸みのある角の描画に使用される楕円の幅（
        <b>「5%width」</b>など）。
      </param>
      <param name="ellipseHeight">
        丸みのある角の描画に使用される楕円の高さ（
        <b>「5%height」</b>など）。
      </param>
      <param name="shapeLine">
        矩形の描画に使用される
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <param name="shapeFillBrush">矩形の塗りつぶしに使用されるブラシ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderRoundRectangle.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />オブジェクト。
      </returns>
    </member>
    <member name="P:C1.C1Preview.RenderRoundRectangle.RoundRectangle">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />オブジェクトによって表される 幾何学的な矩形を記述する
        <see cref="T:C1.C1Preview.RoundRectangleProps" />オブジェクトを取得します。 矩形の座標は、現在の
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />オブジェクトの 左上隅に相対的です。
      </summary>
    </member>
    <member name="T:C1.C1Preview.ThreeStateEnum">
      <summary>３つのいずれかの状態（未定義、true、false）で値を定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.ThreeStateEnum.Undefined">
      <summary>値は未定義です。</summary>
    </member>
    <member name="F:C1.C1Preview.ThreeStateEnum.True">
      <summary>値は true です。</summary>
    </member>
    <member name="F:C1.C1Preview.ThreeStateEnum.False">
      <summary>値は false です。</summary>
    </member>
    <member name="T:C1.C1Preview.TableSizingModeEnum">
      <summary>行／列のサイズ（行の高さ、列の幅）を計算する方法を定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.TableSizingModeEnum.Default">
      <summary>行のデフォルトは Auto、列のデフォルトは Fixed です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableSizingModeEnum.Fixed">
      <summary>サイズは明示的に指定されます。サイズを省略すると、使用可能なスペースと行／列の数によってサイズが決定されます。</summary>
    </member>
    <member name="F:C1.C1Preview.TableSizingModeEnum.Auto">
      <summary>サイズはコンテンツのサイズに合わせて自動的に計算されます。</summary>
    </member>
    <member name="T:C1.C1Preview.CellSplitBehaviorEnum">
      <summary>セルのコンテンツを分割する場合のさまざまなオプションを定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.CellSplitBehaviorEnum.Split">
      <summary>セルのコンテンツが分割されます。</summary>
    </member>
    <member name="F:C1.C1Preview.CellSplitBehaviorEnum.Copy">
      <summary>セルのコンテンツが分割されるたびにコピーされます。</summary>
    </member>
    <member name="F:C1.C1Preview.CellSplitBehaviorEnum.Cut">
      <summary>初回にセルのコンテンツが切り取られ、一度だけ表示されます。</summary>
    </member>
    <member name="T:C1.C1Preview.PageBreakBehaviorEnum">
      <summary>行／列の前に改ページを挿入する方法を定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.PageBreakBehaviorEnum.Default">
      <summary>必要に応じて改ページが挿入されます。</summary>
    </member>
    <member name="F:C1.C1Preview.PageBreakBehaviorEnum.MustBreak">
      <summary>必ず改ページが挿入されます。</summary>
    </member>
    <member name="F:C1.C1Preview.PageBreakBehaviorEnum.PreferredBreak">
      <summary>必要な場所に改ページが挿入されます。</summary>
    </member>
    <member name="F:C1.C1Preview.PageBreakBehaviorEnum.NoBreak">
      <summary>改ページは挿入されません。</summary>
    </member>
    <member name="T:C1.C1Preview.TableVector">
      <summary>テーブルの行または列を表すための抽象基本クラス。</summary>
      <seealso cref="T:C1.C1Preview.TableRow" />
      <seealso cref="T:C1.C1Preview.TableCol" />
    </member>
    <member name="M:C1.C1Preview.TableVector.ShouldSerializeSize">
      <summary>
        <see cref="P:C1.C1Preview.TableVector.Size" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.TableVector.Size" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.TableVector.ShouldSerializeStyle">
      <summary>
        <see cref="P:C1.C1Preview.TableVector.Style" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.TableVector.Style" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.TableVector.ShouldSerializeCellStyle">
      <summary>
        <see cref="P:C1.C1Preview.TableVector.CellStyle" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.TableVector.CellStyle" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.TableVector.AssignFrom(C1.C1Preview.TableVector)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.TableVector.Owner">
      <summary>このオブジェクトを含む TableVectorCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.Table">
      <summary>この行／列を含む RenderTable オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.Ordinal">
      <summary>行／列のインデックスを取得します。</summary>
      <remarks>
        <see cref="T:C1.C1Preview.C1PrintDocument" />テーブルでは、要素（セル、行、および列）は、 データを含む場合にのみ、またはそのスタイルがデフォルトと異なる場合に物理的に作成されます。 したがって、所属先の
        <see cref="T:C1.C1Preview.TableVectorCollection" />（ベクターの
        <see cref="P:C1.C1Preview.TableVector.Owner" />プロパティからアクセス可能）内の
        <see cref="T:C1.C1Preview.TableVector" />オブジェクト（行または列）の物理的な位置は、テーブル内のその行または列の 論理インデックスと同じではありません。
        <b>Ordinal</b>プロパティによって、その論理位置を取得できます。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.TableVector.Size">
      <summary>行／列のサイズ（行の高さ、列の幅）を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.PageBreakBehavior">
      <summary>この行／列の前に改ページを挿入する方法を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.SplitBehavior">
      <summary>現在のベクターの高さ（行の場合）または幅（列の場合）が大き過ぎるときに、 現在のページで利用可能な縦横の幅に収めるためにどのように処理するかを示す値を 取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.CanSplit">
      <summary>行／列を分割できるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.Visible">
      <summary>テーブル行／列を表示するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.Style">
      <summary>行／列のスタイルを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.CellStyle">
      <summary>行／列のセルスタイルを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVector.SizingMode">
      <summary>現在の行／列のサイズの計算する方法を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.StretchRowEnum">
      <summary>行の引き伸ばし方法を定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.StretchRowEnum.Default">
      <summary>行の引き伸ばし方法は RenderTable.StretchRows プロパティに依存します。</summary>
    </member>
    <member name="F:C1.C1Preview.StretchRowEnum.Yes">
      <summary>行が引き伸ばされます。</summary>
    </member>
    <member name="F:C1.C1Preview.StretchRowEnum.No">
      <summary>行は引き伸ばされません。</summary>
    </member>
    <member name="F:C1.C1Preview.StretchRowEnum.IfLastOnPage">
      <summary>行がページの最後にある場合に引き伸ばされます。</summary>
    </member>
    <member name="T:C1.C1Preview.TableRow">
      <summary>テーブルの行を表します。</summary>
      <seealso cref="T:C1.C1Preview.TableCol" />
      <seealso cref="T:C1.C1Preview.TableCell" />
    </member>
    <member name="M:C1.C1Preview.TableRow.AssignFrom(C1.C1Preview.TableVector)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.TableVector" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.TableRow.Owner">
      <summary>このオブジェクトを含む TableRowCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableRow.Height">
      <summary>行の高さを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableRow.Stretch">
      <summary>行の引き伸ばし方法を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableRow.Item(System.Int32)">
      <summary>列のインデックスを指定して TableCell オブジェクトを取得します。</summary>
      <param name="col">列のインデックス。</param>
      <returns>指定したインデックスのセル。</returns>
    </member>
    <member name="T:C1.C1Preview.StretchColumnEnum">
      <summary>列の引き伸ばし方法を定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.StretchColumnEnum.Default">
      <summary>列の引き伸ばし方法は RenderTable.Stretch プロパティに依存します。</summary>
    </member>
    <member name="F:C1.C1Preview.StretchColumnEnum.Yes">
      <summary>列が引き伸ばされます。</summary>
    </member>
    <member name="F:C1.C1Preview.StretchColumnEnum.No">
      <summary>列は引き伸ばされません。</summary>
    </member>
    <member name="F:C1.C1Preview.StretchColumnEnum.IfLastOnPage">
      <summary>列がページの最後にある場合に引き伸ばされます。</summary>
    </member>
    <member name="T:C1.C1Preview.TableCol">
      <summary>テーブルの列を表します。</summary>
      <seealso cref="T:C1.C1Preview.TableRow" />
      <seealso cref="T:C1.C1Preview.TableCell" />
    </member>
    <member name="M:C1.C1Preview.TableCol.AssignFrom(C1.C1Preview.TableVector)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.TableVector" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.TableCol.Owner">
      <summary>このオブジェクトを含む TableColCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableCol.Width">
      <summary>列の幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableCol.Stretch">
      <summary>列の引き伸ばし方法を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableCol.Item(System.Int32)">
      <summary>行のインデックスを指定して TableCell オブジェクトを取得します。</summary>
      <param name="row">行のインデックス。</param>
      <returns>指定したインデックスのセル。</returns>
    </member>
    <member name="T:C1.C1Preview.TableVectorCollection">
      <summary>
        <see cref="T:C1.C1Preview.TableVector" />オブジェクトのコレクションを表します。
      </summary>
      <seealso cref="T:C1.C1Preview.TableRowCollection" />
      <seealso cref="T:C1.C1Preview.TableColCollection" />
      <seealso cref="T:C1.C1Preview.RenderTable" />
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.GetVectorSize(System.Int32)">
      <summary>
        <see cref="T:C1.C1Preview.RenderTable" />内のインデックスで識別された
        <see cref="T:C1.C1Preview.TableVector" />（行または列）のサイズ（行の高さ、列の幅）を返します。 このメソッドは指定したベクターを、初期化されていない場合は作成しません （詳細は
        <b>解説</b>を参照）。
      </summary>
      <param name="index">
        行または列の０から始まるインデックス（
        <see cref="P:C1.C1Preview.TableVector.Ordinal" />）。
      </param>
      <returns>行または列の高さまたは幅。</returns>
      <remarks>
        <para>
          <see cref="T:C1.C1Preview.RenderTable" />コレクションの要素（セル、行、および列）は、 コレクションのインデクサプロパティからアクセスされた場合にのみ、 「要求時に」物理的に作成されます。行／列の高さ／幅を作成せずにテストのみを行う必要がある場合は、 このメソッドを使用するほうがより効果的です。
        </para>
        <para>
          たとえば、以下のコードは
          <see cref="T:C1.C1Preview.TableRow" />オブジェクトの 高さをテストする前にそれを物理的に作成します。
        </para>
        <code>
          <![CDATA[
          RenderTable rt = new RenderTable();
          if (rt.Rows[10].Height == Unit.Auto)
            doSomething();
          ]]>
        </code>
        これに対して、以下のコードは上記のコードと機能的に同じですが、 物理的な行オブジェクトは作成しません。
        <code>
          <![CDATA[
          RenderTable rt = new RenderTable();
          if (rt.Rows.GetVectorSize(10) == Unit.Auto)
            doSomething();
          ]]>
        </code>
      </remarks>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.GetVectorCanSplit(System.Int32)">
      <summary>
        <see cref="T:C1.C1Preview.RenderTable" />内のインデックスによって識別された
        <see cref="T:C1.C1Preview.TableVector" />（行または列）の
        <see cref="P:C1.C1Preview.TableVector.CanSplit" />プロパティの値を返します。 このメソッドは指定したベクターを、まだ初期化されていない場合は作成しません （詳細は
        <see cref="M:C1.C1Preview.TableVectorCollection.GetVectorSize(System.Int32)" />の
        <b>解説</b>を参照）。
      </summary>
      <param name="index">
        行または列の０から始まるインデックス（
        <see cref="P:C1.C1Preview.TableVector.Ordinal" />）。
      </param>
      <returns>
        指定したベクターの
        <see cref="P:C1.C1Preview.TableVector.CanSplit" />プロパティの値。 ベクターが初期化されていない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.GetVectorVisible(System.Int32)">
      <summary>
        <see cref="T:C1.C1Preview.RenderTable" />内のインデックスによって識別された
        <see cref="T:C1.C1Preview.TableVector" />（行または列）の
        <see cref="P:C1.C1Preview.TableVector.Visible" />プロパティの値を返します。 このメソッドは指定したベクターを、まだ初期化されていない場合は作成しません （詳細は
        <see cref="M:C1.C1Preview.TableVectorCollection.GetVectorSize(System.Int32)" />の
        <b>解説</b>を参照）。
      </summary>
      <param name="index">
        行または列の０から始まるインデックス（
        <see cref="P:C1.C1Preview.TableVector.Ordinal" />）。
      </param>
      <returns>
        指定したベクターの
        <see cref="P:C1.C1Preview.TableVector.Visible" />プロパティの値。 ベクターが初期化されていない場合は
        <b>true</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.GetVectorPageBreakBehavior(System.Int32)">
      <summary>
        <see cref="T:C1.C1Preview.RenderTable" />内のインデックスによって識別された
        <see cref="T:C1.C1Preview.TableVector" />（行または列）の
        <see cref="P:C1.C1Preview.TableVector.PageBreakBehavior" />プロパティの値を返します。 このメソッドは指定したベクターを、まだ初期化されていない場合は作成しません （詳細は
        <see cref="M:C1.C1Preview.TableVectorCollection.GetVectorSize(System.Int32)" />の
        <b>解説</b>を参照）。
      </summary>
      <param name="index">
        行または列の０から始まるインデックス（
        <see cref="P:C1.C1Preview.TableVector.Ordinal" />）。
      </param>
      <returns>
        指定したベクターの
        <see cref="P:C1.C1Preview.TableVector.PageBreakBehavior" />プロパティの値。 ベクターが初期化されていない場合は
        <see cref="F:C1.C1Preview.PageBreakBehaviorEnum.Default" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.GetVectorSizingMode(System.Int32)">
      <summary>
        <see cref="T:C1.C1Preview.RenderTable" />内のインデックスで識別された
        <see cref="T:C1.C1Preview.TableVector" />（行または列）の有効な
        <see cref="T:C1.C1Preview.TableSizingModeEnum" />を返します。 このメソッドは指定したベクターを、まだ初期化されていない場合は作成しません （詳細は
        <see cref="M:C1.C1Preview.TableVectorCollection.GetVectorSize(System.Int32)" />の
        <b>解説</b>を参照）。
      </summary>
      <param name="index">
        行または列の０から始まるインデックス（
        <see cref="P:C1.C1Preview.TableVector.Ordinal" />）。
      </param>
      <returns>指定したベクター（行または列）の有効なサイズ変更モード。</returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.Insert(System.Int32,System.Int32)">
      <summary>指定された位置に行／列を挿入します。</summary>
      <param name="position">挿入する位置。</param>
      <param name="count">挿入する行／列の数。</param>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.Delete(System.Int32,System.Int32)">
      <summary>指定された位置の行／列を削除します。</summary>
      <param name="position">削除する最初の行／列のインデックス。</param>
      <param name="count">削除する行／列の数。</param>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.Delete(System.Int32)">
      <summary>指定された位置の行／列を削除します。</summary>
      <param name="position">削除する行／列のインデックス。</param>
    </member>
    <member name="M:C1.C1Preview.TableVectorCollection.Insert(System.Int32)">
      <summary>指定された位置に行／列を挿入します。</summary>
      <param name="position">挿入する位置。</param>
    </member>
    <member name="P:C1.C1Preview.TableVectorCollection.Owner">
      <summary>このオブジェクトを含む RenderTable オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorCollection.Groups">
      <summary>この行／列コレクションに対応する TableVectorGroupCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorCollection.Count">
      <summary>行／列の数を取得または設定します。</summary>
      <remarks>
        <para>このプロパティを -1 に設定すると、行／列の数は自動的に計算されます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.TableVectorCollection.VectorCount">
      <summary>行／列の実存する数を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.TableRowCollection">
      <summary>
        <see cref="T:C1.C1Preview.TableRow" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.TableRowCollection.FindRow(System.Int32)">
      <summary>インデックスを指定して行を検索します。</summary>
      <param name="index">所属先のテーブル内の行の０から始まるインデックス。</param>
      <returns>検索された行または null を返します。</returns>
      <remarks>
        物理的に、
        <see cref="T:C1.C1Preview.RenderTable" />の行は、
        <see cref="P:C1.C1Preview.RenderTable.Rows" />コレクション上の インデクサプロパティを使ってアクセスされるときに作成されます。 このメソッドを使って、物理的な
        <see cref="T:C1.C1Preview.TableRow" />オブジェクトが 特定の行インデックスに存在するかどうかをテストできます。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.TableRowCollection.Groups">
      <summary>この行コレクションに対応する TableVectorGroupCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableRowCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>
        テーブル内の指定したインデックスの
        <see cref="T:C1.C1Preview.TableRow" />。
      </returns>
    </member>
    <member name="T:C1.C1Preview.TableColCollection">
      <summary>
        <see cref="T:C1.C1Preview.TableCol" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.TableColCollection.FindCol(System.Int32)">
      <summary>インデックスを指定して列を検索します。</summary>
      <param name="index">所属先のテーブル内の列の０から始まるインデックス。</param>
      <returns>検索された列または null を返します。</returns>
      <remarks>
        物理的に、
        <see cref="T:C1.C1Preview.RenderTable" />内の列は、
        <see cref="P:C1.C1Preview.RenderTable.Cols" />コレクション上の インデクサプロパティを使ってアクセスされるときに作成されます。 このメソッドを使って、特定の列インデックスの物理的な
        <see cref="T:C1.C1Preview.TableCol" />オブジェクトが存在するかどうかをテストできます。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.TableColCollection.Groups">
      <summary>この列コレクションに対応する TableVectorGroupCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableColCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>
        テーブル内の指定したインデックスの
        <see cref="T:C1.C1Preview.TableCol" />。
      </returns>
    </member>
    <member name="T:C1.C1Preview.TableCell">
      <summary>テーブルのセルを表します。</summary>
      <seealso cref="T:C1.C1Preview.TableRow" />
      <seealso cref="T:C1.C1Preview.TableCol" />
    </member>
    <member name="M:C1.C1Preview.TableCell.ShouldSerializeStyle">
      <summary>
        <see cref="P:C1.C1Preview.TableCell.Style" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.TableCell.Style" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.TableCell.ShouldSerializeCellStyle">
      <summary>
        <see cref="P:C1.C1Preview.TableCell.CellStyle" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.TableCell.CellStyle" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.TableCell.AssignFrom(C1.C1Preview.TableCell)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.TableCell.IsVisible">
      <summary>セルが表示されるかどうかを示します。</summary>
      <returns>セルが表示されている場合は true を返し、そうでない場合は false を返します。</returns>
    </member>
    <member name="P:C1.C1Preview.TableCell.Tag">
      <summary>セルに関連付けられている任意のデータを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.Owner">
      <summary>このオブジェクトを含む TableCellCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.Table">
      <summary>セルが含まれる RenderTable オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.Row">
      <summary>セルの行のインデックスを取得します。</summary>
      <seealso cref="P:C1.C1Preview.RenderTable.Rows" />
      <seealso cref="T:C1.C1Preview.TableRow" />
    </member>
    <member name="P:C1.C1Preview.TableCell.Col">
      <summary>セルの列のインデックスを取得します。</summary>
      <seealso cref="P:C1.C1Preview.RenderTable.Cols" />
      <seealso cref="T:C1.C1Preview.TableCol" />
    </member>
    <member name="P:C1.C1Preview.TableCell.SpanCols">
      <summary>結合されるセルの列数を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.SpanRows">
      <summary>結合されるセルの行数を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.LastCol">
      <summary>結合されたセルの最後の列のインデックスを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.LastRow">
      <summary>結合されたセルの最後の行のインデックスを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableCell.RenderObject">
      <summary>セル内の RenderObject を取得または設定します。</summary>
      <seealso cref="P:C1.C1Preview.TableCell.Text" />
      <seealso cref="P:C1.C1Preview.TableCell.Image" />
    </member>
    <member name="P:C1.C1Preview.TableCell.Text">
      <summary>セル内のテキストを取得または設定します。</summary>
      <remarks>
        <para>セルに RenderText オブジェクトが含まれない場合は、string.Empty が返されます。</para>
      </remarks>
      <seealso cref="P:C1.C1Preview.TableCell.RenderObject" />
      <seealso cref="P:C1.C1Preview.TableCell.Image" />
      <seealso cref="P:C1.C1Preview.TableCell.Area" />
    </member>
    <member name="P:C1.C1Preview.TableCell.Image">
      <summary>セル内の画像を取得または設定します。</summary>
      <remarks>
        <para>セルに RenderImage オブジェクトが含まれない場合は、null が返されます。</para>
      </remarks>
      <seealso cref="P:C1.C1Preview.TableCell.RenderObject" />
      <seealso cref="P:C1.C1Preview.TableCell.Text" />
      <seealso cref="P:C1.C1Preview.TableCell.Area" />
    </member>
    <member name="P:C1.C1Preview.TableCell.Area">
      <summary>
        現在のセルに含まれた
        <see cref="T:C1.C1Preview.RenderArea" />を取得します。
      </summary>
      <remarks>
        <para>
          このプロパティの取得は、
          <see cref="P:C1.C1Preview.TableCell.RenderObject" />プロパティの現在の値を調べます。 この値が
          <see cref="T:C1.C1Preview.RenderArea" />の場合はそれが返されます。
        </para>
        <para>
          その以外の場合は、新しい
          <see cref="T:C1.C1Preview.RenderArea" />が作成され、
          <see cref="P:C1.C1Preview.TableCell.RenderObject" />に割り当てられて返されます。
        </para>
        <para>
          <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject)" />メソッドを使って、 古い
          <see cref="P:C1.C1Preview.TableCell.RenderObject" />からのプロパティが新しく作成された
          <see cref="T:C1.C1Preview.RenderArea" />にコピーされることに注意してください。 特に、これは古いオブジェクトからのスタイルを新しいオブジェクトにコピーします。
        </para>
      </remarks>
      <seealso cref="P:C1.C1Preview.TableCell.RenderObject" />
      <seealso cref="P:C1.C1Preview.TableCell.Text" />
      <seealso cref="P:C1.C1Preview.TableCell.Image" />
    </member>
    <member name="P:C1.C1Preview.TableCell.Style">
      <summary>スタイルを取得します。</summary>
      <remarks>
        <para>このプロパティの値は、セル自身の ambient と non-ambient の両方のスタイル属性、 およびオブジェクトの containment（包含）を介してセルの コンテンツの ambient 属性に影響します。</para>
        <para>
          たとえば、
          <see cref="P:C1.C1Preview.Style.Spacing" />がテーブルのセルに無視されるため、 次のコードはテーブルの外観に影響しません。
          <code>
            <![CDATA[
            RenderTable rt = new RenderTable();
            rt.Cells[1, 2].Text = "My text.";
            rt.Cells[1, 2].Style.Spacing.All = "3mm";
            ]]>
          </code>
          それに対して、次のコードはセル内のテキストの周囲に 3mm の空白を追加します。
          <code>
            <![CDATA[
            RenderTable rt = new RenderTable();
            rt.Cells[1, 2].Text = "My text.";
            rt.Cells[1, 2].CellStyle.Spacing.All = "3mm";
            ]]>
          </code>
        </para>
      </remarks>
      <seealso cref="P:C1.C1Preview.TableCell.CellStyle" />
    </member>
    <member name="P:C1.C1Preview.TableCell.CellStyle">
      <summary>セルスタイルを取得します。</summary>
      <remarks>
        このスタイルは、現在のセル自身に適用されず、 セルのコンテンツ（
        <see cref="P:C1.C1Preview.TableCell.RenderObject" />）に適用され、 そのオブジェクトの ambient と non-ambient スタイル属性の両方に影響します。
        <para>
          例については、
          <see cref="P:C1.C1Preview.TableCell.Style" />の
          <b>解説</b>を参照してください。
        </para>
      </remarks>
      <seealso cref="P:C1.C1Preview.TableCell.Style" />
    </member>
    <member name="P:C1.C1Preview.TableCell.Bounds">
      <summary>セルの境界を表す四角形を取得します。</summary>
      <seealso cref="P:C1.C1Preview.TableCell.Col" />
      <seealso cref="P:C1.C1Preview.TableCell.Row" />
      <seealso cref="P:C1.C1Preview.TableCell.SpanCols" />
      <seealso cref="P:C1.C1Preview.TableCell.SpanRows" />
    </member>
    <member name="P:C1.C1Preview.TableCell.HorzSplitBehavior">
      <summary>水平方向にセルを分割したときの動作を取得します。</summary>
      <seealso cref="P:C1.C1Preview.TableVector.CanSplit" />
      <seealso cref="P:C1.C1Preview.TableCell.VertSplitBehavior" />
    </member>
    <member name="P:C1.C1Preview.TableCell.VertSplitBehavior">
      <summary>垂直方向にセルを分割したときの動作を取得します。</summary>
      <seealso cref="P:C1.C1Preview.TableVector.CanSplit" />
      <seealso cref="P:C1.C1Preview.TableCell.HorzSplitBehavior" />
    </member>
    <member name="P:C1.C1Preview.TableCell.RepeatGridLinesVert">
      <summary>セルが分割されているときに、水平グリッド線を描画するかどうかを取得または設定します。</summary>
      <seealso cref="P:C1.C1Preview.TableCell.VertSplitBehavior" />
    </member>
    <member name="P:C1.C1Preview.TableCell.RepeatGridLinesHorz">
      <summary>セルが分割されているときに、垂直グリッド線を描画するかどうかを取得または設定します。</summary>
      <seealso cref="P:C1.C1Preview.TableCell.HorzSplitBehavior" />
    </member>
    <member name="T:C1.C1Preview.TableCellCollection">
      <summary>
        <see cref="T:C1.C1Preview.TableCell" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.TableCellCollection.FindCell(System.Int32,System.Int32)">
      <summary>行と列のインデックスを指定してセルを検索します。</summary>
      <param name="row">セルの０から始まる行インデックス。</param>
      <param name="col">セルの０から始まる列インデックス。</param>
      <returns>検索されたセルまたは null を返します。</returns>
      <remarks>
        テーブルのセルは、セルコレクション上のインデクサプロパティを介してアクセスされない限り 初期化されません。インデクサと異なり、このメソッドを使って、セルの
        <see cref="T:C1.C1Preview.TableCell" />オブジェクトが初期化せずに作成されたかどうかをテストできます。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.TableCellCollection.GetRightBottomBounds">
      <summary>セル領域の右下の境界を取得します。</summary>
      <returns>セル領域の右下の境界を表す Size 構造体を返します。</returns>
      <seealso cref="M:C1.C1Preview.TableCellCollection.FindCell(System.Int32,System.Int32)" />
    </member>
    <member name="M:C1.C1Preview.TableCellCollection.AssignFrom(C1.C1Preview.TableCellCollection)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.TableCellCollection" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.TableCellCollection.Owner">
      <summary>このオブジェクトを含む RenderTable オブジェクトを取得します。</summary>
      <seealso cref="P:C1.C1Preview.RenderTable.Cells" />
    </member>
    <member name="P:C1.C1Preview.TableCellCollection.Item(System.Int32,System.Int32)">
      <summary>行と列のインデックスを指定して TableCell オブジェクトを取得します。</summary>
      <param name="row">行のインデックス。</param>
      <param name="col">列のインデックス。</param>
      <returns>指定した行と列の交差にあるセル。</returns>
      <seealso cref="M:C1.C1Preview.TableCellCollection.FindCell(System.Int32,System.Int32)" />
    </member>
    <member name="T:C1.C1Preview.TableHeaderEnum">
      <summary>テーブルヘッダーを繰り返し出力する方法を定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.TableHeaderEnum.None">
      <summary>ヘッダーは１回だけ出力されます。</summary>
    </member>
    <member name="F:C1.C1Preview.TableHeaderEnum.Page">
      <summary>ヘッダーは各ページの先頭に繰り返し出力されます。１ページに複数の段がある場合、ヘッダーは最初の段の先頭にのみ繰り返し出力されます。</summary>
    </member>
    <member name="F:C1.C1Preview.TableHeaderEnum.Column">
      <summary>１ページに複数の段がある場合にのみ、ヘッダーは２番目以降の各段の先頭に繰り返し出力されます。１ページに１つの段しかない場合、ヘッダーは出力されません。</summary>
    </member>
    <member name="F:C1.C1Preview.TableHeaderEnum.All">
      <summary>ヘッダーは各ページと各段の先頭に繰り返し出力されます。</summary>
    </member>
    <member name="T:C1.C1Preview.TableFooterEnum">
      <summary>テーブルフッターを繰り返し出力する方法を定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.TableFooterEnum.None">
      <summary>フッターは１回だけ出力されます。</summary>
    </member>
    <member name="F:C1.C1Preview.TableFooterEnum.Page">
      <summary>フッターは各ページの終端に繰り返し出力されます。１ページに複数の段がある場合、フッターは最初の段の終端にのみ繰り返し出力されます。</summary>
    </member>
    <member name="F:C1.C1Preview.TableFooterEnum.Column">
      <summary>１ページに複数の段がある場合にのみ、フッターは２番目以降の各段の終端に繰り返し出力されます。１ページに１つの段しかない場合、フッターは出力されません。</summary>
    </member>
    <member name="F:C1.C1Preview.TableFooterEnum.All">
      <summary>フッターは各ページと各段の終端に繰り返し出力されます。</summary>
    </member>
    <member name="T:C1.C1Preview.TableVectorGroup">
      <summary>テーブルの行または列のグループを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroup.ShouldSerializeStyle">
      <summary>
        <see cref="P:C1.C1Preview.TableVectorGroup.Style" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.TableVectorGroup.Style" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroup.ShouldSerializeCellStyle">
      <summary>
        <see cref="P:C1.C1Preview.TableVectorGroup.CellStyle" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.TableVectorGroup.CellStyle" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroup.AssignFrom(C1.C1Preview.TableVectorGroup)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.TableVectorGroup" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Owner">
      <summary>このオブジェクトを含む TableVectorGroupCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Table">
      <summary>このオブジェクトを含む RenderTable オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Position">
      <summary>グループの開始列／開始行のインデックスを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Count">
      <summary>グループ内の行／列の数を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.LastPosition">
      <summary>グループの最終列／最終行のインデックスを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.SplitBehavior">
      <summary>
        現在のグループの高さ（行のグループの場合）または幅 （列のグループ場合）が大き過ぎるときに、 現在のページで利用可能な縦横の幅に収めるためにどのように処理するかを示す値を 取得または設定します。
        <para>
          デフォルト値は
          <see cref="F:C1.C1Preview.SplitBehaviorEnum.SplitIfNeeded" />です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.CanSplit">
      <summary>グループを複数ページに分割できるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.PageHeader">
      <summary>各ページの先頭にテーブルヘッダーを再出力するかどうかを示します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.PageFooter">
      <summary>各ページの終端にテーブルフッターを再出力するかどうかを示します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.ColumnHeader">
      <summary>ページの各段の先頭にテーブルヘッダーを再出力するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.ColumnFooter">
      <summary>ページの各段の終端にテーブルフッターを再出力するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Header">
      <summary>テーブルヘッダーを繰り返し出力する方法を取得または設定します。</summary>
      <seealso cref="P:C1.C1Preview.TableVectorGroup.PageHeader" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.ColumnHeader" />
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Footer">
      <summary>テーブルフッターを繰り返し出力する方法を取得または設定します。</summary>
      <seealso cref="P:C1.C1Preview.TableVectorGroup.PageFooter" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.ColumnFooter" />
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.MinVectorsBefore">
      <summary>改ページの挿入を可能にするために、同じページ上の現在のグループの前に 印刷される行または列の最小数を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.MinVectorsAfter">
      <summary>改ページの挿入を可能にするために、同じページ上の現在のグループの後に 印刷される行または列の最小数を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.Style">
      <summary>グループのスタイルを取得します。</summary>
      <seealso cref="P:C1.C1Preview.TableVectorGroup.CellStyle" />
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.CellStyle">
      <summary>グループのセルスタイルを取得します。</summary>
      <seealso cref="P:C1.C1Preview.TableVectorGroup.Style" />
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.DataBinding">
      <summary>データ連結の設定内容を表す C1DataBinding オブジェクトを取得します。</summary>
      <remarks>
        このプロパティは常に
        <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />オブジェクトを、 まだ初期化されていない場合は初期化して返します。
        <see cref="P:C1.C1Preview.TableVectorGroup.DataBindingDefined" />を使って、 現在のグループが
        <see cref="P:C1.C1Preview.TableVectorGroup.DataBinding" />を初期化せずにデータバインドされているかどうかをテストします。
      </remarks>
      <seealso cref="P:C1.C1Preview.TableVectorGroup.DataBindingMode" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.DataBindingDefined" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBinding" />
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.SpanVectors">
      <summary>グループ全体に広がるテーブルベクター （行または列）の序数の配列を取得または設定します。 このプロパティは、 データバインドされたテーブルでのみ使用し、 セルが現在のベクターグループにマージされるベクターの数を指定できます。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.DataBindingDefined">
      <summary>データ連結されているかどうかを取得します。</summary>
      <seealso cref="P:C1.C1Preview.TableVectorGroup.DataBinding" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.DataBindingMode" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBinding" />
    </member>
    <member name="P:C1.C1Preview.TableVectorGroup.DataBindingMode">
      <summary>データ連結モードを取得します。</summary>
      <seealso cref="P:C1.C1Preview.TableVectorGroup.DataBinding" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.DataBindingDefined" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBinding" />
    </member>
    <member name="T:C1.C1Preview.TableVectorGroupCollection">
      <summary>
        <see cref="T:C1.C1Preview.TableVectorGroup" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.AssignFrom(C1.C1Preview.TableVectorGroupCollection)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.TableVectorGroupCollection" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.GetPageHeader">
      <summary>
        <see cref="P:C1.C1Preview.TableVectorGroup.PageHeader" />プロパティが
        <b>true</b>に設定されている 行または列のグループを取得します。
      </summary>
      <returns>
        ページごとに繰り返されるテーブルヘッダーである
        <see cref="T:C1.C1Preview.TableVectorGroup" />。 このグループが存在しない場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.GetPageFooter">
      <summary>
        <see cref="P:C1.C1Preview.TableVectorGroup.PageFooter" />プロパティが
        <b>true</b>に設定されている 行または列のグループを取得します。
      </summary>
      <returns>
        ページごとに繰り返されるテーブルフッターである
        <see cref="T:C1.C1Preview.TableVectorGroup" />。 このグループが存在しない場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.GetColumnHeader">
      <summary>
        <see cref="P:C1.C1Preview.TableVectorGroup.ColumnHeader" />プロパティが
        <b>true</b>に設定されている 行または列のグループを取得します。
      </summary>
      <returns>
        列ごとに繰り返されるテーブルヘッダーである
        <see cref="T:C1.C1Preview.TableVectorGroup" />。 このグループが存在しない場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.GetColumnFooter">
      <summary>
        <see cref="P:C1.C1Preview.TableVectorGroup.ColumnFooter" />プロパティが
        <b>true</b>に設定されている 行または列のグループを取得します。
      </summary>
      <returns>
        列ごとに繰り返されるテーブルフッターである
        <see cref="T:C1.C1Preview.TableVectorGroup" />。 このグループが存在しな場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.GetBound">
      <summary>グループ領域の境界を取得します。</summary>
      <returns>グループ領域の境界を表す値を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.FindGroup(System.Int32,System.Int32)">
      <summary>開始位置とサイズを指定してグループを検索します。</summary>
      <param name="position">所属先のテーブル内のグループの開始位置（行または列インデックス）。</param>
      <param name="count">グループのサイズ。</param>
      <returns>検索されたグループまたは null を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.TableVectorGroupCollection.FindGroupsAtPos(System.Int32)">
      <summary>このインデックスの行／列を含むグループのリストを検索します。</summary>
      <param name="position">行または列インデックス。</param>
      <returns>検索されたグループのリストを返します。</returns>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroupCollection.Table">
      <summary>このオブジェクトを含む RenderTable オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroupCollection.Item(System.Int32,System.Int32)">
      <summary>開始位置とサイズを指定して TableVectorGroup オブジェクトを取得します。</summary>
      <param name="position">グループの先頭行または列の所属先のテーブル内のインデックス。</param>
      <param name="count">グループのサイズ。</param>
      <returns>
        指定した抽出条件を持つ
        <see cref="T:C1.C1Preview.TableVectorGroup" />。
      </returns>
    </member>
    <member name="P:C1.C1Preview.TableVectorGroupCollection.DataBindingDefined">
      <summary>データ連結されているかどうかを取得します。</summary>
      <seealso cref="P:C1.C1Preview.TableVectorGroup.DataBindingDefined" />
    </member>
    <member name="P:C1.C1Preview.TableVectorGroupCollection.DataBindingMode">
      <summary>データ連結モードを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.UserCellGroup">
      <summary>ユーザーによって定義されたセルグループを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.UserCellGroup.#ctor(System.Drawing.Rectangle)">
      <summary>UserCellGroup クラスの新しいインスタンスを初期化します。</summary>
      <param name="range">セルグループの範囲。</param>
    </member>
    <member name="M:C1.C1Preview.UserCellGroup.#ctor(System.Drawing.Point)">
      <summary>UserCellGroup クラスの新しいインスタンスを初期化します。</summary>
      <param name="cell">セルの座標。</param>
    </member>
    <member name="M:C1.C1Preview.UserCellGroup.#ctor(System.Drawing.Rectangle[])">
      <summary>UserCellGroup クラスの新しいインスタンスを初期化します。</summary>
      <param name="ranges">
        グループに含める四角形領域のリスト。各領域は以下のように
        <see cref="T:System.Drawing.Rectangle" />構造体によって識別されます。
        <list type="bullet">
          <item>
            <see cref="P:System.Drawing.Rectangle.X" />は左上セルの列インデックスです。
          </item>
          <item>
            <see cref="P:System.Drawing.Rectangle.Y" />は左上セルの行インデックスです。
          </item>
          <item>
            <see cref="P:System.Drawing.Rectangle.Width" />は列数です。
          </item>
          <item>
            <see cref="P:System.Drawing.Rectangle.X" />は行数です。
          </item>
        </list>
      </param>
    </member>
    <member name="M:C1.C1Preview.UserCellGroup.#ctor(System.Drawing.Point[])">
      <summary>UserCellGroup クラスの新しいインスタンスを初期化します。</summary>
      <param name="cells">セルの座標の配列。</param>
    </member>
    <member name="M:C1.C1Preview.UserCellGroup.#ctor(System.Object[])">
      <summary>UserCellGroup クラスの新しいインスタンスを初期化します。</summary>
      <param name="areas">セルの座標またはセルグループの範囲の配列。</param>
    </member>
    <member name="M:C1.C1Preview.UserCellGroup.ShouldSerializeStyle">
      <summary>
        <see cref="P:C1.C1Preview.UserCellGroup.Style" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.UserCellGroup.Style" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.UserCellGroup.ShouldSerializeCellStyle">
      <summary>
        <see cref="P:C1.C1Preview.UserCellGroup.CellStyle" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.UserCellGroup.CellStyle" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.UserCellGroup.AssignFrom(C1.C1Preview.UserCellGroup)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.UserCellGroup" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.UserCellGroup.ContainsCell(System.Int32,System.Int32)">
      <summary>現在のセルグループが指定した行と列インデックスを持つセルを含んでいるかどうかをテストします。</summary>
      <param name="row">セルの行インデックス。</param>
      <param name="col">セルの列インデックス。</param>
      <returns>
        現在のグループが指定したセルを含んでいる場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="P:C1.C1Preview.UserCellGroup.Owner">
      <summary>このオブジェクトを含む UserCellGroupCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.UserCellGroup.Table">
      <summary>このオブジェクトを含む RenderTable オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.UserCellGroup.Style">
      <summary>セルグループのスタイルを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.UserCellGroup.CellStyle">
      <summary>
        現在のセルグループのセルに含まれるオブジェクトの
        <see cref="T:C1.C1Preview.Style" />を 取得します。 詳細は、
        <see cref="P:C1.C1Preview.TableCell.CellStyle" />を参照してください。
      </summary>
    </member>
    <member name="P:C1.C1Preview.UserCellGroup.Ranges">
      <summary>グループ内のセルを定義する四角形の配列を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.UserCellGroupCollection">
      <summary>
        <see cref="T:C1.C1Preview.UserCellGroup" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.UserCellGroupCollection.AssignFrom(C1.C1Preview.UserCellGroupCollection)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.UserCellGroupCollection.Add(C1.C1Preview.UserCellGroup)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="cellGroup">追加するオブジェクト。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.UserCellGroupCollection.FindGroupsAtPos(System.Int32,System.Int32)">
      <summary>
        指定した行と列インデックスのセルを含むすべてのユーザーセルグループ （
        <see cref="T:C1.C1Preview.UserCellGroup" />タイプのオブジェクト）を検索します。
      </summary>
      <param name="row">セルの行インデックス。</param>
      <param name="col">セルの列インデックス。</param>
      <returns>
        テーブル内の指定した位置のセルを含んでいる現在のコレクションからのすべての
        <see cref="T:C1.C1Preview.UserCellGroup" />オブジェクトを含む
        <see cref="T:System.Collections.ArrayList" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.UserCellGroupCollection.GetRightBottomBounds">
      <summary>ユーザーグループの領域の境界を取得します。</summary>
      <returns>Size 構造体。フィールド Width には、右端の列の番号 + １が含まれます。フィールド Height には、下端の行の番号 + １が含まれます。</returns>
    </member>
    <member name="P:C1.C1Preview.UserCellGroupCollection.Owner">
      <summary>このオブジェクトを含む RenderTable オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.UserCellGroupCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>
        指定されたインデックスの
        <see cref="T:C1.C1Preview.UserCellGroup" />。
      </returns>
    </member>
    <member name="T:C1.C1Preview.StretchTableEnum">
      <summary>テーブルの行または列の引き伸ばし方法を定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.StretchTableEnum.None">
      <summary>テーブルの行／列は引き伸ばされません。</summary>
    </member>
    <member name="F:C1.C1Preview.StretchTableEnum.AllVectors">
      <summary>ページ全体に合わせてテーブルのすべての行／列が引き伸ばされます。</summary>
    </member>
    <member name="F:C1.C1Preview.StretchTableEnum.AllColumns">
      <summary>テーブルのすべての列がページに合わせて等しく引き伸ばされます。</summary>
    </member>
    <member name="F:C1.C1Preview.StretchTableEnum.LastVectorOnPage">
      <summary>ページ全体に合わせて各ページの最後の行／列だけが引き伸ばされます。</summary>
    </member>
    <member name="F:C1.C1Preview.StretchTableEnum.LastColumnOnPage">
      <summary>ページの最後の列のみがページに合わせて引き伸ばされます。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderTable">
      <summary>テーブルを描画する描画オブジェクトを表します。</summary>
      <seealso cref="T:C1.C1Preview.TableVector" />
      <seealso cref="T:C1.C1Preview.TableRow" />
      <seealso cref="T:C1.C1Preview.TableCol" />
      <seealso cref="T:C1.C1Preview.TableCell" />
      <seealso cref="T:C1.C1Preview.TableVectorGroup" />
      <seealso cref="T:C1.C1Preview.UserCellGroup" />
      <seealso cref="T:C1.C1Preview.TableRowCollection" />
      <seealso cref="T:C1.C1Preview.TableColCollection" />
      <seealso cref="T:C1.C1Preview.TableCellCollection" />
      <seealso cref="T:C1.C1Preview.TableVectorGroupCollection" />
      <seealso cref="T:C1.C1Preview.UserCellGroupCollection" />
    </member>
    <member name="M:C1.C1Preview.RenderTable.#ctor">
      <summary>RenderTable クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderTable.#ctor(System.Int32,System.Int32)">
      <summary>RenderTable クラスの新しいインスタンスを初期化します。</summary>
      <param name="rowCount">テーブルの行数。</param>
      <param name="colCount">テーブルの列数。</param>
    </member>
    <member name="M:C1.C1Preview.RenderTable.ShouldSerializeCellStyle">
      <summary>
        <see cref="P:C1.C1Preview.RenderTable.CellStyle" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.RenderTable.CellStyle" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderTable.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderTable" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderTable" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderTable.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
      <param name="assignDataBinding">DataBinding プロパティがコピーされるかどうか。</param>
      <param name="assignChildren">Children プロパティがコピーされるかどうか。</param>
      <param name="assignAnchors">Anchors プロパティがコピーされるかどうか。</param>
      <param name="assignHyperlink">Hyperlink プロパティがコピーされるかどうか。</param>
      <param name="assignElements">Rows、Cols、Cells、RowGroups、ColGroups、UserCellGroups の各プロパティがコピーされるかどうか。</param>
      <param name="assignName">Name プロパティがコピーされるかどうか。</param>
      <param name="assignStyle">Style プロパティがコピーされるかどうか。</param>
    </member>
    <member name="M:C1.C1Preview.RenderTable.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
      <param name="assignDataBinding">DataBinding プロパティがコピーされるかどうか。</param>
      <param name="assignChildren">Children プロパティがコピーされるかどうか。</param>
      <param name="assignAnchors">Anchors プロパティがコピーされるかどうか。</param>
      <param name="assignHyperlink">Hyperlink プロパティがコピーされるかどうか。</param>
      <param name="assignName">Name プロパティがコピーされるかどうか。</param>
      <param name="assignStyle">Style プロパティがコピーされるかどうか。</param>
    </member>
    <member name="P:C1.C1Preview.RenderTable.RowSizingMode">
      <summary>行の高さを計算する方法を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.ColumnSizingMode">
      <summary>列の幅を計算する方法を取得または設定します。</summary>
      <remarks>
        <para>デフォルトは Fixed です。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderTable.Rows">
      <summary>行のコレクションを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.Cols">
      <summary>列のコレクションを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.RowGroups">
      <summary>行のグループのコレクションを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.ColGroups">
      <summary>列のグループのコレクションを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.Cells">
      <summary>セルのコレクションを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.UserCellGroups">
      <summary>ユーザーによって定義されたセルグループのコレクションを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.Stretch">
      <summary>
        廃止。代わりに、
        <see cref="P:C1.C1Preview.RenderTable.StretchColumns" />を使用します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.StretchColumns">
      <summary>列の引き伸ばし方法を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.StretchRows">
      <summary>行の引き伸ばし方法を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.CellStyle">
      <summary>セルスタイルを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.VertPageHeaderOnFirstPage">
      <summary>最初のページに垂直ページヘッダーを出力するかどうかを取得または設定します。</summary>
      <remarks>
        垂直ページヘッダーを定義するには、現在のテーブル上に列グループを作成して、 以下のようにページまたは列ヘッダーとしてマークします。
        <code>
          <![CDATA[
          RenderTable rt = new RenderTable();
          rt.ColGroups[0, 2].Header = TableHeaderEnum.All;
          ]]>
        </code>
      </remarks>
      <seealso cref="P:C1.C1Preview.RenderTable.ColGroups" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.Header" />
      <seealso cref="T:C1.C1Preview.TableHeaderEnum" />
    </member>
    <member name="P:C1.C1Preview.RenderTable.HorzPageHeaderOnFirstPage">
      <summary>最初のページに水平ページヘッダーを出力するかどうかを取得または設定します。</summary>
      <remarks>
        水平ページヘッダーを定義するには、現在のテーブル上に行グループを作成して、 以下のようにページまたは列ヘッダーとしてマークします。
        <code>
          <![CDATA[
          RenderTable rt = new RenderTable();
          rt.RowGroups[0, 2].Header = TableHeaderEnum.All;
          ]]>
        </code>
      </remarks>
      <seealso cref="P:C1.C1Preview.RenderTable.RowGroups" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.Header" />
      <seealso cref="T:C1.C1Preview.TableHeaderEnum" />
    </member>
    <member name="P:C1.C1Preview.RenderTable.VertPageFooterOnLastPage">
      <summary>最初のページに垂直ページフッターを出力するかどうかを取得または設定します。</summary>
      <remarks>
        垂直ページフッターを定義するには、現在のテーブル上に列グループを作成して、 以下のようにページまたは列フッターとしてマークします。
        <code>
          <![CDATA[
          RenderTable rt = new RenderTable();
          rt.ColGroups[10, 2].Footer = TableFooterEnum.All;
          ]]>
        </code>
      </remarks>
      <seealso cref="P:C1.C1Preview.RenderTable.ColGroups" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.Footer" />
      <seealso cref="T:C1.C1Preview.TableFooterEnum" />
    </member>
    <member name="P:C1.C1Preview.RenderTable.HorzPageFooterOnLastPage">
      <summary>最初のページに水平ページフッターを出力するかどうかを取得または設定します。</summary>
      <remarks>
        水平ページフッターを定義するには、現在のテーブル上に行グループを作成して、 以下のようにページまたは列フッターとしてマークします。
        <code>
          <![CDATA[
          RenderTable rt = new RenderTable();
          rt.RowGroups[10, 2].Footer = TableFooterEnum.All;
          ]]>
        </code>
      </remarks>
      <seealso cref="P:C1.C1Preview.RenderTable.RowGroups" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.Footer" />
      <seealso cref="T:C1.C1Preview.TableFooterEnum" />
    </member>
    <member name="P:C1.C1Preview.RenderTable.RepeatGridLinesVert">
      <summary>セルが分割されているときに、垂直グリッド線を描画するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.RepeatGridLinesHorz">
      <summary>セルが分割されているときに、水平グリッド線を描画するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.RowsSplitBehavior">
      <summary>
        テーブル行の高さが高過ぎて現在のページの利用可能な縦幅に収まらない場合の処理方法を決定する値を 取得または設定します （この値は、 個々の列に対して
        <see cref="P:C1.C1Preview.TableVector.SplitBehavior" />プロパティでオーバーライドできます）。
        <para>
          デフォルトは
          <see cref="F:C1.C1Preview.SplitBehaviorEnum.Never" />です。
        </para>
      </summary>
      <seealso cref="P:C1.C1Preview.RenderTable.ColsSplitBehavior" />
    </member>
    <member name="P:C1.C1Preview.RenderTable.RowsCanSplit">
      <summary>
        テーブルの行をページ間で分割できるかどうかを示す値を取得または設定します （この値は、個々の行に対して
        <see cref="P:C1.C1Preview.TableVector.CanSplit" />プロパティでオーバーライドできます）。 デフォルトは false です。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.ColsSplitBehavior">
      <summary>
        テーブル列の幅が広過ぎて現在のページの利用可能な横幅に収まらない場合の処理方法を決定する値を 取得または設定します （この値は、 個々の列に対して
        <see cref="P:C1.C1Preview.TableVector.SplitBehavior" />プロパティでオーバーライドできます）。
        <para>
          デフォルトは
          <see cref="F:C1.C1Preview.SplitBehaviorEnum.Never" />です。
        </para>
      </summary>
      <seealso cref="P:C1.C1Preview.RenderTable.RowsSplitBehavior" />
    </member>
    <member name="P:C1.C1Preview.RenderTable.ColsCanSplit">
      <summary>
        テーブルの列をページ間で分割できるかどうかを示す値を取得または設定します（この値は、 個々の列に対して
        <see cref="P:C1.C1Preview.TableVector.CanSplit" />プロパティでオーバーライドできます）。 デフォルトは false です。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTable.DataBindingMode">
      <summary>データ連結モードを取得します。</summary>
      <seealso cref="N:C1.C1Preview.DataBinding" />
      <seealso cref="P:C1.C1Preview.RenderObject.Original" />
      <seealso cref="P:C1.C1Preview.RenderObject.Copies" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBindingDefined" />
    </member>
    <member name="T:C1.C1Preview.RenderText">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />のテキストの実行を表します。 テキストは単一のスタイルを使って描画されます（マルチスタイルテキストの場合は
        <see cref="T:C1.C1Preview.RenderParagraph" />）。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderText.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderText" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderText.#ctor(System.String)">
      <summary>
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティを割り当てて、
        <see cref="T:C1.C1Preview.RenderText" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="text">
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティに割り当てられた文字列。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderText.#ctor(System.String,C1.C1Preview.Style)">
      <summary>
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティおよびスタイルを割り当てて、
        <see cref="T:C1.C1Preview.RenderText" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="text">
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティに割り当てられた文字列。
      </param>
      <param name="style">
        使用する
        <see cref="T:C1.C1Preview.Style" />（
        <see cref="M:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)" />メソッドを使って、 指定したスタイルを現在のオブジェクトの
        <see cref="P:C1.C1Preview.RenderObject.Style" />にコピーします）。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderText.#ctor(System.String,System.Drawing.Font)">
      <summary>
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティ、およびフォントを割り当てて、
        <see cref="T:C1.C1Preview.RenderText" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="text">
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティに割り当てられた文字列。
      </param>
      <param name="font">テキストのレンダリングに使用されるフォント。</param>
    </member>
    <member name="M:C1.C1Preview.RenderText.#ctor(System.String,System.Drawing.Font,System.Drawing.Color)">
      <summary>
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティ、フォント、 およびテキスト色を割り当てて、
        <see cref="T:C1.C1Preview.RenderText" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="text">
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティに割り当てられた文字列。
      </param>
      <param name="font">テキストのレンダリングに使用されるフォント。</param>
      <param name="textColor">テキストのレンダリングに使用されるテキスト色。</param>
    </member>
    <member name="M:C1.C1Preview.RenderText.#ctor(System.String,System.Drawing.Font,System.Drawing.Color,C1.C1Preview.AlignHorzEnum)">
      <summary>
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティ、フォント、テキスト色、 およびテキスト配置を割り当てて、
        <see cref="T:C1.C1Preview.RenderText" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="text">
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティに割り当てられた文字列。
      </param>
      <param name="font">テキストのレンダリングに使用されるフォント。</param>
      <param name="textColor">テキストのレンダリングに使用されるテキスト色。</param>
      <param name="horzAlign">テキストの水平配置。</param>
    </member>
    <member name="M:C1.C1Preview.RenderText.#ctor(System.String,System.Drawing.Font,C1.C1Preview.AlignHorzEnum)">
      <summary>
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティ、フォント、 およびテキスト配置を割り当てて、
        <see cref="T:C1.C1Preview.RenderText" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="text">
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティに割り当てられた文字列。
      </param>
      <param name="font">テキストのレンダリングに使用されるフォント。</param>
      <param name="horzAlign">テキストの水平配置。</param>
    </member>
    <member name="M:C1.C1Preview.RenderText.#ctor(System.String,C1.C1Preview.AlignHorzEnum)">
      <summary>
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティ、 およびテキスト配置を割り当てて、
        <see cref="T:C1.C1Preview.RenderText" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="text">
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティに割り当てられた文字列。
      </param>
      <param name="horzAlign">テキストの水平配置。</param>
    </member>
    <member name="M:C1.C1Preview.RenderText.#ctor(System.String,C1.C1Preview.Style,C1.C1Preview.Style)">
      <summary>
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティ、 および親のスタイルを割り当てて、
        <see cref="T:C1.C1Preview.RenderText" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="text">
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティに割り当てられた文字列。
      </param>
      <param name="parentStyle">
        現在のオブジェクトのスタイルの
        <see cref="P:C1.C1Preview.Style.Parent" />プロパティに割り当てられたスタイル。
      </param>
      <param name="ambientParentStyle">
        現在のオブジェクトのスタイルの
        <see cref="P:C1.C1Preview.Style.AmbientParent" />プロパティに割り当てられたスタイル。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderText.ShouldSerializeText">
      <summary>
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.RenderText.Text" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderText.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderText" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderText" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderText.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderText" />の場合は、
        <see cref="T:C1.C1Preview.RenderText" />固有のプロパティもコピーします。
      </summary>
      <param name="source"></param>
      <param name="assignDataBinding"></param>
      <param name="assignChildren"></param>
      <param name="assignAnchors"></param>
      <param name="assignHyperlink"></param>
      <param name="assignName"></param>
      <param name="assignStyle"></param>
    </member>
    <member name="P:C1.C1Preview.RenderText.Text">
      <summary>レンダリングするテキスト。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderText.HasText">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティが
        <b>null</b>でなく、 ゼロより大きい長さを持つかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderText.TextLength">
      <summary>
        <see cref="P:C1.C1Preview.RenderText.Text" />プロパティによって返された文字列の長さを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.TabAlignmentEnum">
      <summary>タブの配置を定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.TabAlignmentEnum.Left">
      <summary>タブの位置を左揃えで指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.TabAlignmentEnum.Center">
      <summary>タブの位置を中央揃えで指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.TabAlignmentEnum.Right">
      <summary>タブの位置を右揃えで指定します。</summary>
    </member>
    <member name="T:C1.C1Preview.TabPosition">
      <summary>テキストの段落内のタブを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.TabPosition.#ctor(C1.C1Preview.Unit)">
      <summary>
        指定した位置とデフォルト（
        <see cref="F:C1.C1Preview.TabAlignmentEnum.Left" />）テキスト配置を使って、
        <see cref="T:C1.C1Preview.TabPosition" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="position">テキスト領域の左辺に相対的なタブ位置。</param>
    </member>
    <member name="M:C1.C1Preview.TabPosition.#ctor(C1.C1Preview.Unit,C1.C1Preview.TabAlignmentEnum)">
      <summary>
        指定した位置と指定したテキスト配置を使って、
        <see cref="T:C1.C1Preview.TabPosition" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="position">テキスト領域の左辺に相対的なタブ位置。</param>
      <param name="alignment">このタブ位置のテキスト配置。</param>
    </member>
    <member name="M:C1.C1Preview.TabPosition.#ctor(C1.C1Preview.Unit,C1.C1Preview.TabAlignmentEnum,System.Char)">
      <summary>
        指定した位置、指定したテキスト配置、およびフィル文字を使って、
        <see cref="T:C1.C1Preview.TabPosition" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="position">テキスト領域の左辺に相対的なタブ位置。</param>
      <param name="alignment">このタブ位置のテキスト配置。</param>
      <param name="fillChar">前と現在のタブストップの間の領域のフィルに使用する文字。</param>
    </member>
    <member name="M:C1.C1Preview.TabPosition.AssignFrom(C1.C1Preview.TabPosition)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.TabPosition" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.TabPosition.Position">
      <summary>テキストの位置を取得または設定します。</summary>
      <remarks>
        タブストップ位置はテキスト領域の左辺に相対的です。その領域には埋め込みも枠線も含まれません。 そのため、たとえば、
        <see cref="T:C1.C1Preview.RenderText" />が１インチの左の埋め込みを持ち、 第１の
        <see cref="T:C1.C1Preview.TabPosition" />が １インチに設定される場合は、この第１のタブ文字の後の テキストはすべて
        <see cref="T:C1.C1Preview.RenderText" />の X 座標の２インチ右側に配置されます。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.TabPosition.Alignment">
      <summary>このタブ位置でのテキストの配置を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TabPosition.FillChar">
      <summary>タブスペースを埋めるために使用される文字を取得または設定します。</summary>
      <remarks>
        この機能の主な使用は、
        <see cref="T:C1.C1Preview.RenderToc" />内にあり、 左揃えされた TOC エントリと右揃えされたページ番号の間のスペースをフィルします。
      </remarks>
    </member>
    <member name="T:C1.C1Preview.TabPositionCollection">
      <summary>
        <see cref="T:C1.C1Preview.TabPosition" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.TabPositionCollection.Add(C1.C1Preview.Unit)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="tabPosition">テキスト領域の左辺に相対的なタブストップの位置。</param>
      <returns>コレクションに追加されたオブジェクトを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.TabPositionCollection.Add(C1.C1Preview.Unit,C1.C1Preview.TabAlignmentEnum)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="tabPosition">テキスト領域の左辺に相対的なタブストップの位置。</param>
      <param name="tabAlignment">テキストの配置。</param>
      <returns>コレクションに追加されたオブジェクトを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.TabPositionCollection.Add(C1.C1Preview.Unit,C1.C1Preview.TabAlignmentEnum,System.Char)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="tabPosition">テキスト領域の左辺に相対的なタブストップの位置。</param>
      <param name="tabAlignment">テキストの配置。</param>
      <param name="fillChar">タブスペースを埋めるために使用される文字。</param>
      <returns>コレクションに追加されたオブジェクトを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.TabPositionCollection.Add(C1.C1Preview.TabPosition)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="tabPosition">追加するオブジェクト。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.TabPositionCollection.Insert(System.Int32,C1.C1Preview.TabPosition)">
      <summary>
        <see cref="T:C1.C1Preview.TabPosition" />オブジェクトを現在のコレクションの指定した位置に挿入します。
      </summary>
      <param name="index">
        <paramref name="tabPosition" />の挿入先のインデックス。
      </param>
      <param name="tabPosition">挿入するオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.TabPositionCollection.Remove(C1.C1Preview.TabPosition)">
      <summary>
        <see cref="T:C1.C1Preview.TabPosition" />オブジェクトを現在のコレクションから削除します。
      </summary>
      <param name="tabPosition">削除するオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.TabPositionCollection.IndexOf(C1.C1Preview.TabPosition)">
      <summary>
        現在のコレクション内の
        <see cref="T:C1.C1Preview.TabPosition" />オブジェクトのインデックスを取得します。
      </summary>
      <param name="tabPosition">インデックスの取得先のオブジェクト。</param>
      <returns>
        現在のコレクション内の
        <paramref name="tabPosition" />のインデックス。
      </returns>
    </member>
    <member name="P:C1.C1Preview.TabPositionCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得または設定します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>指定したインデックスの TabPosition。</returns>
    </member>
    <member name="T:C1.C1Preview.RenderTocItem">
      <summary>目次の項目を表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderTocItem.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderTocItem" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTocItem.RenderToc">
      <summary>
        現在の TOC エントリを含む
        <see cref="P:C1.C1Preview.RenderTocItem.RenderToc" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTocItem.HasText">
      <summary>現在の TOC エントリが生成されたドキュメント内に表示可能な出力を 生成するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderTocItem.TextLength">
      <summary>段落内のテキストの長さを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderTocItem.Level">
      <summary>目次内の項目のレベルを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderToc">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />の目次（TOC）を表します。 個別の TOC エントリは
        <see cref="T:C1.C1Preview.RenderTocItem" />オブジェクトによって表されます。 このオブジェクトは、別のタイプの描画オブジェクトも含むことができます （これは TOC ヘッダーの表示などに使用できます）。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderToc.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderToc" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderToc.ShouldSerializeLevelSpacing">
      <summary>
        <see cref="P:C1.C1Preview.RenderToc.LevelSpacing" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.RenderToc.LevelSpacing" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderToc.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderToc" />の場合は、
        <see cref="T:C1.C1Preview.RenderToc" />固有のプロパティもコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderToc.AddItem(System.String,C1.C1Preview.C1Hyperlink)">
      <summary>
        指定したテキストとハイパーリンクで初期化された新しい
        <see cref="T:C1.C1Preview.RenderTocItem" />を作成して、 現在の TOC に追加します。
      </summary>
      <param name="text">追加される TOC 項目を表すテキスト。</param>
      <param name="hyperlink">
        TOC 項目のターゲットである
        <see cref="T:C1.C1Preview.C1Hyperlink" />。
      </param>
      <returns>
        作成されて現在の TOC に追加された
        <see cref="T:C1.C1Preview.RenderTocItem" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderToc.AddItem(System.String,C1.C1Preview.C1Hyperlink,System.Int32)">
      <summary>
        指定したテキスト、ハイパーリンク、およびレベルで初期化された 新しい
        <see cref="T:C1.C1Preview.RenderTocItem" />を作成して、現在の TOC に追加します。
      </summary>
      <param name="text">追加される TOC 項目を表すテキスト。</param>
      <param name="hyperlink">
        TOC 項目のターゲットである
        <see cref="T:C1.C1Preview.C1Hyperlink" />。
      </param>
      <param name="level">
        TOC 項目の
        <see cref="P:C1.C1Preview.RenderTocItem.Level" />。
      </param>
      <returns>
        作成されて現在の TOC に追加された
        <see cref="T:C1.C1Preview.RenderTocItem" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderToc.AddItem(System.String,System.Int32)">
      <summary>
        指定したテキストとターゲットページ番号で初期化された新しい
        <see cref="T:C1.C1Preview.RenderTocItem" />を作成して、現在の TOC に追加します。
      </summary>
      <param name="text">追加される TOC 項目を表すテキスト。</param>
      <param name="pageNo">TOC 項目のターゲットであるページ番号。</param>
      <returns>
        作成されて現在の TOC に追加された
        <see cref="T:C1.C1Preview.RenderTocItem" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderToc.AddItem(System.String,System.Int32,System.Int32)">
      <summary>
        指定したテキスト、ターゲットページ番号およびレベルで初期化された 新しい
        <see cref="T:C1.C1Preview.RenderTocItem" />を作成して、現在の TOC に追加します。
      </summary>
      <param name="text">追加される TOC 項目を表すテキスト。</param>
      <param name="pageNo">TOC 項目のターゲットであるページ番号。</param>
      <param name="level">
        TOC 項目の
        <see cref="P:C1.C1Preview.RenderTocItem.Level" />。
      </param>
      <returns>
        作成されて現在の TOC に追加された
        <see cref="T:C1.C1Preview.RenderTocItem" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderToc.AddItem(System.String,C1.C1Preview.RenderObject)">
      <summary>
        指定したテキストとターゲット
        <see cref="T:C1.C1Preview.RenderObject" />で初期化された 新しい
        <see cref="T:C1.C1Preview.RenderTocItem" />を作成して、現在の TOC に追加します。
      </summary>
      <param name="text">追加される TOC 項目を表すテキスト。</param>
      <param name="target">
        TOC 項目のターゲットである
        <see cref="T:C1.C1Preview.RenderObject" />。
      </param>
      <returns>
        作成されて現在の TOC に追加された
        <see cref="T:C1.C1Preview.RenderTocItem" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderToc.AddItem(System.String,C1.C1Preview.RenderObject,System.Int32)">
      <summary>
        指定したテキスト、ターゲット
        <see cref="T:C1.C1Preview.RenderObject" />およびレベルで初期化された 新しい
        <see cref="T:C1.C1Preview.RenderTocItem" />を作成して、現在の TOC に追加します。
      </summary>
      <param name="text">追加される TOC 項目を表すテキスト。</param>
      <param name="target">
        TOC 項目のターゲットである
        <see cref="T:C1.C1Preview.RenderObject" />。
      </param>
      <param name="level">
        TOC 項目の
        <see cref="P:C1.C1Preview.RenderTocItem.Level" />。
      </param>
      <returns>
        作成されて現在の TOC に追加された
        <see cref="T:C1.C1Preview.RenderTocItem" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderToc.AddItem(System.String,C1.C1Preview.ParagraphObject)">
      <summary>
        指定したテキストとターゲット
        <see cref="T:C1.C1Preview.ParagraphObject" />で初期化された 新しい
        <see cref="T:C1.C1Preview.RenderTocItem" />を作成して、現在の TOC に追加します。
      </summary>
      <param name="text">追加される TOC 項目を表すテキスト。</param>
      <param name="target">
        TOC 項目のターゲットである
        <see cref="T:C1.C1Preview.ParagraphObject" />。
      </param>
      <returns>
        作成されて現在の TOC に追加された
        <see cref="T:C1.C1Preview.RenderTocItem" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderToc.AddItem(System.String,C1.C1Preview.ParagraphObject,System.Int32)">
      <summary>
        指定したテキスト、ターゲット
        <see cref="T:C1.C1Preview.ParagraphObject" />、およびレベルで初期化された 新しい
        <see cref="T:C1.C1Preview.RenderTocItem" />を作成して、現在の TOC に追加します。
      </summary>
      <param name="text">追加される TOC 項目を表すテキスト。</param>
      <param name="target">
        TOC 項目のターゲットである
        <see cref="T:C1.C1Preview.ParagraphObject" />。
      </param>
      <param name="level">
        TOC 項目の
        <see cref="P:C1.C1Preview.RenderTocItem.Level" />。
      </param>
      <returns>
        作成されて現在の TOC に追加された
        <see cref="T:C1.C1Preview.RenderTocItem" />。
      </returns>
    </member>
    <member name="P:C1.C1Preview.RenderToc.ShowPageNumbers">
      <summary>ページ番号を目次に表示するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderToc.PageNumbersAtRight">
      <summary>ページ番号を目次の右端に整列するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderToc.LinksOnPageNumbersOnly">
      <summary>表示される TOC 内のページ番号がクリック可能なハイパーリンクだけを表すかどうかを示す値を 取得または設定します（そうでない場合、 エントリのキャプションとページ番号間の領域全体がクリック可能になります）。 デフォルト値は false です。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderToc.FillChar">
      <summary>タイトルとページ番号の間の余白を埋めるために使用する文字を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderToc.LevelSpacing">
      <summary>
        TOC 項目のインデントステップを取得または設定します。 1 に等しい
        <see cref="P:C1.C1Preview.RenderTocItem.Level" />を持つ項目はインデントされず、 各次レベルはこの値によってインデントされます。 デフォルト値は
        <b>10mm</b>です。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderVerticalText">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />内の縦書きテキストの実行を表します。
        <para>主として、アジア諸語（日本語など）のテキストを伝統的な方法で 右から左へ垂直方向にレンダリングするために設計されています。</para><para>
          テキストは単一のスタイルを使って描画されます（マルチスタイルテキストの場合は
          <see cref="T:C1.C1Preview.RenderVerticalParagraph" />）。
        </para>
      </summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Preview.RenderVerticalText" />のデフォルトの高さと幅は
          <c>auto</c>です。 特に、これは、改行なしのテキストがデフォルトで下方向に無制限に伸ばされることを意味します。 下部でテキストを折り返すには、
          <see cref="T:C1.C1Preview.RenderVerticalText" />オブジェクトの 高さを明示的に設定する必要があります。
        </para>
        <para>このクラスの主な使用は、アジア諸語のテキストを出力することですが、 英語テキストもこの方法で印刷できることに注意してください。これを行うには、16 進コード 0xFEE0 を各英語文字に追加します。</para>
      </remarks>
      <example>
        以下のコードは、「CASINO ROYAL」と数字「12345」を垂直方向に印刷します。
        <code>
          <![CDATA[
          private static string ToVertical(string s)
          {
            StringBuilder sb = new StringBuilder(s.Length);
            for (int i = 0; i &lt; s.Length; i++)
              if (s[i] == ' ')
                sb.Append(s[i]);
              else
                sb.Append((char)((int)s[i] + (0xFF10 - (int)'0')));
            return sb.ToString();
          }
          
          private C1PrintDocument CreateDocument()
          {
            C1PrintDocument doc = new C1PrintDocument();
            doc.FontHandling = FontHandling.EmbedActualFonts;
            RenderVerticalText rt;
            
            rt = new RenderVerticalText();
            rt.Style.Borders.All = LineDef.Default;
            rt.Style.Font = new Font("Arial", 18);
            rt.Text = ToVertical("CASINO ROYAL");
            doc.Body.Children.Add(rt);
            
            rt = new RenderVerticalText();
            rt.Style.Borders.All = LineDef.Default;
            rt.Style.Font = new Font("Arial", 18);
            rt.Text = ToVertical("Digits: (12345)");
            doc.Body.Children.Add(rt);
            
            return doc;
          }
          ]]>
        </code>
      </example>
      <seealso cref="T:C1.C1Preview.RenderVerticalParagraph" />
    </member>
    <member name="M:C1.C1Preview.RenderVerticalText.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderVerticalText" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderVerticalText.GetDefaultHeight">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderVerticalText.GetDefaultWidth">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderVerticalText.GetDefaultSplitHorzBehavior">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderVerticalText.GetDefaultSplitVertBehavior">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.RenderVerticalParagraph">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />内の縦書きテキストの段落を表します。 段落は、異なるスタイルを使ってレンダリングできるインラインのテキストおよび画像を含むこことができます。 段落のコンテンツは
        <see cref="P:C1.C1Preview.RenderParagraph.Content" />プロパティを介してアクセス可能です。
        <para>主として、アジア諸語（日本語など）のテキストを伝統的な方法で 右から左へ垂直方向にレンダリングするために設計されています。</para>
      </summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Preview.RenderVerticalParagraph" />のデフォルトの高さと幅は
          <c>auto</c>です。 特に、これは、改行なしのテキストがデフォルトで下方向に無制限に伸ばされることを 意味します。下部でテキストを折り返すには、
          <see cref="T:C1.C1Preview.RenderVerticalParagraph" />オブジェクトの 高さを明示的に設定する必要があります。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Preview.RenderVerticalText" />
    </member>
    <member name="M:C1.C1Preview.RenderVerticalParagraph.GetDefaultHeight">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderVerticalParagraph.GetDefaultWidth">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderVerticalParagraph.GetDefaultSplitHorzBehavior">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderVerticalParagraph.GetDefaultSplitVertBehavior">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1TypeSerializationEnum">
      <summary>これは内部使用専用です。 項目タイプをシリアル化する方法を決定します。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1TypeSerializationAttribute">
      <summary>これは内部使用専用です。 シリアライザにプロパティまたはフィールドのタイプ名のシリアル化を強制します。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1CollectionSerializationAttribute">
      <summary>これは内部使用専用です。 この属性は、コレクションのプロパティまたはフィールドの追加プロパティを定義します。</summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.C1CollectionSerializationAttribute.Aliases">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.C1CollectionSerializationAttribute.Types">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1ParentReferenceAttribute">
      <summary>これは内部使用専用です。 フィールドまたはプロパティを「親参照」としてマークできます。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1ClassSerializationAttribute">
      <summary>これは内部使用専用です。 クラスの追加プロパティを定義できます。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1ReferenceAttribute">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1ReferenceDestAttribute">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1CheckSerializableAttribute">
      <summary>これは内部使用専用です。 オブジェクトが逆シリアル化をサポートする場合にのみシリアル化されることを示します。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1IgnoreDeserializeErrorAttribute">
      <summary>これは内部使用専用です。 このプロパティの逆シリアル化値に発生するエラーが無視されることを示します。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1C1dOnlySerializableAttribute">
      <summary>これは内部使用専用です。 プロパティまたはフィールドが C1D 形式でのみシリアル化できることを示します。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1OpenXmlOnlySerializableAttribute">
      <summary>これは内部使用専用です。 プロパティまたはフィールドが C1DX 形式でのみシリアル化できることを示します。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1OpenXmlSerializationAttribute">
      <summary>これは内部使用専用です。 Open Xml 形式でのシリアル化のオプションを定義します。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1SerializeIgnoreAttribute">
      <summary>これは内部使用専用です。 定義されている場合、プロパティ／フィールドはシリアル化中のみ無視されます。 後方互換性のサポート目的で使用できます。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.IC1SerializeContext">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.IC1SerializeContext.Serializer">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.ZipStructureException">
      <summary>背後の zip ストリームが無効な形式だった場合に、 C1DX または C1MDX のシリアル化／逆シリアル化中に発生した例外を表します。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.SerializeExceptionBase">
      <summary>
        <see cref="T:C1.C1Preview.Serialization.SerializeException" />および
        <see cref="T:C1.C1Preview.Serialization.DeserializeException" />クラスの抽象基本クラス。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.SerializeExceptionBase.Log">
      <summary>シリアル化または逆シリアル化中に発生した例外の原因となった アクションを記述する文字列のリストを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.SerializeException">
      <summary>シリアル化中に発生した例外を表します。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.DeserializeException">
      <summary>逆シリアル化中に発生した例外を表します。</summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.DeserializeException.LineNumber">
      <summary>例外に関連付けられている行番号を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Serialization.DeserializeException.LinePosition">
      <summary>例外に関連付けられている行内位置を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.Serializer">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.Serialization.Serializer.c_DefWhiteSpaceHandling">
      <summary>デフォルトのホワイトスペースの取り扱いを示します。</summary>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.#ctor">
      <summary>
        <b>Serializer</b>クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.InternalSerialize(System.IO.Stream,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="stream"></param>
      <param name="o"></param>
    </member>
    <member name="M:C1.C1Preview.Serialization.Serializer.InternalDeserialize(System.IO.Stream,System.Object,System.Type)">
      <summary>これは内部使用専用です。</summary>
      <param name="stream"></param>
      <param name="o"></param>
      <param name="type"></param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1DBrush">
      <summary>これは内部使用専用です。 Brush クラスを XmlElement としてシリアル化します。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1DImageData">
      <summary>これは内部使用専用です。 クラスのライフにおける唯一の目的は、画像のシリアル化です。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1DImageData.TypeConverter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1DIconData">
      <summary>これは内部使用専用です。 クラスのライフにおける唯一の目的は、アイコンをシリアル化することです。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1DIconData.TypeConverter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1DData">
      <summary>これは内部使用専用です。 クラスのライフにおける唯一の目的は、画像のシリアル化です。</summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1DData.TypeConverter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.FlowAlignEnum">
      <summary>ブロックフローの配置モードを定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.FlowAlignEnum.Default">
      <summary>子オブジェクトの場合は、親で指定された配置が使用されます。</summary>
    </member>
    <member name="F:C1.C1Preview.FlowAlignEnum.Near">
      <summary>オブジェクトは、上から下へは左揃えで、左から右へは下揃えになります。</summary>
    </member>
    <member name="F:C1.C1Preview.FlowAlignEnum.Center">
      <summary>オブジェクトは中央揃えになります。</summary>
    </member>
    <member name="F:C1.C1Preview.FlowAlignEnum.Far">
      <summary>オブジェクトは、上から下へは右揃えで、左から右へは上揃えになります。</summary>
    </member>
    <member name="T:C1.C1Preview.WordWrapMode">
      <summary>テキスト行を折り返すときに単語をどのように処理するかを示します。</summary>
    </member>
    <member name="F:C1.C1Preview.WordWrapMode.Normal">
      <summary>デフォルト。 単語が長過ぎてコンテナの境界に収まらない場合を除いて単語は分割されません。</summary>
    </member>
    <member name="F:C1.C1Preview.WordWrapMode.BreakWord">
      <summary>必要に応じて任意の位置で単語を分割できます。</summary>
    </member>
    <member name="T:C1.C1Preview.AlignHorzEnum">
      <summary>テキストの水平方向の配置モードを定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.AlignHorzEnum.Left">
      <summary>テキストを左揃えにします。</summary>
    </member>
    <member name="F:C1.C1Preview.AlignHorzEnum.Center">
      <summary>テキストを左右の中央に配置します。</summary>
    </member>
    <member name="F:C1.C1Preview.AlignHorzEnum.Right">
      <summary>テキストを右揃えにします。</summary>
    </member>
    <member name="F:C1.C1Preview.AlignHorzEnum.Justify">
      <summary>テキストを左右の両端揃えにします。</summary>
    </member>
    <member name="F:C1.C1Preview.AlignHorzEnum.JustifyChars">
      <summary>テキストを均等割り付けにします。</summary>
    </member>
    <member name="T:C1.C1Preview.AlignVertEnum">
      <summary>テキストの垂直方向の配置モードを定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.AlignVertEnum.Top">
      <summary>テキストを上揃えにします。</summary>
    </member>
    <member name="F:C1.C1Preview.AlignVertEnum.Center">
      <summary>テキストを上下の中央に配置します。</summary>
    </member>
    <member name="F:C1.C1Preview.AlignVertEnum.Bottom">
      <summary>テキストを下揃えにします。</summary>
    </member>
    <member name="F:C1.C1Preview.AlignVertEnum.Justify">
      <summary>テキストを上下の両端揃えにします。</summary>
    </member>
    <member name="F:C1.C1Preview.AlignVertEnum.JustifyChars">
      <summary>
        縦書きテキスト（
        <see cref="T:C1.C1Preview.RenderVerticalText" />、
        <see cref="T:C1.C1Preview.RenderVerticalParagraph" />）に適用された場合、 すべての文字間に空白を追加してテキストを垂直方向に揃えます。
        <!-- TODO: remove this limitation: -->
        （
        <see cref="P:C1.C1Preview.C1PrintDocument.UseGdiPlusTextRendering" />が
        <c>false</c>の場合は、 このモードはサポートされず、
        <see cref="F:C1.C1Preview.AlignVertEnum.Justify" />が代わりに 使用されます。）
      </summary>
    </member>
    <member name="T:C1.C1Preview.ImageAlignHorzEnum">
      <summary>画像の水平方向の配置モードを定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.ImageAlignHorzEnum.Left">
      <summary>画像を左揃えにします。</summary>
    </member>
    <member name="F:C1.C1Preview.ImageAlignHorzEnum.Center">
      <summary>画像を左右の中央に配置します。</summary>
    </member>
    <member name="F:C1.C1Preview.ImageAlignHorzEnum.Right">
      <summary>画像を右揃えにします。</summary>
    </member>
    <member name="T:C1.C1Preview.ImageAlignVertEnum">
      <summary>画像の垂直方向の配置モードを定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.ImageAlignVertEnum.Top">
      <summary>画像を上揃えにします。</summary>
    </member>
    <member name="F:C1.C1Preview.ImageAlignVertEnum.Center">
      <summary>画像を上下の中央に配置します。</summary>
    </member>
    <member name="F:C1.C1Preview.ImageAlignVertEnum.Bottom">
      <summary>画像を下揃えにします。</summary>
    </member>
    <member name="T:C1.C1Preview.TextPositionEnum">
      <summary>テキスト位置を定義します（通常、下付き、上付き）。</summary>
    </member>
    <member name="F:C1.C1Preview.TextPositionEnum.Normal">
      <summary>テキストは、通常に配置されます。</summary>
    </member>
    <member name="F:C1.C1Preview.TextPositionEnum.Subscript">
      <summary>テキストは、下付きで配置されます。</summary>
    </member>
    <member name="F:C1.C1Preview.TextPositionEnum.Superscript">
      <summary>テキストは、上付きで配置されます。</summary>
    </member>
    <member name="T:C1.C1Preview.IImageAlign">
      <summary>画像配置のプロパティを定義します。</summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.AlignHorz">
      <summary>コンテナ内の画像の水平配置を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.AlignVert">
      <summary>コンテナ内の画像の垂直配置を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.StretchHorz">
      <summary>画像をコンテナに合わせて水平方向に引き伸ばされるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.StretchVert">
      <summary>画像をコンテナに合わせて垂直方向に引き伸ばされるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.KeepAspectRatio">
      <summary>画像のレンダリング時に元の縦横比が保持されるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.TileHorz">
      <summary>画像がコンテナ内に水平方向にタイル表示されるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.TileVert">
      <summary>画像がコンテナ内に垂直方向にタイル表示されるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.BestFit">
      <summary>画像がコンテナ内に合わせてサイズ変更されるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.AlignHorzExpr">
      <summary>
        <see cref="P:C1.C1Preview.IImageAlign.AlignHorz" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.AlignVertExpr">
      <summary>
        <see cref="P:C1.C1Preview.IImageAlign.AlignVert" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.StretchHorzExpr">
      <summary>
        <see cref="P:C1.C1Preview.IImageAlign.StretchHorz" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.StretchVertExpr">
      <summary>
        <see cref="P:C1.C1Preview.IImageAlign.StretchVert" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.KeepAspectRatioExpr">
      <summary>
        <see cref="P:C1.C1Preview.IImageAlign.KeepAspectRatio" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.TileHorzExpr">
      <summary>
        <see cref="P:C1.C1Preview.IImageAlign.TileHorz" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.TileVertExpr">
      <summary>
        <see cref="P:C1.C1Preview.IImageAlign.TileVert" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.ImageAlign">
      <summary>画像の配置を記述します。</summary>
    </member>
    <member name="M:C1.C1Preview.ImageAlign.#ctor(C1.C1Preview.ImageAlignHorzEnum,C1.C1Preview.ImageAlignVertEnum,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <see cref="T:C1.C1Preview.ImageAlign" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="alignHorz">
        <see cref="P:C1.C1Preview.ImageAlign.AlignHorz" />に割り当てられた値。
      </param>
      <param name="alignVert">
        <see cref="P:C1.C1Preview.ImageAlign.AlignVert" />に割り当てられた値。
      </param>
      <param name="stretchHorz">
        <see cref="P:C1.C1Preview.ImageAlign.StretchHorz" />に割り当てられた値。
      </param>
      <param name="stretchVert">
        <see cref="P:C1.C1Preview.ImageAlign.StretchVert" />に割り当てられた値。
      </param>
      <param name="keepAspectRatio">
        <see cref="P:C1.C1Preview.ImageAlign.KeepAspectRatio" />に割り当てられた値。
      </param>
      <param name="tileHorz">
        <see cref="P:C1.C1Preview.ImageAlign.TileHorz" />に割り当てられた値。
      </param>
      <param name="tileVert">
        <see cref="P:C1.C1Preview.ImageAlign.TileVert" />に割り当てられた値。
      </param>
    </member>
    <member name="M:C1.C1Preview.ImageAlign.ToString">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.ImageAlign" />を表す文字列を返します。
      </summary>
      <returns>
        現在の
        <see cref="T:C1.C1Preview.ImageAlign" />を表す文字列。
      </returns>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.AlignHorz">
      <summary>画像の水平方向の配置。</summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.AlignVert">
      <summary>画像の垂直方向の配置。</summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.StretchHorz">
      <summary>画像をレイアウト四角形に合わせて水平方向に引き伸ばすか、元の幅のままにするかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.StretchVert">
      <summary>画像をレイアウト四角形に合わせて垂直方向に引き伸ばすか、元の高さのままにするかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.KeepAspectRatio">
      <summary>縦横比を維持します。</summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.TileHorz">
      <summary>画像が水平方向に並べられます。</summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.TileVert">
      <summary>画像が垂直方向に並べられます。</summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.BestFit">
      <summary>このプロパティは、StretchHorz、StretchVert、および KeepAspectRatio プロパティを合わせた機能です。</summary>
      <remarks>
        <para>
          このプロパティを取得すると、
          <see cref="P:C1.C1Preview.ImageAlign.StretchHorz" />、
          <see cref="P:C1.C1Preview.ImageAlign.StretchVert" />、および
          <see cref="P:C1.C1Preview.ImageAlign.KeepAspectRatio" />値の論理和（
          <b>AND</b>）が返されます。
        </para>
        <para>
          このプロパティを
          <b>true</b>値に設定すると、
          <see cref="P:C1.C1Preview.ImageAlign.StretchHorz" />、
          <see cref="P:C1.C1Preview.ImageAlign.StretchVert" />、および
          <see cref="P:C1.C1Preview.ImageAlign.KeepAspectRatio" />が
          <b>true</b>に設定されます。
        </para>
        <para>
          このプロパティを
          <b>false</b>値に設定すると、
          <see cref="P:C1.C1Preview.ImageAlign.KeepAspectRatio" />のみが
          <b>false</b>に設定されます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.AlignHorzExpr">
      <summary>
        <see cref="P:C1.C1Preview.ImageAlign.AlignHorz" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.AlignVertExpr">
      <summary>
        <see cref="P:C1.C1Preview.ImageAlign.AlignVert" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.StretchHorzExpr">
      <summary>
        <see cref="P:C1.C1Preview.ImageAlign.StretchHorz" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.StretchVertExpr">
      <summary>
        <see cref="P:C1.C1Preview.ImageAlign.StretchVert" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.KeepAspectRatioExpr">
      <summary>
        <see cref="P:C1.C1Preview.ImageAlign.KeepAspectRatio" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.TileHorzExpr">
      <summary>
        <see cref="P:C1.C1Preview.ImageAlign.TileHorz" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.TileVertExpr">
      <summary>
        <see cref="P:C1.C1Preview.ImageAlign.TileVert" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.ImageAlign.Default">
      <summary>デフォルトの画像の配置を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.Offsets">
      <summary>
        矩形領域の４辺に対応する４つの
        <see cref="T:C1.C1Preview.Unit" />値を表す 構造体。
        <see cref="P:C1.C1Preview.Style.Padding" />と
        <see cref="P:C1.C1Preview.Style.Spacing" />プロパティによって使用されます。
      </summary>
    </member>
    <member name="T:C1.C1Preview.IOffsets">
      <summary>
        矩形領域の４辺に対応する４つの
        <see cref="T:C1.C1Preview.Unit" />値を 記述します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.Left">
      <summary>左オフセット値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.Top">
      <summary>上オフセット値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.Right">
      <summary>右オフセット値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.Bottom">
      <summary>下オフセット値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.All">
      <summary>４つすべてのオフセット値を設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.LeftExpr">
      <summary>
        <see cref="P:C1.C1Preview.IOffsets.Left" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.TopExpr">
      <summary>
        <see cref="P:C1.C1Preview.IOffsets.Top" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.RightExpr">
      <summary>
        <see cref="P:C1.C1Preview.IOffsets.Right" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.BottomExpr">
      <summary>
        <see cref="P:C1.C1Preview.IOffsets.Bottom" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Offsets.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
        <see cref="P:C1.C1Preview.Offsets.Left" />、
        <see cref="P:C1.C1Preview.Offsets.Top" />、
        <see cref="P:C1.C1Preview.Offsets.Right" />、および
        <see cref="P:C1.C1Preview.Offsets.Bottom" />値を割り当てて、
        <see cref="T:C1.C1Preview.Offsets" />構造体の新しいインスタンスを初期化します。
      </summary>
      <param name="left">
        <see cref="P:C1.C1Preview.Offsets.Left" />プロパティに割り当てられた
        <see cref="T:C1.C1Preview.Unit" />値を表す文字列。
      </param>
      <param name="top">
        <see cref="P:C1.C1Preview.Offsets.Top" />プロパティに割り当てられた
        <see cref="T:C1.C1Preview.Unit" />値を表す文字列。
      </param>
      <param name="right">
        <see cref="P:C1.C1Preview.Offsets.Right" />プロパティに割り当てられた
        <see cref="T:C1.C1Preview.Unit" />値を表す文字列。
      </param>
      <param name="bottom">
        <see cref="P:C1.C1Preview.Offsets.Bottom" />プロパティに割り当てられた
        <see cref="T:C1.C1Preview.Unit" />値を表す文字列。
      </param>
      <remarks>
        絶対
        <see cref="T:C1.C1Preview.Unit" />値（「1mm」または「8in」）のみが有効です。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.Offsets.#ctor(System.String)">
      <summary>
        単一の値を４つすべてのオフセットプロパティに割り当てて、
        <see cref="T:C1.C1Preview.Offsets" />構造体の 新しいインスタンスを初期化します。
      </summary>
      <param name="all">
        ４つすべてのオフセットに割り当てられた
        <see cref="T:C1.C1Preview.Unit" />値を表す文字列。
      </param>
      <remarks>
        絶対
        <see cref="T:C1.C1Preview.Unit" />値（「1mm」または「8in」）のみが有効です。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.Offsets.#ctor(C1.C1Preview.Unit)">
      <summary>
        単一の値を４つすべてのオフセットプロパティに割り当てて、
        <see cref="T:C1.C1Preview.Offsets" />構造体の 新しいインスタンスを初期化します。
      </summary>
      <param name="all">
        ４つすべてのオフセットに割り当てられた
        <see cref="T:C1.C1Preview.Unit" />値。
      </param>
      <remarks>
        絶対
        <see cref="T:C1.C1Preview.Unit" />値（「1mm」または「8in」）のみが有効です。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Offsets.Left">
      <summary>左オフセット値を取得または設定します。</summary>
      <remarks>
        絶対
        <see cref="T:C1.C1Preview.Unit" />値（「1mm」または「8in」）のみが有効です。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Offsets.Top">
      <summary>上オフセット値を取得または設定します。</summary>
      <remarks>
        絶対
        <see cref="T:C1.C1Preview.Unit" />値（「1mm」または「8in」）のみが有効です。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Offsets.Right">
      <summary>右オフセット値を取得または設定します。</summary>
      <remarks>
        絶対
        <see cref="T:C1.C1Preview.Unit" />値（「1mm」または「8in」）のみが有効です。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Offsets.Bottom">
      <summary>下オフセット値を取得または設定します。</summary>
      <remarks>
        絶対
        <see cref="T:C1.C1Preview.Unit" />値（「1mm」または「8in」）のみが有効です。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Offsets.All">
      <summary>４つすべてのオフセット値を設定します。</summary>
      <remarks>
        絶対
        <see cref="T:C1.C1Preview.Unit" />値（「1mm」または「8in」）のみが有効です。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Offsets.LeftExpr">
      <summary>
        <see cref="P:C1.C1Preview.Offsets.Left" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Offsets.TopExpr">
      <summary>
        <see cref="P:C1.C1Preview.Offsets.Top" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Offsets.RightExpr">
      <summary>
        <see cref="P:C1.C1Preview.Offsets.Right" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Offsets.BottomExpr">
      <summary>
        <see cref="P:C1.C1Preview.Offsets.Bottom" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.LineDef">
      <summary>線のレンダリング属性を定義します。</summary>
    </member>
    <member name="M:C1.C1Preview.LineDef.#ctor">
      <summary>
        デフォルト値（1pt 太い黒線）を使って、
        <see cref="T:C1.C1Preview.LineDef" />クラスの 新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.LineDef.#ctor(System.Drawing.Color)">
      <summary>
        線の色を割り当てて、
        <see cref="T:C1.C1Preview.LineDef" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="color">
        <see cref="P:C1.C1Preview.LineDef.Color" />プロパティに割り当てられた値。
      </param>
    </member>
    <member name="M:C1.C1Preview.LineDef.#ctor(C1.C1Preview.Unit,System.Drawing.Color)">
      <summary>
        線の幅と色を割り当てて、
        <see cref="T:C1.C1Preview.LineDef" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="width">
        <see cref="P:C1.C1Preview.LineDef.Color" />プロパティに割り当てられた値。
      </param>
      <param name="color">
        <see cref="P:C1.C1Preview.LineDef.Color" />プロパティに割り当てられた値。
      </param>
    </member>
    <member name="M:C1.C1Preview.LineDef.#ctor(C1.C1Preview.Unit,System.Drawing.Color,System.Drawing.Drawing2D.DashStyle)">
      <summary>
        線の幅、色、破線スタイルを割り当てて、
        <see cref="T:C1.C1Preview.LineDef" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="width">
        <see cref="P:C1.C1Preview.LineDef.Color" />プロパティに割り当てられた値。
      </param>
      <param name="color">
        <see cref="P:C1.C1Preview.LineDef.Color" />プロパティに割り当てられた値。
      </param>
      <param name="style">
        <see cref="P:C1.C1Preview.LineDef.DashStyle" />プロパティに割り当てられた値。
      </param>
    </member>
    <member name="M:C1.C1Preview.LineDef.#ctor(C1.C1Preview.Unit,System.Drawing.Color,System.Single[])">
      <summary>
        線の幅、色、破線パターンを割り当てて、
        <see cref="T:C1.C1Preview.LineDef" />クラスの 新しいインスタンスを初期化します。
        <see cref="P:C1.C1Preview.LineDef.DashStyle" />は
        <see cref="F:System.Drawing.Drawing2D.DashStyle.Custom" />に設定されます。
      </summary>
      <param name="width">
        <see cref="P:C1.C1Preview.LineDef.Color" />プロパティに割り当てられた値。
      </param>
      <param name="color">
        <see cref="P:C1.C1Preview.LineDef.Color" />プロパティに割り当てられた値。
      </param>
      <param name="dashPattern">
        <see cref="P:C1.C1Preview.LineDef.DashPattern" />プロパティに割り当てられた値。
      </param>
    </member>
    <member name="M:C1.C1Preview.LineDef.#ctor(C1.C1Preview.Unit,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.DashStyle)">
      <summary>
        線の幅、色、破線背景色、および破線スタイルを割り当てて、
        <see cref="T:C1.C1Preview.LineDef" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="width">
        <see cref="P:C1.C1Preview.LineDef.Color" />プロパティに割り当てられた値。
      </param>
      <param name="color">
        <see cref="P:C1.C1Preview.LineDef.Color" />プロパティに割り当てられた値。
      </param>
      <param name="backColor">
        <see cref="P:C1.C1Preview.LineDef.BackColor" />プロパティに割り当てられた値。
      </param>
      <param name="style">
        <see cref="P:C1.C1Preview.LineDef.DashStyle" />プロパティに割り当てられた値。
      </param>
    </member>
    <member name="M:C1.C1Preview.LineDef.#ctor(C1.C1Preview.Unit,System.Drawing.Color,System.Drawing.Color,System.Single[])">
      <summary>
        線の幅、色、破線背景色、および破線パターンを割り当てて、
        <see cref="T:C1.C1Preview.LineDef" />クラスの 新しいインスタンスを初期化します。
        <see cref="P:C1.C1Preview.LineDef.DashStyle" />は
        <see cref="F:System.Drawing.Drawing2D.DashStyle.Custom" />に設定されます。
      </summary>
      <param name="width">
        <see cref="P:C1.C1Preview.LineDef.Color" />プロパティに割り当てられた値。
      </param>
      <param name="color">
        <see cref="P:C1.C1Preview.LineDef.Color" />プロパティに割り当てられた値。
      </param>
      <param name="backColor">
        <see cref="P:C1.C1Preview.LineDef.BackColor" />プロパティに割り当てられた値。
      </param>
      <param name="dashPattern">
        <see cref="P:C1.C1Preview.LineDef.DashPattern" />プロパティに割り当てられた値。
      </param>
    </member>
    <member name="M:C1.C1Preview.LineDef.IsSameStyle(C1.C1Preview.LineDef)">
      <summary>
        現在と別の
        <see cref="T:C1.C1Preview.LineDef" />オブジェクトが同じ線スタイルを定義するかどうか、 すなわち
        <see cref="P:C1.C1Preview.LineDef.Color" />、
        <see cref="P:C1.C1Preview.LineDef.BackColor" />、
        <see cref="P:C1.C1Preview.LineDef.DashStyle" />、および
        <see cref="P:C1.C1Preview.LineDef.DashPattern" />プロパティの値が同じかどうかをテストします。 このメソッドは線の幅を比較しないことに注意してください。
      </summary>
      <param name="line">
        現在と比較する
        <see cref="T:C1.C1Preview.LineDef" />。
      </param>
      <returns>
        ２つの線が同じスタイルを使って、
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.LineDef.Equals(System.Object)">
      <summary>
        指定した
        <see cref="T:C1.C1Preview.LineDef" />オブジェクトが現在のオブジェクトに等しいかどうかを決定します。 このメソッドは、オブジェクトのプロパティ値を比較します。
      </summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>
        指定したオブジェクトのプロパティが現在のオブジェクトのプロパティと等しい場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.LineDef.GetHashCode">
      <summary>
        <see cref="T:C1.C1Preview.LineDef" />タイプのハッシュ関数として機能します。
      </summary>
      <returns>現在のオブジェクトのハッシュコード。</returns>
    </member>
    <member name="M:C1.C1Preview.LineDef.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:C1.C1Preview.LineDef.Parse(System.String,System.Boolean)">
      <summary>
        <see cref="T:C1.C1Preview.LineDef" />オブジェクトを作成して、
        <see cref="T:C1.C1Preview.LineDef" />の 文字列表現の解析によって取得された値を使って初期化します。
      </summary>
      <param name="s">
        <see cref="T:C1.C1Preview.LineDef" />を表す文字列（
        <see cref="M:C1.C1Preview.LineDef.ToString" />を参照）。
      </param>
      <param name="throwOnError">
        <b>true</b>の場合は、解析時にエラーが発生すると例外がスローされます。その以外の場合は、エラーは無視されます。
      </param>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.LineDef" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.LineDef.Parse(System.String,System.Boolean,System.ComponentModel.ITypeDescriptorContext)">
      <summary>これは内部使用専用です。</summary>
      <param name="s"></param>
      <param name="throwOnError"></param>
      <param name="context"></param>
      <returns></returns>
    </member>
    <member name="P:C1.C1Preview.LineDef.Color">
      <summary>線の色を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.Width">
      <summary>線の幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.BackColor">
      <summary>ペンの背景色（ダッシュ間のスペースの色）を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.DashStyle">
      <summary>この LineDef で描画される破線に使用されるスタイルを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.DashPattern">
      <summary>カスタムなダッシュとスペースの配列を取得します。</summary>
      <remarks>
        このプロパティは、
        <see cref="P:C1.C1Preview.LineDef.DashStyle" />が
        <see cref="F:System.Drawing.Drawing2D.DashStyle.Custom" />に設定されている場合にのみ使用されます。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.LineDef.Empty">
      <summary>Color.Empty と Unit.Empty を使用した空の線を表します。</summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.Default">
      <summary>Color.Black と 0.5pt を使用したデフォルトの実線を表します。</summary>
    </member>
    <member name="P:C1.C1Preview.LineDef.DefaultBold">
      <summary>Color.Black と 2pt を使用したデフォルトの太実線を表します。</summary>
    </member>
    <member name="T:C1.C1Preview.LineDef.TypeConverter">
      <summary>
        <see cref="T:C1.C1Preview.LineDef" />タイプのオブジェクトの変換に使用されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.LineDef.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
        文字列を
        <see cref="T:C1.C1Preview.LineDef" />に変換します。
      </summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="str">変換する文字列。</param>
      <returns>
        変換された
        <see cref="T:C1.C1Preview.LineDef" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.LineDef.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>オブジェクトを文字列に変換します。</summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="o">変換するオブジェクト。</param>
      <returns>変換された文字列。</returns>
    </member>
    <member name="T:C1.C1Preview.Borders">
      <summary>四角形領域の境界線を記述します。</summary>
    </member>
    <member name="T:C1.C1Preview.IBorders">
      <summary>
        矩形領域の周囲の４つの枠線を記述します。 各枠線は
        <see cref="T:C1.C1Preview.LineDef" />オブジェクトで表されます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.Left">
      <summary>左の枠線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.Top">
      <summary>上の枠線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.Right">
      <summary>右の枠線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.Bottom">
      <summary>下の枠線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.All">
      <summary>４つすべての枠線を設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.RadiusX">
      <summary>枠線の丸みのある角の描画に使用される楕円の幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.RadiusY">
      <summary>枠線の丸みのある角の描画に使用される楕円の高さを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.IsRound">
      <summary>
        現在の枠線の角が丸いかどうか（
        <see cref="P:C1.C1Preview.IBorders.RadiusX" />と
        <see cref="P:C1.C1Preview.IBorders.RadiusY" />の両方が非ゼロ値を持つかどうか）を示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.LeftExpr">
      <summary>
        <see cref="P:C1.C1Preview.IBorders.Left" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.TopExpr">
      <summary>
        <see cref="P:C1.C1Preview.IBorders.Top" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.RightExpr">
      <summary>
        <see cref="P:C1.C1Preview.IBorders.Right" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.BottomExpr">
      <summary>
        <see cref="P:C1.C1Preview.IBorders.Bottom" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.RadiusXExpr">
      <summary>
        <see cref="P:C1.C1Preview.IBorders.RadiusX" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.RadiusYExpr">
      <summary>
        <see cref="P:C1.C1Preview.IBorders.RadiusY" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.Left">
      <summary>左の境界線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Borders.Top">
      <summary>上の境界線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Borders.Right">
      <summary>右の境界線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Borders.Bottom">
      <summary>下の境界線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Borders.All">
      <summary>４つすべての枠線を単一の値に設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Borders.RadiusX">
      <summary>枠線の丸みのある角の描画に使用される楕円の X 半径を取得または設定します。</summary>
      <remarks>
        これと
        <see cref="P:C1.C1Preview.Borders.RadiusY" />の両方が非ゼロの場合、 すべての枠線は同じ（
        <see cref="P:C1.C1Preview.Borders.Top" />）枠線の太さを使用して描画されます。
        <para>この値が枠線の太さより小さい場合は、枠線の太さが半径として使用されます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Borders.RadiusY">
      <summary>枠線の丸みのある角の描画に使用される楕円の Y 半径を取得または設定します。</summary>
      <remarks>
        これと
        <see cref="P:C1.C1Preview.Borders.RadiusX" />の両方が非ゼロの場合、 すべての枠線は同じ（
        <see cref="P:C1.C1Preview.Borders.Top" />）枠線の太さを使用して描画されます。
        <para>この値が枠線の太さより小さい場合は、枠線の太さが半径として使用されます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Borders.IsRound">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.Borders" />構造体が角が丸い枠線を定義するかどうか （
        <see cref="P:C1.C1Preview.Borders.RadiusX" />と
        <see cref="P:C1.C1Preview.Borders.RadiusY" />の 両方が非ゼロ値であるかどうか）を示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.LeftExpr">
      <summary>
        <see cref="P:C1.C1Preview.Borders.Left" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.TopExpr">
      <summary>
        <see cref="P:C1.C1Preview.Borders.Top" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.RightExpr">
      <summary>
        <see cref="P:C1.C1Preview.Borders.Right" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.BottomExpr">
      <summary>
        <see cref="P:C1.C1Preview.Borders.Bottom" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.RadiusXExpr">
      <summary>
        <see cref="P:C1.C1Preview.Borders.RadiusX" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Borders.RadiusYExpr">
      <summary>
        <see cref="P:C1.C1Preview.Borders.RadiusY" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.GridLines">
      <summary>テーブルの線を表します。</summary>
    </member>
    <member name="T:C1.C1Preview.IGridLines">
      <summary>
        <see cref="T:C1.C1Preview.RenderTable" />の描画に使用されるグリッド線を記述します。 各線は
        <see cref="T:C1.C1Preview.LineDef" />オブジェクトによって表されます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.Left">
      <summary>テーブルの左の外枠線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.Top">
      <summary>テーブルの上の外枠線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.Right">
      <summary>テーブルの右の外枠線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.Bottom">
      <summary>テーブルの下の外枠線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.Vert">
      <summary>テーブル内の垂直な内側の線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.Horz">
      <summary>テーブルの水平の内側線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.All">
      <summary>６つすべての線を単一の値に設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.LeftExpr">
      <summary>
        <see cref="P:C1.C1Preview.IGridLines.Left" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.TopExpr">
      <summary>
        <see cref="P:C1.C1Preview.IGridLines.Top" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.RightExpr">
      <summary>
        <see cref="P:C1.C1Preview.IGridLines.Right" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.BottomExpr">
      <summary>
        <see cref="P:C1.C1Preview.IGridLines.Bottom" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.VertExpr">
      <summary>
        <see cref="P:C1.C1Preview.IGridLines.Vert" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.HorzExpr">
      <summary>
        <see cref="P:C1.C1Preview.IGridLines.Horz" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.Left">
      <summary>左の境界線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.Top">
      <summary>上の境界線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.Right">
      <summary>右の境界線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.Bottom">
      <summary>下の境界線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.Vert">
      <summary>テーブル内部の垂直線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.Horz">
      <summary>テーブル内部の水平線を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.All">
      <summary>６つすべての線を単一の値に設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.LeftExpr">
      <summary>
        <see cref="P:C1.C1Preview.GridLines.Left" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.TopExpr">
      <summary>
        <see cref="P:C1.C1Preview.GridLines.Top" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.RightExpr">
      <summary>
        <see cref="P:C1.C1Preview.GridLines.Right" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.BottomExpr">
      <summary>
        <see cref="P:C1.C1Preview.GridLines.Bottom" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.VertExpr">
      <summary>
        <see cref="P:C1.C1Preview.GridLines.Vert" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.GridLines.HorzExpr">
      <summary>
        <see cref="P:C1.C1Preview.GridLines.Horz" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkAttrs">
      <summary>ハイパーリンクの表示スタイル属性の抽象基本クラス。</summary>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkAttrs.#ctor">
      <summary>C1HyperlinkAttrs クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkAttrs.IsDefault">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.C1HyperlinkAttrs" />がすべてのデフォルト値を持つかどうかを調べます。
      </summary>
      <returns>
        現在のオブジェクトのすべてのプロパティがデフォルト値を持つ場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkTextAttrs">
      <summary>テキスト内のハイパーリンクの表示スタイル属性を表します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkTextAttrs.#ctor">
      <summary>C1HyperlinkTextAttrs クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkTextAttrs.#ctor(System.Drawing.Color,System.Drawing.Color,System.Boolean)">
      <summary>C1HyperlinkTextAttrs クラスの新しいインスタンスを初期化します。</summary>
      <param name="backColor">背景色。</param>
      <param name="foreColor">テキストの色。</param>
      <param name="underline">下線を付けるかどうか。</param>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkTextAttrs.#ctor(System.Boolean)">
      <summary>C1HyperlinkTextAttrs クラスの新しいインスタンスを初期化します。</summary>
      <param name="underline">下線を付けるかどうか。</param>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkTextAttrs.ShouldSerializeBackColor">
      <summary>
        <see cref="P:C1.C1Preview.C1HyperlinkTextAttrs.BackColor" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1HyperlinkTextAttrs.BackColor" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkTextAttrs.ShouldSerializeForeColor">
      <summary>
        <see cref="P:C1.C1Preview.C1HyperlinkTextAttrs.ForeColor" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.C1HyperlinkTextAttrs.ForeColor" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkTextAttrs.IsDefault">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.C1HyperlinkTextAttrs" />がすべてのデフォルト値を持つかどうかを調べます。
      </summary>
      <returns>
        現在のオブジェクトのすべてのプロパティがデフォルト値を持つ場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkTextAttrs.Equals(System.Object)">
      <summary>指定したオブジェクトが現在のオブジェクトに等しいかどうかを決定します。 このメソッドは、２つのオブジェクトのプロパティを比較します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>
        指定したオブジェクトが現在のオブジェクトと等しい場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkTextAttrs.GetHashCode">
      <summary>
        <see cref="T:C1.C1Preview.C1HyperlinkTextAttrs" />のハッシュ関数として機能します。
      </summary>
      <returns>現在のオブジェクトのハッシュコード。</returns>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.BackColor">
      <summary>背景色を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.ForeColor">
      <summary>テキストの色を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.Underline">
      <summary>テキストに下線を付けるかどうかを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.VisitedDefault">
      <summary>表示済みのハイパーリンクのデフォルト属性を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.NormalDefault">
      <summary>通常ハイパーリンクのデフォルト属性を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkTextAttrs.HoverDefault">
      <summary>強調表示されたハイパーリンクのデフォルト属性を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.Shadow">
      <summary>
        <see cref="T:C1.C1Preview.RenderObject" />によってキャストされた影を表します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.IShadow">
      <summary>
        <see cref="T:C1.C1Preview.RenderObject" />によってキャストされた影を表します。 このインタフェースは、
        <see cref="T:C1.C1Preview.Shadow" />構造体によって実装されます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.Transparency">
      <summary>
        影の透明度をパーセントで取得または設定します。
        <b>0</b>の値は塗りつぶし（不透明）の影、
        <b>100</b>の値（デフォルト）は 完全透明（非表示）の影を定義します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.Size">
      <summary>オブジェクトのサイズに相対的な影のサイズをパーセントで取得または設定します。 100 の値（デフォルト）は、影がオブジェクトと同じサイズを 持つことを示します。</summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.Distance">
      <summary>
        影の中心がオブジェクトの中心からのオフセットである距離を取得または設定します。 絶対
        <see cref="T:C1.C1Preview.Unit" />値（「0.5in」または「4mm」など）のみを このプロパティに割り当てることができることに注意してください。
        <para>
          デフォルトは
          <b>2mm</b>です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.Angle">
      <summary>
        影の角度を度単位で取得または設定します。角度は、３時の位置に 相対的に時計回りに測定されます。デフォルトは
        <b>45</b>です。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.Color">
      <summary>
        影の色を取得または設定します。デフォルトは
        <b>Black</b>です。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.TransparencyExpr">
      <summary>
        <see cref="P:C1.C1Preview.IShadow.Transparency" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.SizeExpr">
      <summary>
        <see cref="P:C1.C1Preview.IShadow.Size" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.DistanceExpr">
      <summary>
        <see cref="P:C1.C1Preview.IShadow.Distance" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.AngleExpr">
      <summary>
        <see cref="P:C1.C1Preview.IShadow.Angle" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.ColorExpr">
      <summary>
        <see cref="P:C1.C1Preview.IShadow.Color" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Shadow.#ctor(System.Single,System.Single,C1.C1Preview.Unit,System.Single,System.Drawing.Color)">
      <summary>
        <see cref="P:C1.C1Preview.Shadow.Transparency" />、
        <see cref="P:C1.C1Preview.Shadow.Size" />、
        <see cref="P:C1.C1Preview.Shadow.Distance" />、 および
        <see cref="P:C1.C1Preview.Shadow.Angle" />値を割り当てて、
        <see cref="T:C1.C1Preview.Shadow" />構造体の 新しいインスタンスを初期化します。
      </summary>
      <param name="transparency">
        <see cref="P:C1.C1Preview.Shadow.Transparency" />プロパティに割り当てられた値。
      </param>
      <param name="size">
        <see cref="P:C1.C1Preview.Shadow.Size" />プロパティに割り当てられた値。
      </param>
      <param name="distance">
        <see cref="P:C1.C1Preview.Shadow.Distance" />プロパティに割り当てられた絶対
        <see cref="T:C1.C1Preview.Unit" />値。
      </param>
      <param name="angle">
        <see cref="P:C1.C1Preview.Shadow.Angle" />プロパティに割り当てられた値。
      </param>
      <param name="color">
        <see cref="P:C1.C1Preview.Shadow.Color" />プロパティに割り当てられた値。
      </param>
    </member>
    <member name="P:C1.C1Preview.Shadow.Transparency">
      <summary>
        影の透明度をパーセントで取得または設定します。
        <b>0</b>の値は塗りつぶし（不透明）の影、
        <b>100</b>の値（デフォルト）は 完全透明（非表示）の影を定義します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Shadow.Size">
      <summary>オブジェクトのサイズに相対的な影のサイズをパーセントで取得または設定します。 100 の値は、影がオブジェクトと同じサイズを持つことを 示します。</summary>
    </member>
    <member name="P:C1.C1Preview.Shadow.Distance">
      <summary>
        影の中心がオブジェクトの中心からのオフセットである距離を取得または設定します。 絶対
        <see cref="T:C1.C1Preview.Unit" />値（「0.5in」または「4mm」など）のみを このプロパティに割り当てることができることに注意してください。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Shadow.Angle">
      <summary>影の角度を度単位で取得または設定します。 角度は、３時の位置に相対的に時計回りに測定されます。</summary>
    </member>
    <member name="P:C1.C1Preview.Shadow.Color">
      <summary>影の色を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Shadow.TransparencyExpr">
      <summary>
        <see cref="P:C1.C1Preview.Shadow.Transparency" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Shadow.SizeExpr">
      <summary>
        <see cref="P:C1.C1Preview.Shadow.Size" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Shadow.DistanceExpr">
      <summary>
        <see cref="P:C1.C1Preview.Shadow.Distance" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Shadow.AngleExpr">
      <summary>
        <see cref="P:C1.C1Preview.Shadow.Angle" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Shadow.ColorExpr">
      <summary>
        <see cref="P:C1.C1Preview.Shadow.Color" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Style">
      <summary>描画オブジェクトのスタイルを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.Style.Clear">
      <summary>スタイルを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.Style.AssignNonInheritedFrom(C1.C1Preview.Style)">
      <summary>別のオブジェクトからすべての非継承プロパティをコピーします。</summary>
      <param name="source">
        プロパティのコピー元のソース
        <see cref="T:C1.C1Preview.Style" />。
      </param>
      <remarks>
        事実上、このメソッドは、現在の
        <see cref="T:C1.C1Preview.Style" />を
        <paramref name="source" />スタイルの完全なコピーにします。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasExprs">
      <summary>現在のスタイルが計算されるプロパティを持つかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Style.Owner">
      <summary>現在のスタイルのオーナーを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Style.Parent">
      <summary>親スタイルを取得します。</summary>
      <remarks>
        初期の
        <see cref="T:C1.C1Preview.Style" />オブジェクトは明示的に設定されたプロパティを 何も持っていません。 すなわち、すべてのアンビエントプロパティ（フォントなど）の 有効値が所属先のオブジェクトのスタイルから継承されるのに対し、 すべての非アンビエントプロパティ（枠線など）の有効値は このプロパティによって指定されます。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.Parents">
      <summary>
        両方の親（
        <see cref="P:C1.C1Preview.Style.Parent" />と
        <see cref="P:C1.C1Preview.Style.AmbientParent" />）を同じ値に設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.Children">
      <summary>子スタイルのコレクションを取得します。</summary>
      <remarks>
        このメソッドは常に子スタイルの非
        <b>null</b>コレクションを、 存在しなかった場合は初期化して返します。 スタイルが
        <see cref="P:C1.C1Preview.Style.Children" />コレクションを作成せずに 子スタイルをすでに含んでいるかどうかをテストするには、
        <see cref="P:C1.C1Preview.Style.HasChildren" />プロパティを使用します。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HasChildren">
      <summary>スタイルに子スタイルがあることを示します。</summary>
    </member>
    <member name="P:C1.C1Preview.Style.AmbientParent">
      <summary>親の環境スタイルを取得します。</summary>
      <remarks>
        初期は、
        <see cref="T:C1.C1Preview.Style" />オブジェクトは 明示的に設定されたプロパティは何も持っていません。 すなわち、すべてのアンビエントプロパティ（フォントなど）の有効値は、 このプロパティが非
        <b>null</b>値に設定されていないかぎり、 所属先のオブジェクトのスタイルから継承されます。 非 null 値に設定されている場合はそのスタイルから継承されます。
        <para>
          <b>AmbientParent</b>が指定されている場合でも、そのスタイル または各アンビエント親のいずれか（スタイルまたは所属先のオブジェクト）に 明示的に設定されたアンビエントプロパティのみが現在のスタイルに 伝搬することに注意してください。詳細は、以下の例を参照してください。
        </para>
      </remarks>
      <example>
        たとえば、
        <code>
          <![CDATA[
          C1PrintDocument doc = new C1PrintDocument();
          RenderArea ra = new RenderArea();
          ra.Style.FontBold = true;
          RenderText rt = new RenderText("my text");
          ra.Style.AmbientParent = doc.Style;
          ra.Children.Add(rt);
          doc.Body.Children.Add(ra);
          ]]>
        </code>
        のコードは、「my text」を太字で印刷するのに対し、
        <code>
          <![CDATA[
          C1PrintDocument doc = new C1PrintDocument();
          doc.Style.FontBold = false; //この行が異なります
          RenderArea ra = new RenderArea();
          ra.Style.FontBold = true;
          RenderText rt = new RenderText("my text");
          ra.Style.AmbientParent = doc.Style;
          ra.Children.Add(rt);
          doc.Body.Children.Add(ra);
          ]]>
        </code>
        のコードは「my text」を標準の（太字でない）フォントで印刷します。 これは、テキストオブジェクトの
        <b>AmbientParent</b>に割り当てられたスタイル上に
        <see cref="P:C1.C1Preview.Style.FontBold" />が明示的に
        <b>false</b>に設定されているためです。
      </example>
    </member>
    <member name="P:C1.C1Preview.Style.BackgroundImage">
      <summary>背景画像を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>non-ambient</b>です（明示的に設定されていない場合は現在のスタイルの
        <see cref="P:C1.C1Preview.Style.Parent" />から継承されます）。
        <para>デフォルトは画像なしです。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.BackgroundImageName">
      <summary>ドキュメントの辞書内の背景画像の名前を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>non-ambient</b>です（明示的に設定されていない場合は現在のスタイルの
        <see cref="P:C1.C1Preview.Style.Parent" />から継承されます）。
        <para>デフォルトは空の文字列です。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.Brush">
      <summary>オブジェクトの塗りつぶしに使用されるブラシを取得または設定します。</summary>
      <remarks>
        <para>スタイルで BackColor と Brush の両方が指定されている場合は、BackColor が使用されます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.TextColor">
      <summary>テキストの色を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>デフォルトは黒色です。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.TextAngle">
      <summary>テキストの角度（度単位）を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>non-ambient</b>です（明示的に設定されていない場合は現在のスタイルの
        <see cref="P:C1.C1Preview.Style.Parent" />から継承されます）。
        <para>デフォルトは 0 です。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.TextAlignHorz">
      <summary>テキストの水平方向の配置を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>デフォルトは左揃えです。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.TextAlignVert">
      <summary>テキストの垂直方向の配置を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>デフォルトは上揃えです。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.LineSpacing">
      <summary>テキストの行間隔を取得または設定します（% 単位）。</summary>
      <remarks>
        <para>デフォルトの行間隔は 100 % です。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.WordWrap">
      <summary>描画オブジェクトが必要に応じて次の行の先頭に自動的に単語を折り返すかどうかを示します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>
          デフォルトは
          <b>true</b>です。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.TextPosition">
      <summary>テキストのスタイル（SuperScript、SubScript、Normal）を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>non-ambient</b>です（明示的に設定されていない場合は現在のスタイルの
        <see cref="P:C1.C1Preview.Style.Parent" />から継承されます）。
        <para>デフォルトは通常のテキストです。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HyperlinkAttrs">
      <summary>「標準」のハイパーリンク（表示済みでも強調表示されてもいないハイパーリンク）の属性を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>デフォルトでは、ハイパーリンクを青いテキスト色で強調表示します。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.VisitedHyperlinkAttrs">
      <summary>表示済みのハイパーリンクのスタイルを取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>デフォルトでは、ハイパーリンクを赤紫のテキスト色で強調表示します。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.HoverHyperlinkAttrs">
      <summary>強調表示されたハイパーリンクのスタイルを取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>デフォルトでは、マウスの下のハイパーリンクのテキストに下線を付けます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.ActiveHyperlinkAttrs">
      <summary>アクティブなハイパーリンクのスタイルを取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>デフォルトでは、アクティブハイパーリンクを強調表示しません。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.MeasureTrailingSpaces">
      <summary>デフォルトでは、テキストのレンダリング時に形成される境界四角形には、各行の最後のスペースが含まれません。</summary>
      <remarks>
        <para>このスペースを測定に入れるには、このプロパティを true に設定します。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.Padding">
      <summary>パディングの幅を取得または設定します。</summary>
      <remarks>
        埋め込みは
        <see cref="P:C1.C1Preview.Style.Borders" />内にある（存在する場合）のに対し、
        <see cref="P:C1.C1Preview.Style.Spacing" />は枠線の外に追加されます。
        <para>
          このプロパティは
          <b>non-ambient</b>です（明示的に設定されていない場合は現在のスタイルの
          <see cref="P:C1.C1Preview.Style.Parent" />から継承されます）。
        </para><para>デフォルトは埋め込みなしです。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.Spacing">
      <summary>間隔の幅を取得または設定します。</summary>
      <remarks>
        スペースは
        <see cref="P:C1.C1Preview.Style.Borders" />（
        <see cref="P:C1.C1Preview.Style.Padding" />を含む）の外にあります。
        <para>
          このプロパティは
          <b>non-ambient</b>です（明示的に設定されていない場合は現在のスタイルの
          <see cref="P:C1.C1Preview.Style.Parent" />から継承されます）。
        </para><para>デフォルトはスペースなしです。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.Borders">
      <summary>レンダリングの境界線を取得または設定します。</summary>
      <remarks>
        枠線は、
        <see cref="P:C1.C1Preview.Style.Spacing" />領域内に描画され、
        <see cref="P:C1.C1Preview.Style.Padding" />を含みます。
        <para>
          このプロパティは
          <b>non-ambient</b>です（明示的に設定されていない場合は現在のスタイルの
          <see cref="P:C1.C1Preview.Style.Parent" />から継承されます）。
        </para><para>デフォルトは枠線なしです。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.Shadow">
      <summary>
        現在のオブジェクトによってキャストされた影のプロパティを取得または設定します。 デフォルトでは、影は 100％透明であるため非表示になります。 影を表示するには、
        <b>Shadow.Transparency</b>を 100 未満に設定します。 必要に応じてその他のプロパティを調整できます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.GridLines">
      <summary>テーブルの領域内の線を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>non-ambient</b>です（明示的に設定されていない場合は現在のスタイルの
        <see cref="P:C1.C1Preview.Style.Parent" />から継承されます）。
        <para>デフォルトはグリッド線なしです。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.ImageAlign">
      <summary>画像の配置を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>デフォルトでは、左／上揃えにされ、水平および垂直方向に引き伸ばされ、縦横比を維持します。</para>
      </remarks>
      <seealso cref="P:C1.C1Preview.Style.BackgroundImageAlign" />
    </member>
    <member name="P:C1.C1Preview.Style.BackgroundImageAlign">
      <summary>背景画像の配置を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>non-ambient</b>です（明示的に設定されていない場合は現在のスタイルの
        <see cref="P:C1.C1Preview.Style.Parent" />から継承されます）。
        <para>デフォルトでは、左／上揃えにされ、水平および垂直方向に引き伸ばされ、縦横比を維持します。</para>
      </remarks>
      <seealso cref="P:C1.C1Preview.Style.ImageAlign" />
    </member>
    <member name="P:C1.C1Preview.Style.BackColor">
      <summary>背景色を取得または設定します。</summary>
      <remarks>
        <para>スタイルで BackColor と Brush の両方が指定されている場合は、BackColor が使用されます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.MinOrphanLines">
      <summary>テキスト内の孤立行の最小数を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>non-ambient</b>です（明示的に設定されていない場合は現在のスタイルの
        <see cref="P:C1.C1Preview.Style.Parent" />から継承されます）。
        <para>デフォルトは 0 です。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.ClientAreaOnly">
      <summary>クライアント領域がレンダリングされるか、コントロールの領域全体がレンダリングされるかを示す値を取得または設定します。</summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Preview.RenderImage" />は、
          <b>RenderImage</b>の
          <see cref="P:C1.C1Preview.RenderImage.Control" />プロパティに 割り当てられている場合は
          <see cref="T:System.Windows.Forms.Control" />の画像をレンダリングできます。
          <b>ClientAreaOnly</b>を使って、そのコントロールのクライアント領域のみがレンダリングされることを示すことができます。
        </para>
        <para>
          このプロパティは
          <b>non-ambient</b>です（明示的に設定されていない場合は現在のスタイルの
          <see cref="P:C1.C1Preview.Style.Parent" />から継承されます）。
        </para>
        <para>
          デフォルトは
          <b>false</b>です。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.ShapeFillBrush">
      <summary>図形オブジェクト（RenderRectangle、RenderEllipse など）の内部領域を塗りつぶすために使用されるブラシを取得または設定します。</summary>
      <remarks>
        <para>スタイルで ShapeFillColor と ShapeFillBrush の両方が指定されている場合は、ShapeFillColor が使用されます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.ShapeFillColor">
      <summary>図形オブジェクト（RenderRectangle、RenderEllipse など）の内部領域を塗りつぶすために使用される色を取得または設定します。</summary>
      <remarks>
        <para>スタイルで ShapeFillColor と ShapeFillBrush の両方が指定されている場合は、ShapeFillColor が使用されます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.ShapeLine">
      <summary>図形オブジェクト（RenderLine、RenderRectangle など）を描画するために使用される線のスタイルを取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>non-ambient</b>です（明示的に設定されていない場合は現在のスタイルの
        <see cref="P:C1.C1Preview.Style.Parent" />から継承されます）。
        <para>デフォルトは黒線、太さ 1pt です。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.FlowAlign">
      <summary>ブロックフローの親内のオブジェクトの配置を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>non-ambient</b>です（明示的に設定されていない場合は現在のスタイルの
        <see cref="P:C1.C1Preview.Style.Parent" />から継承されます）。
        <para>
          デフォルトは
          <see cref="F:C1.C1Preview.FlowAlignEnum.Default" />です。
        </para>
      </remarks>
      <seealso cref="P:C1.C1Preview.Style.FlowAlignChildren" />
      <seealso cref="P:C1.C1Preview.RenderObject.Stacking" />
    </member>
    <member name="P:C1.C1Preview.Style.FlowAlignChildren">
      <summary>ブロックフローのオブジェクトの子の配置を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>non-ambient</b>です（明示的に設定されていない場合は現在のスタイルの
        <see cref="P:C1.C1Preview.Style.Parent" />から継承されます）。
        <para>
          デフォルトは
          <see cref="F:C1.C1Preview.FlowAlignEnum.Near" />です。
        </para>
      </remarks>
      <seealso cref="P:C1.C1Preview.Style.FlowAlign" />
      <seealso cref="P:C1.C1Preview.RenderObject.Stacking" />
    </member>
    <member name="P:C1.C1Preview.Style.TextIndent">
      <summary>テキストの段落の１行目をインデントする量を示す値を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>non-ambient</b>です（明示的に設定されていない場合は現在のスタイルの
        <see cref="P:C1.C1Preview.Style.Parent" />から継承されます）。
        <para>デフォルトは 0 です。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.CharSpacing">
      <summary>文字の間隔を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>デフォルトは 0（通常のスペース）です。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.CharWidth">
      <summary>文字の幅（パーセント単位）を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>デフォルトは 100（通常の幅）です。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.JustifyLastLine">
      <summary>テキストの最終行を均等割り付け／両端揃えするかどうかを示す値を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>
          デフォルトは
          <b>false</b>です。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.JustifyEndOfLines">
      <summary>改行コード（\n）で改行された行を均等割り付け／両端揃えするかどうかを示す値を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>
          デフォルトは
          <b>true</b>です。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.WordWrapMode">
      <summary>
        テキスト行の折り返しで単語をどのように分割するかを示す値を取得または設定します。
        <para>
          このプロパティは、
          <see cref="P:C1.C1Preview.Style.WordWrap" />が
          <b>false</b>の場合は無視されます。
        </para><para>
          デフォルト値は
          <see cref="F:C1.C1Preview.WordWrapMode.Normal" />です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.Font">
      <summary>フォントを取得または設定します。</summary>
      <remarks>
        このプロパティを設定すると個別のフォント属性、
        <see cref="P:C1.C1Preview.Style.FontName" />、
        <see cref="P:C1.C1Preview.Style.FontSize" />、
        <see cref="P:C1.C1Preview.Style.FontBold" />、
        <see cref="P:C1.C1Preview.Style.FontItalic" />、
        <see cref="P:C1.C1Preview.Style.FontUnderline" />、および
        <see cref="P:C1.C1Preview.Style.FontStrikeout" />、を指定するプロパティがリセットされることに注意してください。
        <para>
          このプロパティは
          <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        </para><para>デフォルトは Arial、10pt です。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.FontName">
      <summary>このフォントの名前を取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>デフォルトは Arial です。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.FontSize">
      <summary>Unit プロパティで指定された単位で測定されるこのフォントの em サイズを取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>デフォルトは 10 です。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.FontBold">
      <summary>このフォントが太字かどうかを取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>
          デフォルトは
          <b>false</b>です。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.FontItalic">
      <summary>このフォントが斜体かどうかを取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>
          デフォルトは
          <b>false</b>です。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.FontUnderline">
      <summary>このフォントが下線かどうかを取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>
          デフォルトは
          <b>false</b>です。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.FontStrikeout">
      <summary>このフォントが取り消し線かどうかを取得または設定します。</summary>
      <remarks>
        このプロパティは
        <b>ambient</b>です（明示的に設定されない場合は現在のスタイルのオーナーを含むオブジェクトのスタイルから継承されます）。
        <para>
          デフォルトは
          <b>false</b>です。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Style.BackColorExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.BackColor" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.BackgroundImageExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.BackgroundImage" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.BrushExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.Brush" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextColorExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.TextColor" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextAngleExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.TextAngle" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextAlignHorzExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.TextAlignHorz" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextAlignVertExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.TextAlignVert" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.LineSpacingExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.LineSpacing" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.WordWrapExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.WordWrap" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextPositionExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.TextPosition" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HyperlinkAttrsExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.HyperlinkAttrs" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.VisitedHyperlinkAttrsExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.VisitedHyperlinkAttrs" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HoverHyperlinkAttrsExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.HoverHyperlinkAttrs" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ActiveHyperlinkAttrsExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.ActiveHyperlinkAttrs" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.MeasureTrailingSpacesExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.MeasureTrailingSpaces" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.MinOrphanLinesExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.MinOrphanLines" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ClientAreaOnlyExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.ClientAreaOnly" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ShapeFillBrushExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.ShapeFillBrush" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ShapeFillColorExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.ShapeFillBrush" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.ShapeLineExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.ShapeLine" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FlowAlignExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.FlowAlign" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FlowAlignChildrenExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.FlowAlignChildren" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.TextIndentExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.TextIndent" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.CharSpacingExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.CharSpacing" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.CharWidthExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.CharWidth" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.JustifyLastLineExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.JustifyLastLine" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.JustifyEndOfLinesExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.JustifyEndOfLines" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.WordWrapModeExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.WordWrapMode" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontNameExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.FontName" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontSizeExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.FontSize" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontBoldExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.FontBold" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontItalicExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.FontItalic" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontUnderlineExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.FontUnderline" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.FontStrikeoutExpr">
      <summary>
        <see cref="P:C1.C1Preview.Style.FontStrikeout" />の計算に使用される式を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.StyleCollection">
      <summary>
        <see cref="T:C1.C1Preview.Style" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.StyleCollection.Add">
      <summary>新しいオブジェクトを作成してコレクションに追加します。</summary>
      <returns>コレクションに追加されたオブジェクトを返します。</returns>
    </member>
    <member name="P:C1.C1Preview.StyleCollection.Owner">
      <summary>
        このコレクションを所有している
        <see cref="T:C1.C1Preview.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.StyleCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>指定したインデックスの要素。</returns>
    </member>
    <member name="T:C1.C1Preview.SystemInfo">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />内のオペレーティングシステムに関する情報を表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.SystemInfo.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.SystemInfo" />クラスの新しいインスタンスを初期化します。 プロパティ値がこのコンストラクタによって更新されないことに注意してください。
        <see cref="M:C1.C1Preview.SystemInfo.Initialize" />メソッドを使って、 現在のオブジェクトにステータス情報データを実際に入力する必要があります。
      </summary>
    </member>
    <member name="M:C1.C1Preview.SystemInfo.Initialize">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.SystemInfo" />オブジェクトのプロパティを 現在のシステム情報データで更新します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.ScreenCount">
      <summary>システム画面の数を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.LogicalDpiX">
      <summary>画面の論理水平解像度（DPI）を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.LogicalDpiY">
      <summary>画面の論理垂直解像度（DPI）を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.PhysicalDpiX">
      <summary>画面の物理水平解像度（DPI）を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.PhysicalDpiY">
      <summary>画面の物理垂直解像度（DPI）を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.PrimaryScreenBounds">
      <summary>
        <see cref="P:System.Windows.Forms.Screen.Bounds" />によって返された画面の境界を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.MeasurementDevice">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementDevice" />によって返された測定デバイスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.MeasurementPrinterName">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementPrinterName" />によって返された測定プリンタ名を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.MeasurementDpi">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementDpi" />によって返された測定解像度を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.MeasurementDeviceDescription">
      <summary>
        <see cref="P:C1.C1Preview.SystemInfo.MeasurementDevice" />がプリンタの場合は
        <see cref="P:C1.C1Preview.SystemInfo.MeasurementPrinterName" />、 または画面の場合は
        <b>「Screen」</b>というワードを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.DocumentFormatVersion">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />のシリアル化に使用される書式バージョンを表す文字列を取得します。 書式バージョンは、下位互換ですが、必ずしも上位互換ではありません。
      </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.AssemblyVersion">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />クラスを含むアセンブリのアセンブリバージョンを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.Culture">
      <summary>現在のカルチャを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.SystemInfo.OSVersion">
      <summary>
        <see cref="P:System.OperatingSystem.VersionString" />によって返された OS バージョンを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.TagBase">
      <summary>ユーザー定義のタグの抽象基本クラス。</summary>
    </member>
    <member name="P:C1.C1Preview.TagBase.Document">
      <summary>
        現在のタグを含む
        <see cref="T:C1.C1Preview.C1PrintDocument" />を取得します。 タグがドキュメントに追加されていない場合は
        <b>null</b>を返すことができます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.TagBase.Value">
      <summary>タグの値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.TagSys">
      <summary>
        <see cref="T:C1.C1Preview.TagPageNo" />、および
        <see cref="T:C1.C1Preview.TagPageCount" />などのシステム定義されたタグの抽象基本クラス。
      </summary>
    </member>
    <member name="M:C1.C1Preview.TagSys.GetName">
      <summary>現在のタグの名前を取得します。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.TagSys.SetName(System.String)">
      <summary>現在のタグの名前を設定します。</summary>
      <param name="newName">新しいタグ名。</param>
    </member>
    <member name="M:C1.C1Preview.TagSys.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>指定したオブジェクトのプロパティを現在のオブジェクトにコピーします。</summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.TagSys.Value">
      <summary>現在のタグの値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.TagPage">
      <summary>ページ番号または数に評価するシステムタグの抽象基本クラス。</summary>
    </member>
    <member name="T:C1.C1Preview.TagPageNo">
      <summary>現在のページ番号システムタグを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.TagPageNo.GetName">
      <summary>現在のタグの名前（「PageNo」）を返します。</summary>
      <returns>「PageNo」。</returns>
    </member>
    <member name="T:C1.C1Preview.TagPageCount">
      <summary>総ページ数のシステムタグを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.TagPageCount.GetName">
      <summary>現在のタグの名前（「PageCount」）を返します。</summary>
      <returns>「PageCount」。</returns>
    </member>
    <member name="T:C1.C1Preview.TagPageX">
      <summary>現在の水平ページ番号のシステムタグを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.TagPageX.GetName">
      <summary>現在のタグの名前（「PageX」）を返します。</summary>
      <returns>「PageX」。</returns>
    </member>
    <member name="T:C1.C1Preview.TagPageXCount">
      <summary>水平ページ数のシステムタグを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.TagPageXCount.GetName">
      <summary>現在のタグの名前（「PageXCount」）を返します。</summary>
      <returns>「PageXCount」。</returns>
    </member>
    <member name="T:C1.C1Preview.TagPageY">
      <summary>現在の垂直ページ番号のシステムタグを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.TagPageY.GetName">
      <summary>現在のタグの名前（「PageY」）を返します。</summary>
      <returns>「PageY」。</returns>
    </member>
    <member name="T:C1.C1Preview.TagPageYCount">
      <summary>垂直ページ数のシステムタグを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.TagPageYCount.GetName">
      <summary>現在のタグの名前（「PageYCount」）を返します。</summary>
      <returns>「PageYCount」。</returns>
    </member>
    <member name="T:C1.C1Preview.TagHyperlinkPageNo">
      <summary>ハイパーリンクターゲットのページ番号に置き換えられるシステムタグを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.TagHyperlinkPageNo.GetName">
      <summary>現在のタグの名前（「HyperlinkPageNo」）を返します。</summary>
      <returns>「HyperlinkPageNo」。</returns>
    </member>
    <member name="T:C1.C1Preview.TagUsageInfo">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintDocument.UsageInfo" />からの データを返すシステムタグの抽象基本クラス。
      </summary>
    </member>
    <member name="T:C1.C1Preview.TagGeneratedDateTime">
      <summary>ドキュメントが最後に生成された日付および時刻を返すシステムタグを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.TagGeneratedDateTime.GetName">
      <summary>現在のタグの名前（「GeneratedDateTime」）を返します。</summary>
      <returns>「GeneratedDateTime」。</returns>
    </member>
    <member name="T:C1.C1Preview.TagPrintedDateTime">
      <summary>ドキュメントが最後に印刷された日付および時刻を返すシステムタグを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.TagPrintedDateTime.GetName">
      <summary>現在のタグの名前（「PrintedDateTime」）を返します。</summary>
      <returns>「PrintedDateTime」。</returns>
    </member>
    <member name="T:C1.C1Preview.TagLastFileName">
      <summary>ドキュメントの保存またはロードの最後に使用されたファイル名を返すシステムタグを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.TagLastFileName.GetName">
      <summary>現在のタグの名前（「LastFileName」）を返します。</summary>
      <returns>「LastFileName」。</returns>
    </member>
    <member name="T:C1.C1Preview.TagLastPrinterName">
      <summary>ドキュメントの印刷の最後に使用されたプリンタの名前を返すシステムタグを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.TagLastPrinterName.GetName">
      <summary>現在のタグの名前（「LastPrinterName」）を返します。</summary>
      <returns>「LastPrinterName」。</returns>
    </member>
    <member name="T:C1.C1Preview.Tag">
      <summary>ユーザー定義のタグを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.Tag.#ctor(System.String,System.Object)">
      <summary>
        指定した名前と値を使って、
        <see cref="T:C1.C1Preview.Tag" />の新しいインスタンスを初期化します。
      </summary>
      <param name="name">タグの名前。</param>
      <param name="value">タグの値。</param>
    </member>
    <member name="M:C1.C1Preview.Tag.#ctor(System.String)">
      <summary>
        指定した名前を持つ
        <see cref="T:C1.C1Preview.Tag" />の新しいインスタンスを初期化します。
      </summary>
      <param name="name">タグの名前。</param>
    </member>
    <member name="M:C1.C1Preview.Tag.#ctor(System.String,System.Object,System.Type)">
      <summary>
        指定した名前、値、およびタイプを使って、
        <see cref="T:C1.C1Preview.Tag" />の新しいインスタンスを初期化します。
      </summary>
      <param name="name">タグの名前。</param>
      <param name="value">タグの値。</param>
      <param name="type">タグのタイプ。</param>
    </member>
    <member name="M:C1.C1Preview.Tag.SetName(System.String)">
      <summary>現在のタグの名前を設定します。</summary>
      <param name="newName">新しいタグ名。</param>
    </member>
    <member name="M:C1.C1Preview.Tag.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>指定したオブジェクトのプロパティを現在のオブジェクトにコピーします。</summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.Tag.SerializeValue">
      <summary>
        現在のタグの
        <see cref="P:C1.C1Preview.Tag.Value" />がシリアル化されるかどうかを示す値を 取得または設定します。デフォルトは
        <b>true</b>です。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Tag.ShowInDialog">
      <summary>
        タグ入力ダイアログに現在のタグを表示してユーザーが
        <see cref="P:C1.C1Preview.Tag.Value" />を 編集することを許可するかどうかを示す値を取得または設定します。 デフォルトは
        <b>true</b>です。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Tag.Calculated">
      <summary>
        <see cref="P:C1.C1Preview.Tag.Value" />プロパティがタグの レンダリング時に評価されるスクリプト式を持つ 文字列を 保持するかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Tag.Description">
      <summary>
        タグの記述を取得または設定します。 空でない場合は、タグ入力ダイアログでラベルとして使用されます （記述が空の場合は、代わりに
        <see cref="P:C1.C1Preview.NamedCollectionItem.Name" />が入力ダイアログに表示されます）。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Tag.Type">
      <summary>現在のタグタイプを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Tag.Value">
      <summary>現在のタグ値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Tag.InputParams">
      <summary>
        現在のタグのエディタをカスタマイズするためにタグ入力ダイアログによって使用される
        <see cref="T:C1.C1Preview.TagInputParams" />オブジェクトを取得または設定します。デフォルトでは、このプロパティは null です。
      </summary>
      <remarks>
        <see cref="T:C1.C1Preview.TagInputParams" />クラスは抽象で、現在のタグのタイプに応じて、 このクラスから派生した以下のタイプを使用できます。
        <list type="bullet">
          <item>
            <term>
              <see cref="T:C1.C1Preview.TagStringInputParams" />
            </term>
            <description>文字列の入力のカスタマイズに使用されます。</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.TagDateTimeInputParams" />
            </term>
            <description>
              <see cref="T:System.DateTime" />値の入力のカスタマイズに使用されます。
            </description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.TagListInputParams" />
            </term>
            <description>
              タグの値の入力に
              <see cref="T:System.Windows.Forms.ListBox" />または
              <see cref="T:System.Windows.Forms.ComboBox" />の使用を可能にします。
            </description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.TagBoolInputParams" />
            </term>
            <description>チェックボックスによるブール値の入力を可能にします。</description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.TagNumericInputParams" />
            </term>
            <description>数値の入力のカスタマイズに使用されます。</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:C1.C1Preview.Tag.TagConverter">
      <summary>
        <see cref="T:C1.C1Preview.Tag" />と別のタイプ間で双方向変換します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Tag.TagConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバータがオブジェクトを指定したタイプに変換できるかどうかをテストします。</summary>
      <param name="context">
        書式コンテキストを提供する
        <b>ITypeDescriptorContext</b>。
      </param>
      <param name="type">ターゲットタイプ。</param>
      <returns>
        変換を実行できる場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Tag.TagConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>特定の値オブジェクトを指定したタイプに変換します。</summary>
      <param name="context">
        書式コンテキストを提供する
        <b>ITypeDescriptorContext</b>。
      </param>
      <param name="culture">
        <paramref name="value" />の変換先のカルチャ。
      </param>
      <param name="value">変換するオブジェクト。</param>
      <param name="type">ターゲットタイプ。</param>
      <returns>変換された値を表すオブジェクト。</returns>
    </member>
    <member name="T:C1.C1Preview.Tag.TagValueConverter">
      <summary>
        <see cref="T:C1.C1Preview.Tag" />値と別のタイプの間で双方向に変換します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Tag.TagValueConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
        特定のオブジェクトを
        <see cref="T:C1.C1Preview.Tag" />オブジェクトに変換します。
      </summary>
      <param name="context">
        書式コンテキストを提供する
        <b>ITypeDescriptorContext</b>。
      </param>
      <param name="culture">
        <paramref name="value" />の変換先のカルチャ。
      </param>
      <param name="value">変換するオブジェクト。</param>
      <returns>変換された値を表すオブジェクト。</returns>
    </member>
    <member name="T:C1.C1Preview.TagCollection">
      <summary>
        <see cref="T:C1.C1Preview.Tag" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.TagCollection.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Preview.TagCollection" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner"></param>
    </member>
    <member name="M:C1.C1Preview.TagCollection.Add(C1.C1Preview.Tag)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="tag">追加するオブジェクト。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.TagCollection.Remove(C1.C1Preview.Tag)">
      <summary>
        <see cref="T:C1.C1Preview.Tag" />オブジェクトを現在のコレクションから削除します。
      </summary>
      <param name="tag">削除するオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.TagCollection.IndexByName(System.String)">
      <summary>コレクション内で指定した名前を持つオブジェクトのインデックスを検索します。</summary>
      <param name="name">検索する名前。</param>
      <returns>見つかったオブジェクトのインデックス。</returns>
    </member>
    <member name="P:C1.C1Preview.TagCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得または設定します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>
        指定したインデックスを持つ
        <see cref="T:C1.C1Preview.Tag" />。
      </returns>
    </member>
    <member name="P:C1.C1Preview.TagCollection.Item(System.String)">
      <summary>コレクション内の指定した名前のオブジェクトを取得します。</summary>
      <param name="tagName">
        <see cref="T:C1.C1Preview.Tag" />の名前。
      </param>
      <returns>
        指定した名前を持つ
        <see cref="T:C1.C1Preview.Tag" />。
      </returns>
    </member>
    <member name="T:C1.C1Preview.TagInputParams">
      <summary>各タグの入力をカスタマイズするタグ入力ダイアログで使用される 特殊クラスの抽象基本クラス。</summary>
    </member>
    <member name="M:C1.C1Preview.TagInputParams.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.TagInputParams" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.TagInputParams.AssignFrom(C1.C1Preview.TagInputParams)">
      <summary>指定したオブジェクトのプロパティを現在のオブジェクトにコピーします。</summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.TagInputParams.Clone">
      <summary>現在のオブジェクトのコピーを作成します。</summary>
      <returns>新しく作成されたオブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.TagInputParams.IsShowLabel">
      <summary>入力フォームが入力コントロールの横にタグの記述を含むラベルを 表示するかどうかを示す値を返します。</summary>
      <returns>ラベルが表示される場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.TagInputParams.CreateControl(C1.C1Preview.Tag,System.Int32)">
      <summary>タグ値の入力に使用できるコントロールを作成します。</summary>
      <param name="tag">編集するタグ。</param>
      <param name="maxWidth">コントロールの最大幅。</param>
      <returns>新しく作成されたコントロール。</returns>
    </member>
    <member name="M:C1.C1Preview.TagInputParams.CheckValue(System.Windows.Forms.Control,C1.C1Preview.Tag,System.String@)">
      <summary>コントロールに含まれる値を確認します。</summary>
      <param name="control">値の入力に使用されるコントロール。</param>
      <param name="tag">
        値の割り当て先の
        <see cref="T:C1.C1Preview.Tag" />。
      </param>
      <param name="errorMessage">確認に失敗したときに割り当てられるエラーメッセージ。</param>
      <returns>値が有効の場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.TagInputParams.ControlValueToTag(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>コントロールからの値をタグにコピーします。</summary>
      <param name="control">値を含むソースコントロール。</param>
      <param name="tag">
        値の割り当て先の
        <see cref="T:C1.C1Preview.Tag" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.TagInputParams.TagValueToControl(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>タグからの値をコントロールにコピーします。</summary>
      <param name="control">値のコピー先のコントロール。</param>
      <param name="tag">
        値を含むソース
        <see cref="T:C1.C1Preview.Tag" />。
      </param>
    </member>
    <member name="T:C1.C1Preview.TagStringInputParams">
      <summary>文字列タグ値の入力に対するカスタマイズパラメータを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.TagStringInputParams.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.TagStringInputParams" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.TagStringInputParams.#ctor(System.Int32)">
      <summary>
        <see cref="T:C1.C1Preview.TagStringInputParams" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="maxLength">入力文字列の最大長。</param>
    </member>
    <member name="M:C1.C1Preview.TagStringInputParams.AssignFrom(C1.C1Preview.TagInputParams)">
      <summary>指定したオブジェクトのプロパティを現在のオブジェクトにコピーします。</summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.TagStringInputParams.CreateControl(C1.C1Preview.Tag,System.Int32)">
      <summary>
        <see cref="T:System.Windows.Forms.TextBox" />を作成します。
      </summary>
      <param name="tag">編集するタグ。</param>
      <param name="maxWidth">コントロールの最大幅。</param>
      <returns>新しく作成されたコントロール。</returns>
    </member>
    <member name="M:C1.C1Preview.TagStringInputParams.CheckValue(System.Windows.Forms.Control,C1.C1Preview.Tag,System.String@)">
      <summary>true を返します。</summary>
      <param name="control">値の入力に使用されるコントロール。</param>
      <param name="tag">
        値の割り当て先の
        <see cref="T:C1.C1Preview.Tag" />。
      </param>
      <param name="errorMessage">確認に失敗したときに割り当てられるエラーメッセージ。</param>
      <returns>true。</returns>
    </member>
    <member name="M:C1.C1Preview.TagStringInputParams.ControlValueToTag(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>コントロールからの値をタグにコピーします。</summary>
      <param name="control">値を含むソースコントロール。</param>
      <param name="tag">
        値の割り当て先の
        <see cref="T:C1.C1Preview.Tag" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.TagStringInputParams.TagValueToControl(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>タグからの値をコントロールにコピーします。</summary>
      <param name="control">値のコピー先のコントロール。</param>
      <param name="tag">
        値を含むソース
        <see cref="T:C1.C1Preview.Tag" />。
      </param>
    </member>
    <member name="P:C1.C1Preview.TagStringInputParams.MaxLength">
      <summary>入力文字列の最大長を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.TagDateTimeInputParams">
      <summary>
        <see cref="T:System.DateTime" />タグ値の入力のカスタマイズパラメータを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.TagDateTimeInputParams.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.TagDateTimeInputParams" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.TagDateTimeInputParams.#ctor(System.DateTime,System.DateTime,System.Windows.Forms.DateTimePickerFormat,System.String)">
      <summary>
        <see cref="T:C1.C1Preview.TagDateTimeInputParams" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="minDate">最小許容日付。</param>
      <param name="maxDate">最大許容日付。</param>
      <param name="format">日付／時刻ピッカーで使用される書式。</param>
      <param name="customFormat">カスタム日付／時刻書式文字列。</param>
    </member>
    <member name="M:C1.C1Preview.TagDateTimeInputParams.#ctor(System.Windows.Forms.DateTimePickerFormat,System.String)">
      <summary>
        <see cref="T:C1.C1Preview.TagDateTimeInputParams" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="format">日付／時刻ピッカーで使用される書式。</param>
      <param name="customFormat">カスタム日付／時刻書式文字列。</param>
    </member>
    <member name="M:C1.C1Preview.TagDateTimeInputParams.AssignFrom(C1.C1Preview.TagInputParams)">
      <summary>指定したオブジェクトのプロパティを現在のオブジェクトにコピーします。</summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.TagDateTimeInputParams.CreateControl(C1.C1Preview.Tag,System.Int32)">
      <summary>
        <see cref="T:System.Windows.Forms.DateTimePicker" />を作成します。
      </summary>
      <param name="tag">編集するタグ。</param>
      <param name="maxWidth">コントロールの最大幅。</param>
      <returns>新しく作成されたコントロール。</returns>
    </member>
    <member name="M:C1.C1Preview.TagDateTimeInputParams.CheckValue(System.Windows.Forms.Control,C1.C1Preview.Tag,System.String@)">
      <summary>コントロールに含まれる値を確認します。</summary>
      <param name="control">値の入力に使用されるコントロール。</param>
      <param name="tag">
        値の割り当て先の
        <see cref="T:C1.C1Preview.Tag" />。
      </param>
      <param name="errorMessage">確認に失敗したときに割り当てられるエラーメッセージ。</param>
      <returns>値が最小許容日付と最大許容日付の間に収まる場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.TagDateTimeInputParams.ControlValueToTag(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>コントロールからの値をタグにコピーします。</summary>
      <param name="control">値を含むソースコントロール。</param>
      <param name="tag">
        値の割り当て先の
        <see cref="T:C1.C1Preview.Tag" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.TagDateTimeInputParams.TagValueToControl(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>タグからの値をコントロールにコピーします。</summary>
      <param name="control">値のコピー先のコントロール。</param>
      <param name="tag">
        値を含むソース
        <see cref="T:C1.C1Preview.Tag" />。
      </param>
    </member>
    <member name="P:C1.C1Preview.TagDateTimeInputParams.CustomFormat">
      <summary>カスタム日付／時刻の書式文字列を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TagDateTimeInputParams.MinDate">
      <summary>最小許容日付を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TagDateTimeInputParams.MaxDate">
      <summary>最大許容日付を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TagDateTimeInputParams.Format">
      <summary>日付／時刻ピッカーで使用される書式を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.TagListInputParamsTypeEnum">
      <summary>
        <see cref="T:C1.C1Preview.TagListInputParams" />のリストのタイプを指定します。
      </summary>
    </member>
    <member name="F:C1.C1Preview.TagListInputParamsTypeEnum.ListBox">
      <summary>
        <see cref="T:System.Windows.Forms.ListBox" />は入力に使用されます。
      </summary>
    </member>
    <member name="F:C1.C1Preview.TagListInputParamsTypeEnum.ComboBox">
      <summary>
        <see cref="T:System.Windows.Forms.ComboBox" />は入力に使用されます。
      </summary>
    </member>
    <member name="T:C1.C1Preview.TagListInputParams">
      <summary>リストから選択できるタグ値の入力用のカスタマイズパラメータを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.TagListInputParams.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.TagListInputParams" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.TagListInputParams.#ctor(C1.C1Preview.TagListInputParamsTypeEnum,C1.C1Preview.TagListInputParamsItem[])">
      <summary>
        <see cref="T:C1.C1Preview.TagListInputParams" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="type">使用するリスト入力のタイプ。</param>
      <param name="items">リスト項目のコレクション。</param>
    </member>
    <member name="M:C1.C1Preview.TagListInputParams.AssignFrom(C1.C1Preview.TagInputParams)">
      <summary>指定したオブジェクトのプロパティを現在のオブジェクトにコピーします。</summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.TagListInputParams.CreateControl(C1.C1Preview.Tag,System.Int32)">
      <summary>
        リスト入力の
        <see cref="P:C1.C1Preview.TagListInputParams.Type" />に応じて、
        <see cref="T:System.Windows.Forms.ListBox" />または
        <see cref="T:System.Windows.Forms.ComboBox" />を作成します。
      </summary>
      <param name="tag">編集するタグ。</param>
      <param name="maxWidth">コントロールの最大幅。</param>
      <returns>新しく作成されたコントロール。</returns>
    </member>
    <member name="M:C1.C1Preview.TagListInputParams.CheckValue(System.Windows.Forms.Control,C1.C1Preview.Tag,System.String@)">
      <summary>コントロールに含まれる値を確認します。</summary>
      <param name="control">値の入力に使用されるコントロール。</param>
      <param name="tag">
        値の割り当て先の
        <see cref="T:C1.C1Preview.Tag" />。
      </param>
      <param name="errorMessage">確認に失敗したときに割り当てられるエラーメッセージ。</param>
      <returns>値が最小許容日付と最大許容日付の間に収まる場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.TagListInputParams.ControlValueToTag(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>コントロールからの値をタグにコピーします。</summary>
      <param name="control">値を含むソースコントロール。</param>
      <param name="tag">
        値の割り当て先の
        <see cref="T:C1.C1Preview.Tag" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.TagListInputParams.TagValueToControl(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>タグからの値をコントロールにコピーします。</summary>
      <param name="control">値のコピー先のコントロール。</param>
      <param name="tag">
        値を含むソース
        <see cref="T:C1.C1Preview.Tag" />。
      </param>
    </member>
    <member name="P:C1.C1Preview.TagListInputParams.Type">
      <summary>使用するリスト入力のタイプを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TagListInputParams.HasItems">
      <summary>リストが何か項目を含むかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.TagListInputParams.Items">
      <summary>リスト項目のコレクションを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.TagListInputParamsItem">
      <summary>
        <see cref="T:C1.C1Preview.TagListInputParams" />のリスト項目を表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.TagListInputParamsItem.#ctor(System.String,System.Object)">
      <summary>
        <see cref="T:C1.C1Preview.TagListInputParamsItem" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="name">項目名。</param>
      <param name="value">項目値。</param>
    </member>
    <member name="M:C1.C1Preview.TagListInputParamsItem.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>指定したオブジェクトのプロパティを現在のオブジェクトにコピーします。</summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.TagListInputParamsItem.ToString">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.TagListInputParamsItem" />の文字列表現を返します。
      </summary>
      <returns>現在の項目を表す文字列。</returns>
    </member>
    <member name="P:C1.C1Preview.TagListInputParamsItem.Value">
      <summary>現在の項目の値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.TagListInputParamsItemCollection">
      <summary>
        <see cref="T:C1.C1Preview.TagListInputParams" />のリスト項目のコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.TagListInputParamsItemCollection.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Preview.TagListInputParamsItemCollection" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">コレクションのオーナー。</param>
    </member>
    <member name="M:C1.C1Preview.TagListInputParamsItemCollection.Add(C1.C1Preview.TagListInputParamsItem)">
      <summary>項目を現在のコレクションに追加します。</summary>
      <param name="item">追加する項目。</param>
      <returns>新しく追加された項目のインデックス。</returns>
    </member>
    <member name="M:C1.C1Preview.TagListInputParamsItemCollection.Remove(C1.C1Preview.TagListInputParamsItem)">
      <summary>項目を現在のコレクションから削除します。</summary>
      <param name="item">削除する項目。</param>
    </member>
    <member name="P:C1.C1Preview.TagListInputParamsItemCollection.Item(System.Int32)">
      <summary>指定したインデックスを持つ項目を取得または設定します。</summary>
      <param name="index">項目のインデックス。</param>
      <returns>指定したインデックスを持つ項目。</returns>
    </member>
    <member name="P:C1.C1Preview.TagListInputParamsItemCollection.Item(System.String)">
      <summary>指定した名前を持つ項目を取得または設定します。</summary>
      <param name="tagName">項目の名前。</param>
      <returns>指定した名前を持つ項目。</returns>
    </member>
    <member name="T:C1.C1Preview.TagBoolInputParams">
      <summary>ブール型タグ値の入力のカスタマイズパラメータを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.TagBoolInputParams.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.TagBoolInputParams" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.TagBoolInputParams.AssignFrom(C1.C1Preview.TagInputParams)">
      <summary>指定したオブジェクトのプロパティを現在のオブジェクトにコピーします。</summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.TagBoolInputParams.IsShowLabel">
      <summary>false を返します。</summary>
      <returns>false。</returns>
    </member>
    <member name="M:C1.C1Preview.TagBoolInputParams.CreateControl(C1.C1Preview.Tag,System.Int32)">
      <summary>
        <see cref="T:System.Windows.Forms.CheckBox" />を作成します。
      </summary>
      <param name="tag">編集するタグ。</param>
      <param name="maxWidth">コントロールの最大幅。</param>
      <returns>新しく作成されたコントロール。</returns>
    </member>
    <member name="M:C1.C1Preview.TagBoolInputParams.CheckValue(System.Windows.Forms.Control,C1.C1Preview.Tag,System.String@)">
      <summary>true を返します。</summary>
      <param name="control">値の入力に使用されるコントロール。</param>
      <param name="tag">
        値の割り当て先の
        <see cref="T:C1.C1Preview.Tag" />。
      </param>
      <param name="errorMessage">確認に失敗したときに割り当てられるエラーメッセージ。</param>
      <returns>true。</returns>
    </member>
    <member name="M:C1.C1Preview.TagBoolInputParams.ControlValueToTag(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>コントロールからの値をタグにコピーします。</summary>
      <param name="control">値を含むソースコントロール。</param>
      <param name="tag">
        値の割り当て先の
        <see cref="T:C1.C1Preview.Tag" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.TagBoolInputParams.TagValueToControl(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>タグからの値をコントロールにコピーします。</summary>
      <param name="control">値のコピー先のコントロール。</param>
      <param name="tag">
        値を含むソース
        <see cref="T:C1.C1Preview.Tag" />。
      </param>
    </member>
    <member name="T:C1.C1Preview.TagNumericInputParams">
      <summary>数値型タグ値の入力に対するカスタマイズパラメータを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.TagNumericInputParams.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.TagNumericInputParams" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.TagNumericInputParams.#ctor(System.Decimal,System.Decimal,System.Decimal,System.Int32)">
      <summary>
        <see cref="T:C1.C1Preview.TagNumericInputParams" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="minimum">最小許容値。</param>
      <param name="maximum">最大許容値。</param>
      <param name="increment">スピンボタンのインクリメント。</param>
      <param name="decimalPlaces">エディタ精度（少数点以下の桁数）。</param>
    </member>
    <member name="M:C1.C1Preview.TagNumericInputParams.AssignFrom(C1.C1Preview.TagInputParams)">
      <summary>指定したオブジェクトのプロパティを現在のオブジェクトにコピーします。</summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.TagNumericInputParams.CreateControl(C1.C1Preview.Tag,System.Int32)">
      <summary>
        <see cref="T:System.Windows.Forms.NumericUpDown" />を作成します。
      </summary>
      <param name="tag">編集するタグ。</param>
      <param name="maxWidth">コントロールの最大幅。</param>
      <returns>新しく作成されたコントロール。</returns>
    </member>
    <member name="M:C1.C1Preview.TagNumericInputParams.CheckValue(System.Windows.Forms.Control,C1.C1Preview.Tag,System.String@)">
      <summary>コントロールに含まれる値を確認します。</summary>
      <param name="control">値の入力に使用されるコントロール。</param>
      <param name="tag">
        値の割り当て先の
        <see cref="T:C1.C1Preview.Tag" />。
      </param>
      <param name="errorMessage">確認に失敗したときに割り当てられるエラーメッセージ。</param>
      <returns>値が最小許容値と最大許容値の間に収まる場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.TagNumericInputParams.ControlValueToTag(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>コントロールからの値をタグにコピーします。</summary>
      <param name="control">値を含むソースコントロール。</param>
      <param name="tag">
        値の割り当て先の
        <see cref="T:C1.C1Preview.Tag" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.TagNumericInputParams.TagValueToControl(System.Windows.Forms.Control,C1.C1Preview.Tag)">
      <summary>タグからの値をコントロールにコピーします。</summary>
      <param name="control">値のコピー先のコントロール。</param>
      <param name="tag">
        値を含むソース
        <see cref="T:C1.C1Preview.Tag" />。
      </param>
    </member>
    <member name="P:C1.C1Preview.TagNumericInputParams.Minimum">
      <summary>最小許容値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TagNumericInputParams.Maximum">
      <summary>最大許容値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TagNumericInputParams.Increment">
      <summary>スピンボタンのインクリメントを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TagNumericInputParams.DecimalPlaces">
      <summary>エディタ精度（小数点以下の桁数）を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.ReferenceEnum">
      <summary>
        <para>これは内部使用専用です。</para>式内の参照されるオブジェクトを
        <see cref="T:C1.C1Preview.Unit" />で指定します。
      </summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Parent">
      <summary>現在のオブジェクトの親。</summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Next">
      <summary>現在のオブジェクトと同じレベルにある次のオブジェクト。</summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Prev">
      <summary>現在のオブジェクトと同じレベルにある前のオブジェクト。</summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Self">
      <summary>現在のオブジェクト。</summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Name">
      <summary>指定した名前を持つオブジェクト。</summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Page">
      <summary>現在のページ。</summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Column">
      <summary>現在のページ列。</summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.Id">
      <summary>指定した ID を持つオブジェクト （下位互換性に対してのみ提供）。</summary>
    </member>
    <member name="F:C1.C1Preview.ReferenceEnum.PageIndex">
      <summary>指定したインデックスを持つページ。</summary>
    </member>
    <member name="T:C1.C1Preview.DimensionEnum">
      <summary>オブジェクトの有効な寸法を記述します。</summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Default">
      <summary>デフォルトのサイズ。</summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Left">
      <summary>オブジェクトの左辺。</summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Top">
      <summary>オブジェクトの上辺。</summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Right">
      <summary>オブジェクトの右辺。</summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Bottom">
      <summary>オブジェクトの下辺。</summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Width">
      <summary>オブジェクトの幅。</summary>
    </member>
    <member name="F:C1.C1Preview.DimensionEnum.Height">
      <summary>オブジェクトの高さ。</summary>
    </member>
    <member name="T:C1.C1Preview.UnitTypeEnum">
      <summary>特定のデータの測定単位を指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Default">
      <summary>
        ドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.DefaultUnit" />によって指定された単位が使用されます。
      </summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Document">
      <summary>測定単位として、ドキュメント単位（1/300 インチ）を指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Inch">
      <summary>測定単位として、インチ単位を指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Mm">
      <summary>測定単位として、ミリ単位を指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Pica">
      <summary>測定単位として、パイカ単位（1/6 インチ）を指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Pixel">
      <summary>測定単位として、デバイスピクセル単位を指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Point">
      <summary>測定単位として、プリンタのポイント単位（1/72 インチ）を指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Twip">
      <summary>測定単位として、ツイップ（1/1440 インチ）単位を指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.InHs">
      <summary>測定単位として、1/100 インチ単位を指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Display">
      <summary>測定単位として、1/75 インチ単位を指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Cm">
      <summary>測定単位として、センチ単位を指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Em">
      <summary>測定単位は、要素のフォントの高さの相対単位です。</summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.Ex">
      <summary>測定単位は、要素のフォントの小文字 x の高さの相対単位です。</summary>
    </member>
    <member name="F:C1.C1Preview.UnitTypeEnum.LineSpacing">
      <summary>測定単位は、要素のフォントの行間隔の相対単位です。</summary>
    </member>
    <member name="T:C1.C1Preview.LengthBase">
      <summary>
        <para>これは内部使用専用です。</para>オブジェクトの単一の座標またはディメンションを表す抽象基本クラス。
      </summary>
    </member>
    <member name="M:C1.C1Preview.LengthBase.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.LengthBase" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.LengthBase.StringToUnitType(System.String,C1.C1Preview.UnitTypeEnum@)">
      <summary>
        文字列を
        <see cref="T:C1.C1Preview.UnitTypeEnum" />値に変換します。文字列は、 「def」、「doc」、「in」、「mm」、「pc」、「pix」、「pt」、「tw」、「inhs」の１つが可能です。 このメソッドは大文字と小文字を区別します。
      </summary>
      <param name="s">
        変換する文字列。文字列が null または空の場合、
        <see cref="F:C1.C1Preview.UnitTypeEnum.Default" />が返されます。
      </param>
      <param name="units">
        出力：終了時に、
        <see cref="T:C1.C1Preview.UnitTypeEnum" />値を含みます。
      </param>
      <returns>
        エラーが発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.LengthBase.UnitTypeToString(C1.C1Preview.UnitTypeEnum)">
      <summary>
        <see cref="T:C1.C1Preview.UnitTypeEnum" />値を下表のような 文字列表現に変換します。
        <list type="bullet">
          <item>
            <description>
              <term>Default</term>空の文字列
            </description>
          </item>
          <item>
            <description>
              <term>Document</term>「doc」
            </description>
          </item>
          <item>
            <description>
              <term>Inch</term>「in」
            </description>
          </item>
          <item>
            <description>
              <term>Millimeter</term>「mm」
            </description>
          </item>
          <item>
            <description>
              <term>Pica</term>「pc」
            </description>
          </item>
          <item>
            <description>
              <term>Pixel</term>「pix」
            </description>
          </item>
          <item>
            <description>
              <term>Point</term>「pt」
            </description>
          </item>
          <item>
            <description>
              <term>Twip</term>「tw」
            </description>
          </item>
          <item>
            <description>
              <term>InHs</term>「inhs」
            </description>
          </item>
        </list>
      </summary>
      <param name="units">
        変換する
        <see cref="T:C1.C1Preview.UnitTypeEnum" />。
      </param>
      <returns>
        <paramref name="units" />を表す文字列。
      </returns>
    </member>
    <member name="M:C1.C1Preview.LengthBase.StringToDimension(System.String,C1.C1Preview.DimensionEnum@)">
      <summary>
        文字列を
        <see cref="T:C1.C1Preview.DimensionEnum" />値に変換します。 文字列は、 「left」、「top」、「right」、「bottom」、「width」、「height」の１つが可能です。 このメソッドは大文字と小文字を区別しません。
      </summary>
      <param name="s">
        変換する文字列。s が
        <b>null</b>または空の場合、
        <see cref="F:C1.C1Preview.DimensionEnum.Default" />が返されます。
      </param>
      <param name="dimension">
        出力：指定した文字列に対応する
        <see cref="T:C1.C1Preview.DimensionEnum" />。
      </param>
      <returns>
        エラーが発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.LengthBase.Parse(System.String,System.Boolean)">
      <summary>
        文字列を解析して、この文字列から
        <see cref="T:C1.C1Preview.LengthBase" />インスタンスを作成します。
      </summary>
      <param name="s">解析する文字列。</param>
      <param name="throwException">文字列を解析できない場合に例外をスローするかどうかを示します。</param>
      <returns>
        <see cref="T:C1.C1Preview.LengthBase" />インスタンス。
        <paramref name="s" />に応じて、 これは、
        <see cref="T:C1.C1Preview.LengthAbs" />、
        <see cref="T:C1.C1Preview.LengthRef" />、
        <see cref="T:C1.C1Preview.LengthExp" />、または
        <see cref="T:C1.C1Preview.LengthAuto" />が可能です。
        <paramref name="throwException" />が
        <b>false</b>の場合は、エラーが発生すると
        <b>null</b>が返されます。
      </returns>
    </member>
    <member name="P:C1.C1Preview.LengthBase.IsAuto">
      <summary>現在のオブジェクトが自動調整の長さを表すかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.LengthBase.IsEmpty">
      <summary>現在のオブジェクトがゼロの長を表すかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.LengthBase.IsAbs">
      <summary>現在のオブジェクトが絶対的な長さを表すかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.LengthBase.Auto">
      <summary>
        自動調整の長さを表す
        <see cref="T:C1.C1Preview.LengthAuto" />のインスタンスを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.LengthBase.TypeConverter">
      <summary>
        <see cref="T:C1.C1Preview.LengthBase" />と別のタイプ間で双方向変換します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.LengthBase.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
        文字列を
        <see cref="T:C1.C1Preview.LengthBase" />に変換します。
      </summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="str">変換する文字列。</param>
      <returns>
        <paramref name="str" />を表す
        <see cref="T:C1.C1Preview.LengthBase" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.LengthBase.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>オブジェクトを文字列に変換します。</summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="o">変換するオブジェクト。</param>
      <returns>変換された文字列。</returns>
    </member>
    <member name="T:C1.C1Preview.LengthAuto">
      <summary>
        <para>これは内部使用専用です。</para>自動ディメンションまたは座標を表します。 このタイプの１つのインスタンスのみを作成でき、
        <see cref="P:C1.C1Preview.LengthBase.Auto" />を介してアクセスできます。 文字列
        <b>「auto」</b>をこのタイプのエイリアスとして式内で使用できます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.LengthAuto.Equals(System.Object)">
      <summary>現在の長さを別のオブジェクトと比較します。 このメソッドは値による比較を実行します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>
        ２つのオブジェクトが同じ長さを表している場合は
        <b>true</b>、 そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.LengthAuto.GetHashCode">
      <summary>長さ値に基づいて、 現在のオブジェクトのハッシュコードを取得します。</summary>
      <returns>ハッシュコード。</returns>
    </member>
    <member name="M:C1.C1Preview.LengthAuto.ToString">
      <summary>現在のオブジェクトを文字列に変換します。</summary>
      <returns>「auto」。</returns>
    </member>
    <member name="T:C1.C1Preview.LengthAbs">
      <summary>
        <para>これは内部使用専用です。</para>「5mm」、「1.5in」、「20」のような絶対長さ値を表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.LengthAbs.#ctor(System.String)">
      <summary>
        長さ値を表す文字列から、
        <see cref="T:C1.C1Preview.LengthAbs" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="s">値の初期化に使用される文字列（「5mm」または「10in」など）。</param>
    </member>
    <member name="M:C1.C1Preview.LengthAbs.#ctor(System.Double,C1.C1Preview.UnitTypeEnum)">
      <summary>
        測定の値と単位から、
        <see cref="T:C1.C1Preview.LengthAbs" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="value">長さ値。</param>
      <param name="units">
        <paramref name="value" />の測定の単位。
      </param>
    </member>
    <member name="M:C1.C1Preview.LengthAbs.Equals(System.Object)">
      <summary>現在の長さを別のオブジェクトと比較します。 このメソッドは値による比較を実行します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>
        ２つのオブジェクトが同じ長さを表す場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.LengthAbs.GetHashCode">
      <summary>長さ値に基づいて、現在のオブジェクトの ハッシュコードを取得します。</summary>
      <returns>ハッシュコード。</returns>
    </member>
    <member name="M:C1.C1Preview.LengthAbs.ToString">
      <summary>
        現在のオブジェクトを文字列に変換します。 返された文字列は現在の長さオブジェクトに再変換できます （たとえば、
        <see cref="T:C1.C1Preview.Unit" />を同じ値に初期化する場合に使用できます）。
      </summary>
      <returns>現在の長さ値を表す文字列。</returns>
    </member>
    <member name="M:C1.C1Preview.LengthAbs.Compare(C1.C1Preview.LengthAbs,C1.C1Preview.C1PrintDocument,System.Drawing.Font)">
      <summary>
        現在のオブジェクトを別の
        <see cref="T:C1.C1Preview.LengthAbs" />オブジェクトと比較します。
      </summary>
      <param name="other">
        現在のオブジェクトと比較する
        <see cref="T:C1.C1Preview.LengthAbs" />オブジェクト。
      </param>
      <param name="doc">比較のコンテキストを提供するドキュメント。</param>
      <param name="font">比較のコンテキストを提供するフォント。</param>
      <returns>２つのオブジェクトが同じ長さを表す場合は 0、 現在の長さが他方よりも短い場合は -1、 現在の長さが他方よりも長い場合は 1、 測定単位が比較できない場合は -2。</returns>
    </member>
    <member name="P:C1.C1Preview.LengthAbs.Value">
      <summary>
        数値（
        <see cref="P:C1.C1Preview.LengthAbs.Units" />表現）を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthAbs.Units">
      <summary>
        <see cref="P:C1.C1Preview.LengthAbs.Value" />によって使用される測定単位を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.LengthAbs.Predefined">
      <summary>
        定義済みの
        <see cref="T:C1.C1Preview.LengthAbs" />値を含みます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthAbs.Predefined.Empty">
      <summary>
        空の長さ（「0mm」で定義）を表す
        <see cref="T:C1.C1Preview.LengthAbs" />インスタンスを 取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthAbs.Predefined.LineWidth">
      <summary>
        デフォルトの線の幅（1pt に等しい）を表す
        <see cref="T:C1.C1Preview.LengthAbs" />インスタンスを 取得します。 これは枠線、グリッド線などに使用されます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthAbs.Predefined.BoldLineWidth">
      <summary>
        デフォルトの太線の幅（2pt に等しい）を表す
        <see cref="T:C1.C1Preview.LengthAbs" />インスタンスを 取得します。 これは枠線、グリッド線などに使用されます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthAbs.Predefined.Values">
      <summary>
        定義済みの
        <see cref="T:C1.C1Preview.LengthAbs" />値 （
        <see cref="P:C1.C1Preview.LengthAbs.Predefined.Empty" />、
        <see cref="P:C1.C1Preview.LengthAbs.Predefined.LineWidth" />、および
        <see cref="P:C1.C1Preview.LengthAbs.Predefined.BoldLineWidth" />）の配列を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.LengthRef">
      <summary>
        <para>これは内部使用専用です。</para>別のオブジェクトの座標またはディメンションを参照する長さ値を表します。
        <para>（このような参照の例は、「parent.width」、「MyObjectName.right」、「prev.height」、 または「MyObjectName.MySubObjectName.Width」です。）</para>
      </summary>
    </member>
    <member name="M:C1.C1Preview.LengthRef.#ctor(System.String)">
      <summary>
        長さ参照を表す文字列から、
        <see cref="T:C1.C1Preview.LengthRef" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="s">値の初期化に使用される文字列（「parent.width」または「MyObject.right」など）。</param>
    </member>
    <member name="M:C1.C1Preview.LengthRef.#ctor(C1.C1Preview.LengthRef.UnitRefElem,C1.C1Preview.DimensionEnum)">
      <summary>
        ネストしたオブジェクト参照とディメンションから、
        <see cref="T:C1.C1Preview.LengthRef" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="element">
        参照されるオブジェクトを識別する
        <see cref="T:C1.C1Preview.LengthRef.UnitRefElem" />。
      </param>
      <param name="dimension">
        この
        <b>LengthRef</b>のターゲットディメンション。
      </param>
    </member>
    <member name="M:C1.C1Preview.LengthRef.#ctor(C1.C1Preview.ReferenceEnum,C1.C1Preview.DimensionEnum)">
      <summary>
        定義済みのソース参照とディメンションから、
        <see cref="T:C1.C1Preview.LengthRef" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="source">
        参照されるオブジェクトを識別する
        <see cref="T:C1.C1Preview.ReferenceEnum" />。
      </param>
      <param name="dimension">
        この
        <b>LengthRef</b>のターゲットディメンション。
      </param>
    </member>
    <member name="M:C1.C1Preview.LengthRef.Equals(System.Object)">
      <summary>現在の長さを別のオブジェクトと比較します。 このメソッドは値による比較を実行します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>
        ２つのオブジェクトが同じ長さを表す場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.LengthRef.GetHashCode">
      <summary>長さ値に基づいて、現在のオブジェクトの ハッシュコードを取得します。</summary>
      <returns>ハッシュコード。</returns>
    </member>
    <member name="M:C1.C1Preview.LengthRef.ToString">
      <summary>
        現在のオブジェクトを文字列に変換します。 返された文字列は現在の長さオブジェクトに再変換できます （たとえば、
        <see cref="T:C1.C1Preview.Unit" />を同じ値に初期化する場合に使用できます）。
      </summary>
      <returns>現在の長さ値を表す文字列。</returns>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Elements">
      <summary>現在の参照長さのターゲットオブジェクトへのパスを構成するオブジェクトの配列を取得します。 現在の参照の場合</summary>
      <remarks>
        <para>
          現在のオブジェクトが「parent.width」などの単純な（ネストしていない）参照を使用する場合、 この配列は
          <b>parent</b>オブジェクトに対応する１つの要素のみを含みます。
        </para>
        <para>
          現在のオブジェクトが「parent.MyChildName.width」などのネストした参照を使用する場合、 この配列は階層構造の各オブジェクトの
          <see cref="T:C1.C1Preview.LengthRef.UnitRefElem" />要素 （この例では、
          <b>parent</b>に１つ、
          <b>MyChildName</b>に１つ）を含みます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Dimension">
      <summary>参照されるオブジェクトのターゲットディメンションを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.LengthRef.UnitRefElem">
      <summary>
        <see cref="T:C1.C1Preview.LengthRef" />内の単一の参照されるオブジェクトを表す構造体 （
        <b>LengthRef</b>が階層構造の参照を使用する場合、ネストしたオブジェクト階層内の 各オブジェクトはこの構造体のインスタンスによって表されます）。
      </summary>
    </member>
    <member name="F:C1.C1Preview.LengthRef.UnitRefElem.Source">
      <summary>
        参照されるオブジェクトを
        <see cref="T:C1.C1Preview.ReferenceEnum" />として指定します。
      </summary>
    </member>
    <member name="F:C1.C1Preview.LengthRef.UnitRefElem.SourceName">
      <summary>
        <see cref="F:C1.C1Preview.LengthRef.UnitRefElem.Source" />が
        <see cref="F:C1.C1Preview.ReferenceEnum.Name" />の場合に参照されるオブジェクトの名前を指定します。
      </summary>
    </member>
    <member name="F:C1.C1Preview.LengthRef.UnitRefElem.SourceNo">
      <summary>
        <see cref="F:C1.C1Preview.LengthRef.UnitRefElem.Source" />が
        <see cref="F:C1.C1Preview.ReferenceEnum.Page" />または
        <see cref="F:C1.C1Preview.ReferenceEnum.Column" />の場合にページまたは列番号を指定します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.LengthRef.UnitRefElem.#ctor(C1.C1Preview.ReferenceEnum)">
      <summary>
        指定したソースを使って、
        <see cref="T:C1.C1Preview.LengthRef.UnitRefElem" />構造体の新しいインスタンスを初期化します。
      </summary>
      <param name="source">
        現在の参照のソースを識別する
        <see cref="T:C1.C1Preview.ReferenceEnum" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.LengthRef.UnitRefElem.#ctor(C1.C1Preview.ReferenceEnum,System.String,System.Int32)">
      <summary>
        指定したソース、ソース名、およびページ／列番号を使って、
        <see cref="T:C1.C1Preview.LengthRef.UnitRefElem" />構造体の 新しいインスタンスを初期化します。
      </summary>
      <param name="source">
        現在の参照のソースを識別する
        <see cref="T:C1.C1Preview.ReferenceEnum" />。
      </param>
      <param name="sourceName">
        ソース名 （
        <paramref name="source" />が
        <see cref="F:C1.C1Preview.ReferenceEnum.Name" />の場合に使用）。
      </param>
      <param name="sourceNo">
        ソースページ／列番号 （
        <paramref name="source" />が
        <see cref="F:C1.C1Preview.ReferenceEnum.Page" />または
        <see cref="F:C1.C1Preview.ReferenceEnum.Column" />の場合に使用）。
      </param>
    </member>
    <member name="M:C1.C1Preview.LengthRef.UnitRefElem.#ctor(C1.C1Preview.ReferenceEnum,System.Int32)">
      <summary>
        指定したソースとページ／列番号を使って、
        <see cref="T:C1.C1Preview.LengthRef.UnitRefElem" />構造体の 新しいインスタンスを初期化します。
      </summary>
      <param name="source">
        現在の参照のソースを識別する
        <see cref="T:C1.C1Preview.ReferenceEnum" />。
      </param>
      <param name="sourceNo">
        ソースページ／列番号 （
        <paramref name="source" />が
        <see cref="F:C1.C1Preview.ReferenceEnum.Page" />または
        <see cref="F:C1.C1Preview.ReferenceEnum.Column" />の場合に使用）。
      </param>
    </member>
    <member name="M:C1.C1Preview.LengthRef.UnitRefElem.#ctor(System.String)">
      <summary>
        指定したソース名を使って、
        <see cref="T:C1.C1Preview.LengthRef.UnitRefElem" />構造体の 新しいインスタンスを初期化します。
      </summary>
      <param name="sourceName">
        ソース名 （
        <see cref="F:C1.C1Preview.LengthRef.UnitRefElem.Source" />はこのコンストラクタによって
        <see cref="F:C1.C1Preview.ReferenceEnum.Name" />に設定されます）。
      </param>
    </member>
    <member name="M:C1.C1Preview.LengthRef.UnitRefElem.ToString">
      <summary>
        現在のオブジェクトを文字列に変換します。 返された文字列は現在の長さオブジェクトに再変換できます （たとえば、
        <see cref="T:C1.C1Preview.Unit" />を同じ値に初期化する場合に使用できます）。
      </summary>
      <returns>現在の長さ値を表す文字列。</returns>
    </member>
    <member name="T:C1.C1Preview.LengthRef.Predefined">
      <summary>
        一般に使用される多くの定義済みの
        <see cref="T:C1.C1Preview.LengthRef" />オブジェクトを保持して、 そのアクセスを提供します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.ParentLeft">
      <summary>
        「Parent.Left」参照を表す
        <see cref="T:C1.C1Preview.LengthRef" />インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.ParentTop">
      <summary>
        「Parent.Top」参照を表す
        <see cref="T:C1.C1Preview.LengthRef" />インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.ParentWidth">
      <summary>
        「Parent.Width」参照を表す
        <see cref="T:C1.C1Preview.LengthRef" />インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.ParentHeight">
      <summary>
        「Parent.Height」参照を表す
        <see cref="T:C1.C1Preview.LengthRef" />インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.PrevRight">
      <summary>
        「Prev.Right」参照を表す
        <see cref="T:C1.C1Preview.LengthRef" />インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.PrevBottom">
      <summary>
        「Prev.Bottom」参照を表す
        <see cref="T:C1.C1Preview.LengthRef" />インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.PrevHeight">
      <summary>
        「Prev.Height」参照を表す
        <see cref="T:C1.C1Preview.LengthRef" />インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.NextHeight">
      <summary>
        「Next.Height」参照を表す
        <see cref="T:C1.C1Preview.LengthRef" />インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.Parent">
      <summary>
        「Parent.Default」参照を表す
        <see cref="T:C1.C1Preview.LengthRef" />インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.Self">
      <summary>
        「Self.Default」参照を表す
        <see cref="T:C1.C1Preview.LengthRef" />インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.ParentRight">
      <summary>
        「Parent.Right」参照を表す
        <see cref="T:C1.C1Preview.LengthRef" />インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.ParentBottom">
      <summary>
        「Parent.Bottom」参照を表す
        <see cref="T:C1.C1Preview.LengthRef" />インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.SelfWidth">
      <summary>
        「Self.Width」参照を表す
        <see cref="T:C1.C1Preview.LengthRef" />インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.SelfHeight">
      <summary>
        「Self.Height」参照を表す
        <see cref="T:C1.C1Preview.LengthRef" />インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.PageWidth">
      <summary>
        「Page.Width」参照を表す
        <see cref="T:C1.C1Preview.LengthRef" />インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.PageHeight">
      <summary>
        「Page.Height」参照を表す
        <see cref="T:C1.C1Preview.LengthRef" />インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthRef.Predefined.Values">
      <summary>
        <see cref="T:C1.C1Preview.LengthRef.Predefined" />クラスによって定義されたすべての長さを含む
        <see cref="T:C1.C1Preview.LengthRef" />のコレクションを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp">
      <summary>
        <para>これは内部使用専用です。</para>
        <see cref="T:C1.C1Preview.LengthRef" />、
        <see cref="T:C1.C1Preview.LengthAbs" />の インスタンスとこれらの演算（
        <b>LengthExp.Add</b>などの
        <see cref="T:C1.C1Preview.LengthExp.Operation" />タイプの 静的プロパティで表現）で構成される式である長さ値を表します。
        <para>（この式の例は「parent.width + 5mm」、「80%parent.width」などです。）</para>
      </summary>
    </member>
    <member name="M:C1.C1Preview.LengthExp.#ctor(System.Object[])">
      <summary>
        <!--TBD: this must be clarified with Alexander!!! (e.g. functions)-->
        逆ポーランド記法順序のオペランドと演算の配列を使って、
        <see cref="T:C1.C1Preview.LengthExp" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="elements">
        逆ポーランド記法の順序の現在の
        <see cref="T:C1.C1Preview.LengthExp" />を構成する オペランドと演算。
      </param>
      <remarks>
        <paramref name="elements" />配列は、以下のようなオペランドと演算の 有効な逆ポーランド記法のスタックである必要があります。
        <list type="bullet">
          <item>
            <see cref="T:C1.C1Preview.LengthAbs" />：絶対長さ値を表します。
          </item>
          <item>
            <see cref="T:C1.C1Preview.LengthExp" />：別のオブジェクトの座標またはディメンションを表します。
          </item>
          <item>
            組み込み関数：
            <list type="bullet">
              <item>
                <see cref="P:C1.C1Preview.LengthExp.Max" />：最大値。
              </item>
              <item>
                <see cref="P:C1.C1Preview.LengthExp.Min" />：最小値。
              </item>
            </list>
          </item>
          <item>
            演算：
            <list type="bullet">
              <item>
                <see cref="P:C1.C1Preview.LengthExp.Add" />：加算。
              </item>
              <item>
                <see cref="P:C1.C1Preview.LengthExp.Sub" />：減算。
              </item>
              <item>
                <see cref="P:C1.C1Preview.LengthExp.Mul" />：乗算。
              </item>
              <item>
                <see cref="P:C1.C1Preview.LengthExp.Div" />：除算。
              </item>
              <item>
                <see cref="P:C1.C1Preview.LengthExp.Percent" />：パーセンテージ。
              </item>
              <item>
                <see cref="P:C1.C1Preview.LengthExp.UnMinus" />：単項マイナス。
              </item>
              <item>
                <see cref="P:C1.C1Preview.LengthExp.UnPlus" />：単項プラス。
              </item>
              <item>
                <see cref="P:C1.C1Preview.LengthExp.Bracket" />：角カッコ（左または右）。
              </item>
              <item>
                <see cref="P:C1.C1Preview.LengthExp.EmptyArg" />：空の引数。
              </item>
            </list>
          </item>
        </list><!--TBD: provide concrete examples-->
      </remarks>
    </member>
    <member name="M:C1.C1Preview.LengthExp.Equals(System.Object[])">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.LengthExp" />オブジェクトを逆ポーランド記法の オペランドおよび演算の別のスタックと比較します （詳細は、
        <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" />を参照）。 このメソッドは、２つのスタックの値を比較します。
      </summary>
      <param name="elements">現在の式と比較されるオペランドおよび演算の逆ポーランド記法スタック。</param>
    </member>
    <member name="M:C1.C1Preview.LengthExp.Equals(System.Object)">
      <summary>
        現在の長さ式を別のオブジェクトと比較します。 このメソッドは、
        <see cref="M:C1.C1Preview.LengthExp.Equals(System.Object[])" />メソッドを使って、 ２つのオブジェクトの演算スタックを比較します。
      </summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>
        ２つのオブジェクトが同じ長さを表す場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.LengthExp.GetHashCode">
      <summary>長さ式スタックの値に基づいて、 現在のオブジェクトのハッシュコードを取得します。</summary>
      <returns>ハッシュコード。</returns>
    </member>
    <member name="M:C1.C1Preview.LengthExp.ToString">
      <summary>
        現在のオブジェクトを文字列に変換します。 返された文字列は現在の長さオブジェクトに再変換できます （たとえば、
        <see cref="T:C1.C1Preview.Unit" />を同じ値に初期化する場合に使用できます）。
      </summary>
      <returns>現在の長さ値を表す文字列。</returns>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Elements">
      <summary>
        <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" />の 解説で記述されている式スタックを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Operations">
      <summary>すべての登録された（サポートされた）演算子の配列を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.UnaryOperations">
      <summary>すべての登録された（サポートされた）単項演算子の配列を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Functions">
      <summary>登録された（サポートされた）関数の配列を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Add">
      <summary>
        <see cref="T:C1.C1Preview.LengthExp.OpAdd" />クラスの静的インスタンスを取得します。
        <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" />コンストラクタで使用できます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Sub">
      <summary>
        <see cref="T:C1.C1Preview.LengthExp.OpSub" />クラスの静的インスタンスを取得します。
        <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" />コンストラクタで使用できます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Mul">
      <summary>
        <see cref="T:C1.C1Preview.LengthExp.OpMul" />クラスの静的インスタンスを取得します。
        <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" />コンストラクタで使用できます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Div">
      <summary>
        <see cref="T:C1.C1Preview.LengthExp.OpDiv" />クラスの静的インスタンスを取得します。
        <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" />コンストラクタで使用できます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Percent">
      <summary>
        <see cref="T:C1.C1Preview.LengthExp.OpPercent" />クラスの静的インスタンスを取得します。
        <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" />コンストラクタで使用できます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.UnMinus">
      <summary>
        <see cref="T:C1.C1Preview.LengthExp.OpUnMinus" />クラスの静的インスタンスを取得します。
        <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" />コンストラクタで使用できます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.UnPlus">
      <summary>
        <see cref="T:C1.C1Preview.LengthExp.OpUnPlus" />クラスの静的インスタンスを取得します。
        <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" />コンストラクタで使用できます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Bracket">
      <summary>
        <see cref="T:C1.C1Preview.LengthExp.OpBracket" />クラスの静的インスタンスを取得します。
        <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" />コンストラクタで使用できます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.EmptyArg">
      <summary>
        <see cref="T:C1.C1Preview.LengthExp.OpEmptyArg" />クラスの静的インスタンスを取得します。
        <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" />コンストラクタで使用できます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Max">
      <summary>
        <see cref="T:C1.C1Preview.LengthExp.MaxFunction" />クラスの静的インスタンスを取得します。
        <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" />コンストラクタで使用できます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.Min">
      <summary>
        <see cref="T:C1.C1Preview.LengthExp.MinFunction" />クラスの静的インスタンスを取得します。
        <see cref="M:C1.C1Preview.LengthExp.#ctor(System.Object[])" />コンストラクタで使用できます。
      </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.IExecuteContext">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.LengthExp.IExecuteContext.GetDim(System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="callbackData"></param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.LengthExp.FunctionAlg">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.MaxFunction">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.MinFunction">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.LengthExp.MinFunction.Ident">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.Operation">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.Compiler">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpAdd">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpSub">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpMul">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpDiv">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpPercent">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpUnMinus">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpUnPlus">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpFunction">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpBracket">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.OpEmptyArg">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.Predefined">
      <summary>
        <para>これは内部使用専用です。</para>一部の定義済みの LengthExp オブジェクトを含みます。
      </summary>
    </member>
    <member name="T:C1.C1Preview.LengthExp.Coord">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Unit">
      <summary>サイズや位置を、「自動」、「絶対値」、「オブジェクトのサイズや位置」として指定するための機能を提供します。</summary>
      <remarks>
        <para>
          値は、「auto」、絶対（「5mm」など）、または式（「prev.width + 12mm」など）が可能です。 詳細は、
          <see cref="M:C1.C1Preview.Unit.#ctor(System.String)" />を参照してください。
          <!--TBD: add more info (copy from descriptive doc?)--><!--TBD: add examples-->
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Preview.Unit.#ctor(System.String)">
      <summary>
        文字列から、
        <see cref="T:C1.C1Preview.Unit" />構造体の新しいインスタンスを初期化します。 詳細は、
        <b>解説</b>を参照してください。
      </summary>
      <param name="str">値を表す文字列。</param>
      <remarks>
        <para>
          （以下の説明では、
          <b>「object」</b>は
          <b>Unit</b>構造体自身でなく、 現在の
          <b>Unit</b>がディメンションまたは座標を表す場所となる
          <see cref="T:C1.C1Preview.RenderObject" />または別のドキュメントオブジェクトを意味します。）
        </para>
        <paramref name="str" />文字列は、以下のいずれかのフォームに有効な
        <see cref="T:C1.C1Preview.Unit" />値を含む必要があります。
        <list type="bullet">
          <item>
            自動。文字列
            <b>「auto」</b>によって表されます。 正確な意味は、現在の単位が関連付けられたオブジェクトのタイプによって決まります。
          </item>
          <item>
            限定されない数値。例：
            <b>「8」</b>または
            <b>「100.12」</b>。
            <para>
              この場合、
              <see cref="P:C1.C1Preview.C1PrintDocument.DefaultUnit" />は測定単位を決定します。
            </para>
          </item>
          <item>
            測定の単位で限定された数値。例：
            <b>「28mm」</b>または
            <b>「7in」</b>。
            <para>
              以下の単位タイプ修飾子がサポートされています （タイプごとに、
              <see cref="T:C1.C1Preview.UnitTypeEnum" />列挙体の対応する要素がリストされます）。
            </para><list type="bullet">
              <!--TODO/TBD/QQ: provide correct descriptions for each type!-->
              <item>
                <term>def</term>
                <description>
                  <see cref="P:C1.C1Preview.C1PrintDocument.DefaultUnit" />が使用されます （
                  <see cref="F:C1.C1Preview.UnitTypeEnum.Default" />。これは単位を指定しないのと同じです）。
                </description>
              </item>
              <item>
                <term>doc</term>
                <description>
                  「ドキュメント」単位（
                  <see cref="F:C1.C1Preview.UnitTypeEnum.Document" />。1/300 インチ）。
                </description>
              </item>
              <item>
                <term>in</term>
                <description>
                  インチ（
                  <see cref="F:C1.C1Preview.UnitTypeEnum.Inch" />）。
                </description>
              </item>
              <item>
                <term>mm</term>
                <description>
                  ミリメートル（
                  <see cref="F:C1.C1Preview.UnitTypeEnum.Mm" />）。
                </description>
              </item>
              <item>
                <term>pc</term>
                <description>
                  パイカ（
                  <see cref="F:C1.C1Preview.UnitTypeEnum.Pica" />。1/6 インチ）。
                </description>
              </item>
              <item>
                <term>pix</term>
                <description>
                  デバイスピクセル（
                  <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />。
                  <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementDpi" />によって決定）。
                </description>
              </item>
              <item>
                <term>pt</term>
                <description>
                  ポイント（
                  <see cref="F:C1.C1Preview.UnitTypeEnum.Point" />。1/72 インチ）。
                </description>
              </item>
              <item>
                <term>tw</term>
                <description>
                  ツイップ（
                  <see cref="F:C1.C1Preview.UnitTypeEnum.Twip" />。1/1440 インチ）。
                </description>
              </item>
              <item>
                <term>inhs</term>
                <description>
                  1/100 インチ（
                  <see cref="F:C1.C1Preview.UnitTypeEnum.InHs" />）。
                </description>
              </item>
              <item>
                <term>dsp</term>
                <description>
                  「ディスプレイ」単位（
                  <see cref="F:C1.C1Preview.UnitTypeEnum.Display" />。1/75 インチ）。
                </description>
              </item>
              <item>
                <term>cm</term>
                <description>
                  センチメートル（
                  <see cref="F:C1.C1Preview.UnitTypeEnum.Cm" />）。
                </description>
              </item>
              <item>
                <term>em</term>
                <description>
                  「em サイズ」（
                  <see cref="F:C1.C1Preview.UnitTypeEnum.Em" />。オブジェクトフォントの高さ）。
                </description>
              </item>
              <item>
                <term>ex</term>
                <description>
                  「ex サイズ」（
                  <see cref="F:C1.C1Preview.UnitTypeEnum.Ex" />。オブジェクトフォントの小文字
                  <b>x</b>の高さ）。
                </description>
              </item>
              <item>
                <term>ls</term>
                <description>
                  オブジェクトフォントの行間隔（
                  <see cref="F:C1.C1Preview.UnitTypeEnum.LineSpacing" />）。
                </description>
              </item>
            </list>
          </item>
          <item>
            オブジェクトの親サイズのパーセンテージ。オプションとして親のディメンションで限定されます （「width」または「height」。ディメンションが指定されない場合は現在の単位が参照するディメンションが前提されます）。 例：
            <b>「50%width」</b>または
            <b>「120%」</b>。
            <para>（パーセンテージは、幅または高さの指定にのみ使用でき、座標には有効ではありません。）</para>
          </item>
          <item>
            別のオブジェクトのディメンションまたは座標への参照。 例：
            <b>「prev.width」</b>、
            <b>「next.bottom」</b>、または
            <b>「page1column2.width」</b>。
            <para>参照されるオブジェクトは、以下のキーワードのいずれかによって識別できます。</para><list type="bullet">
              <item>
                <term>self</term>
                <description>現在のオブジェクト。デフォルト。省略可能です。</description>
              </item>
              <item>
                <term>parent</term>
                <description>現在のオブジェクトの親（コンテナ）。</description>
              </item>
              <item>
                <term>prev</term>
                <description>現在のオブジェクトの１つ前の兄弟。</description>
              </item>
              <item>
                <term>next</term>
                <description>現在のオブジェクトの１つ後の兄弟。</description>
              </item>
              <item>
                <term>page</term>
                <description>現在のページ。</description>
              </item>
              <item>
                <term>column</term>
                <description>現在のページ列。</description>
              </item>
              <item>
                <term>
                  page
                  <i>N</i>
                </term>
                <description>
                  番号によるページ。
                  <b>N</b>は１から始まります （例：
                  <b>「page8」</b>。ページはすでに存在している必要があり、この表記法を使った前方参照はサポートされていません）。
                </description>
              </item>
              <item>
                <term>
                  pageindex
                  <i>N</i>
                </term>
                <description>
                  インデックスによるページ。
                  <b>N</b>は０から始まります （例：
                  <b>「page0」</b>）。
                </description>
              </item>
              <item>
                <term>
                  column
                  <i>M</i>
                </term>
                <description>
                  番号による列。
                  <b>M</b>は現在のページ上で１から始まります（例：
                  <b>「column2」</b>）。
                </description>
              </item>
              <item>
                <term>
                  page
                  <i>N</i>.column
                  <i>M</i>
                </term>
                <description>
                  ページ
                  <b>N</b>上の列
                  <b>M</b>。
                  <b>M</b>と
                  <b>N</b>は１から始まります（例：
                  <b>「page8.column2」</b>）。
                </description>
              </item>
              <item>
                <term>
                  <i>object name</i>
                </term>
                <description>
                  指定した名前を持つオブジェクト（
                  <see cref="P:C1.C1Preview.RenderObject.Name" />を参照）。 オブジェクトは、まず現在のオブジェクトの兄弟の間で、次に子の間で検索されます。
                </description>
              </item>
            </list>参照されるディメンションまたは座標は以下のキーワードの１つを使用して指定できます。
            <list type="bullet">
              <item>
                <term>left</term>
                <description>
                  オブジェクトの左辺の
                  <b>X</b>座標。
                </description>
              </item>
              <item>
                <term>top</term>
                <description>
                  オブジェクトの上辺の
                  <b>Y</b>座標。
                </description>
              </item>
              <item>
                <term>right</term>
                <description>
                  オブジェクトの右辺の
                  <b>X</b>座標。
                </description>
              </item>
              <item>
                <term>bottom</term>
                <description>
                  オブジェクトの下辺の
                  <b>Y</b>座標。
                </description>
              </item>
              <item>
                <term>width</term>
                <description>オブジェクトの幅。</description>
              </item>
              <item>
                <term>height</term>
                <description>オブジェクトの高さ。</description>
              </item>
            </list>
          </item>
          <item>
            <b>Max</b>または
            <b>Min</b>組み込み関数呼び出し。例：
            <b>「Max(prev.width,6cm)」</b>または
            <b>「Min(0.5in,next.height)」</b>。
          </item>
          <item>
            上記のいずれかのフォーム（
            <b>「auto」</b>を除く）内でオペランドを使用する式。
            <b>+</b>（加算）、
            <b>-</b>（減算）、
            <b>*</b>（乗算）、
            <b>/</b>（除算）、
            <b>%</b>（パーセント）、
            <b>Min</b>と
            <b>Max</b>関数、
            <b>(</b>と
            <b>)</b>カッコの各演算子を使用して結合されます。
            <para>単位式の例は以下のようになります。</para><list type="bullet">
              <item>
                <term>prev.width + 50%prev.width</term>
                <description>この式を使って、オブジェクトの幅を１つ前の兄弟の幅の 1.5 倍に指定できます。</description>
              </item>
              <item>
                <term>150%prev</term>
                <description>同上</description>
              </item>
              <item>
                <term>prev * 1.5</term>
                <description>上記と同じですが、パーセンテージの代わりに乗算を使用しています。</description>
              </item>
            </list>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:C1.C1Preview.Unit.#ctor(System.Double,C1.C1Preview.UnitTypeEnum)">
      <summary>
        絶対長さ値を使って、
        <see cref="T:C1.C1Preview.Unit" />構造体の 新しいインスタンスを初期化します。
      </summary>
      <param name="value">単位値。</param>
      <param name="unitType">測定の単位。</param>
    </member>
    <member name="M:C1.C1Preview.Unit.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.Equals(System.Object)">
      <summary>現在の単位値を別のオブジェクトと比較します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>
        ２つのオブジェクトが同じ単位値を表す場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Unit.GetHashCode">
      <summary>現在の単位値のハッシュコードを取得します。</summary>
      <returns>ハッシュコード。</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.ConvertUnit(C1.C1Preview.UnitTypeEnum)">
      <summary>
        現在の単位値を別の測定単位に変換することを試みます。
        <para>絶対単位のみを変換できます。 このメソッドは、変換が実行できない場合に例外をスローします。</para>
      </summary>
      <param name="destUnitType">
        ターゲット
        <see cref="T:C1.C1Preview.UnitTypeEnum" />。
      </param>
      <returns>
        <paramref name="destUnitType" />単位の値。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Unit.ConvertUnit(C1.C1Preview.UnitTypeEnum,System.Single)">
      <summary>
        現在の単位値を別の測定単位に変換することを試みます。
        <para>絶対単位のみを変換できます。 このメソッドは、変換が実行できない場合に例外をスローします。</para>
      </summary>
      <param name="destUnitType">
        ターゲット
        <see cref="T:C1.C1Preview.UnitTypeEnum" />。
      </param>
      <param name="destDpi">
        ターゲット解像度（
        <paramref name="destUnitType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合に使用）。
      </param>
      <returns>
        <paramref name="destUnitType" />単位の値。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Unit.ConvertUnit(System.Single,C1.C1Preview.UnitTypeEnum,System.Single)">
      <summary>
        現在の単位値を別の測定単位に変換することを試みます。
        <para>絶対単位のみを変換できます。 このメソッドは、変換が実行できない場合に例外をスローします。</para>
      </summary>
      <param name="sourceDpi">
        現在の単位値の解像度（
        <see cref="P:C1.C1Preview.Unit.Units" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合に使用）。
      </param>
      <param name="destUnitType">
        ターゲット
        <see cref="T:C1.C1Preview.UnitTypeEnum" />。
      </param>
      <param name="destDpi">
        ターゲット解像度（
        <paramref name="destUnitType" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合に使用）。
      </param>
      <returns>
        <paramref name="destUnitType" />単位の値。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Unit.FromObject(System.Object)">
      <summary>オブジェクトを単位値に変換することを試みます。 このメソッドは、変換が実行できない場合に例外をスローします。</summary>
      <param name="obj">変換するオブジェクト。</param>
      <returns>
        <paramref name="obj" />を表す単位値。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Unit.op_Equality(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>２つの単位値が等しいかどうかをテストします。</summary>
      <param name="u1">第１の単位値。</param>
      <param name="u2">第２の単位値。</param>
      <returns>
        ２つの単位が等しい場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Unit.op_Inequality(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>２つの単位値が等しくないかどうかをテストします。</summary>
      <param name="u1">第１の単位値。</param>
      <param name="u2">第２の単位値。</param>
      <returns>
        ２つの単位が等しくない場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Unit.op_Implicit(C1.C1Preview.Unit)~System.Double">
      <summary>
        <see cref="F:C1.C1Preview.UnitTypeEnum.Default" />単位で表される
        <see cref="T:C1.C1Preview.Unit" />の絶対値を返します。
        <para>操作を実行できない場合は、例外を生成します。</para>
      </summary>
      <param name="value">変換する単位値。</param>
      <returns>絶対値。</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.op_Implicit(C1.C1Preview.Unit)~System.String">
      <summary>単位値を文字列に変換します。</summary>
      <param name="value">変換する単位。</param>
      <returns>単位値を表す文字列。</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.op_Implicit(System.Double)~C1.C1Preview.Unit">
      <summary>
        <see cref="F:C1.C1Preview.UnitTypeEnum.Default" />単位を使用して、
        <b>double</b>値を
        <see cref="T:C1.C1Preview.Unit" />に変換します。
      </summary>
      <param name="value">
        <b>double</b>値。
      </param>
      <returns>単位値。</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.op_Implicit(System.Int32)~C1.C1Preview.Unit">
      <summary>
        <see cref="F:C1.C1Preview.UnitTypeEnum.Default" />単位を使用して、整数値を
        <see cref="T:C1.C1Preview.Unit" />に変換します。
      </summary>
      <param name="value">整数値。</param>
      <returns>単位値。</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.op_Implicit(System.String)~C1.C1Preview.Unit">
      <summary>
        文字列を
        <see cref="T:C1.C1Preview.Unit" />値に変換します（
        <see cref="M:C1.C1Preview.Unit.#ctor(System.String)" />を参照）。
      </summary>
      <param name="value">変換する文字列。</param>
      <returns>単位値。</returns>
    </member>
    <member name="P:C1.C1Preview.Unit.IsEmpty">
      <summary>現在の単位が空の値を表すかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Unit.Value">
      <summary>
        現在の単位（
        <see cref="P:C1.C1Preview.Unit.Units" />単位）の絶対値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.Units">
      <summary>現在の単位の測定単位を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Unit.IsAuto">
      <summary>この単位が「自動」として指定されるかどうかを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Unit.IsAbs">
      <summary>この単位が「1mm」や「1em」などの絶対値として定義されるかどうかを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Unit.IsParentWidth">
      <summary>この単位が「parent.width」として指定されるかどうかを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Unit.IsParentHeight">
      <summary>この単位が「parent.height」として指定されるかどうかを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Unit.IsParent">
      <summary>この単位が「parent」として指定されるかどうかを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Unit.Auto">
      <summary>
        <b>「auto」</b>値を表す
        <see cref="T:C1.C1Preview.Unit" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.Empty">
      <summary>
        空（ゼロ）値を表す
        <see cref="T:C1.C1Preview.Unit" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.LineWidth">
      <summary>
        デフォルトの線の太さ（1pt 幅）を表す
        <see cref="T:C1.C1Preview.Unit" />値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Unit.BoldLineWidth">
      <summary>
        デフォルトの「太い」線の太さ（2pt 幅）を表す
        <see cref="T:C1.C1Preview.Unit" />値を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Unit.TypeConverter">
      <summary>
        <see cref="T:C1.C1Preview.Unit" />値のタイプ変換を提供します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Unit.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
        文字列を
        <see cref="T:C1.C1Preview.PageNumberingChange" />オブジェクトに変換します。
      </summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="str">変換する文字列。</param>
      <returns>変換された値。</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>オブジェクトを文字列に変換します。</summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="o">変換するオブジェクト。</param>
      <returns>変換された文字列。</returns>
    </member>
    <member name="M:C1.C1Preview.Unit.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>オブジェクトを指定したタイプに変換できるかどうかをテストします。</summary>
      <param name="context">変換コンテキスト。</param>
      <param name="type">ターゲットタイプ。</param>
      <returns>
        変換を実行できる場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Unit.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>オブジェクトを指定したタイプに変換します。</summary>
      <param name="context">変換コンテキスト。</param>
      <param name="culture">使用するカルチャ。</param>
      <param name="value">変換する値。</param>
      <param name="type">ターゲットタイプ。</param>
      <returns>変換されたオブジェクト。</returns>
    </member>
    <member name="T:C1.C1Preview.UnitPoint">
      <summary>２つの Unit 構造体によって表されるポイントを定義します。</summary>
    </member>
    <member name="M:C1.C1Preview.UnitPoint.#ctor(C1.C1Preview.Unit,C1.C1Preview.Unit)">
      <summary>
        <see cref="T:C1.C1Preview.UnitPoint" />構造体の新しいインスタンスを初期化します。
      </summary>
      <param name="x">
        <b>X</b>座標。
      </param>
      <param name="y">
        <b>Y</b>座標。
      </param>
    </member>
    <member name="M:C1.C1Preview.UnitPoint.ToString">
      <summary>現在の値を人間が判読できる文字列に変換します。</summary>
      <returns>現在の値を表す文字列。</returns>
    </member>
    <member name="M:C1.C1Preview.UnitPoint.Parse(System.String,C1.C1Preview.UnitPoint@,System.Boolean)">
      <summary>文字列を UnitPoint 構造体に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <param name="result">UnitPoint 構造体。</param>
      <param name="throwException">文字列を UnitPoint に変換できない場合に例外が生成されることを示します。</param>
      <returns>エラーが発生しなかった場合は true を返します。</returns>
    </member>
    <member name="P:C1.C1Preview.UnitPoint.X">
      <summary>このポイントの x 座標を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.UnitPoint.Y">
      <summary>このポイントの y 座標を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.UnitPoint.Empty">
      <summary>null ポイントを表します。</summary>
    </member>
    <member name="T:C1.C1Preview.UnitPoint.TypeConverter">
      <summary>
        <see cref="T:C1.C1Preview.UnitPoint" />値のタイプ変換を提供します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.UnitPoint.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
        文字列を
        <see cref="T:C1.C1Preview.UnitPoint" />値に変換します。
      </summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="str">変換する文字列。</param>
      <returns>変換された値。</returns>
    </member>
    <member name="M:C1.C1Preview.UnitPoint.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>オブジェクトを文字列に変換します。</summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="o">変換するオブジェクト。</param>
      <returns>変換された文字列。</returns>
    </member>
    <member name="T:C1.C1Preview.Utils">
      <summary>共通関数を含みます。</summary>
      <summary>共通関数を含みます。</summary>
      <summary>共通関数を含みます。</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.MmPerInch">
      <summary>１インチあたりのミリメートル（double 表示）。</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.DocumentUnitsPerInch">
      <summary>１インチあたりのドキュメント単位（double 表示）。</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.PointsPerInch">
      <summary>１インチあたりのポイント（double 表示）。</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.TwipsPerInch">
      <summary>１インチあたりのツイップ（double 表示）。</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.PicaPerInch">
      <summary>１インチあたりのパイカ（double 表示）。</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.CmPerInch">
      <summary>１インチあたりのセンチメートル（double 表示）。</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.DisplayPerInch">
      <summary>１インチあたりのディスプレイ単位（double 表示）。</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.MmPerInchF">
      <summary>１インチあたりのミリメートル（float 表示）。</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.DocumentUnitsPerInchF">
      <summary>１インチあたりのドキュメント単位（float 表示）。</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.PointsPerInchF">
      <summary>１インチあたりのポイント（float 表示）。</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.TwipsPerInchF">
      <summary>１インチあたりのツイップ（float 表示）。</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.PicaPerInchF">
      <summary>１インチあたりのパイカ（float 表示）。</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.CmPerInchF">
      <summary>１インチあたりのセンチメートル（float 表示）。</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.DisplayPerInchF">
      <summary>１インチあたりのディスプレイ単位（float 表示）。</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.TransparentColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.WhiteColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.BlackColor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Utils.IsColorEmpty(System.Drawing.Color)">
      <summary>
        指定した色が表示されないかどうか（
        <see cref="F:System.Drawing.Color.Empty" />または
        <see cref="P:System.Drawing.Color.Transparent" />に等しいかどうか）を検査します。
      </summary>
      <param name="color">テストする色。</param>
      <returns>
        指定された色が不可視である場合は
        <b>true</b>、 そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Utils.IsColorEquals(System.Drawing.Color,System.Drawing.Color)">
      <summary>指定された２色が等しいかどうかをテストします。</summary>
      <param name="color1">１色目。</param>
      <param name="color2">２色目。</param>
      <returns>
        指定された２色が等しい場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Utils.IsColorWhite(System.Drawing.Color)">
      <summary>指定された色が白かどうかをテストします。</summary>
      <param name="color">テストする色。</param>
      <returns>
        指定された色が白である場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Utils.IsColorBlack(System.Drawing.Color)">
      <summary>指定された色が黒かどうかをテストします。</summary>
      <param name="color">テストする色。</param>
      <returns>
        指定された色が黒である場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Utils.IsColorTransparent(System.Drawing.Color)">
      <summary>指定された色が透明かどうかをテストします。</summary>
      <param name="color">テストする色。</param>
      <returns>
        指定された色が透明である場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Utils.ToWpfColor(System.Drawing.Color)">
      <summary>これは内部使用専用です。</summary>
      <param name="c"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Utils.FromWpfColor(System.Drawing.Color)">
      <summary>これは内部使用専用です。</summary>
      <param name="c"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Utils.SamePaperSizes(System.Drawing.SizeF,System.Drawing.SizeF)">
      <summary>誤差を丸めるための小さいマージンを許容する２つのサイズの等価性をテストします。</summary>
      <param name="size1">比較する１つめのサイズ。</param>
      <param name="size2">比較する第２のサイズ。</param>
      <returns>２つのサイズが妥当な近似の場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.Utils.IsC1Document(System.Object)">
      <summary>
        オブジェクトが
        <see cref="T:C1.C1Preview.IC1Document" />として表すことができるかどうかをテストします。
      </summary>
      <param name="o">テストするタイプ。</param>
      <returns>
        オブジェクトが
        <see cref="T:C1.C1Preview.IC1Document" />をサポートする場合は
        <b>true</b>、 そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Utils.AsC1Document(System.Object)">
      <summary>
        渡されたオブジェクトを表す
        <see cref="T:C1.C1Preview.IC1Document" />を取得します。 渡されたドキュメントが
        <see cref="T:C1.C1Preview.C1PrintDocument" />または
        <see cref="T:C1.C1Preview.C1MultiDocument" />の場合はそのオブジェクトを返します。 そうでない場合、渡されたドキュメントが
        <see cref="T:C1.C1Report.C1Report" />の場合は、 そのレポートの
        <see cref="P:C1.C1Report.C1Report.C1Document" />プロパティを返します。 それ以外の場合は
        <b>null</b>を返します。
      </summary>
      <param name="o">テスト／変換するドキュメント。</param>
      <returns>
        渡されたオブジェクトを表す
        <see cref="T:C1.C1Preview.IC1Document" />または
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Utils.IsC1DocumentType(System.Type)">
      <summary>
        指定されたタイプのオブジェクトを
        <see cref="T:C1.C1Preview.IC1Document" />として表せるかどうかをテストします。
      </summary>
      <param name="type">テストするタイプ。</param>
      <returns>
        指定されたタイプを
        <see cref="T:C1.C1Preview.IC1Document" />として表せる場合は
        <b>true</b>、 そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Utils.IsC1PrintDocument(System.Object)">
      <summary>
        オブジェクトが
        <see cref="T:C1.C1Preview.C1PrintDocument" />として表すことができるかどうかをテストします。
      </summary>
      <param name="o">テストするオブジェクト。</param>
      <returns>
        オブジェクトが
        <see cref="T:C1.C1Preview.C1PrintDocument" />または
        <see cref="N:C1.C1Report" />の場合は
        <b>true</b>、 その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Utils.AsC1PrintDocument(System.Object)">
      <summary>
        渡されたオブジェクトを表す
        <see cref="T:C1.C1Preview.C1PrintDocument" />を取得します。 渡されたドキュメントが
        <see cref="T:C1.C1Preview.C1PrintDocument" />の場合はそのオブジェクトを返します。 そうでない場合、渡されたドキュメントが
        <see cref="N:C1.C1Report" />の場合は、 そのレポートの
        <see cref="P:C1.C1Report.C1Report.C1Document" />プロパティを返します。 その他の場合は
        <b>null</b>を返します。
      </summary>
      <param name="o">テスト／変換するドキュメント。</param>
      <returns>
        渡されたオブジェクトを表す
        <see cref="T:C1.C1Preview.C1PrintDocument" />、または
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Utils.IsC1PrintDocumentType(System.Type)">
      <summary>
        指定されたタイプのオブジェクトを
        <see cref="T:C1.C1Preview.C1PrintDocument" />として表せるかどうかをテストします。
      </summary>
      <param name="type">テストするタイプ。</param>
      <returns>
        指定されたタイプを
        <see cref="T:C1.C1Preview.C1PrintDocument" />として表せる場合は
        <b>true</b>、 そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Utils.ConvertUnits(System.Double,C1.C1Preview.UnitTypeEnum,C1.C1Preview.UnitTypeEnum,System.Single,System.Single)">
      <summary>値を１つの測定単位から別の測定単位に変換します。</summary>
      <param name="value">変換する値。</param>
      <param name="from">測定のソース単位。</param>
      <param name="to">測定のターゲット単位。</param>
      <param name="fromDpi">
        ソース DPI（
        <paramref name="from" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合に使用）。
      </param>
      <param name="toDpi">
        ターゲット DPI（
        <paramref name="to" />が
        <see cref="F:C1.C1Preview.UnitTypeEnum.Pixel" />の場合に使用）。
      </param>
      <returns>
        <paramref name="to" />単位に変換された
        <paramref name="value" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Utils.GetResourceImage(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="imageName"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Utils.Round(C1.C1Preview.RectangleD)">
      <summary>これは内部使用専用です。</summary>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Utils.Round(C1.C1Preview.PointD)">
      <summary>これは内部使用専用です。</summary>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.Utils.FC">
      <summary>
        <para>これは内部使用専用です。</para>指定した精度を持つ float 型と double 型の数値を比較する 静的メソッドを実装します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Utils.FC.IsIntersect(C1.C1Preview.RectangleD,C1.C1Preview.RectangleD)">
      <summary>これは内部使用専用です。</summary>
      <param name="r1"></param>
      <param name="r2"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Utils.FC.IsPiecesIntersect(System.Double,System.Double,System.Double,System.Double)">
      <summary>これは内部使用専用です。</summary>
      <param name="p11"></param>
      <param name="p12"></param>
      <param name="p21"></param>
      <param name="p22"></param>
      <returns></returns>
    </member>
    <member name="T:C1.Util.CodeRange">
      <summary>文字コードの範囲を表します。</summary>
    </member>
    <member name="M:C1.Util.CodeRange.#ctor(System.Char)">
      <summary></summary>
      <param name="ch">追加する文字。</param>
    </member>
    <member name="M:C1.Util.CodeRange.#ctor(System.Char,System.Char)">
      <summary></summary>
      <param name="first"></param>
      <param name="last"></param>
    </member>
    <member name="M:C1.Util.CodeRange.Clone">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:C1.Util.CodeRange.Contains(C1.Util.CodeRange)">
      <summary></summary>
      <param name="cr"></param>
      <returns></returns>
    </member>
    <member name="P:C1.Util.CodeRange.First">
      <summary>文字の開始コード。</summary>
    </member>
    <member name="P:C1.Util.CodeRange.Last">
      <summary>文字の終了コード。</summary>
    </member>
    <member name="T:C1.Util.CodeRanges">
      <summary>
        一意の
        <see cref="T:C1.Util.CodeRange" />オブジェクトのコレクションを表します。 コレクション内のすべての CodeRange オブジェクトは交差せず、 First フィールドでソートされます。
      </summary>
    </member>
    <member name="M:C1.Util.CodeRanges.AddNoCheck(C1.Util.CodeRange)">
      <summary>
        <see cref="T:C1.Util.CodeRange" />オブジェクトを current にチェックなしで追加します。通常、逆シリアル化時に使用されます。
      </summary>
      <param name="cr">
        <see cref="T:C1.Util.CodeRange" />追加する。
      </param>
    </member>
    <member name="M:C1.Util.CodeRanges.GetGlyphs">
      <summary>このリストのコード範囲に含まれる文字の配列を取得します。</summary>
      <returns>文字の配列</returns>
    </member>
    <member name="M:C1.Util.CodeRanges.ContainsAllChars">
      <summary>
        <see cref="T:C1.Util.CodeRanges" />コレクションが 0x0000～0xFFFF のすべての文字を含むかどうかを示す値を取得します。
      </summary>
      <returns></returns>
    </member>
    <member name="T:C1.Util.FontKey">
      <summary>C1Preview のさまざまなフォント処理アルゴリズムでの フォントの一意の識別子。 - フォントの代替 - フォントの埋め込み</summary>
    </member>
    <member name="T:C1.Util.GlyphMetrics">
      <summary>フォントサブセットのグリフメトリック。</summary>
    </member>
    <member name="P:C1.Util.GlyphMetrics.Char">
      <summary>メトリックの文字を取得または設定します。</summary>
    </member>
    <member name="P:C1.Util.GlyphMetrics.Index">
      <summary>グリフのインデックスを取得または設定します。</summary>
    </member>
    <member name="P:C1.Util.GlyphMetrics.Width">
      <summary>グリフの幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.Util.GlyphMetrics.IsEmpty">
      <summary>この構造体の空のフラグを取得または設定します。</summary>
    </member>
    <member name="P:C1.Util.GlyphMetrics.Empty">
      <summary>空のグリフメトリックを取得します。</summary>
    </member>
    <member name="T:C1.Util.FontSubSet">
      <summary>ビルドサブセットのフォントオブジェクト。</summary>
    </member>
    <member name="M:C1.Util.FontSubSet.Init">
      <summary>初期化フィールド。</summary>
    </member>
    <member name="M:C1.Util.FontSubSet.GetFontTableStream(System.String)">
      <summary>名前によってフォントテーブルブロックのストリームを取得します。</summary>
      <param name="name">フォントテーブルブロックの名前。</param>
      <returns>
        フォントテーブルストリームを返します。そうでない場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.IsCharSupported(System.Char)">
      <summary>現在のフォントが指定されたコードを持つ文字のグリフを含む場合、true を返します。</summary>
      <param name="ch"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetGlyphWidth(System.Int32)">
      <summary>グリフインデックスの幅をフォントデータから取得します。</summary>
      <param name="glyph">グリフインデックス。</param>
      <returns>グリフインデックスの幅を取得します。</returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetMetrics(System.Char,System.Boolean)">
      <summary>{glyph index, width} の整数配列を返す文字の グリフインデックスとメトリックを取得します。</summary>
      <param name="ch">文字のコード（Unicode）。</param>
      <param name="vertical">垂直マッピングフラグ。</param>
      <returns>グリフインデックスとグリフ幅の整数配列を取得します。</returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetCountMetrics(System.String)">
      <summary>
        このフォント内に対応するグリフを持っている
        <paramref name="text" />の文字の数を数えます。
      </summary>
      <param name="text"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontSubSet.IsSupportAllSymbols(System.String)">
      <summary>現在の FontSubSetBase オブジェクトが、 制御文字（char.IsControl() == true の文字）を除く、 指定された文字列内のすべての文字を表示できる場合 true を返します。</summary>
      <param name="text"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetCharForGlyph(System.Int32)">
      <summary>グリフインデックスの文字を取得します。</summary>
      <param name="glyphIndex">グリフインデックス。</param>
      <returns>グリフインデックスの文字を返します。</returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetFontDifference(System.String,C1.Util.FontSubSet,System.Int32@,System.Int32@)">
      <summary>fss によって表示できる文字の「panse index」（panoseIndex）と数を計算します。 panoseIndex は現在の FontSubSetBase オブジェクトと fss オブジェクトの間の違いを表します。 最小数値は最小の違いを定義します。 すなわち、０は現在の FontSubSetBase オブジェクトと fss が非常に似ていることを意味します。 -１は現在のオブジェクトが s を表示するための代替として fss を使用できないことを意味します。</summary>
      <param name="text"></param>
      <param name="fss"></param>
      <param name="panoseIndex"></param>
      <param name="supportedGlyphCount"></param>
    </member>
    <member name="M:C1.Util.FontSubSet.GetAlternativeFont(System.String,System.Collections.Generic.IEnumerable{C1.Util.FontSubSet})">
      <summary>フォントサブセット配列内でテキストの最適な代替を検索します。</summary>
      <param name="text">代替のテキスト。</param>
      <param name="substitutions">フォントサブセットリスト。</param>
      <returns>最適な代替フォント（フォントサブセット）のインデックス。</returns>
    </member>
    <member name="P:C1.Util.FontSubSet.FontName">
      <summary>FontSubSetBase オブジェクトが要求されたときに指定された「元の」フォント名を取得します。</summary>
    </member>
    <member name="P:C1.Util.FontSubSet.FontStyle">
      <summary>FontSubSetBase オブジェクトが要求されたときに指定された「元の」フォントスタイルを取得します。</summary>
    </member>
    <member name="P:C1.Util.FontSubSet.FontBold">
      <summary>FontSubSetBase オブジェクトが要求されたときに指定された「元の」Font.Bold を取得します。</summary>
    </member>
    <member name="P:C1.Util.FontSubSet.FontItalic">
      <summary>FontSubSetBase オブジェクトが要求されたときに指定された「元の」Font.Italic を取得します。</summary>
    </member>
    <member name="P:C1.Util.FontSubSet.FontFileName">
      <summary>
        フォントのデータから読み取られたフォント名を取得します。
        <see cref="P:C1.Util.FontSubSet.FontFamilyName" />も参照してください。
      </summary>
    </member>
    <member name="P:C1.Util.FontSubSet.FontFamilyName">
      <summary>フォントのデータから読み取られたフォントファミリ名を取得します。 このプロパティは GDI と GDI+ フォントの作成に使用されます。</summary>
    </member>
    <member name="P:C1.Util.FontSubSet.BaseFont2Name">
      <summary>フォントのデータから読み取られた基本フォント名を取得します。 このプロパティは PDF フォントの作成に使用されます。</summary>
    </member>
    <member name="P:C1.Util.FontSubSet.FamilyClass">
      <summary>FamilyClass を取得します。</summary>
    </member>
    <member name="P:C1.Util.FontSubSet.CoreFontBold">
      <summary>フォントのデータから読み取られた Font.Bold を取得します。</summary>
    </member>
    <member name="P:C1.Util.FontSubSet.CoreFontItalic">
      <summary>フォントのデータから読み取られた Font.Italic を取得します。</summary>
    </member>
    <member name="P:C1.Util.FontSubSet.IsInvalid">
      <summary>
        この
        <see cref="T:C1.Util.FontSubSet" />オブジェクトが 無効（フォントのデータの取得時にエラーが発生）で使用できないことを示す値を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.Util.FontBuilder">
      <summary>フォントサブセットビルダ。</summary>
    </member>
    <member name="M:C1.Util.FontBuilder.GetFontData(C1.Util.FontSubSet,C1.Util.CodeRange,System.Boolean)">
      <summary></summary>
      <param name="fss"></param>
      <param name="codeRange"></param>
      <param name="includeCMap"></param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Report.OrientationEnum">
      <summary>用紙の方向を指定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.Layout" />クラスの
        <see cref="P:C1.C1Report.Layout.Orientation" />プロパティの値を設定します。
      </remarks>
    </member>
    <member name="F:C1.C1Report.OrientationEnum.Auto">
      <summary>
        現在の
        <see cref="P:C1.C1Report.Layout.PaperSize" />とレポートの幅（
        <see cref="P:C1.C1Report.Layout.Width" />）に基づいて、自動的に方向を設定します。
      </summary>
    </member>
    <member name="F:C1.C1Report.OrientationEnum.Portrait">
      <summary>縦方向を使用します。</summary>
    </member>
    <member name="F:C1.C1Report.OrientationEnum.Landscape">
      <summary>横方向を使用します。</summary>
    </member>
    <member name="T:C1.C1Report.HdrFtrEnum">
      <summary>ページフッターセクションとページヘッダーセクションが表示される場所を指定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.Layout" />クラスの
        <see cref="P:C1.C1Report.Layout.PageFooter" />プロパティと
        <see cref="P:C1.C1Report.Layout.PageHeader" />プロパティの値を設定します。
      </remarks>
    </member>
    <member name="F:C1.C1Report.HdrFtrEnum.AllPages">
      <summary>ページフッターとページヘッダーは、レポートのすべてのページに印刷されます。</summary>
    </member>
    <member name="F:C1.C1Report.HdrFtrEnum.NotWithReportHdr">
      <summary>ページヘッダーは、レポートヘッダーと同じページには印刷されません。</summary>
    </member>
    <member name="F:C1.C1Report.HdrFtrEnum.NotWithReportFtr">
      <summary>ページフッターは、レポートフッターと同じページには印刷されません。</summary>
    </member>
    <member name="F:C1.C1Report.HdrFtrEnum.NotWithReportHdrFtr">
      <summary>ページフッターおよびページヘッダーは、レポートヘッダーおよびレポートフッターと同じページには印刷されません。</summary>
    </member>
    <member name="T:C1.C1Report.PictureShowEnum">
      <summary>背景画像が表示される場所を指定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.Layout" />クラスの
        <see cref="P:C1.C1Report.Layout.PictureShow" />プロパティの値を設定します。
      </remarks>
    </member>
    <member name="F:C1.C1Report.PictureShowEnum.NoPages">
      <summary>背景画像を表示しません。</summary>
    </member>
    <member name="F:C1.C1Report.PictureShowEnum.AllPages">
      <summary>すべてのページに背景画像を表示します。</summary>
    </member>
    <member name="F:C1.C1Report.PictureShowEnum.FirstPage">
      <summary>最初のページにだけ背景画像を表示します。</summary>
    </member>
    <member name="F:C1.C1Report.PictureShowEnum.AllButFirstPage">
      <summary>最初のページ以外のすべてのページに背景画像を表示します。</summary>
    </member>
    <member name="T:C1.C1Report.FieldAlignEnum">
      <summary>フィールドの四角形内のテキストの配置を指定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.Field" />クラスの
        <see cref="P:C1.C1Report.Field.Align" />プロパティの値を設定します。
      </remarks>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.General">
      <summary>数字は右に、その他の値は左に揃えて配置する。</summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.LeftTop">
      <summary>フィールドボックスの左および上に揃えて配置する。</summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.CenterTop">
      <summary>フィールドボックスの中央および上に揃えて配置する。</summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.RightTop">
      <summary>フィールドボックスの右および上に揃えて配置する。</summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.LeftBottom">
      <summary>フィールドボックスの左および下に揃えて配置する。</summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.CenterBottom">
      <summary>フィールドボックスの中央および下に揃えて配置する。</summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.RightBottom">
      <summary>フィールドボックスの右および下に揃えて配置する。</summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.LeftMiddle">
      <summary>フィールドボックスの左および上下の中央に揃えて配置する。</summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.CenterMiddle">
      <summary>フィールドボックスの中央および上下の中央に揃えて配置する。</summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.RightMiddle">
      <summary>フィールドボックスの右および上下の中央に揃えて配置する。</summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.JustTop">
      <summary>フィールドボックスの左右両端および上に揃えて配置する。</summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.JustBottom">
      <summary>フィールドボックスの左右両端および下に揃えて配置する。</summary>
    </member>
    <member name="F:C1.C1Report.FieldAlignEnum.JustMiddle">
      <summary>フィールドボックスの左右両端および上下の中央に揃えて配置する。</summary>
    </member>
    <member name="T:C1.C1Report.PictureAlignEnum">
      <summary>フィールドの四角形内の画像の配置を指定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.Field" />クラスと
        <see cref="T:C1.C1Report.Layout" />クラスの
        <see cref="P:C1.C1Report.Field.PictureAlign" />プロパティと
        <see cref="P:C1.C1Report.Layout.PictureAlign" />プロパティの値を設定します。
      </remarks>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.LeftTop">
      <summary>左および上に揃える。必要に応じて切り詰める。</summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.CenterTop">
      <summary>中央および上に揃える。必要に応じて切り詰める。</summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.RightTop">
      <summary>右および上に揃える。必要に応じて切り詰める。</summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.LeftBottom">
      <summary>左および下に揃える。必要に応じて切り詰める。</summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.CenterBottom">
      <summary>中央および下に揃える。必要に応じて切り詰める。</summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.RightBottom">
      <summary>右および下に揃える。必要に応じて切り詰める。</summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.LeftMiddle">
      <summary>左および上下の中央に揃える。必要に応じて切り詰める。</summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.CenterMiddle">
      <summary>中央および上下の中央に揃える。必要に応じて切り詰める。</summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.RightMiddle">
      <summary>右および上下の中央に揃える。必要に応じて切り詰める。</summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.Clip">
      <summary>左および上に揃える。必要に応じて切り詰める。</summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.Zoom">
      <summary>ページのできるだけ広い面積を占めるように、縦横比を維持したまま画像を拡大縮小する。</summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.Stretch">
      <summary>ページいっぱいに画像を縦横に拡大縮小する。</summary>
    </member>
    <member name="F:C1.C1Report.PictureAlignEnum.Tile">
      <summary>ページいっぱいに画像をタイル表示する。</summary>
    </member>
    <member name="T:C1.C1Report.PictureScaleEnum">
      <summary>フィールドの四角形内の画像のスケーリングを指定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.Field" />クラスと
        <see cref="T:C1.C1Report.Layout" />クラスの
        <see cref="P:C1.C1Report.Field.PictureScale" />プロパティと
        <see cref="P:C1.C1Report.Layout.PictureScale" />プロパティの値を設定します。
      </remarks>
    </member>
    <member name="F:C1.C1Report.PictureScaleEnum.Clip">
      <summary>画像の元のサイズを使用します。必要に応じて、表示領域でクリップします。</summary>
    </member>
    <member name="F:C1.C1Report.PictureScaleEnum.Stretch">
      <summary>表示領域いっぱいに画像を縦横に拡大縮小します。このモードでは、通常、画像の縦横比が変化します。</summary>
    </member>
    <member name="F:C1.C1Report.PictureScaleEnum.Scale">
      <summary>表示領域に合わせて画像を拡大縮小します。このモードでは、画像のサイズが変化しますが、縦横比は維持されます。</summary>
    </member>
    <member name="F:C1.C1Report.PictureScaleEnum.Tile">
      <summary>表示領域いっぱいに画像をタイル表示します。</summary>
    </member>
    <member name="F:C1.C1Report.PictureScaleEnum.Hide">
      <summary>画像を非表示にします。</summary>
    </member>
    <member name="T:C1.C1Report.CheckBoxEnum">
      <summary>ブール値をチェックボックスに変換する方法を指定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.Field" />クラスの
        <see cref="P:C1.C1Report.Field.CheckBox" />プロパティの値を設定します。このプロパティは、ブール値をテキストではなくグラフィカルに表示する場合に有効です。
      </remarks>
    </member>
    <member name="F:C1.C1Report.CheckBoxEnum.NoCheckBox">
      <summary>チェックボックスなし（テキストとして表示）</summary>
    </member>
    <member name="F:C1.C1Report.CheckBoxEnum.CheckBox">
      <summary>チェックボックス。</summary>
    </member>
    <member name="F:C1.C1Report.CheckBoxEnum.CrossBox">
      <summary>クロスボックス。</summary>
    </member>
    <member name="F:C1.C1Report.CheckBoxEnum.RadioButton">
      <summary>ラジオボタン。</summary>
    </member>
    <member name="T:C1.C1Report.BorderStyleEnum">
      <summary>フィールドの境界線のスタイルを指定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.Field" />クラスの
        <see cref="P:C1.C1Report.Field.BorderStyle" />プロパティの値を設定します。
      </remarks>
    </member>
    <member name="F:C1.C1Report.BorderStyleEnum.Transparent">
      <summary>境界線なし。</summary>
    </member>
    <member name="F:C1.C1Report.BorderStyleEnum.Solid">
      <summary>実線の境界線。</summary>
    </member>
    <member name="F:C1.C1Report.BorderStyleEnum.Dash">
      <summary>破線の境界線。</summary>
    </member>
    <member name="F:C1.C1Report.BorderStyleEnum.Dot">
      <summary>点線の境界線。</summary>
    </member>
    <member name="F:C1.C1Report.BorderStyleEnum.DashDot">
      <summary>１点鎖線の境界線。</summary>
    </member>
    <member name="F:C1.C1Report.BorderStyleEnum.DashDotDot">
      <summary>２点鎖線の境界線。</summary>
    </member>
    <member name="T:C1.C1Report.LineSlantEnum">
      <summary>フィールドを横切る線（フィールドを囲むボックスではなく）がレンダリングされるかどうかを指定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.Field" />クラスの
        <see cref="P:C1.C1Report.Field.LineSlant" />プロパティの値を設定します。
      </remarks>
    </member>
    <member name="F:C1.C1Report.LineSlantEnum.NoLine">
      <summary>標準のフィールド（線ではない）。</summary>
    </member>
    <member name="F:C1.C1Report.LineSlantEnum.NoSlant">
      <summary>フィールドを垂直線（Height &gt; Width の場合）または水平線（Width &gt; Height の場合）としてレンダリングします。</summary>
    </member>
    <member name="F:C1.C1Report.LineSlantEnum.Down">
      <summary>フィールドをフィールドボックスの左上隅と右下隅を結ぶ線としてレンダリングします。</summary>
    </member>
    <member name="F:C1.C1Report.LineSlantEnum.Up">
      <summary>フィールドをフィールドボックスの左下隅と右上隅を結ぶ線としてレンダリングします。</summary>
    </member>
    <member name="T:C1.C1Report.ForcePageBreakEnum">
      <summary>フィールドまたはセクションの前後にページ区切りが挿入されるかどうかを決定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.Field" />クラスと
        <see cref="T:C1.C1Report.Section" />クラスの
        <see cref="P:C1.C1Report.Field.ForcePageBreak" />プロパティと
        <see cref="P:C1.C1Report.Section.ForcePageBreak" />プロパティの値を設定します。
      </remarks>
    </member>
    <member name="F:C1.C1Report.ForcePageBreakEnum.None">
      <summary>ページ区切りなし。</summary>
    </member>
    <member name="F:C1.C1Report.ForcePageBreakEnum.Before">
      <summary>フィールドまたはセクションの前にページ区切りを挿入します。</summary>
    </member>
    <member name="F:C1.C1Report.ForcePageBreakEnum.After">
      <summary>フィールドまたはセクションの後にページ区切りを挿入します。</summary>
    </member>
    <member name="F:C1.C1Report.ForcePageBreakEnum.BeforeAndAfter">
      <summary>フィールドまたはセクションの前と後にページ区切りを挿入します。</summary>
    </member>
    <member name="F:C1.C1Report.ForcePageBreakEnum.PageBefore">
      <summary>段組みレポートで、フィールドまたはセクションの前に段区切りではなくページ区切りを挿入します。</summary>
    </member>
    <member name="F:C1.C1Report.ForcePageBreakEnum.PageAfter">
      <summary>段組みレポートで、フィールドまたはセクションの後に段区切りではなくページ区切りを挿入します。</summary>
    </member>
    <member name="T:C1.C1Report.TextDirectionEnum">
      <summary>フィールド内のテキストの方向を指定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.Field" />クラスの
        <see cref="P:C1.C1Report.Field.TextDirection" />プロパティの値を設定します。
      </remarks>
    </member>
    <member name="F:C1.C1Report.TextDirectionEnum.Normal">
      <summary>テキストの方向は標準です。</summary>
    </member>
    <member name="F:C1.C1Report.TextDirectionEnum.Up">
      <summary>テキストの方向は上向きです。</summary>
    </member>
    <member name="F:C1.C1Report.TextDirectionEnum.Down">
      <summary>テキストの方向は下向きです。</summary>
    </member>
    <member name="T:C1.C1Report.BarCodeEnum">
      <summary>フィールドで使用されるバーコードのタイプを決定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.Field" />クラスの
        <see cref="P:C1.C1Report.Field.BarCode" />プロパティの値を設定します。
      </remarks>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.None">
      <summary>バーコードなし。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code39">
      <summary>英数字（Code 3 of 9）。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code93">
      <summary>英数字。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code128">
      <summary>英数字。Code39 より記録密度が高い。少なくとも６キャラクタが必要です。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.CodeI2of5">
      <summary>数値のみ。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Codabar">
      <summary>数値のみ。Code39 より少し記録密度が高い。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.PostNet">
      <summary>数値のみ。米国郵便サービス。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Ean13">
      <summary>EAN-13 バーコード。EAN-13 は、12 桁の商品コード（およびコントロールによって作成される１つのチェックサム桁）をエンコードします。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Ean8">
      <summary>EAN-8 バーコード。EAN-8 は、７桁の商品コード（およびコントロールによって作成される１つのチェックサム桁）をエンコードします。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.UpcA">
      <summary>UPC-A は、本、雑誌、新聞のほか、巷のスーパーマーケットの棚にあるほとんどすべての商品に見られる一般的なエンコードです。EAN-13 に似ていますが、11 桁の数値データと末尾にチェックデジットがエンコードされています。最初の桁は番号システムを識別し、次の５桁がメーカーコード、次の５桁が製品コード、最後にチェックデジットが続きます。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.UpcE">
      <summary>
        <para>UPC-E は UPC-A のバリエーションです。 余分なゼロを省くことでバーコードのサイズをコンパクト化できます。 結果の UPC-E バーコードは、UPC-A バーコードの約半分のサイズになるため、一般に包装の非常に小さな製品で使用されています。</para>
        <para>UpcE エンコーディングを使用する場合は、UpcA エンコードを使用するかのように、Text プロパティを 11 桁の文字列に設定します。</para>
        <para>一部の UpcA コードは UpcE にエンコードできません。 メーカーコードの末尾が 000、100、または 200 の場合、製品番号は 900 以下である必要があります。 メーカーコードの末尾が 00 で、かつ 100、200、300 でない場合、 製品番号は 90 以下である必要があります。 メーカーコードの末尾が０で、かつ 00 でない場合、製品番号は９以下である必要があります。 メーカーコードの末尾が０でない場合、製品番号は 5～9 の範囲である必要があります。</para>
      </summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Ean128">
      <summary>GS1-128（以前は UCC-128 または EAN-128 と呼ばれていました）の目的は、 パッケージに単なる製品コード以上の情報を含むラベルを付ける標準的な手法を確立することです。 バッチ番号や使用期限などの補助的な情報を提供します。 UCC/EAN/GS1-128 には大きく分けて２つのコンポーネントがあります。 アプリケーション ID を含むデータと、 データのコード化に使用するバーコード記号です。 バーコード記号はコード 128 です。 違いは、定義済みのアプリケーション ID とコード 128 記号にエンコードされたデータの使い方です。</summary>
    </member>
    <member name="T:C1.C1Report.CompatibilityOptions">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />の互換性オプションを示します。 このクラスのプロパティは、 旧バージョンの
        <b>C1Report</b>との互換性を制御するために使用できます。
      </summary>
    </member>
    <member name="M:C1.C1Report.CompatibilityOptions.Clear">
      <summary>すべてのプロパティをデフォルト値にリセットします。</summary>
    </member>
    <member name="M:C1.C1Report.CompatibilityOptions.AssignFrom(C1.C1Report.CompatibilityOptions)">
      <summary>
        別の
        <see cref="T:C1.C1Report.CompatibilityOptions" />のプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Report.CompatibilityOptions.OldTypesConversion">
      <summary>
        レポートスクリプト関数 CStr、CDbl、CDate でタイプ変換の古いメソッドを 使用するかどうかを示す値を取得または設定します。
        <para>
          デフォルトは
          <b>false</b>です。 詳細については備考を参照してください。
        </para>
      </summary>
      <remarks>
        2012 v1 より前のバージョンの
        <b>C1Report</b>では、 タイプ変換スクリプト関数 CStr、CDbl、CDate で以下のルールが使用されていました。
        <list type="bullet">
          <item>CStr は Application.CurrentCulture を使用していました。</item>
          <item>CDbl は InvariantCulture を使用し、失敗すると Application.CurrentCulture を使用していました。</item>
          <item>CDate は InvariantCulture を使用していました。</item>
        </list>2012 v1 リリースよりルールは次のように変更されました。
        <list type="bullet">
          <item>CStr は Application.CurrentCulture を使用します。</item>
          <item>CDbl と CDate は Application.CurrentCulture を使用し、失敗すると InvariantCulture を使用します。</item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Report.CompatibilityOptions.StretchBarCodesAsImages">
      <summary>
        バーコードを画像としてストレッチするかどうかを示す値を取得または設定します。
        <para>デフォルト値は false で、旧バージョンと互換性があります。</para>
      </summary>
    </member>
    <member name="P:C1.C1Report.CompatibilityOptions.UseGdiLinesInPdfExport">
      <summary>PDF への出力のレンダリング時に GDI 関数を線の描画に使用するかどうかを示す値を取得または設定します。 デフォルト値は false です。 このプロパティを true に設定すると、多くの破線や点線を含むレポートのファイルサイズを非常に小さくできます。</summary>
    </member>
    <member name="P:C1.C1Report.CompatibilityOptions.UseTextFilterClassic">
      <summary>テキストフィルタ（TextFilterClassic）の旧バージョンを使用するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.CompatibilityOptions.IgnoreInvisibleFieldsInGrowShrinkSections">
      <summary>CanGrow/CanShrink セクションの高さを計算するとき、 非表示のフィールドを無視するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Report.DataLinkParams">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Report.DataLinkBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Report.DbLink">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Report.OledbLink">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Report.SqlServerCe3_5Link">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Report.SqlServerCe4_0Link">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Report.OdbcLink">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Report.XmlLink">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Report.ExternalObjectLink">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Report.DataProvider">
      <summary>データソースのタイプを示します。 データソースが異なれば、 使用するデータ接続文字列とクエリーコマンド構文も異なります。</summary>
    </member>
    <member name="F:C1.C1Report.DataProvider.Auto">
      <summary>接続文字列に基づいてデータソースタイプが自動的に特定されます。 この値を使用するとデータソースへの接続が非常に遅くなるためお勧めしません。</summary>
    </member>
    <member name="F:C1.C1Report.DataProvider.OLEDB">
      <summary>OLE DB データソースを示します。</summary>
    </member>
    <member name="F:C1.C1Report.DataProvider.ODBC">
      <summary>ODBC データソースを示します。</summary>
    </member>
    <member name="F:C1.C1Report.DataProvider.SqlServerCe3_5">
      <summary>SQL Server Compact Edition バージョン 3.5 データソースを示します。</summary>
    </member>
    <member name="F:C1.C1Report.DataProvider.SqlServerCe4_0">
      <summary>SQL Server Compact Edition バージョン 4.0 データソースを示します。</summary>
    </member>
    <member name="F:C1.C1Report.DataProvider.XmlFile">
      <summary>接続文字列が DataSet オブジェクトを含む XML ファイルの名前であることを示します。</summary>
    </member>
    <member name="F:C1.C1Report.DataProvider.ExternalObject">
      <summary>
        接続文字列が、
        <see cref="T:C1.C1Report.IC1ReportExternalRecordset" />インタフェースを 実装するオブジェクトを含むアセンブリの名前であることを示します。
      </summary>
    </member>
    <member name="T:C1.C1Report.DataSourceInfo">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Report.FieldInfo">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Report.DataSource">
      <summary>レポートのデータを提供します。</summary>
      <remarks>
        <para>
          ほとんどのレポートは、
          <see cref="P:C1.C1Report.DataSource.ConnectionString" />プロパティと
          <see cref="P:C1.C1Report.DataSource.RecordSource" />プロパティを設定してデータソースを指定します。
          <b>DataSource</b>オブジェクトは、これらの値を使ってデータベースに接続し、レポートデータを取得します。
        </para>
        <para>
          または、
          <see cref="P:C1.C1Report.DataSource.Recordset" />プロパティにデータオブジェクトを直接割り当てることもできます。データが他の目的でアプリケーションにすでにロードされており、コピーをロードしなくてもレポートで直接データを使用できる場合は、この方法が効率的です。
        </para>
      </remarks>
    </member>
    <member name="F:C1.C1Report.DataSource.c_DefIsolationLevel">
      <summary>レポートデータの取得に使用するトランザクションのデフォルトの IsolationLevel を定義します。</summary>
    </member>
    <member name="M:C1.C1Report.DataSource.ToString">
      <summary>
        <see cref="T:C1.C1Report.DataSource" />オブジェクトの文字列表現を返します。
      </summary>
      <returns>
        ユーザーから値が提供されている場合は
        <see cref="P:C1.C1Report.DataSource.RecordSource" />プロパティの値。そうでない場合は「（none）」。
      </returns>
    </member>
    <member name="M:C1.C1Report.DataSource.GetRecordSource(System.Boolean)">
      <summary>
        <see cref="P:C1.C1Report.DataSource.RecordSource" />文字列内の
        <b>PARAMETERS</b>句を処理し、その結果を返します。
      </summary>
      <remarks>
        <para>
          このプロパティは
          <see cref="P:C1.C1Report.DataSource.RecordSource" />プロパティに関連しています。
          <see cref="P:C1.C1Report.DataSource.RecordSource" />プロパティは、レポートのソースデータセットを指定する文字列を設定または返します。これには、
          <see cref="T:C1.C1Report.C1Report" />がユーザーに情報の入力を求めるプロンプトを表示するための
          <b>PARAMETERS</b>句が含まれます。
        </para>
        <para>
          <see cref="P:C1.C1Report.DataSource.RecordSource" />プロパティの値を使用して、プログラムから直接データセットを開く場合は、自分で
          <b>PARAMETERS</b>句を解析する必要があります。
        </para>
      </remarks>
      <param name="prompt">true に設定されている場合は、メソッドが返る前に、ユーザーにパラメータの入力を求めるプロンプトを表示します。false に設定されている場合は、デフォルト値が使用されます。</param>
      <returns>レコードセットを開くために使用できる文字列（SQL 文またはテーブル名）。</returns>
    </member>
    <member name="M:C1.C1Report.DataSource.GetFieldValue(System.Int32)">
      <summary>カーソル位置にある特定のフィールドの値を取得します。</summary>
      <param name="fieldIndex">フィールドのインデックス。</param>
      <returns>フィールドの値。</returns>
    </member>
    <member name="M:C1.C1Report.DataSource.BOF">
      <summary>カーソルがデータソースの最初のレコードの位置にある場合は true を返します。</summary>
    </member>
    <member name="M:C1.C1Report.DataSource.EOF">
      <summary>カーソルがデータソースの最後のレコードの位置にある場合は true を返します。</summary>
    </member>
    <member name="M:C1.C1Report.DataSource.MoveFirst">
      <summary>カーソルをデータソースの最初のレコードに移動します。</summary>
    </member>
    <member name="M:C1.C1Report.DataSource.MoveLast">
      <summary>カーソルをデータソースの最後のレコードに移動します。</summary>
    </member>
    <member name="M:C1.C1Report.DataSource.MovePrevious">
      <summary>カーソルをデータソースの前のレコードに移動します。</summary>
    </member>
    <member name="M:C1.C1Report.DataSource.MoveNext">
      <summary>カーソルをデータソースの次のレコードに移動します。</summary>
    </member>
    <member name="M:C1.C1Report.DataSource.GetBookmark">
      <summary>現在のカーソル位置を返します。</summary>
      <returns>現在のレコードのインデックス。</returns>
    </member>
    <member name="M:C1.C1Report.DataSource.SetBookmark(System.Int32)">
      <summary>現在のカーソル位置を指定された値に設定します。</summary>
      <param name="bkmk">レコードのインデックス。</param>
    </member>
    <member name="P:C1.C1Report.DataSource.DataProvider">
      <summary>データソースのタイプを取得または設定します。 データソースタイプは、接続文字列とクエリー（レコードソース）の構文を決定します。 デフォルトは Auto ですが、データソースタイプの自動判定には非常に長い時間がかかるため、 特定のデータソースタイプに変更することをお勧めします。</summary>
    </member>
    <member name="P:C1.C1Report.DataSource.ConnectionString">
      <summary>データベースを開くために使用される文字列を取得または設定します。</summary>
      <remarks>
        <para>
          <see cref="P:C1.C1Report.DataSource.ConnectionString" />は、レポートデータをロードするために
          <see cref="T:C1.C1Report.DataSource" />クラスで使用されます。
        </para>
        <para>
          <see cref="T:C1.C1Report.DataSource" />クラスは
          <see cref="T:System.Data.OleDb.OleDbConnection" />オブジェクトを使ってデータを取得するため、
          <see cref="P:C1.C1Report.DataSource.ConnectionString" />の構文は OleDb の接続文字列で使用される構文と同じです。構文の詳細については、
          <see cref="T:System.Data.OleDb.OleDbConnection" />クラスのドキュメントを参照してください。
        </para>
        <para>
          <see cref="P:C1.C1Report.DataSource.ConnectionString" />は、レポートデータを含むデータベースを指定します。
          <see cref="P:C1.C1Report.DataSource.RecordSource" />プロパティは、データ取得に使用するテーブル、ストアドプロシージャ、または SQL コマンドを指定します。
        </para>
        <para>
          別のタイプの接続（
          <see cref="T:System.Data.SqlClient.SqlConnection" />など）を使用する場合、または
          <see cref="T:System.Data.DataTable" />オブジェクトとしてアプリケーションにすでにデータがある場合は、そのデータを直接
          <see cref="P:C1.C1Report.DataSource.Recordset" />プロパティに割り当てることができます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.DataSource.RecordSource">
      <summary>レポートデータの取得に使用するテーブル、ストアドプロシージャ、または SQL コマンドを指定する文字列を取得または設定します。</summary>
      <remarks>
        <para>
          <see cref="P:C1.C1Report.DataSource.ConnectionString" />は、レポートデータを含むデータベースを指定します。
          <see cref="P:C1.C1Report.DataSource.RecordSource" />プロパティは、データ取得に使用するテーブル、ストアドプロシージャ、または SQL コマンドを指定します。
        </para>
        <para>
          別のタイプの接続（
          <see cref="T:System.Data.SqlClient.SqlConnection" />など）を使用する場合、または
          <see cref="T:System.Data.DataTable" />オブジェクトとしてアプリケーションにすでにデータがある場合は、そのデータを直接
          <see cref="P:C1.C1Report.DataSource.Recordset" />プロパティに割り当てることができます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.DataSource.Filter">
      <summary>レポートに含めるデータ行をフィルタするために使用される式を取得または設定します。</summary>
      <remarks>
        <para>
          <b>Filter</b>プロパティを使用して、
          <see cref="P:C1.C1Report.DataSource.RecordSource" />プロパティを変更せずに、レポートに含めるレコードを制限します。
        </para>
        <para>
          フィルタの使用は、
          <see cref="P:C1.C1Report.DataSource.RecordSource" />プロパティに割り当てられた SQL 文で WHERE 句を指定することに似ています。どちらの方法も、指定された条件に基づいてデータをフィルタします。違いは、
          <b>Filter</b>プロパティはすでにメモリにロードされているテーブルに適用されますが、WHERE 文ではフィルタされたレコードだけがデータベースからメモリにロードされることです。
        </para>
        <para>
          大きなテーブルのごく一部だけを含むレポートを作成する場合は、テーブル全体をメモリにロードする必要がないため、WHERE 文の方が適しています。一方、テーブルがすでにメモリにロードされている場合は、さらにデータをロードする必要がないため、
          <b>Filter</b>プロパティの方が適しています。
        </para>
        <para>
          フィルタ式の構文は、
          <see cref="T:System.Data.DataView" />オブジェクトの
          <see cref="P:System.Data.DataView.RowFilter" />プロパティで使用される構文と同じです。式は「
          <i>ColumnName</i><i>Operator</i><i>Value</i>」形式の条件で構成されます。
          <i>ColumnName</i>はデータソース内の列の名前（オプションで [ ] で囲む）、
          <i>Operator</i>は標準の Visual Basic 比較演算子の１つ、
          <i>Value</i>は一重引用符で囲まれたリテラルです。条件は、
          <b>AND</b>演算子と
          <b>OR</b>演算子を使って組み合わせることができます。
        </para>
      </remarks>
      <example>
        次のコードは、
        <c>Filter</c>プロパティを使ってデータソースにフィルタを適用する方法と、SQL 文で WHERE 句を使ってデータソースにフィルタを適用する方法を示します。
        <code>
          <![CDATA[
          if (useFilterProperty)
          {
            // すべてのレコードをロードし、メモリ内でフィルタします
            _c1r.DataSource.RecordSource = "SELECT * from Employees";
            _c1r.DataSource.Filter = "HireDate &gt;= '1/1/1993' AND Country = 'UK'";
          }
          else
          {
            // 選択したレコードだけをロードします
            _c1r.DataSource.RecordSource = "SELECT * from Employees " + 
              "WHERE HireDate &gt;= #1/1/1993# AND Country = 'UK'";
          }
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.C1Report.DataSource.MaxRecords">
      <summary>レポートに入れるデータ行の最大数を取得または設定します（すべての行を入れる場合は０）。</summary>
      <remarks>
        <para>このプロパティは、レポートのサイズを制限する場合に役立ちます。たとえば、プレビューウィンドウにデータベースの最初の 500 レコードだけを表示するようなレポートデザイナを記述できます。</para>
        <para>このプロパティを０に設定すると、コントロールはすべてのレコードを取得します。</para>
        <para>
          <see cref="P:C1.C1Report.C1Report.MaxPages" />プロパティを設定してレポートの大きさを制限することもできます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.DataSource.Recordset">
      <summary>レポートにデータを提供するデータソースオブジェクトを設定または取得します。</summary>
      <remarks>
        <para>
          通常、このコントロールは、
          <see cref="P:C1.C1Report.DataSource.ConnectionString" />プロパティと
          <see cref="P:C1.C1Report.DataSource.RecordSource" />プロパティの値に基づいて
          <see cref="T:System.Data.DataTable" />オブジェクトを作成し、そのオブジェクトをレポートデータソースとして使用します。
        </para>
        <para>
          または、データソースオブジェクトを独自に作成し、それをコントロールに割り当てることもできます。それには、データソースオブジェクトを
          <b>Recordset</b>プロパティに割り当てます。
        </para>
        <para>
          <b>DataTable</b>オブジェクトまたは
          <b>DataView</b>オブジェクトが
          <b>Recordset</b>プロパティに割り当てられている場合、C1Report は自動的に
          <see cref="T:C1.C1Report.IC1ReportRecordset" />インタフェースを実装する内部ラッパークラスを作成します。このため、このプロパティ値を読み取って元の
          <b>DataTable</b>オブジェクトまたは
          <b>DataView</b>オブジェクトを再取得することはできません。代わりに、ラッパーオブジェクトを
          <see cref="T:System.ComponentModel.IListSource" />にキャストし、
          <see cref="M:System.ComponentModel.IListSource.GetList" />メソッドを使用する必要があります。次に例を示します。
        </para>
        <value>
          <see cref="P:C1.C1Report.DataSource.Recordset" />プロパティには、（１）
          <see cref="T:System.Data.DataTable" />オブジェクト、（２）
          <see cref="T:System.Data.DataView" />オブジェクト、または（３）
          <see cref="T:C1.C1Report.IC1ReportRecordset" />インタフェースを実装するオブジェクトを割り当てることができます。
        </value>
      </remarks>
      <example>
        <code>
          <![CDATA[
          // DataTable を作成します
          DataTable dt = new DataTable("my table");
          
          // それを C1Report に割り当てます
          // 自動的に IC1ReportRecordset ラッパーを作成します
          c1r.DataSource.Recordset = dt;
          
          // 1) これは機能しません（dbBad == null）
          object wrapper = c1Report1.DataSource.Recordset;
          DataTable dtBad = wrapper as DataTable;
          
          // 2) これは機能します（dtGood == dt）
          DataView dv = ((IListSource)wrapper).GetList() as DataView;
          DataTable dtGood = dv.Table;
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.C1Report.DataSource.CommandTimeOut">
      <summary>データ接続のタイムアウトまでの待機秒数を取得または設定します。-1 に設定すると、デフォルト値（通常は 30 秒）が使用されます。</summary>
    </member>
    <member name="P:C1.C1Report.DataSource.ParentReport">
      <summary>
        この
        <see cref="T:C1.C1Report.DataSource" />を含むレポートを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.DataSource.IsolationLevel">
      <summary>
        レポートデータの取得に使用する
        <b>OleDBTransaction</b>の分離レベルを取得または設定します。
        <para>
          デフォルトは
          <b>IsolationLevel.ReadCommitted</b>です。
        </para>
      </summary>
    </member>
    <member name="T:C1.C1Report.ExportFilter">
      <summary>
        すべてのエクスポートフィルタの基本クラス。レポートをさまざまな形式にレンダリングするために
        <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />メソッドで使用されます。
      </summary>
      <remarks>
        <para>
          <b>ExportFilter</b>は、すべての組み込みエクスポートフィルタクラス（
          <see cref="T:C1.C1Report.HtmlFilter" />、
          <see cref="T:C1.C1Report.PdfFilter" />、
          <see cref="T:C1.C1Report.RtfFilter" />、
          <see cref="T:C1.C1Report.XlsFilter" />、
          <see cref="T:C1.C1Report.TextFilter" />、
          <see cref="T:C1.C1Report.TiffFilter" />）の基本クラスとして使用される抽象クラスです。
        </para>
        <para>
          <b>ExportFilter</b>から独自のエクスポートフィルタを派生させて作成できます。
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.ExportFilter.#ctor">
      <summary>
        <see cref="T:C1.C1Report.ExportFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Report.ExportFilter.Dispose">
      <summary>フィルタによって使用されたリソースを解放します。</summary>
      <remarks>フィルタによって使用された破棄可能なオブジェクトを解放するには、このメソッドを派生クラスでオーバーライドします。</remarks>
    </member>
    <member name="M:C1.C1Report.ExportFilter.StartReport(C1.C1Report.C1Report)">
      <summary>コンポーネントがレポートのレンダリングを開始するときに呼び出されます。</summary>
      <param name="report">所有者レポート</param>
    </member>
    <member name="M:C1.C1Report.ExportFilter.StartSection(C1.C1Report.Section,System.Double,System.Double)">
      <summary>コンポーネントがセクションのレンダリングを開始するときに呼び出されます。</summary>
      <param name="section">
        レンダリングする
        <see cref="T:C1.C1Report.Section" />。
      </param>
      <param name="x">セクションの左の位置（ツイップ単位）。</param>
      <param name="y">セクションの上の位置（ツイップ単位）。</param>
    </member>
    <member name="M:C1.C1Report.ExportFilter.RenderField(C1.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>現在のページ内の特定の位置にある特定のコンテンツのレポートフィールドをレンダリングする必要があるときに呼び出されます。</summary>
      <param name="field">
        レンダリングする
        <see cref="T:C1.C1Report.Field" />オブジェクト。
      </param>
      <param name="rc">ページ内のフィールド位置（ツイップ単位）を指定する四角形。</param>
      <param name="text">レンダリングするフィールドテキスト。</param>
      <param name="img">レンダリングするフィールド画像。</param>
    </member>
    <member name="M:C1.C1Report.ExportFilter.EndSection(C1.C1Report.Section)">
      <summary>
        コンポーネントが各
        <see cref="T:C1.C1Report.Section" />のレンダリングを終了するときに呼び出されます。
      </summary>
      <param name="section">
        レンダリングされた
        <see cref="T:C1.C1Report.Section" />。
      </param>
    </member>
    <member name="M:C1.C1Report.ExportFilter.EndReport">
      <summary>コンポーネントがレポートのレンダリングを終了するときに呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Report.ExportFilter.NewPage">
      <summary>
        ページ区切り付きレポートのページ区切りごとに呼び出されます（
        <see cref="M:C1.C1Report.ExportFilter.IsPaged" />プロパティを参照）。
      </summary>
    </member>
    <member name="M:C1.C1Report.ExportFilter.StartOverlays">
      <summary>コンポーネントがレポートの最初のパスのレンダリングを完了した後で、オーバーレイフィールドのレンダリングを開始する前に呼び出されます。</summary>
      <remarks>
        <para>
          オーバーレイフィールドは、
          <b>Pages</b>プロパティを使用する計算フィールドを含むレポートでのみ使用されます。
        </para>
        <para>この値はレポートが生成されるまでわからないため、２番目のパスでレンダリングされます。</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.ExportFilter.AddOutlineEntry(System.String,System.Int32,System.Double,System.Double)">
      <summary>コンポーネントがレポートグループの先頭をレンダリングするときに呼び出されます。</summary>
      <param name="heading">アウトラインヘッダー。</param>
      <param name="level">アウトラインレベル。</param>
      <param name="x">アウトラインの左の位置（ツイップ単位）。</param>
      <param name="y">アウトラインの上の位置（ツイップ単位）。</param>
      <remarks>フィルタでは、このメソッドでレポートのアウトラインを作成できます。</remarks>
    </member>
    <member name="M:C1.C1Report.ExportFilter.IsPaged">
      <summary>このフィルタが生成するレポートが１ページか複数ページかを決定します。</summary>
      <remarks>
        <para>
          ページ区切り付きのレポートを生成する場合、コンポーネントは、ページ区切りでフィルタの
          <see cref="M:C1.C1Report.ExportFilter.NewPage" />メソッドを呼び出し、
          <see cref="P:C1.C1Report.C1Report.Page" />プロパティの値を更新します。
        </para>
        <para>ページ区切りのない（連続的な）レポートを生成する場合は、１つの長いページが生成されます。</para>
      </remarks>
      <returns>レポートがページ区切り付きの場合は true。</returns>
    </member>
    <member name="M:C1.C1Report.ExportFilter.UsesImages">
      <summary>フィルタでページイメージを生成する必要があるかどうかを決定する値を返します。</summary>
      <remarks>
        <para>
          デフォルトでは、
          <see cref="T:C1.C1Report.C1Report" />は、レポートをフィルタにレンダリングしたうえ、独自の
          <see cref="P:C1.C1Report.C1Report.PageImages" />コレクションにもレンダリングします。
        </para>
        <para>一部のフィルタは、このイメージを使って出力を生成します（PDF、TIFF など）。他のフィルタはイメージを必要としないため（HTML、RTF など）、このメソッドは false を返します。これは、長いレポートをレンダリングするときにいくらかのリソースの節約になります。</para>
      </remarks>
      <returns>フィルタがページイメージを必要とする場合は true。</returns>
    </member>
    <member name="T:C1.C1Report.HtmlFilter">
      <summary>
        レポートを HTML ストリームまたはファイルにレンダリングするために
        <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />メソッドで使用されます。
      </summary>
      <remarks>
        <b>HtmlFilter</b>を作成し、それを
        <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />メソッドの呼び出しで使用することは、
        <see cref="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)" />メソッドまたは
        <see cref="M:C1.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.C1Report.FileFormatEnum)" />メソッドを使用することに似ていますが、
        <b>RenderToFilter</b>を呼び出す前に
        <b>HtmlFilter</b>オブジェクトのプロパティを設定できるため、より柔軟性があります。
      </remarks>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.#ctor(System.String)">
      <summary>
        ファイルに関連付けられた
        <see cref="T:C1.C1Report.HtmlFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="fileName">作成するファイルの名前が含まれます。そのファイルがすでに存在する場合は上書きされます。</param>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.#ctor(System.IO.Stream)">
      <summary>
        ストリームに関連付けられた
        <see cref="T:C1.C1Report.HtmlFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="stream">レポートがレンダリングされる出力ストリーム。</param>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.#ctor(System.IO.Stream,System.String,System.String)">
      <summary>
        ストリームに関連付けられた
        <see cref="T:C1.C1Report.HtmlFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="stream">レポートがレンダリングされる出力ストリーム。</param>
      <param name="idPrefix">複数のレポートを同じ HTML ストリームに追加する場合にスタイル名の重複を避けるために使用される一意のレポート識別子。</param>
      <param name="fileName">メンバファイル（画像など）のファイル名のパスとテンプレート。</param>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.StartReport(C1.C1Report.C1Report)">
      <summary>コンポーネントがレポートのレンダリングを開始するときに呼び出されます。</summary>
      <param name="report">所有者レポート</param>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.IsPaged">
      <summary>このフィルタが生成するレポートが１ページか複数ページかを決定します。</summary>
      <remarks>
        <para>
          ページ区切り付きのレポートを生成する場合、コンポーネントは、ページ区切りでフィルタの
          <see cref="M:C1.C1Report.HtmlFilter.NewPage" />メソッドを呼び出し、
          <see cref="P:C1.C1Report.C1Report.Page" />プロパティの値を更新します。
        </para>
        <para>ページ区切りのない（連続的な）レポートを生成する場合は、１つの長いページが生成されます。</para>
      </remarks>
      <returns>レポートがページ区切り付きの場合は true。</returns>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.UsesImages">
      <summary>フィルタでページイメージを使用するかどうかを決定する値を返します。</summary>
      <remarks>
        <para>
          デフォルトでは、C1Report は、レポートをフィルタにレンダリングしたうえ、独自の
          <see cref="P:C1.C1Report.C1Report.PageImages" />コレクションにもレンダリングします。
        </para>
        <para>
          <see cref="T:C1.C1Report.HtmlFilter" />はイメージを必要としないため、このメソッドは false を返します。これは、長いレポートをレンダリングするときにいくらかのリソースの節約になります。
        </para>
      </remarks>
      <returns>常に false を返します。</returns>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.NewPage">
      <summary>
        ページ区切り付きレポートのページ区切りごとに呼び出されます（
        <see cref="M:C1.C1Report.HtmlFilter.IsPaged" />プロパティを参照）。
      </summary>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.StartSection(C1.C1Report.Section,System.Double,System.Double)">
      <summary>コンポーネントがセクションのレンダリングを開始するときに呼び出されます。</summary>
      <param name="section">レンダリングされるセクション。</param>
      <param name="x">セクションの左の位置（ツイップ単位）。</param>
      <param name="y">セクションの上の位置（ツイップ単位）。</param>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.EndSection(C1.C1Report.Section)">
      <summary>コンポーネントが各セクションのレンダリングを終了するときに呼び出されます。</summary>
      <param name="section">レンダリングされたセクション。</param>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.RenderField(C1.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>現在のページ内の特定の位置にある特定のコンテンツのレポートフィールドをレンダリングする必要があるときに呼び出されます。</summary>
      <param name="field">レンダリングされるフィールド。</param>
      <param name="rc">現在のページ内のフィールド位置（ツイップ単位）を指定する四角形。</param>
      <param name="text">レンダリングするフィールドテキスト。</param>
      <param name="img">レンダリングするフィールド画像。</param>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.StartOverlays">
      <summary>コンポーネントがレポートの最初のパスのレンダリングを完了した後で、オーバーレイフィールドのレンダリングを開始する前に呼び出されます。</summary>
      <remarks>
        <para>
          オーバーレイフィールドは、
          <b>Pages</b>変数を使用する計算フィールドを含むレポートでのみ使用されます。
        </para>
        <para>この値はレポートが生成されるまでわからないため、２番目のパスでレンダリングされます。</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.EndReport">
      <summary>コンポーネントがレポートのレンダリングを終了するときに呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.Dispose">
      <summary>コンポーネントがレポートのレンダリングを完了したり、レンダリングプロセスがユーザーによってキャンセルされるかエラーによって中断されたときに呼び出されます。</summary>
      <remarks>フィルタによって使用された破棄可能なオブジェクトを解放するには、このメソッドを使用します。</remarks>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.CreateStyleSheet">
      <summary>レポートのスタイルシートを作成して保存します。</summary>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.SaveStyleSheet(System.IO.StreamWriter,System.Boolean)">
      <summary>
        スタイルシートを指定した
        <see cref="T:System.IO.StreamWriter" />に保存します。
      </summary>
      <param name="sw">
        スタイルシートを含む
        <see cref="T:System.IO.StreamWriter" />。
      </param>
      <param name="startCollapsed">スタイルシートが最初に折りたたまれた状態に設定されるかどうか。</param>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.StartPage">
      <summary>新しいページの開始をエンコードします。</summary>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.EndPage">
      <summary>現在のページの終了をエンコードします。</summary>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.BreakPages(System.String)">
      <summary>複数ページを含む HTML 出力ファイルを複数ファイルに分割します。</summary>
      <param name="fileName">複数ページに分割するファイルの名前。</param>
      <returns>ファイルが正常に分割された場合は true。</returns>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.GetHtmlFieldBackgroundPicture(C1.C1Report.Field,System.Drawing.Image)">
      <summary>フィールドの背景画像を表す CSS スタイルフラグメントを取得します。</summary>
      <param name="field">
        画像を含む
        <see cref="T:C1.C1Report.Field" />。
      </param>
      <param name="img">
        フィールドにレンダリングされる
        <see cref="T:System.Drawing.Image" />。
      </param>
      <returns>フィールドの背景画像を表す CSS スタイルフラグメント。</returns>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.GetHtmlFieldPicture(C1.C1Report.Field,System.Drawing.Image,System.Boolean)">
      <summary>フィールド内の画像を表す HTML タグを取得します。</summary>
      <param name="field">
        画像を含む
        <see cref="T:C1.C1Report.Field" />。
      </param>
      <param name="img">
        フィールドにレンダリングされる
        <see cref="T:System.Drawing.Image" />。
      </param>
      <param name="absolutePositioning">HTML IMG タグ内で絶対配置を使用するかどうか。</param>
      <returns>画像を表示する HTML IMG タグ。フィールドが画像を持っていない場合は空の文字列。</returns>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.GetHtmlFieldLink(C1.C1Report.Field)">
      <summary>フィールド内のリンクを表す HTML タグを取得します。</summary>
      <param name="field">
        リンクを含む
        <see cref="T:C1.C1Report.Field" />。
      </param>
      <returns>フィールド内のリンクを表す HTML タグ。</returns>
    </member>
    <member name="M:C1.C1Report.HtmlFilter.GetHtmlPlainText(C1.C1Report.Field,System.String)">
      <summary>RTF 文字列のプレーンテキストバージョンを取得します。</summary>
      <param name="field">
        テキストを所有する
        <see cref="T:C1.C1Report.Field" />。
      </param>
      <param name="text">エンコードするテキスト。</param>
      <returns>RTF 文字列のプレーンテキストバージョン。</returns>
    </member>
    <member name="P:C1.C1Report.HtmlFilter.Paged">
      <summary>フィルタが連続的なレポートを１つの HTML ファイルに生成するか、それともページ区切り付きのレポートを一連の HTML ファイルに作成するかを指定します。</summary>
    </member>
    <member name="P:C1.C1Report.HtmlFilter.MultiFile">
      <summary>組み込みの HTML フィルタがページ区切り付きのレポートを複数の HTML ファイルに分割する（１ページ１ファイル）かどうかを指定します。</summary>
      <remarks>このプロパティを false に設定すると、ページ区切りの位置に &lt;BR&gt; 要素を挿入して、すべてのページを含む１つの HTML ファイルが作成されます。</remarks>
    </member>
    <member name="P:C1.C1Report.HtmlFilter.DrillDown">
      <summary>ユーザーがヘッダーセクションをクリックしてグループを展開したり折りたたむことができるかどうかを指定します。</summary>
    </member>
    <member name="P:C1.C1Report.HtmlFilter.StartCollapsed">
      <summary>
        <see cref="P:C1.C1Report.HtmlFilter.DrillDown" />レポートが最初に折りたたまれた状態で表示されるかどうかを指定します。
      </summary>
    </member>
    <member name="P:C1.C1Report.HtmlFilter.EncodeHtml">
      <summary>フィールドコンテンツがエンコードされるか、それとも未加工の形式でレンダリングされるかを指定します。このプロパティを使用して、HTML 書式設定を含むフィールドをレンダリングできます。</summary>
      <remarks>
        <para>デフォルトでは、フィールドコンテンツがエンコードされ、文字列「A&lt;B&gt;C」を含むフィールドは「A&amp;lt;B&amp;gt;C」としてレンダリングされます。つまり、ブラウザには元の文字列が表示されます。</para>
        <para>
          <see cref="P:C1.C1Report.HtmlFilter.EncodeHtml" />を False に設定すると、同じ文字列が未加工の書式でレンダリングされます。つまり、ブラウザには「A&lt;B&gt;C」として表示され、「C」は太字になります。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.HtmlFilter.OwnerReport">
      <summary>
        このフィルタを所有する
        <see cref="T:C1.C1Report.C1Report" />への参照を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.HtmlFilter.HtmlStreamWriter">
      <summary>
        HTML 出力を作成するために使用されている
        <see cref="T:System.IO.StreamWriter" />への参照を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.HtmlFilter.StylePrefix">
      <summary>スタイル名のプリフィックスとして使用される文字列を取得します。</summary>
    </member>
    <member name="T:C1.C1Report.HtmlTableFilter">
      <summary>
        レポートをテーブルベースの HTML ストリームまたはファイルにレンダリングするために
        <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />メソッドで使用されます。
      </summary>
      <remarks>
        <para>
          このフィルタは、絶対位置で配置される DIV タグではなく、TABLE タグに基づいてレポートを生成することを除くと、通常の
          <see cref="T:C1.C1Report.HtmlFilter" />と同じです。生成されるファイルは、一般に、通常の DIV ベースの
          <see cref="T:C1.C1Report.HtmlFilter" />で作成されたファイルより正確ではありませんが、３つの大きな利点があります。
        </para>
        <para>1) テーブルベースのレポートは、標準の HTML エディタで容易に編集できます。たとえば、行を簡単に挿入できます。</para>
        <para>2) テーブルベースのレポートでは、クリップボードを効率よく操作できます。たとえば、ブラウザでレポートセクションをコピーし、Excel に貼り付けることができます。</para>
        <para>3) テーブルベースのレポートは、フィールド内の垂直方向の配置をサポートします。</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.#ctor(System.String)">
      <summary>
        ファイルに関連付けられた
        <see cref="T:C1.C1Report.HtmlFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="fileName">作成されるファイルの名前を含む。そのファイルが既に存在する場合は、上書きされる。</param>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.#ctor(System.IO.Stream)">
      <summary>
        ストリームに関連付けられた
        <see cref="T:C1.C1Report.HtmlFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="stream">レポートがレンダリングされる出力ストリーム。</param>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.#ctor(System.IO.Stream,System.String,System.String)">
      <summary>
        ストリームに関連付けられた
        <see cref="T:C1.C1Report.HtmlFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="stream">レポートがレンダリングされる出力ストリーム。</param>
      <param name="idPrefix">複数のレポートを同じ HTML ストリームに追加する場合にスタイル名の重複を避けるために使用される一意のレポート識別子。</param>
      <param name="fileName">メンバファイル（画像など）のファイル名のパスとテンプレート。</param>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.StartReport(C1.C1Report.C1Report)">
      <summary>コンポーネントがレポートのレンダリングを開始するときに呼び出されます。</summary>
      <param name="report">所有者レポート。</param>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.EndReport">
      <summary>コンポーネントがレポートのレンダリングを終了するときに呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.StartSection(C1.C1Report.Section,System.Double,System.Double)">
      <summary>コンポーネントがセクションのレンダリングを開始するときに呼び出されます。</summary>
      <param name="section">レンダリングされるセクション。</param>
      <param name="x">セクションの左の位置（ツイップ単位）。</param>
      <param name="y">セクションの上の位置（ツイップ単位）。</param>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.EndSection(C1.C1Report.Section)">
      <summary>コンポーネントが各セクションのレンダリングを終了するときに呼び出されます。</summary>
      <param name="section">レンダリングされたセクション。</param>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.RenderField(C1.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>コンポーネントが現在のページ内の特定の位置にある特定のコンテンツのレポートフィールドをレンダリングする必要があるときに呼び出されます。</summary>
      <param name="field">レンダリングされるフィールド。</param>
      <param name="rc">現在のページ内のフィールド位置（ツイップ単位）を指定する四角形。</param>
      <param name="text">レンダリングするフィールドテキスト。</param>
      <param name="img">レンダリングするフィールド画像。</param>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.CreateStyleSheet">
      <summary>レポートのスタイルシートを作成して保存します。</summary>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.SaveStyleSheet(System.IO.StreamWriter,System.Boolean)">
      <summary>
        スタイルシートを指定した
        <see cref="T:System.IO.StreamWriter" />に保存します。
      </summary>
      <param name="sw">
        スタイルシートを含む
        <see cref="T:System.IO.StreamWriter" />。
      </param>
      <param name="startCollapsed">スタイルシートが最初に折りたたまれた状態に設定されるかどうか。</param>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.StartPage">
      <summary>新しいページの終了をエンコードします。</summary>
    </member>
    <member name="M:C1.C1Report.HtmlTableFilter.EndPage">
      <summary>現在のページの終了をエンコードします。</summary>
    </member>
    <member name="P:C1.C1Report.HtmlTableFilter.CellSpacing">
      <summary>セルの間隔をピクセル単位で取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.HtmlTableFilter.CellPadding">
      <summary>セル内のパディングをピクセル単位で取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Report.MetafileFilter">
      <summary>
        レポートを圧縮されたメタファイルにレンダリングするために
        <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />メソッドで使用されます。
      </summary>
      <remarks>このフィルタは、レポートページごとに１つのメタファイルを含む zip ファイルを作成します。</remarks>
    </member>
    <member name="M:C1.C1Report.MetafileFilter.#ctor(System.String)">
      <summary>
        <see cref="T:C1.C1Report.MetafileFilter" />クラスの新しいインスタンスを作成します。
      </summary>
      <param name="fileName">レポートメタファイルを格納する zip ファイルの名前。</param>
    </member>
    <member name="M:C1.C1Report.MetafileFilter.StartReport(C1.C1Report.C1Report)">
      <summary>コンポーネントがレポートのレンダリングを開始するときに呼び出されます。</summary>
      <param name="report">所有者レポート。</param>
    </member>
    <member name="M:C1.C1Report.MetafileFilter.EndReport">
      <summary>コンポーネントがレポートのレンダリングを終了するときに呼び出されます。</summary>
    </member>
    <member name="P:C1.C1Report.MetafileFilter.MetafileType">
      <summary>
        この
        <see cref="T:C1.C1Report.MetafileFilter" />が生成するメタファイルのタイプを取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Report.PdfFilter">
      <summary>
        レポートを PDF ストリームまたはファイルにレンダリングするために
        <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />メソッドで使用されます。
      </summary>
      <remarks>
        <b>PdfFilter</b>を作成し、それを
        <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />の呼び出しで使用することは、
        <see cref="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)" />メソッドまたは
        <see cref="M:C1.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.C1Report.FileFormatEnum)" />メソッドを使用することに似ていますが、
        <b>RenderToFilter</b>を呼び出す前に
        <b>PdfFilter</b>のプロパティを設定できるため、より柔軟性があります。
      </remarks>
    </member>
    <member name="M:C1.C1Report.PdfFilter.#ctor(System.String)">
      <summary>
        ファイルに関連付けられた
        <see cref="T:C1.C1Report.PdfFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="fileName">作成するファイルの完全な名前。そのファイルがすでに存在する場合は上書きされます。</param>
    </member>
    <member name="M:C1.C1Report.PdfFilter.#ctor(System.IO.Stream)">
      <summary>
        ストリームに関連付けられた
        <see cref="T:C1.C1Report.PdfFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="stream">
        レポートがレンダリングされる出力
        <see cref="T:System.IO.Stream" />。
      </param>
    </member>
    <member name="M:C1.C1Report.PdfFilter.StartReport(C1.C1Report.C1Report)">
      <summary>コンポーネントがレポートのレンダリングを開始するときに呼び出されます。</summary>
      <param name="report">所有者レポート</param>
    </member>
    <member name="M:C1.C1Report.PdfFilter.EndReport">
      <summary>コンポーネントがレポートのレンダリングを終了するときに呼び出されます。</summary>
    </member>
    <member name="P:C1.C1Report.PdfFilter.EmbedFonts">
      <summary>フィルタが PDF 出力にフォント情報を埋め込むかどうかを指定します。</summary>
      <remarks>
        <para>フォント情報を埋め込むと、PDF ドキュメントがかなり大きくなりますが、必要なフォントがすべてインストールされていないシステムでもファイルを正確に表示できます。</para>
        <para>
          必要な
          <b>TrueType</b>フォントがターゲットシステムにインストールされている場合、フォントの埋め込みは必要ありません。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.PdfFilter.Password">
      <summary>PDF ドキュメントに関連付けられた所有者パスワードを取得または設定します。</summary>
      <remarks>
        <para>
          このプロパティは互換性維持のために用意されています。通常は、このプロパティの代わりに
          <see cref="P:C1.C1Report.PdfSecurityOptions.OwnerPassword" />プロパティを使用してください。
        </para>
        <para>
          このプロパティと
          <see cref="P:C1.C1Report.PdfSecurityOptions.OwnerPassword" />プロパティの両方を設定すると、
          <see cref="P:C1.C1Report.PdfSecurityOptions.OwnerPassword" />プロパティの設定が優先されます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.PdfFilter.Outline">
      <summary>PDF 出力にアウトラインツリーを含めるかどうかを指定します。</summary>
      <remarks>ツリーはレポートグループに基づいて自動的に作成され、Adobe Acrobat ビューアでレポート内を移動するために使用できます。</remarks>
    </member>
    <member name="P:C1.C1Report.PdfFilter.PdfSecurityOptions">
      <summary>PDF のセキュリティ情報を表す PdfSecurityOptions オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Report.PdfFilter.PdfViewerOptions">
      <summary>ビューアで PDF を表示する時に使用されるオプションを表す PdfViewerOptions オブジェクトを取得します。</summary>
    </member>
    <member name="T:C1.C1Report.PdfSecurityOptions">
      <summary>PDF のセキュリティ情報を表します。</summary>
    </member>
    <member name="P:C1.C1Report.PdfSecurityOptions.AllowCopyContent">
      <summary>ユーザーが PDF からコンテンツをコピーできるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.PdfSecurityOptions.AllowEditAnnotations">
      <summary>ユーザーが PDF の注釈を編集できるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.PdfSecurityOptions.AllowEditContent">
      <summary>ユーザーが PDF のコンテンツを編集できるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.PdfSecurityOptions.AllowPrint">
      <summary>ユーザーが PDF を印刷できるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.PdfSecurityOptions.OwnerPassword">
      <summary>PDF のアクセス許可を変更するために必要なパスワードを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.PdfSecurityOptions.UserPassword">
      <summary>PDF を開くために必要なパスワードを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Report.PageLayoutEnum">
      <summary>ビューアで PDF を表示するときに使用されるページレイアウトを表します。</summary>
    </member>
    <member name="F:C1.C1Report.PageLayoutEnum.ViewerDefault">
      <summary>レイアウトを指定せず、ビューアの現在の設定値で表示します。</summary>
    </member>
    <member name="F:C1.C1Report.PageLayoutEnum.SinglePage">
      <summary>単一ページ形式で表示します。</summary>
    </member>
    <member name="F:C1.C1Report.PageLayoutEnum.OneColumn">
      <summary>連続ページ形式で表示します。</summary>
    </member>
    <member name="F:C1.C1Report.PageLayoutEnum.TwoColumnLeft">
      <summary>見開きページ形式で表示します。奇数番号のページが左側に表示されます。</summary>
    </member>
    <member name="F:C1.C1Report.PageLayoutEnum.TwoColumnRight">
      <summary>見開きページ形式で表示します。奇数番号のページが右側に表示されます。</summary>
    </member>
    <member name="T:C1.C1Report.PageModeEnum">
      <summary>ビューアで PDF を表示するときの表示方法を指定します。</summary>
    </member>
    <member name="F:C1.C1Report.PageModeEnum.Automatic">
      <summary>アウトラインがある場合、アウトラインを表示します。</summary>
    </member>
    <member name="F:C1.C1Report.PageModeEnum.UseNone">
      <summary>アウトラインとサムネイル画像を表示しません。</summary>
    </member>
    <member name="F:C1.C1Report.PageModeEnum.UseOutlines">
      <summary>アウトラインを表示します。</summary>
    </member>
    <member name="F:C1.C1Report.PageModeEnum.UseThumbs">
      <summary>サムネイル画像を表示します。</summary>
    </member>
    <member name="F:C1.C1Report.PageModeEnum.FullScreen">
      <summary>フルスクリーンモードで表示します。メニューバーなどすべてのウィンドウやコントロールは表示されません。</summary>
    </member>
    <member name="T:C1.C1Report.PdfViewerOptions">
      <summary>ビューアで PDF を表示する時に使用されるオプションを表します。</summary>
    </member>
    <member name="P:C1.C1Report.PdfViewerOptions.CenterWindow">
      <summary>ビューアのウィンドウを画面の中央に配置するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.PdfViewerOptions.FitWindow">
      <summary>先頭ページのサイズに合わせてビューアのウィンドウサイズを変更するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.PdfViewerOptions.HideMenuBar">
      <summary>ビューアのメニューバーを非表示にするかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.PdfViewerOptions.HideToolBar">
      <summary>ビューアのツールバーを非表示にするかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.PdfViewerOptions.PageLayout">
      <summary>ビューアで PDF を表示するときに使用されるページレイアウトを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.PdfViewerOptions.PageMode">
      <summary>ビューアで PDF を表示するときの表示方法を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Report.RtfTargetEnum">
      <summary>エクスポートファイルの形式を指定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.RtfFilter" />クラスの
        <see cref="P:C1.C1Report.RtfFilter.RtfTarget" />プロパティを設定できます。
      </remarks>
    </member>
    <member name="F:C1.C1Report.RtfTargetEnum.Portable">
      <summary>この設定は、Microsoft Word、WordPad、および RichTextBox で表示できる RTF コンテンツを作成します。</summary>
    </member>
    <member name="F:C1.C1Report.RtfTargetEnum.MSWord">
      <summary>この設定は、Microsoft Word で表示できる RTF コンテンツを作成します。これは高品質画像のエクスポートに便利です。このような画像を含むドキュメントは、移植可能な形式の画像が含まれるドキュメントよりかなり大きくなります。</summary>
    </member>
    <member name="T:C1.C1Report.RtfFilter">
      <summary>
        レポートを RTF（リッチテキスト形式）ストリームまたはファイルにレンダリングするために
        <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />メソッドで使用されます。
      </summary>
      <remarks>
        <b>RtfFilter</b>を作成し、それを
        <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />メソッドの呼び出しで使用することは、
        <see cref="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)" />メソッドまたは
        <see cref="M:C1.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.C1Report.FileFormatEnum)" />メソッドを使用することに似ていますが、
        <b>RenderToFilter</b>を呼び出す前に
        <b>RtfFilter</b>のプロパティを設定できるため、より柔軟性があります。
      </remarks>
    </member>
    <member name="M:C1.C1Report.RtfFilter.#ctor(System.String)">
      <summary>
        ファイルに関連付けられた
        <see cref="T:C1.C1Report.RtfFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="fileName">作成するファイルの完全な名前。そのファイルがすでに存在する場合は上書きされます。</param>
    </member>
    <member name="M:C1.C1Report.RtfFilter.#ctor(System.IO.Stream)">
      <summary>
        ストリームに関連付けられた
        <see cref="T:C1.C1Report.RtfFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="stream">
        レポートがレンダリングされる出力
        <see cref="T:System.IO.Stream" />。
      </param>
    </member>
    <member name="M:C1.C1Report.RtfFilter.StartReport(C1.C1Report.C1Report)">
      <summary>コンポーネントがレポートのレンダリングを開始するときに呼び出されます。</summary>
      <param name="report">所有者レポート</param>
    </member>
    <member name="M:C1.C1Report.RtfFilter.IsPaged">
      <summary>このフィルタが生成するレポートが１ページか複数ページかを決定します。</summary>
      <returns>常に true を返します。</returns>
    </member>
    <member name="M:C1.C1Report.RtfFilter.UsesImages">
      <summary>フィルタでページイメージを使用するかどうかを決定する値を返します。</summary>
      <returns>常に false を返します。</returns>
    </member>
    <member name="M:C1.C1Report.RtfFilter.RenderField(C1.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>現在のページ内の特定の位置にある特定のコンテンツのレポートフィールドをレンダリングする必要があるときに呼び出されます。</summary>
      <param name="field">
        レンダリングする
        <see cref="T:C1.C1Report.Field" />オブジェクト。
      </param>
      <param name="rc">ページ内のフィールド位置（ツイップ単位）を指定する四角形。</param>
      <param name="text">レンダリングするフィールドテキスト。</param>
      <param name="img">レンダリングするフィールド画像。</param>
    </member>
    <member name="M:C1.C1Report.RtfFilter.NewPage">
      <summary>
        ページ区切り付きレポートのページ区切りごとに呼び出されます（
        <see cref="M:C1.C1Report.RtfFilter.IsPaged" />プロパティを参照）。
      </summary>
    </member>
    <member name="M:C1.C1Report.RtfFilter.StartOverlays">
      <summary>コンポーネントがレポートの最初のパスのレンダリングを完了した後で、オーバーレイフィールドのレンダリングを開始する前に呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Report.RtfFilter.EndReport">
      <summary>コンポーネントがレポートのレンダリングを終了するときに呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Report.RtfFilter.Dispose">
      <summary>コンポーネントがレポートのレンダリングを完了したり、レンダリングプロセスがユーザーによってキャンセルされるかエラーによって中断されたときに呼び出されます。</summary>
      <remarks>フィルタによって使用された破棄可能なオブジェクトを解放するには、このメソッドを使用します。</remarks>
    </member>
    <member name="M:C1.C1Report.RtfFilter.GetRTFFont(C1.C1Report.Field,System.Boolean)">
      <summary>
        フィールドの
        <see cref="T:System.Drawing.Font" />の RTF 表現を取得します。
      </summary>
      <param name="field">
        フォントを含む
        <see cref="T:C1.C1Report.Field" />。
      </param>
      <param name="ignoreBackColor">
        <see cref="P:C1.C1Report.Field.BackColor" />を無視することを示します。
      </param>
      <returns>フォントの RTF 表現を含む文字列。</returns>
    </member>
    <member name="P:C1.C1Report.RtfFilter.EmbedPictures">
      <summary>フィルタが RTF ドキュメントに画像を埋め込むかどうかを指定します。</summary>
      <remarks>埋め込みの画像を含むドキュメントは、テキストだけのドキュメントよりかなり大きくなります。</remarks>
    </member>
    <member name="P:C1.C1Report.RtfFilter.RtfTarget">
      <summary>画像のエクスポートに使用される形式を取得または設定します。</summary>
      <seealso cref="T:C1.C1Report.RtfTargetEnum" />
    </member>
    <member name="P:C1.C1Report.RtfFilter.StreamWriter">
      <summary>
        フィルタで使用される
        <see cref="P:C1.C1Report.RtfFilter.StreamWriter" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.RtfFilter.MarginLeft">
      <summary>ページの左マージンを取得します。</summary>
    </member>
    <member name="P:C1.C1Report.RtfFilter.MarginTop">
      <summary>ページの上マージンを取得します。</summary>
    </member>
    <member name="T:C1.C1Report.RtfLabelFilter">
      <summary>
        レポートを RTF（リッチテキスト形式）ストリームまたはファイルにレンダリングするために
        <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />メソッドで使用されます。
      </summary>
      <remarks>
        <para>
          このフィルタは、絶対位置を指定して RTF フィールドを生成する場合を除き、普通の
          <see cref="T:C1.C1Report.RtfFilter" />に似ています。生成されたファイルは、普通の RTF フィルタで作成されたファイルより正確ですが、編集は難しく、Microsoft Word でのみ開くことができます（WordPad などの簡単なエディタは RTF の絶対位置をサポートしていない）。
        </para>
        <para>
          <b>RtfLabelFilter</b>を作成し、それを
          <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />メソッドの呼び出しで使用することは、
          <see cref="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)" />メソッドまたは
          <see cref="M:C1.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.C1Report.FileFormatEnum)" />メソッドを使用することに似ていますが、
          <b>RenderToFilter</b>を呼び出す前に
          <b>RtfLabelFilter</b>のプロパティを設定できるため、より柔軟性があります。
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.RtfLabelFilter.#ctor(System.IO.Stream)">
      <summary>
        ストリームに関連付けられた
        <see cref="T:C1.C1Report.RtfLabelFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="stream">
        レポートがレンダリングされる出力
        <see cref="T:System.IO.Stream" />。
      </param>
    </member>
    <member name="M:C1.C1Report.RtfLabelFilter.#ctor(System.String)">
      <summary>
        ファイルに関連付けられた
        <see cref="T:C1.C1Report.RtfLabelFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="fileName">作成するファイルの完全な名前。そのファイルがすでに存在する場合は上書きされます。</param>
    </member>
    <member name="M:C1.C1Report.RtfLabelFilter.RenderField(C1.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>現在のページ内の特定の位置にある特定のコンテンツのレポートフィールドをレンダリングする必要があるときに呼び出されます。</summary>
      <param name="field">レンダリングされるフィールド。</param>
      <param name="rc">現在のページ内のフィールド位置（ツイップ単位）を指定する四角形。</param>
      <param name="text">レンダリングするフィールドテキスト。</param>
      <param name="img">レンダリングするフィールド画像。</param>
    </member>
    <member name="T:C1.C1Report.TextFilter">
      <summary>
        レポートをプレーンテキストストリームまたはファイルにレンダリングするために
        <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />メソッドで使用されます。
      </summary>
      <remarks>
        <b>TextFilter</b>を作成し、それを
        <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />メソッドの呼び出しで使用することは、
        <see cref="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)" />メソッドまたは
        <see cref="M:C1.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.C1Report.FileFormatEnum)" />メソッドを使用することに似ていますが、
        <b>RenderToFilter</b>を呼び出す前に
        <b>TextFilter</b>のプロパティを設定できるため、より柔軟性があります。
      </remarks>
    </member>
    <member name="M:C1.C1Report.TextFilter.#ctor(System.String)">
      <summary>
        ファイルに関連付けられた
        <see cref="T:C1.C1Report.TextFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="fileName">作成するファイルの完全な名前。そのファイルがすでに存在する場合は上書きされます。</param>
    </member>
    <member name="M:C1.C1Report.TextFilter.#ctor(System.IO.Stream)">
      <summary>
        ストリームに関連付けられた
        <see cref="T:C1.C1Report.TextFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="stream">
        レポートがレンダリングされる出力
        <see cref="T:System.IO.Stream" />。
      </param>
    </member>
    <member name="M:C1.C1Report.TextFilter.Dispose">
      <summary>コンポーネントがレポートのレンダリングを完了したり、レンダリングプロセスがユーザーによってキャンセルされるかエラーによって中断されたときに呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Report.TextFilter.StartReport(C1.C1Report.C1Report)">
      <summary>コンポーネントがレポートのレンダリングを開始するときに呼び出されます。</summary>
      <param name="report">所有者レポート</param>
    </member>
    <member name="M:C1.C1Report.TextFilter.StartSection(C1.C1Report.Section,System.Double,System.Double)">
      <summary>コンポーネントがセクションのレンダリングを開始するときに呼び出されます。</summary>
      <param name="section">
        レンダリングする
        <see cref="T:C1.C1Report.Section" />。
      </param>
      <param name="x">セクションの左の位置（ツイップ単位）。</param>
      <param name="y">セクションの上の位置（ツイップ単位）。</param>
    </member>
    <member name="M:C1.C1Report.TextFilter.EndSection(C1.C1Report.Section)">
      <summary>
        コンポーネントが各
        <see cref="T:C1.C1Report.Section" />のレンダリングを終了するときに呼び出されます。
      </summary>
      <param name="section">
        レンダリングされた
        <see cref="T:C1.C1Report.Section" />。
      </param>
    </member>
    <member name="M:C1.C1Report.TextFilter.RenderField(C1.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>現在のページ内の特定の位置にある特定のコンテンツのレポートフィールドをレンダリングする必要があるときに呼び出されます。</summary>
      <param name="field">
        レンダリングする
        <see cref="T:C1.C1Report.Field" />オブジェクト。
      </param>
      <param name="rc">ページ内のフィールド位置（ツイップ単位）を指定する四角形。</param>
      <param name="text">レンダリングするフィールドテキスト。</param>
      <param name="img">レンダリングするフィールド画像。</param>
    </member>
    <member name="M:C1.C1Report.TextFilter.IsPaged">
      <summary>このフィルタが生成するレポートが１ページか複数ページかを決定します。</summary>
      <remarks>
        <para>
          ページ区切り付きのレポートを生成する場合、コンポーネントは、ページ区切りでフィルタの
          <see cref="M:C1.C1Report.TextFilter.NewPage" />メソッドを呼び出し、
          <see cref="P:C1.C1Report.C1Report.Page" />プロパティの値を更新します。
        </para>
        <para>ページ区切りのない（連続的な）レポートを生成する場合は、１つの長いページが生成されます。</para>
      </remarks>
      <returns>レポートがページ区切り付きの場合は true。</returns>
    </member>
    <member name="M:C1.C1Report.TextFilter.NewPage">
      <summary>
        ページ区切り付きレポートのページ区切りごとに呼び出されます（
        <see cref="M:C1.C1Report.TextFilter.IsPaged" />プロパティを参照）。
      </summary>
    </member>
    <member name="M:C1.C1Report.TextFilter.UsesImages">
      <summary>フィルタでページイメージを使用するかどうかを決定する値を返します。</summary>
      <remarks>
        <para>
          デフォルトでは、
          <see cref="T:C1.C1Report.C1Report" />は、レポートをフィルタにレンダリングしたうえ、独自の
          <see cref="P:C1.C1Report.C1Report.PageImages" />コレクションにもレンダリングします。
        </para>
        <para>一部のフィルタは、このイメージを使用して出力を生成します（PDF、TIFF など）。他のフィルタはイメージを必要としないため（HTML、RTF など）、このメソッドは false を返します。これは、長いレポートをレンダリングするときにいくらかのリソースの節約になります。</para>
      </remarks>
      <returns>常に false を返します。</returns>
    </member>
    <member name="P:C1.C1Report.TextFilter.Paged">
      <summary>フィルタが連続的なレポートを生成するか、それともページ区切り文字とページヘッダー／フッターセクションを含むページを生成するかを指定します。</summary>
    </member>
    <member name="P:C1.C1Report.TextFilter.MaxTextWidth">
      <summary>
        テキスト行の最大幅（文字数）を取得または設定します。
        <para>-1（デフォルト）は、この値が自動的に計算されることを示します。</para>
      </summary>
    </member>
    <member name="P:C1.C1Report.TextFilter.Encoding">
      <summary>テキストエンコードを取得または設定します。 デフォルトは Encoding.Default です。</summary>
    </member>
    <member name="T:C1.C1Report.TextFilterClassic">
      <summary>
        レポートをプレーンテキストストリームまたはファイルにレンダリングするために
        <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />メソッドで使用されます。
      </summary>
      <remarks>
        <b>TextFilter</b>を作成し、それを
        <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />メソッドの呼び出しで使用することは、
        <see cref="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)" />または
        <see cref="M:C1.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.C1Report.FileFormatEnum)" />メソッドを使用することに似ていますが、
        <b>RenderToFilter</b>を呼び出す前に
        <b>TextFilter</b>のプロパティを設定できるため、より柔軟性があります。
      </remarks>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.#ctor(System.String)">
      <summary>
        ファイルに関連付けられた
        <see cref="T:C1.C1Report.TextFilterClassic" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="fileName">作成するファイルの完全名。そのファイルが既に存在する場合は、上書きされる。</param>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.#ctor(System.IO.Stream)">
      <summary>
        ストリームに関連付けられた
        <see cref="T:C1.C1Report.TextFilterClassic" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="stream">
        レポートがレンダリングされる出力
        <see cref="T:System.IO.Stream" />。
      </param>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.StartReport(C1.C1Report.C1Report)">
      <summary>コンポーネントがレポートのレンダリングを開始するときに呼び出されます。</summary>
      <param name="report">所有者レポート。</param>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.IsPaged">
      <summary>このフィルタが生成するレポートが１ページか複数ページかを決定します。</summary>
      <remarks>
        <para>
          ページブレーク付きのレポートを生成する場合、コンポーネントは、ページ区切りでフィルタの
          <see cref="M:C1.C1Report.TextFilterClassic.NewPage" />メソッドを呼び出し、
          <see cref="P:C1.C1Report.C1Report.Page" />プロパティの値を更新します。
        </para>
        <para>ページ区切りのない（連続的な）レポートを生成する場合は、１つの長いページが生成されます。</para>
      </remarks>
      <returns>レポートがページ区切り付きの場合は true。</returns>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.UsesImages">
      <summary>フィルタでページイメージを使用するかどうかを決定する値を返します。</summary>
      <returns>常に false を返します。</returns>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.RenderField(C1.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>コンポーネントが現在のページ内の特定の位置にある特定のコンテンツのレポートフィールドをレンダリングする必要があるときに呼び出されます。</summary>
      <param name="field">
        レンダリングする
        <see cref="T:C1.C1Report.Field" />オブジェクト。
      </param>
      <param name="rc">ページ内のフィールド位置（ツイップ単位）を指定する四角形。</param>
      <param name="text">レンダリングするフィールドテキスト。</param>
      <param name="img">レンダリングするフィールド画像。</param>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.NewPage">
      <summary>
        ページブレーク付きレポートのページ区切りごとに呼び出されます（
        <see cref="M:C1.C1Report.TextFilterClassic.IsPaged" />プロパティを参照）。
      </summary>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.StartOverlays">
      <summary>コンポーネントがレポートの最初のパスのレンダリングを完了した後で、オーバーレイフィールドのレンダリングを開始する前に呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.EndReport">
      <summary>コンポーネントがレポートのレンダリングを終了するときに呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Report.TextFilterClassic.Dispose">
      <summary>コンポーネントがレポートのレンダリングを完了したり、レンダリングプロセスがユーザーによってキャンセルされるかエラーによって中断されたときに呼び出されます。</summary>
      <remarks>フィルタによって使用された破棄可能なオブジェクトを解放するには、このメソッドを使用します。</remarks>
    </member>
    <member name="P:C1.C1Report.TextFilterClassic.Paged">
      <summary>フィルタが連続的なレポートを生成するか、それともページブレーク文字とページヘッダー／フッターセクションを含むページを生成するかを指定します。</summary>
    </member>
    <member name="T:C1.C1Report.TiffFilter">
      <summary>
        レポートを TIFF ストリームまたはファイルにレンダリングするために
        <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />メソッドで使用されます。
      </summary>
      <remarks>
        <b>TiffFilter</b>を作成し、それを
        <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />メソッドの呼び出しで使用することは、
        <see cref="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)" />メソッドまたは
        <see cref="M:C1.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.C1Report.FileFormatEnum)" />メソッドを使用することに似ていますが、
        <b>RenderToFilter</b>を呼び出す前に
        <b>TiffFilter</b>のプロパティを設定できるため、より柔軟性があります。
      </remarks>
    </member>
    <member name="M:C1.C1Report.TiffFilter.#ctor(System.String)">
      <summary>
        ファイルに関連付けられた
        <see cref="T:C1.C1Report.TiffFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="fileName">作成するファイルの完全な名前。そのファイルがすでに存在する場合は上書きされます。</param>
    </member>
    <member name="M:C1.C1Report.TiffFilter.#ctor(System.IO.Stream)">
      <summary>
        ストリームに関連付けられた
        <see cref="T:C1.C1Report.TiffFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="stream">
        レポートがレンダリングされる出力
        <see cref="T:System.IO.Stream" />。
      </param>
    </member>
    <member name="M:C1.C1Report.TiffFilter.StartReport(C1.C1Report.C1Report)">
      <summary>コンポーネントがレポートのレンダリングを開始するときに呼び出されます。</summary>
      <param name="report">所有者レポート</param>
    </member>
    <member name="M:C1.C1Report.TiffFilter.EndReport">
      <summary>コンポーネントがレポートのレンダリングを終了するときに呼び出されます。</summary>
    </member>
    <member name="P:C1.C1Report.TiffFilter.Resolution">
      <summary>TIFF ドキュメントの解像度を dpi 単位（１インチあたりドット数）で取得または設定します。</summary>
      <remarks>
        <para>このプロパティのデフォルト値は 150 dpi です。</para>
        <para>解像度を高い値に設定すると、ドキュメントの品質は向上しますが、サイズはかなり大きくなります。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.TiffFilter.Monochrome">
      <summary>TIFF ドキュメントを白黒形式で保存するかどうかを取得または設定します。</summary>
      <remarks>
        <para>このプロパティのデフォルト値は true です。これにより、ファックス機と互換性があるかなり小さなドキュメントが生成されます（CompressionCCITT4 圧縮を使用）。</para>
        <para>このプロパティを false に設定すると、LZW 圧縮を使用するカラードキュメントを生成できます。ただし、白黒ドキュメントよりかなり大きくなります（同じ解像度でも 100 倍ほど大きくなる）。</para>
      </remarks>
    </member>
    <member name="T:C1.C1Report.XlsFilter">
      <summary>
        レポートを Microsoft Excel（XLS）ファイルにレンダリングするために
        <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />メソッドで使用されます。
      </summary>
      <remarks>
        <b>XlsFilter</b>を作成し、それを
        <see cref="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)" />メソッドの呼び出しで使用することは、
        <see cref="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)" />メソッドを使用することに似ていますが、
        <b>RenderToFilter</b>を呼び出す前に
        <b>XlsFilter</b>のプロパティを設定できるため、より柔軟性があります。
      </remarks>
    </member>
    <member name="M:C1.C1Report.XlsFilter.#ctor(System.String)">
      <summary>
        ファイルに関連付けられた
        <see cref="T:C1.C1Report.XlsFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="fileName">作成するファイルの完全な名前。</param>
      <remarks>ファイルがすでに存在する場合、フィルタはそれを開き、レポートを含む新しいシートを追加します。</remarks>
    </member>
    <member name="M:C1.C1Report.XlsFilter.#ctor(System.IO.Stream)">
      <summary>
        <see cref="T:System.IO.Stream" />に関連付けられた
        <see cref="T:C1.C1Report.XlsFilter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="stream">
        シートが保存される
        <see cref="T:System.IO.Stream" />。
      </param>
    </member>
    <member name="M:C1.C1Report.XlsFilter.StartReport(C1.C1Report.C1Report)">
      <summary>コンポーネントがレポートのレンダリングを開始するときに呼び出されます。</summary>
      <param name="report">所有者レポート</param>
    </member>
    <member name="M:C1.C1Report.XlsFilter.IsPaged">
      <summary>このフィルタが生成するレポートが１ページか複数ページかを決定します。</summary>
      <returns>常に false を返します。</returns>
    </member>
    <member name="M:C1.C1Report.XlsFilter.UsesImages">
      <summary>フィルタでページイメージを使用するかどうかを決定する値を返します。</summary>
      <returns>常に false を返します。</returns>
    </member>
    <member name="M:C1.C1Report.XlsFilter.RenderField(C1.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>現在のページ内の特定の位置にある特定のコンテンツのレポートフィールドをレンダリングする必要があるときに呼び出されます。</summary>
      <param name="field">
        レンダリングする
        <see cref="T:C1.C1Report.Field" />オブジェクト。
      </param>
      <param name="rc">ページ内のフィールド位置（ツイップ単位）を指定する四角形。</param>
      <param name="text">レンダリングするフィールドテキスト。</param>
      <param name="img">レンダリングするフィールド画像。</param>
    </member>
    <member name="M:C1.C1Report.XlsFilter.EndReport">
      <summary>コンポーネントがレポートのレンダリングを終了するときに呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Report.XlsFilter.Dispose">
      <summary>コンポーネントがレポートのレンダリングを完了したり、レンダリングプロセスがユーザーによってキャンセルされるかエラーによって中断されたときに呼び出されます。</summary>
      <remarks>フィルタによって使用された破棄可能なオブジェクトを解放するには、このメソッドを使用します。</remarks>
    </member>
    <member name="P:C1.C1Report.XlsFilter.SheetName">
      <summary>レポートを Excel ワークブックファイルに保存するときに使用されるワークシートの名前を取得または設定します。</summary>
      <remarks>このプロパティを使用すると、複数のレポートを１つの Excel ワークブックファイルに保存できます（１レポート１シート）。</remarks>
    </member>
    <member name="P:C1.C1Report.XlsFilter.Shading">
      <summary>シートに網掛け領域を作成しないようにします。</summary>
      <remarks>このプロパティを false に設定すると、影付きセルが無い小さなファイルを生成します。</remarks>
    </member>
    <member name="P:C1.C1Report.XlsFilter.Images">
      <summary>画像が Excel ワークブックファイルにエクスポートされるかどうかを決定する値を取得または設定します。</summary>
      <remarks>画像を入れずに小さなファイルを作成するには、このプロパティを false に設定します。</remarks>
    </member>
    <member name="P:C1.C1Report.XlsFilter.FreezePageHeader">
      <summary>ヘッダーセクションがシートで固定されるかどうかを指定します。</summary>
      <remarks>このプロパティを true に設定すると、レポートヘッダーとページヘッダーセクションを含む行を固定します。固定行はユーザーがシートをスクロールしても常に表示されます。</remarks>
    </member>
    <member name="P:C1.C1Report.XlsFilter.DataOnly">
      <summary>Excel ワークブックファイルにレポートのデータのみを含め、 書式を無視するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.XlsFilter.OpenXml">
      <summary>Microsoft Excel 2007 以降で開くことができる Open XML Excel ファイルを作成するかどうかを決定する値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Report.RunningSumEnum">
      <summary>積算合計を計算するかどうかを指定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.Field" />クラスの
        <see cref="P:C1.C1Report.Field.RunningSum" />プロパティの値を設定します。
      </remarks>
    </member>
    <member name="F:C1.C1Report.RunningSumEnum.NoRunningSum">
      <summary>積算合計フィールドとして処理しません。</summary>
    </member>
    <member name="F:C1.C1Report.RunningSumEnum.SumOverGroup">
      <summary>各グループに渡る積算合計を計算します。</summary>
    </member>
    <member name="F:C1.C1Report.RunningSumEnum.SumOverAll">
      <summary>レポート全体に渡る積算合計を計算します。</summary>
    </member>
    <member name="T:C1.C1Report.AnchorEnum">
      <summary>
        セクションの
        <see cref="P:C1.C1Report.Section.CanGrow" />プロパティや
        <see cref="P:C1.C1Report.Section.CanShrink" />プロパティを設定した結果としてセクションが拡大または縮小した場合に、その中のフィールドがセクションに対してどのように配置されるかを指定します。
      </summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.Field" />クラスの
        <see cref="P:C1.C1Report.Field.Anchor" />プロパティの値を設定します。
      </remarks>
    </member>
    <member name="F:C1.C1Report.AnchorEnum.Top">
      <summary>フィールドは移動しません。フィールドの上端とセクションの上端の間のスペースは変わりません。</summary>
    </member>
    <member name="F:C1.C1Report.AnchorEnum.Bottom">
      <summary>フィールドは垂直方向に移動します。フィールドの下端とセクションの下端の間のスペースは変わりません。</summary>
    </member>
    <member name="F:C1.C1Report.AnchorEnum.TopAndBottom">
      <summary>フィールドは拡大または縮小します。フィールドとセクションの間のスペースは上下とも変わりません。</summary>
    </member>
    <member name="T:C1.C1Report.BackStyleEnum">
      <summary>フィールドが不透明または透明のどちらの背景でレンダリングされるかを指定します。</summary>
    </member>
    <member name="F:C1.C1Report.BackStyleEnum.Transparent">
      <summary>透明な背景。</summary>
    </member>
    <member name="F:C1.C1Report.BackStyleEnum.Opaque">
      <summary>不透明な背景。</summary>
    </member>
    <member name="T:C1.C1Report.Field">
      <summary>レポート内の個別のデータ項目を表示します。</summary>
      <remarks>
        レポートに表示されるすべての要素は、
        <b>Field</b>オブジェクトで表現されます。フィールドには、テキスト、画像、式、線、四角形、またはサブレポートを表示できます。
      </remarks>
    </member>
    <member name="M:C1.C1Report.Field.#ctor">
      <summary>
        <see cref="T:C1.C1Report.Field" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Report.Field.GetRenderContent(System.String@,System.Drawing.Image@,System.Boolean)">
      <summary>フィールドによってレンダリングされるテキストまたは画像を選択します。</summary>
      <param name="value">フィールドテキスト。</param>
      <param name="img">グラフ画像。</param>
      <param name="designTime">このパラメータを使うと、フィールドはデザイン時または実行時に別々に描画できます。 これは通常、デザイン時には使用可能なデータが存在しないため、連結コントロールで必要です。</param>
      <remarks>このメソッドを派生クラス内でオーバーライドして、レポートにレンダリングされるカスタムテキストまたは画像を提供します。</remarks>
    </member>
    <member name="M:C1.C1Report.Field.Load(System.Xml.XmlNodeList)">
      <summary>派生クラス内でオーバーライドして、高度な保持機構を提供します。</summary>
      <param name="properties"></param>
    </member>
    <member name="M:C1.C1Report.Field.Save(System.Xml.XmlWriter)">
      <summary>派生クラス内でオーバーライドして、高度な保持機構を提供します。</summary>
      <param name="properties"></param>
    </member>
    <member name="M:C1.C1Report.Field.ToString">
      <summary>フィールドの説明（名前、場所、サイズ）を返します。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Report.Field.SetZOrder(System.Boolean)">
      <summary>
        フィールドを
        <b>ZOrder</b>の最前面または最背面に移動します。
      </summary>
      <param name="front">
        フィールドを
        <b>ZOrder</b>の最前面または最背面のどちらに移動するかを決定します。
      </param>
    </member>
    <member name="M:C1.C1Report.Field.Clone">
      <summary>
        現在の
        <see cref="T:C1.C1Report.Field" />オブジェクトをコピーして新しいオブジェクトを作成します。
      </summary>
      <returns>
        現在の
        <see cref="T:C1.C1Report.Field" />オブジェクトのコピー。
      </returns>
    </member>
    <member name="P:C1.C1Report.Field.SubreportHasData">
      <summary>サブレポートにデータがあるかどうかを返し、データがない場合はレンダリングを抑止します。</summary>
      <remarks>このプロパティを使用すると、サブレポートにデータがあるかどうかをチェックし、データがない場合はレンダリングを抑止できます。</remarks>
      <example>
        次のコードは、空のサブレポートを含むセクションを非表示にするスクリプトです。
        <code>
          <![CDATA[
          _c1r.Sections.Detail.OnPrint = "Detail.Visible = fSubreport.SubreportHasData"
          ]]>
        </code>
        次のコードは、空のサブレポートを含むフィールドを非表示にし、代わりに別のフィールドを表示するスクリプトです。
        <code>
          <![CDATA[
          _c1r.Sections.Detail.OnPrint = "hasData = fSubreport.SubreportHasData\r\n" + 
            "fSubreport.Visible = hasData\r\n" + 
            "fNoData.Visible = Not hasData"
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.C1Report.Field.ShapeType">
      <summary>
        現在のフィールドによって描かれた幾何学形状のタイプを取得または設定します。
        <para>
          デフォルトは
          <b>None</b>です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Report.Field.Shape">
      <summary>
        このフィールドによって描かれた幾何学形状のプロパティを示す
        <see cref="T:C1.C1Report.ShapeBase" />の派生クラスのインスタンスを取得または設定します（
        <see cref="P:C1.C1Report.Field.ShapeType" />が
        <b>None</b>でない場合）。
      </summary>
      <seealso cref="P:C1.C1Report.Field.ShapeType" />
    </member>
    <member name="P:C1.C1Report.Field.Name">
      <summary>フィールド名を取得または設定します。</summary>
      <remarks>
        <para>
          フィールド名は、コントロールの
          <see cref="P:C1.C1Report.C1Report.Fields" />コレクションへのインデックスとして使用できます。
        </para>
        <para>
          次の例に示すように、フィールド名は、
          <b>VBScript</b>式でフィールドを識別するためにも使用されます。
        </para>
        <para>重複または空のフィールド名を使用することもできますが、フィールド名をスクリプトで使用したり、インデクサとして使用する場合は避けてください。</para>
      </remarks>
      <example>
        次のコードは、スクリプトをレポートの
        <see cref="F:C1.C1Report.SectionTypeEnum.Detail" />セクションに割り当てます。このスクリプトは、値に基づいてフィールドの
        <see cref="P:C1.C1Report.Field.ForeColor" />プロパティを変更します。
        <code>
          <![CDATA[
          _c1r.Sections.Fields["sampleField"].ForeColor = Color.Black;
          _c1r.Sections.Detail.OnFormat = "sampleField.ForeColor = iif(someValue &lt; 5, vbRed, vbBlack)";
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.C1Report.Field.Visible">
      <summary>
        <see cref="T:C1.C1Report.Field" />がレポートにレンダリングされるかどうかを指定します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Field.Tag">
      <summary>呼び出し側のプログラムで必要な追加のデータを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.Field.Index">
      <summary>
        親レポートの
        <see cref="P:C1.C1Report.C1Report.Fields" />コレクションのフィールドの位置を返します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Field.Section">
      <summary>フィールドが属するセクションを取得または設定します。</summary>
      <remarks>
        フィールドを１つのセクションから別のセクションに移動するには、
        <see cref="P:C1.C1Report.Field.Section" />プロパティを新しい値に設定します。
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.ParentReport">
      <summary>
        このフィールドを含む
        <see cref="T:C1.C1Report.C1Report" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Field.ParentSection">
      <summary>
        このフィールドを含む
        <see cref="P:C1.C1Report.Field.Section" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Field.Text">
      <summary>フィールドのテキストを取得または設定します。</summary>
      <remarks>
        <para>
          <see cref="P:C1.C1Report.Field.Text" />プロパティには、レポートにレンダリングされるテキストが含まれます。
        </para>
        <para>
          この値は、
          <see cref="P:C1.C1Report.Field.Calculated" />プロパティの設定に基づき、リテラルとして（変換なしで）レンダリングされるか、
          <b>VBScript</b>式として評価されます。
        </para>
      </remarks>
      <example>
        次のコードは２つのフィールドを作成します。１つは「Sales Tax」というラベルを表示し、もう１つはデータベースフィールド Sales を定数で乗算して税額を表示します。
        <code>
          <![CDATA[
          // リテラルテキストを表示します
          _c1r.Field[0].Text = "Sales Tax";
          _c1r.Field[0].Calculated = false;
          
          // 計算値を表示します
          _c1r.Field[1].Text = "Sales * 0.085";
          _c1r.Field[1].Calculated = true;
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.C1Report.Field.Calculated">
      <summary>
        <see cref="P:C1.C1Report.Field.Text" />プロパティをリテラル値と計算式のどちらとして解釈するかを指定します。
      </summary>
      <remarks>
        <para>
          このプロパティが false に設定されている場合、
          <see cref="P:C1.C1Report.Field.Text" />プロパティの値は、何も処理されずにレポートにレンダリングされます。
        </para>
        <para>
          true に設定されている場合、
          <see cref="P:C1.C1Report.Field.Text" />プロパティの値は
          <b>VBScript</b>式として評価され、その式の結果がレポートにレンダリングされます。
        </para>
      </remarks>
      <example>
        次のコードは２つのフィールドを作成します。１つは「Sales Tax」というラベルを表示し、もう１つはデータベースフィールド Sales を定数で乗算して税額を表示します。
        <code>
          <![CDATA[
          // リテラルテキストを表示します
          _c1r.Field[0].Text = "Sales Tax";
          _c1r.Field[0].Calculated = false;
          
          // 計算値を表示します
          _c1r.Field[1].Text = "Sales * 0.085";
          _c1r.Field[1].Calculated = true;
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.C1Report.Field.Value">
      <summary>フィールドの計算値を取得または設定します。</summary>
      <remarks>
        <para>
          フィールドの
          <see cref="P:C1.C1Report.Field.Calculated" />プロパティが true に設定されている場合、コントロールは、
          <see cref="P:C1.C1Report.Field.Text" />プロパティに格納されている式を評価し、その結果を
          <see cref="P:C1.C1Report.Field.Value" />プロパティに格納します。その結果がレポートにレンダリングされます。
        </para>
        <para>
          このプロパティは、フィールドのデフォルトプロパティです。したがって、
          <b>VBScript</b>式でフィールド名を使用する場合、実際には、フィールドの
          <see cref="P:C1.C1Report.Field.Value" />プロパティを参照しています。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.HideDuplicates">
      <summary>連続するレコードで、重複する値を非表示にするかどうかを指定します。</summary>
      <remarks>
        <para>
          <see cref="P:C1.C1Report.Field.HideDuplicates" />プロパティを使用すると、フィールドの値が前のレコードの値と同じ場合に、そのフィールドを非表示にできます。
        </para>
        <para>たとえば、納入業者と製品をリストするレポートでは、すべての製品に業者名を表示するのではなく、同じ製品のグループに業者の名前を一度だけ表示できます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.RunningSum">
      <summary>フィールドの積算合計を表示するかどうかを指定します。</summary>
      <remarks>
        <para>
          <see cref="P:C1.C1Report.Field.RunningSum" />プロパティを使用して、レポートのレコードごとの合計またはグループごとの合計を計算できます。
        </para>
        <para>
          <see cref="P:C1.C1Report.Field.RunningSum" />プロパティは、レポートの計算フィールドに積算合計を表示するかどうかを指定します。また、積算する値の範囲を設定できます。
        </para>
      </remarks>
      <seealso cref="T:C1.C1Report.RunningSumEnum" />
    </member>
    <member name="P:C1.C1Report.Field.Left">
      <summary>コントロールの左端の x 座標をツイップ単位で取得または設定します。</summary>
      <remarks>
        <para>
          フィールドの位置は、このフィールドの右上隅から、このフィールドを含む
          <see cref="P:C1.C1Report.Field.Section" />の右上隅までの距離です。
        </para>
        <para>
          <see cref="P:C1.C1Report.Field.Left" />プロパティまたは
          <see cref="P:C1.C1Report.Field.Top" />プロパティを０に設定すると、フィールドは、このフィールドを含むセクションの左端または上端に配置されます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.Top">
      <summary>コントロールの上端の y 座標をツイップ単位で取得または設定します。</summary>
      <remarks>
        <para>
          フィールドの位置は、このフィールドの右上隅から、このフィールドを含む
          <see cref="P:C1.C1Report.Field.Section" />の右上隅までの距離です。
        </para>
        <para>
          フィールドの
          <see cref="P:C1.C1Report.Field.CanGrow" />プロパティまたは
          <see cref="P:C1.C1Report.Field.CanShrink" />プロパティが true に設定されている場合、コントロールは、フィールドのコンテンツに合わせて自動的に
          <see cref="P:C1.C1Report.Field.RenderHeight" />プロパティを調整します。また、コントロールは、現在のフィールドの下にあるフィールドの
          <see cref="P:C1.C1Report.Field.RenderTop" />プロパティを調整して、フィールド間の垂直方向の距離を維持します。
          <see cref="P:C1.C1Report.Field.Top" />プロパティと
          <see cref="P:C1.C1Report.Field.Height" />プロパティの値は影響されません。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.Width">
      <summary>フィールドの幅（ツイップ単位）を取得または設定します。</summary>
      <remarks>
        <para>
          各
          <see cref="T:C1.C1Report.Field" />オブジェクトには、そのコンテンツがレンダリングされる場所になる四角形（フィールドボックス）があります。
        </para>
        <para>
          フィールドボックスは、
          <see cref="P:C1.C1Report.Field.Left" />、
          <see cref="P:C1.C1Report.Field.Top" />、
          <see cref="P:C1.C1Report.Field.Width" />、
          <see cref="P:C1.C1Report.Field.Height" />の各プロパティによって定義されます。
        </para>
        <para>これらのプロパティはツイップ単位で表され、位置は、そのフィールドが含まれるセクションからの相対位置です。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.Height">
      <summary>フィールドの高さ（ツイップ単位）を取得または設定します。</summary>
      <remarks>
        <para>
          各
          <see cref="T:C1.C1Report.Field" />オブジェクトには、そのコンテンツがレンダリングされる場所になる四角形（フィールドボックス）があります。
        </para>
        <para>
          フィールドボックスは、
          <see cref="P:C1.C1Report.Field.Left" />、
          <see cref="P:C1.C1Report.Field.Top" />、
          <see cref="P:C1.C1Report.Field.Width" />、
          <see cref="P:C1.C1Report.Field.Height" />の各プロパティによって定義されます。
        </para>
        <para>これらのプロパティはツイップ単位で表され、位置は、そのフィールドが含まれるセクションからの相対位置です。</para>
        <para>
          フィールドの
          <see cref="P:C1.C1Report.Field.Height" />プロパティは、フィールドの
          <see cref="P:C1.C1Report.Field.Font" />の高さ以上の値に設定する必要があります。そうしないと、テキストがフィールドにまったく表示されなくなります。
        </para>
        <para>
          フィールドの
          <see cref="P:C1.C1Report.Field.CanGrow" />プロパティまたは
          <see cref="P:C1.C1Report.Field.CanShrink" />プロパティが true に設定されている場合、コントロールは、フィールドのコンテンツに合わせて自動的に
          <see cref="P:C1.C1Report.Field.RenderHeight" />プロパティを調整します。また、コントロールは、現在のフィールドの下にあるフィールドの
          <see cref="P:C1.C1Report.Field.RenderTop" />プロパティを調整して、フィールド間の垂直方向の距離を維持します。
          <see cref="P:C1.C1Report.Field.Top" />プロパティと
          <see cref="P:C1.C1Report.Field.Height" />プロパティの値は影響されません。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.ForcePageBreak">
      <summary>フィールドの前後にページ区切りが挿入されるかどうかを指定します。</summary>
      <seealso cref="T:C1.C1Report.ForcePageBreakEnum" />
    </member>
    <member name="P:C1.C1Report.Field.CanGrow">
      <summary>フィールドの高さがフィールドのコンテンツに合わせて自動的に大きくなるかどうかを指定します。</summary>
      <remarks>
        <para>
          <see cref="P:C1.C1Report.Field.CanGrow" />プロパティと
          <see cref="P:C1.C1Report.Field.CanShrink" />プロパティを使用して、レポートのフィールドとセクションの外観を制御できます。両方のプロパティを true に設定すると、任意の量のデータを出力できるようにフィールドまたはセクションは自動的に調整されます。フィールドが拡大または縮小すると、それより下にあるフィールドは、ページ内を上下に移動します。
        </para>
        <para>
          フィールドの
          <see cref="P:C1.C1Report.Field.CanGrow" />プロパティを true に設定すると、コントロールは、そのフィールドを含むセクションの
          <see cref="P:C1.C1Report.Field.CanGrow" />プロパティを自動的に true に設定します。ただし、コントロールの
          <see cref="P:C1.C1Report.Field.CanShrink" />プロパティを true に設定しても、セクションの
          <see cref="P:C1.C1Report.Field.CanShrink" />プロパティは true に設定されません。
        </para>
        <para>
          <see cref="P:C1.C1Report.Field.CanGrow" />プロパティと
          <see cref="P:C1.C1Report.Field.CanShrink" />プロパティを使用する場合は、次の点に注意してください。
        </para>
        <para>1. これらのプロパティの設定は、フィールド間の水平方向の間隔には影響しません。フィールドが占める垂直方向の領域にだけ影響します。</para>
        <para>2. 背の高いフィールドがあると、その横にあるフィールドが縮小されないことがあります。たとえば、いくつかの背の低いコントロールがレポートの詳細セクションの左側にあり、背の高いコントロール（非連結オブジェクトフレームなど）が右側にある場合、左側にあるコントロールは、データがなくても縮小されません。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.CanShrink">
      <summary>フィールドの高さがフィールドのコンテンツに合わせて自動的に小さくなるかどうかを指定します。</summary>
      <seealso cref="P:C1.C1Report.Field.CanGrow" />
    </member>
    <member name="P:C1.C1Report.Field.KeepTogether">
      <summary>フィールドが１ページに収められるかどうかを指定します。</summary>
      <remarks>
        <para>このプロパティが true に設定されている場合、コントロールは、フィールドのコンテンツを１ページに収めるためにページ区切りを挿入します。</para>
        <para>
          false に設定されている場合は、そのフィールドを含む
          <see cref="P:C1.C1Report.Field.Section" />の
          <see cref="!:Section.KeepTogether" />プロパティも false に設定され、フィールドが２ページ以上に渡ってレンダリングされる場合があります。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.Anchor">
      <summary>
        このフィールドを含む
        <see cref="P:C1.C1Report.Field.Section" />に相対的なフィールドの垂直位置を取得または設定します。
      </summary>
      <remarks>
        <para>通常、フィールドは、セクションが拡大または縮小されても移動しません。ただし、必要に応じて、セクションと一緒にフィールドを拡大したり、セクションの下端から同じ位置にフィールドを留めておくことができます。</para>
        <para>特に、垂直線をセクションの高さ全体に伸ばすために作成されるフィールドではよく使用する機能です。</para>
      </remarks>
      <seealso cref="T:C1.C1Report.AnchorEnum" />
    </member>
    <member name="P:C1.C1Report.Field.ZOrder">
      <summary>
        フィールドの
        <b>ZOrder</b>を取得または設定します。
      </summary>
      <remarks>
        <para>
          フィールドの
          <b>ZOrder</b>は、そのフィールドにオーバーラップする他のフィールドの前面または背面のどちらにフィールドをレンダリングするかを決定します。
        </para>
        <para>
          <b>ZOrder</b>値を大きくするとフィールドは前面に移動し、小さく設定すると背面に移動します。
        </para>
        <para>
          <b>ZOrder</b>値は相対的な値なので、通常は、
          <see cref="M:C1.C1Report.Field.SetZOrder(System.Boolean)" />メソッドを呼び出す方が簡単です。このメソッドは、オーバーラップしている他のすべてのフィールドの最前面または最背面にフィールドをレンダリングします。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.RenderTop">
      <summary>
        このフィールドを含む
        <see cref="P:C1.C1Report.Field.Section" />に
        <see cref="P:C1.C1Report.Field.CanGrow" />プロパティと
        <see cref="P:C1.C1Report.Field.CanShrink" />プロパティが適用された後のフィールドの上端の y 座標をツイップ単位で取得または設定します。
      </summary>
      <remarks>
        フィールドの
        <see cref="P:C1.C1Report.Field.CanGrow" />プロパティまたは
        <see cref="P:C1.C1Report.Field.CanShrink" />プロパティが true に設定されている場合、コントロールは、フィールドのコンテンツに合わせて自動的に
        <see cref="P:C1.C1Report.Field.RenderHeight" />プロパティを調整します。また、コントロールは、現在のフィールドの下にあるフィールドの
        <see cref="P:C1.C1Report.Field.RenderTop" />プロパティを調整して、フィールド間の垂直方向の距離を維持します。
        <see cref="P:C1.C1Report.Field.Top" />プロパティと
        <see cref="P:C1.C1Report.Field.Height" />プロパティの値は影響されません。
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.RenderHeight">
      <summary>
        フィールドに
        <see cref="P:C1.C1Report.Field.CanGrow" />プロパティと
        <see cref="P:C1.C1Report.Field.CanShrink" />プロパティが適用された後のフィールドの高さをツイップ単位で取得します。
      </summary>
      <remarks>
        フィールドの
        <see cref="P:C1.C1Report.Field.CanGrow" />プロパティまたは
        <see cref="P:C1.C1Report.Field.CanShrink" />プロパティが true に設定されている場合、コントロールは、フィールドのコンテンツに合わせて自動的に
        <see cref="P:C1.C1Report.Field.RenderHeight" />プロパティを調整します。また、コントロールは、現在のフィールドの下にあるフィールドの
        <see cref="P:C1.C1Report.Field.RenderTop" />プロパティを調整して、フィールド間の垂直方向の距離を維持します。
        <see cref="P:C1.C1Report.Field.Top" />プロパティと
        <see cref="P:C1.C1Report.Field.Height" />プロパティの値は影響されません。
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.Bounds">
      <summary>セクション内のフィールドのサイズと位置（ツイップ単位）を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.Field.Size">
      <summary>フィールドのサイズ（ツイップ単位）を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.Field.Location">
      <summary>セクション内のフィールドの位置（ツイップ単位）を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.Field.Font">
      <summary>フィールドのフォントを取得または設定します。</summary>
      <remarks>
        フィールドのフォントの
        <see cref="P:C1.C1Report.Util.FontHolder.Size" />プロパティをフィールドボックスに収まらないほど大きな値（
        <see cref="P:C1.C1Report.Field.Height" />プロパティで定義）に設定すると、テキストはフィールドにまったく表示されなくなります。
      </remarks>
      <seealso cref="T:C1.C1Report.Util.FontHolder" />
    </member>
    <member name="P:C1.C1Report.Field.BackColor">
      <summary>フィールドの背景色を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.Field.ForeColor">
      <summary>フィールドの前景色を取得または設定します。</summary>
      <remarks>
        <b>ForeColor</b>プロパティを使用して、フィールド内のテキストの色を指定します。このプロパティを使用して、フィールドを読みやすくしたり、特別な意味を伝えることができます。
      </remarks>
      <example>
        次のコードは、
        <i>UnitsInStock</i>フィールドの値が追加注文レベルを下回った場合に、そのフィールドのテキストの色を変更するスクリプトです。
        <code>
          <![CDATA[
          // スクリプトを作成します
          string script = "UnitsInStock.ForeColor = " + 
            "IIF(UnitsInStock &lt; ReorderLevel, vbRed, vbBlack)";
          
          // スクリプトを詳細セクションに割り当てます
          _c1r.Sections.Detail.OnPrint = script;
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.C1Report.Field.Format">
      <summary>フィールド値の書式設定に使用される文字列を取得または設定します。</summary>
      <remarks>
        <para>
          <see cref="P:C1.C1Report.Field.Format" />プロパティを使用して、数値、日付、時刻、およびテキストが表示および印刷される方法をカスタマイズできます。
        </para>
        <para>
          たとえば、
          <b>Price</b>フィールドを作成した場合に、その
          <see cref="P:C1.C1Report.Field.Format" />プロパティを「Currency」に設定できます。これで、フィールド値が「432168」の場合は、「\432,168」とレンダリングされます。
        </para>
        <para>
          <see cref="P:C1.C1Report.Field.Format" />プロパティを使用して、数値（通貨とパーセント値を含む）、日付、ブール値、および文字列を書式設定できます。
        </para>
        <para>
          この書式設定の構文は、.NET の
          <see cref="M:System.String.Format(System.String,System.Object)" />メソッドで使用される構文と同じです。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.Align">
      <summary>フィールド内にテキストを配置する方法を取得または設定します。</summary>
      <seealso cref="T:C1.C1Report.FieldAlignEnum" />
      <remarks>
        <para>このプロパティは、フィールド内にテキストを配置する方法を決定します。</para>
        <para>
          画像の配置を制御するには、
          <see cref="P:C1.C1Report.Field.PictureAlign" />プロパティを使用します。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.WordWrap">
      <summary>フィールドのコンテンツがフィールド四角形内で折り返されるかどうかを指定します。</summary>
    </member>
    <member name="P:C1.C1Report.Field.TextDirection">
      <summary>フィールド内のテキストの方向を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.Field.TextAngle">
      <summary>（バーコードを含む）フィールド内のテキスト回転角を取得または設定します。</summary>
      <remarks>一部の出力／エクスポート形式（HTML、RTF、プレーンテキストなど）では、テキストの回転はサポートされていません。</remarks>
    </member>
    <member name="P:C1.C1Report.Field.LineSpacing">
      <summary>
        フィールド内のテキスト行の行間隔をパーセントで取得または設定します。 デフォルトは 100 で、通常の行間隔に対応します。
        <para>
          <see cref="P:C1.C1Report.Field.RTF" />が
          <c>true</c>の場合、このプロパティが無視されることに注意してください。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Report.Field.MarginLeft">
      <summary>フィールドの左端とコンテンツの間隔（ツイップ単位）を取得または設定します。</summary>
      <remarks>このプロパティは、境界線または単色の背景を持つフィールドをレンダリングする場合に、境界線とフィールドコンテンツの間に間隔を追加するために使用できます。</remarks>
    </member>
    <member name="P:C1.C1Report.Field.MarginTop">
      <summary>フィールドの上端とコンテンツの間隔（ツイップ単位）を取得または設定します。</summary>
      <remarks>このプロパティは、境界線または単色の背景を持つフィールドをレンダリングする場合に、境界線とフィールドコンテンツの間に間隔を追加するために使用できます。</remarks>
    </member>
    <member name="P:C1.C1Report.Field.MarginRight">
      <summary>フィールドの右端とコンテンツの間隔（ツイップ単位）を取得または設定します。</summary>
      <remarks>このプロパティは、境界線または単色の背景を持つフィールドをレンダリングする場合に、境界線とフィールドコンテンツの間に間隔を追加するために使用できます。</remarks>
    </member>
    <member name="P:C1.C1Report.Field.MarginBottom">
      <summary>フィールドの下端とコンテンツの間隔（ツイップ単位）を取得または設定します。</summary>
      <remarks>このプロパティは、境界線または単色の背景を持つフィールドをレンダリングする場合に、境界線とフィールドコンテンツの間に間隔を追加するために使用できます。</remarks>
    </member>
    <member name="P:C1.C1Report.Field.BorderStyle">
      <summary>フィールドの境界線のスタイルを取得または設定します。</summary>
      <remarks>
        <para>フィールドの周囲に境界線を描画するには、次のプロパティを設定します。</para>
        <para>
          境界線の色を定義するには、
          <see cref="P:C1.C1Report.Field.BorderColor" />を参照してください。
        </para>
        <para>
          境界線のスタイル（実線、破線など）を定義するには、
          <see cref="P:C1.C1Report.Field.BorderStyle" />を参照してください。
        </para>
        <para>
          境界線の幅を定義する（ツイップ単位）には、
          <see cref="P:C1.C1Report.Field.LineWidth" />を参照してください。
        </para>
        <para>
          テキストと境界線から成るフィールドを作成すると、テキストは、境界線にほぼ接して配置されます。
          <see cref="P:C1.C1Report.Field.MarginLeft" />、
          <see cref="P:C1.C1Report.Field.MarginRight" />、
          <see cref="P:C1.C1Report.Field.MarginTop" />、
          <see cref="P:C1.C1Report.Field.MarginBottom" />の各プロパティを使用して、テキストと境界線の間の距離を制御できます。
        </para>
        <para>
          線の描画方法については、
          <see cref="P:C1.C1Report.Field.LineSlant" />プロパティを参照してください。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.LineWidth">
      <summary>フィールドの境界線または線の幅を取得または設定します。</summary>
      <remarks>
        <para>フィールドの周囲に境界線を描画するには、次のプロパティを設定します。</para>
        <para>
          境界線の色を定義するには、
          <see cref="P:C1.C1Report.Field.BorderColor" />を参照してください。
        </para>
        <para>
          境界線のスタイル（実線、破線など）を定義するには、
          <see cref="P:C1.C1Report.Field.BorderStyle" />を参照してください。
        </para>
        <para>
          境界線の幅を定義する（ツイップ単位）には、
          <see cref="P:C1.C1Report.Field.LineWidth" />を参照してください。
        </para>
        <para>
          線の描画方法については、
          <see cref="P:C1.C1Report.Field.LineSlant" />プロパティを参照してください。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.BorderColor">
      <summary>フィールドの境界線の色を取得または設定します。</summary>
      <seealso cref="P:C1.C1Report.Field.BorderStyle" />
      <remarks>
        <para>フィールドの周囲に境界線を描画するには、次のプロパティを設定します。</para>
        <para>
          境界線の色を定義するには、
          <see cref="P:C1.C1Report.Field.BorderColor" />を参照してください。
        </para>
        <para>
          境界線のスタイル（実線、破線など）を定義するには、
          <see cref="P:C1.C1Report.Field.BorderStyle" />を参照してください。
        </para>
        <para>
          境界線の幅を定義する（ツイップ単位）には、
          <see cref="P:C1.C1Report.Field.LineWidth" />を参照してください。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.LineSlant">
      <summary>フィールドを横切る線（フィールドを囲むボックスではなく）がレンダリングされるかどうかを指定します。</summary>
      <seealso cref="T:C1.C1Report.LineSlantEnum" />
      <remarks>
        線の色、スタイル、および太さは、
        <see cref="P:C1.C1Report.Field.BorderColor" />、
        <see cref="P:C1.C1Report.Field.BorderStyle" />、
        <see cref="P:C1.C1Report.Field.LineWidth" />の各プロパティによって決定されます。
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.Picture">
      <summary>フィールドに表示する画像を取得または設定します。</summary>
      <remarks>
        <para>このプロパティは、次の３種類のオブジェクトに設定できます。</para>
        <para>
          １）通常の .NET
          <see cref="T:System.Drawing.Image" />オブジェクト。
        </para>
        <para>２）画像のファイル名または URL を含む文字列。</para>
        <para>３）レポートデータソース内の画像フィールドの名前を含む文字列。</para>
        <para>１と２は、ロゴなどの非連結画像を作成するために使用されます。これらの画像は、レポートデータに依存しません。</para>
        <para>３は、製品や従業員の写真などの連結画像を作成するために使用されます。これらは、レポートデータと一緒に格納される画像です。</para>
      </remarks>
      <seealso cref="P:C1.C1Report.Field.PictureAlign" />
      <seealso cref="P:C1.C1Report.Field.PictureScale" />
    </member>
    <member name="P:C1.C1Report.Field.PictureAlign">
      <summary>フィールド画像が配置される方法を取得または設定します。</summary>
      <seealso cref="P:C1.C1Report.Field.Picture" />
      <seealso cref="P:C1.C1Report.Field.PictureScale" />
      <seealso cref="T:C1.C1Report.PictureAlignEnum" />
    </member>
    <member name="P:C1.C1Report.Field.PictureScale">
      <summary>画像がフィールド領域に合わせて拡大縮小される方法を取得または設定します。</summary>
      <remarks>
        <para>このプロパティの設定に基づいて、画像はクリップ、引き伸ばし、拡大縮小（画像の縦横比を保持）、並べて表示、または非表示にされます。</para>
        <para>
          <b>PictureScale</b>は、
          <see cref="P:C1.C1Report.Field.PictureAlign" />プロパティと併せて機能し、画像の拡大縮小と配置を個別に制御できます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Field.CheckBox">
      <summary>フィールドがチェックボックスとして表示されるかどうかを指定します。</summary>
      <remarks>このプロパティを使用すると、ブール値をプレーンテキストではなくグラフィカルに表示できます。</remarks>
    </member>
    <member name="P:C1.C1Report.Field.RTF">
      <summary>{ } で囲まれた文字列を RTF としてレンダリングするかどうかを指定します。</summary>
      <remarks>このプロパティを true に設定すると、{ } で囲まれたテキストを含むフィールドが RTF としてレンダリングされます。これにより、フィールド内に複雑な書式設定を追加できます。</remarks>
    </member>
    <member name="P:C1.C1Report.Field.BarCode">
      <summary>フィールドをバーコード形式でレンダリングできます。</summary>
      <seealso cref="T:C1.C1Report.BarCodeEnum" />
    </member>
    <member name="P:C1.C1Report.Field.LinkTarget">
      <summary>フィールドがクリックされたときにアクセスされる URL に評価される式を取得または設定します。</summary>
      <remarks>
        <para>空でない場合は、URL に評価される式にする必要があります。レポートが生成された後で、フィールドをクリックすると、レポートビューアがその URL にアクセスします。レポートビューアには、Web ブラウザ（HTML レポート）、Adobe Acrobat（PDF レポート）、または他のビューアアプリケーションを使用できます。</para>
        <para>
          ハイパーリンクをサポートしていないレポートビューアもあります。たとえば、.NET に付属する
          <b>PrintPreview</b>コントロールはハイパーリンクをサポートしていません。
        </para>
        <para>
          <see cref="P:C1.C1Report.Field.Text" />プロパティと
          <see cref="P:C1.C1Report.Field.Picture" />プロパティのコンテンツに基づいて、フィールドは通常どおりに表示されます。
        </para>
        <para>
          <see cref="P:C1.C1Report.Field.LinkTarget" />式は、
          <see cref="P:C1.C1Report.Field.Calculated" />プロパティ（表示テキストにだけ適用）の設定に関係なく、常に評価されます。これにより、
          <see cref="P:C1.C1Report.Field.LinkTarget" />をデータソース内のフィールドに連結できます。次に例を示します。
        </para>
      </remarks>
      <example>
        次のコードは、２つのハイパーリンクフィールドを作成します。１つは静的な値を含み、もう１つはデータベース値に基づいています。
        <code>
          <![CDATA[
          // 静的リンクを設定します
          Field f = c1r.Fields["companyInfoLink"];
          f.Calculated = false;
          f.Text = "click here for more info on our company";
          f.LinkTarget = "http://myrealty.com";
          
          // データ連結リンクを設定します
          Field f = c1r.Fields["propertyInfoLink"];
          f.Calculated = false;
          f.Text = "click here for more info on this property";
          f.LinkTarget = "\"http://myrealty.com/moreinfo?id=\" &amp; propertyID";
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.C1Report.Field.Subreport">
      <summary>
        フィールド内にレンダリングされる別のレポート（
        <i>サブレポート</i>）への参照を取得または設定します。
      </summary>
      <remarks>
        <para>サブレポートは、別のレポートに挿入されるレポートです。サブレポートは、いくつかのレポートを１つのレポートにまとめる場合に便利です。たとえば、いくつかのサブレポートを１つのレポートに組み込んだメインレポートを作成できます。また、メインレポートを使って詳細情報を表示し、サブレポートを使って各グループの先頭にサマリーデータを表示できます。</para>
        <para>実用的な例として、コントロールに付属する NWIND.XML サンプルの "Sales By Category" レポートや "Sales By Year" レポートを参照してください。</para>
        <para>
          フィールドをサブレポートとして定義するには、フィールドの
          <see cref="P:C1.C1Report.Field.Subreport" />プロパティにサブレポートコントロールを割り当てます。
        </para>
        <para>
          次に、サブレポートフィールドの
          <see cref="P:C1.C1Report.Field.Text" />プロパティ（これは、Microsoft Access サブレポートの
          <b>LinkChildFields/LinkMasterFields</b>プロパティの設定と同じ）を使用して、サブレポートをメインレポートにリンクします。サブレポートフィールドの
          <b>Text</b>プロパティは、フィルタとして使用されます。このプロパティは、メインレポートの現在のレコードに基づいて、サブレポートのレンダリングに使用されるソースレコードセット内のレコードを指定します。
        </para>
        <para>
          メインレポートがレンダリングされ、サブレポートフィールドに達すると、
          <b>Text</b>式が評価され、その結果がサブレポートのフィルタ条件として使用されます。
        </para>
        <para>リンク式の作成は難しくありませんが、引用符を含む文字列を作成する際に、これらの内部の引用符を二重（""）にする必要があるため、多少複雑になります。</para>
        <para>
          レポートデザイナを使ってレポートを作成する場合、コードでリンク式を作成する必要はありません。代わりに、サブレポートフィールドを右クリックし、
          <b>［Link Subreport］</b>メニューを選択します。ダイアログボックスが表示されるので、ここでマスターフィールドと詳細フィールドを選択できます。［OK］をクリックすると、レポートデザイナによって自動的にリンク式が作成され、サブレポートフィールドの
          <b>Text</b>プロパティに割り当てられます。
        </para>
        <para>
          サブレポートフィールドの
          <see cref="P:C1.C1Report.Field.CanGrow" />プロパティは、通常、true に設定されます。これにより、すべてのレコードを表示できるようにサブレポートフィールドを広げることができます。
        </para>
        <para>サブレポートに別のサブレポートを入れることもできます。ネストできるレポートの深さに決めれた制限はありません。ただし、レポートの循環参照は指定できません。つまり、レポートはサブレポートを介して自分自身を参照することはできません。</para>
      </remarks>
      <example>
        <code>
          <![CDATA[// サブレポートをロードし、それをメインレポートのフィールドに割り当てます
          string sSub = "Sales By Category Subreport";
          c1Sub.Load("NWIND.XML", sSub);
          c1rMain.Fields[sSub].Subreport = c1Sub;
          
          // メインレポートとサブレポートの接続を設定します
          c1rMain.Fields[sSub].Calculated = true;
          c1rMain.Fields[sSub].Text = "\"CategoryName = '\" &amp; [CategoryName] &amp; \"'\"";
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.C1Report.Field.LinkValue">
      <summary>LinkTarget 式の値を返します。</summary>
    </member>
    <member name="T:C1.C1Report.FieldCollection">
      <summary>
        FieldCollection クラスは、
        <see cref="T:C1.C1Report.Field" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Report.FieldCollection.Add(System.String,System.String,System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Fields" />コレクションにフィールドを追加します。
      </summary>
      <param name="name">新しいフィールドの名前を含みます。フィールドには統一的な名前付け規則を使用し、レポートフィールドとデータベースフィールドの名前は重複しないようにしてください。同じ名前を使用しても不正にはなりませんが、VBScript 式で同じフィールド名が使用されると、予期しない結果になる可能性があります。</param>
      <param name="text">
        新しいフィールドの
        <see cref="P:C1.C1Report.Field.Text" />プロパティの値を含みます。この値は、フィールドの
        <see cref="P:C1.C1Report.Field.Calculated" />プロパティの設定に基づいて、リテラルまたは VBScript 式として処理されます。デフォルトでは、
        <see cref="P:C1.C1Report.Field.Calculated" />は false に設定されており、テキストはそのままレンダリングされます。
      </param>
      <param name="left">このフィールドを含むセクションに対する新しいフィールドの左端の座標（ツイップ単位）。</param>
      <param name="top">このフィールドを含むセクションに対する新しいフィールドの上端の座標（ツイップ単位）。</param>
      <param name="width">新しいフィールドの幅（ツイップ単位）。</param>
      <param name="height">新しいフィールドの高さ（ツイップ単位）。</param>
      <returns>新しく追加されたフィールドへの参照。</returns>
      <remarks>
        <para>
          セクションの
          <see cref="P:C1.C1Report.Section.Fields" />コレクションにフィールドを追加した場合、新しいフィールドは、自動的にそのセクションに割り当てられます。
        </para>
        <para>
          コントロールの
          <see cref="P:C1.C1Report.C1Report.Fields" />コレクションにフィールドを追加した場合、新しいフィールドは、どのセクションにも割り当てられません。この場合は、フィールドの
          <see cref="P:C1.C1Report.Field.Section" />プロパティを設定する必要があります。そうしないと、レポートにレンダリングされません。
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.FieldCollection.Add(System.String,System.String,System.Drawing.Rectangle)">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Fields" />コレクションにフィールドを追加します。
      </summary>
      <param name="name">新しいフィールドの名前を含みます。フィールドには統一的な名前付け規則を使用し、レポートフィールドとデータベースフィールドの名前は重複しないようにしてください。同じ名前を使用しても不正にはなりませんが、VBScript 式で同じフィールド名が使用されると、予期しない結果になる可能性があります。</param>
      <param name="text">
        新しいフィールドの
        <see cref="P:C1.C1Report.Field.Text" />プロパティの値を含みます。この値は、フィールドの
        <see cref="P:C1.C1Report.Field.Calculated" />プロパティの設定に基づいて、リテラルまたは VBScript 式として処理されます。デフォルトでは、
        <see cref="P:C1.C1Report.Field.Calculated" />は false に設定されており、テキストはそのままレンダリングされます。
      </param>
      <param name="rc">このフィールドを含むセクションに対するフィールドの位置（ツイップ単位）を定義します。</param>
      <returns>新しく追加されたフィールドへの参照。</returns>
      <remarks>
        <para>
          セクションの
          <see cref="P:C1.C1Report.Section.Fields" />コレクションにフィールドを追加した場合、新しいフィールドは、自動的にそのセクションに割り当てられます。
        </para>
        <para>
          コントロールの
          <see cref="P:C1.C1Report.C1Report.Fields" />コレクションにフィールドを追加した場合、新しいフィールドは、どのセクションにも割り当てられません。この場合は、フィールドの
          <see cref="P:C1.C1Report.Field.Section" />プロパティを設定する必要があります。そうしないと、レポートにレンダリングされません。
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.FieldCollection.Add(C1.C1Report.Field)">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Fields" />コレクションにフィールドまたはフィールドのクローンを追加します。
      </summary>
      <param name="field">
        コレクションに追加する
        <see cref="T:C1.C1Report.Field" />オブジェクト。
      </param>
      <returns>新しく追加されたフィールドへの参照。</returns>
      <remarks>どのレポートにも属さないフィールドの場合は、それがコレクションに追加されます。フィールドがすでにレポートに属している場合は、そのクローンが作成されてコレクションに追加されます。</remarks>
    </member>
    <member name="M:C1.C1Report.FieldCollection.RemoveAt(System.Int32)">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Fields" />コレクションからフィールドを削除します。
      </summary>
      <param name="index">削除するフィールドを指定します。</param>
    </member>
    <member name="M:C1.C1Report.FieldCollection.Remove(System.Int32)">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Fields" />コレクションからフィールドを削除します。
      </summary>
      <param name="index">削除するフィールドを指定します。</param>
    </member>
    <member name="M:C1.C1Report.FieldCollection.Remove(System.String)">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Fields" />コレクションからフィールドを削除します。
      </summary>
      <param name="name">削除するフィールドの名前。</param>
    </member>
    <member name="M:C1.C1Report.FieldCollection.Remove(C1.C1Report.Field)">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Fields" />コレクションからフィールドを削除します。
      </summary>
      <param name="f">削除されるフィールド。</param>
    </member>
    <member name="M:C1.C1Report.FieldCollection.Contains(System.String)">
      <summary>コレクションに特定のフィールドが含まれるかどうかを判定します。</summary>
      <param name="name">フィールドの名前。</param>
      <returns>コレクションに指定した名前のフィールドが含まれる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.C1Report.FieldCollection.Contains(C1.C1Report.Field)">
      <summary>コレクションに特定のフィールドが含まれるかどうかを判定します。</summary>
      <param name="f">
        <see cref="T:C1.C1Report.Field" />オブジェクトへの参照。
      </param>
      <returns>コレクションに指定したフィールドが含まれる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.C1Report.FieldCollection.CopyTo(C1.C1Report.Field[],System.Int32)">
      <summary>
        コレクションの要素を特定の配列インデックス位置から順に
        <see cref="T:System.Array" />にコピーします。
      </summary>
      <param name="array">
        コレクションからコピーされる要素のコピー先の１次元
        <see cref="T:System.Array" />。配列のインデックスは０から始める必要があります。
      </param>
      <param name="index">コピーを開始する位置の０から始まる配列のインデックス。</param>
    </member>
    <member name="P:C1.C1Report.FieldCollection.Item(System.Int32)">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Fields" />コレクションから１つのフィールドを返します。
      </summary>
      <remarks>
        index パラメータには、０～
        <see cref="P:C1.C1Report.FieldCollection.Count" />-1 の整数を指定できます。
      </remarks>
    </member>
    <member name="P:C1.C1Report.FieldCollection.Item(System.String)">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Fields" />コレクションから１つのフィールドを返します。
      </summary>
      <remarks>name パラメータには、フィールド名を含む文字列を指定できます。</remarks>
    </member>
    <member name="P:C1.C1Report.FieldCollection.Count">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Fields" />コレクション内のフィールドの数を返します。
      </summary>
    </member>
    <member name="T:C1.C1Report.SortEnum">
      <summary>グループのソート方法を指定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.Group" />クラスの
        <see cref="P:C1.C1Report.Group.Sort" />プロパティの値を設定します。
      </remarks>
    </member>
    <member name="F:C1.C1Report.SortEnum.NoSort">
      <summary>このグループのレコードはソートしません。</summary>
    </member>
    <member name="F:C1.C1Report.SortEnum.Ascending">
      <summary>レコードを昇順にソートします。</summary>
    </member>
    <member name="F:C1.C1Report.SortEnum.Descending">
      <summary>レコードを降順にソートします。</summary>
    </member>
    <member name="T:C1.C1Report.KeepTogetherEnum">
      <summary>グループが１ページに収められるかどうかを指定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.Group" />クラスと
        <see cref="T:C1.C1Report.Section" />クラスの
        <see cref="P:C1.C1Report.Group.KeepTogether" />プロパティと
        <see cref="P:C1.C1Report.Section.KeepTogether" />プロパティの値を設定します。
      </remarks>
    </member>
    <member name="F:C1.C1Report.KeepTogetherEnum.KeepNothing">
      <summary>グループをまとめません。</summary>
    </member>
    <member name="F:C1.C1Report.KeepTogetherEnum.KeepWholeGroup">
      <summary>グループヘッダー、詳細、およびフッターを１ページに収めます。</summary>
    </member>
    <member name="F:C1.C1Report.KeepTogetherEnum.KeepFirstDetail">
      <summary>グループヘッダーと最初の詳細セクションを１ページに収めます。</summary>
    </member>
    <member name="T:C1.C1Report.Group">
      <summary>レポートデータをソートおよびグループ化するために使用されるオブジェクト。</summary>
      <remarks>
        各
        <b>Group</b>には、グループの集計情報の表示に使用できるヘッダーセクションとフッターセクションがあります。
      </remarks>
    </member>
    <member name="M:C1.C1Report.Group.Move(System.Int32,System.Boolean)">
      <summary>
        グループを
        <see cref="P:C1.C1Report.C1Report.Groups" />コレクション内の新しい位置に移動します。オプションで、
        <see cref="P:C1.C1Report.C1Report.Sections" />と
        <see cref="P:C1.C1Report.C1Report.Fields" />も調整できます。
      </summary>
      <param name="newIndex">
        グループの新しい位置（
        <see cref="P:C1.C1Report.C1Report.Groups" />コレクションへのインデックス）を含みます。
      </param>
      <param name="adjustSections">グループだけを移動するか、グループのヘッダーセクションとフッターセクション、およびそれらのセクション内のすべてのフィールドも一緒に移動するかを指定します。</param>
      <remarks>このメソッドは、デザイナアプリケーションで、グループ化の順番をユーザーが変更できるようにする場合に有効です。</remarks>
    </member>
    <member name="P:C1.C1Report.Group.Name">
      <summary>グループ名を取得または設定します。</summary>
      <remarks>
        グループ名は、コントロールの
        <see cref="P:C1.C1Report.C1Report.Groups" />コレクションへのインデックスとして使用できます。
      </remarks>
    </member>
    <member name="P:C1.C1Report.Group.GroupBy">
      <summary>レコードのグループ化に使用される式を取得または設定します。</summary>
      <remarks>
        このプロパティには、ソースレコードセット内の各レコードを対象に評価される
        <b>VBScript</b>式が含まれます。この式の値が変化するたびに、新しいグループが開始されます。
      </remarks>
    </member>
    <member name="P:C1.C1Report.Group.Sort">
      <summary>グループのソート方法を取得または設定します。</summary>
      <remarks>
        <para>
          指定されたソート方法は、
          <see cref="P:C1.C1Report.Group.GroupBy" />プロパティのコンテンツに適用されます。たとえば、
          <see cref="P:C1.C1Report.Group.GroupBy" />に「FirstName」という式が含まれており、
          <see cref="P:C1.C1Report.Group.Sort" />が Ascending に設定されている場合、そのグループは、データソース内の FirstName 列のコンテンツに基づいて昇順にソートされます。
        </para>
        <para>
          ソートは、C1Report ではなく、データソース自体で実行されることに注意してください。このため、ソートは、常に計算式ではなく列名に基づいて実行されます。
          <see cref="P:C1.C1Report.Group.GroupBy" />プロパティに計算式が含まれる場合は、その式から最初の列名が抽出され、その値に基づいてソートが実行されます。たとえば、
          <see cref="P:C1.C1Report.Group.GroupBy" />が「Left(FirstName, 3)」に設定されている場合は、FirstName の最初の３文字ではなく、FirstName 列に基づいてソートが実行されます。
        </para>
        <para>
          これが問題になる場合もあります。たとえば、日付の一部（年、月、四半期など）に基づいてソートする必要がある場合です。このような場合は、データソースに計算列を追加し（データの取得に使用する SQL を変更する）、
          <see cref="P:C1.C1Report.Group.GroupBy" />プロパティをその計算列の名前に設定することをお勧めします。
        </para>
      </remarks>
      <example>
        次のコードは、データソースに HireQuarter 列を追加する SQL 文を使用し、この新しい列に基づいてグループをソートします。レポートには、従業員が四半期ごとの雇用時期に基づいてソートして表示されます。
        <code>
          <![CDATA[
          string sql = "SELECT *, DATEPART('q', HireDate) AS HireQuarter " + 
            "FROM Employees"; c1r.DataSource.RecordSource = sql;
          c1r.Groups[0].GroupBy = "HireQuarter";
          c1r.Groups[0].Sort = SortEnum.Ascending;
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.C1Report.Group.KeepTogether">
      <summary>グループが１ページに収められるかどうかを指定します。</summary>
      <seealso cref="T:C1.C1Report.KeepTogetherEnum" />
    </member>
    <member name="P:C1.C1Report.Group.SectionHeader">
      <summary>
        このグループのヘッダーとして使用される
        <see cref="T:C1.C1Report.Section" />を返します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Group.SectionFooter">
      <summary>
        このグループのフッターとして使用される
        <see cref="T:C1.C1Report.Section" />を返します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Group.Tag">
      <summary>呼び出し側のプログラムで必要な追加のデータを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.Group.ParentReport">
      <summary>
        この
        <see cref="T:C1.C1Report.Group" />を含む
        <see cref="T:C1.C1Report.C1Report" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Report.GroupCollection">
      <summary>
        GroupCollection クラスは、
        <see cref="T:C1.C1Report.Group" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Report.GroupCollection.Add(System.String,System.String,C1.C1Report.SortEnum)">
      <summary>
        コレクションに新しい
        <see cref="T:C1.C1Report.Group" />を追加します。新しいグループのヘッダーおよびフッターセクションも追加されます。
      </summary>
      <param name="name">新しいグループの名前を含みます。</param>
      <param name="groupBy">
        新しいグループの
        <see cref="P:C1.C1Report.Group.GroupBy" />プロパティの値を含みます。
      </param>
      <param name="sort">
        新しいグループの
        <see cref="P:C1.C1Report.Group.Sort" />プロパティの値を含みます。
      </param>
      <returns>新しく追加されたグループへの参照。</returns>
      <remarks>レポートにグループが追加されると、自動的に２つの新しいセクション（新しいグループのグループヘッダーセクションとグループフッターセクション）が追加されます。これらの新しいセクションはデフォルトでは表示されません。</remarks>
    </member>
    <member name="M:C1.C1Report.GroupCollection.Remove(System.Int32)">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Groups" />コレクションから
        <see cref="T:C1.C1Report.Group" />を削除し、
        <see cref="P:C1.C1Report.C1Report.Sections" />コレクションからそのヘッダーセクションとフッターセクションも削除します。
      </summary>
      <param name="index">削除するグループを指定します。</param>
    </member>
    <member name="M:C1.C1Report.GroupCollection.Remove(System.String)">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Groups" />コレクションから
        <see cref="T:C1.C1Report.Group" />を削除し、
        <see cref="P:C1.C1Report.C1Report.Sections" />コレクションからそのヘッダーセクションとフッターセクションも削除します。
      </summary>
      <param name="name">削除するグループの名前。</param>
    </member>
    <member name="M:C1.C1Report.GroupCollection.Remove(C1.C1Report.Group)">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Groups" />コレクションから
        <see cref="T:C1.C1Report.Group" />を削除し、
        <see cref="P:C1.C1Report.C1Report.Sections" />コレクションからそのヘッダーセクションとフッターセクションも削除します。
      </summary>
      <param name="group">削除されるグループ。</param>
    </member>
    <member name="M:C1.C1Report.GroupCollection.Contains(System.String)">
      <summary>コレクションに特定のグループが含まれるかどうかを判定します。</summary>
      <param name="name">グループの名前。</param>
      <returns>コレクションに指定した名前のグループが含まれる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.C1Report.GroupCollection.Contains(C1.C1Report.Group)">
      <summary>コレクションに特定のグループが含まれるかどうかを判定します。</summary>
      <param name="g">
        <see cref="T:C1.C1Report.Group" />オブジェクトへの参照。
      </param>
      <returns>コレクションに指定したフィールドが含まれる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.C1Report.GroupCollection.CopyTo(C1.C1Report.Group[],System.Int32)">
      <summary>
        コレクションの要素を特定の配列インデックス位置から順に
        <see cref="T:System.Array" />にコピーします。
      </summary>
      <param name="array">
        コレクションからコピーされる要素のコピー先の１次元
        <see cref="T:System.Array" />。配列のインデックスは０から始める必要があります。
      </param>
      <param name="index">コピーを開始する位置の０から始まる配列のインデックス。</param>
    </member>
    <member name="P:C1.C1Report.GroupCollection.Item(System.Int32)">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Groups" />コレクションから１つのグループを返します。
      </summary>
      <remarks>
        index パラメータには、０～
        <see cref="P:C1.C1Report.GroupCollection.Count" />-1 の整数を指定できます。
      </remarks>
    </member>
    <member name="P:C1.C1Report.GroupCollection.Item(System.String)">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Groups" />コレクションから１つのグループを返します。
      </summary>
      <remarks>name パラメータには、グループ名を含む文字列を指定できます。</remarks>
    </member>
    <member name="P:C1.C1Report.GroupCollection.Count">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Groups" />コレクション内のグループの数を返します。
      </summary>
    </member>
    <member name="T:C1.C1Report.ColumnLayoutEnum">
      <summary>段のレイアウト（縦長横並びまたは横長縦並び）を指定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.Layout" />クラスの
        <see cref="P:C1.C1Report.Layout.ColumnLayout" />プロパティの値を設定します。
      </remarks>
    </member>
    <member name="F:C1.C1Report.ColumnLayoutEnum.Down">
      <summary>縦長の段を横に並べます。</summary>
    </member>
    <member name="F:C1.C1Report.ColumnLayoutEnum.Across">
      <summary>横長の段を縦に並べます。</summary>
    </member>
    <member name="F:C1.C1Report.ColumnLayoutEnum.Labels">
      <summary>レポートデザイナで、デザインサーフェスのラベル間隔は無視、ヘッダー／フッターセクションは非表示、グループ化ボタンは無効、フィールドが移動またはドラッグされたときのセクションの自動サイズ変更は無効になります。</summary>
    </member>
    <member name="T:C1.C1Report.Layout">
      <summary>ページにレポートをレンダリングする方法を制御します。</summary>
    </member>
    <member name="M:C1.C1Report.Layout.ToString">
      <summary>デザイナに表示されるレイアウトの説明を返します。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Report.Layout.UpdateFromPrintDoc">
      <summary>
        <see cref="T:C1.C1Report.PrintDoc" />オブジェクトの情報を
        <see cref="T:C1.C1Report.Layout" />オブジェクトにコピーします。
      </summary>
      <returns>
        <see cref="T:C1.C1Report.Layout" />オブジェクトが変更された場合は true。
      </returns>
      <remarks>
        これは、
        <see cref="T:C1.C1Report.Layout" />オブジェクトの代わりに
        <see cref="T:System.Drawing.Printing.PageSettings" />オブジェクトを変更する場合に便利です。
      </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.Width">
      <summary>レポートの詳細セクションの幅を取得または設定します（ツイップ単位）。</summary>
      <remarks>
        <para>このプロパティは、レポートの詳細セクションの幅を決定します。</para>
        <para>
          段組みレポートのヘッダーセクションとフッターセクションは、すべての段（列）にまたがっています。したがって、レポートの実際の幅は、
          <see cref="P:C1.C1Report.Layout.Width" />×
          <see cref="P:C1.C1Report.Layout.Columns" />になります。
        </para>
        <para>
          たとえば、詳細セクションの幅が１インチの２段組みレポートの場合は、
          <b>Width</b>= 1440 になり、全体の幅は 2 × 1440 = 2880 になります。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.MarginLeft">
      <summary>各ページの左マージンを取得または設定します（ツイップ単位）。</summary>
      <remarks>
        マージンは、用紙の端からツイップ単位で測定されます。用紙のサイズと方向は、
        <see cref="P:C1.C1Report.Layout.PaperSize" />プロパティと
        <see cref="P:C1.C1Report.Layout.Orientation" />プロパティを使って選択できます。
      </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.MarginRight">
      <summary>各ページの右マージンを取得または設定します（ツイップ単位）。</summary>
      <remarks>
        マージンは、用紙の端からツイップ単位で測定されます。用紙のサイズと方向は、
        <see cref="P:C1.C1Report.Layout.PaperSize" />プロパティと
        <see cref="P:C1.C1Report.Layout.Orientation" />プロパティを使って選択できます。
      </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.MarginTop">
      <summary>各ページの上マージンを取得または設定します（ツイップ単位）。</summary>
      <remarks>
        マージンは、用紙の端からツイップ単位で測定されます。用紙のサイズと方向は、
        <see cref="P:C1.C1Report.Layout.PaperSize" />プロパティと
        <see cref="P:C1.C1Report.Layout.Orientation" />プロパティを使って選択できます。
      </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.MarginBottom">
      <summary>各ページの下マージンを取得または設定します（ツイップ単位）。</summary>
      <remarks>
        マージンは、用紙の端からツイップ単位で測定されます。用紙のサイズと方向は、
        <see cref="P:C1.C1Report.Layout.PaperSize" />プロパティと
        <see cref="P:C1.C1Report.Layout.Orientation" />プロパティを使って選択できます。
      </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.Columns">
      <summary>詳細の段（列）の数を取得または設定します。</summary>
      <remarks>
        <para>このプロパティを使用して、段組みレポートを作成します。</para>
        <para>
          段組みレポートのヘッダーセクションとフッターセクションの幅は、レポートの幅全体になります。詳細セクションだけが複数の段にレンダリングされます。
          <see cref="P:C1.C1Report.Layout.Width" />プロパティを使用して、各段の幅を指定します。また、
          <see cref="P:C1.C1Report.Layout.ColumnLayout" />プロパティを使用して、ページに段を縦長横並びに置くか、横長縦並びに置くかを指定します。
        </para>
        <para>段組みレポートは、宛名ラベルなどの印刷済みの段組みフォームにレポートを印刷する場合に便利です。また、詳細情報を横に詰めてページに表示するようなコンパクトなレポートを作成する場合にも便利です。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.ColumnLayout">
      <summary>段のレイアウト（縦長横並びまたは横長縦並び）を取得または設定します。</summary>
      <seealso cref="T:C1.C1Report.ColumnLayoutEnum" />
    </member>
    <member name="P:C1.C1Report.Layout.PaperSize">
      <summary>レポートの用紙サイズを取得または設定します。</summary>
      <seealso cref="T:System.Drawing.Printing.PaperKind" />
    </member>
    <member name="P:C1.C1Report.Layout.CustomWidth">
      <summary>レポートの独自の幅を取得または設定します（ツイップ単位）。</summary>
      <remarks>
        <para>
          独自の用紙サイズでレポートを作成するには、
          <see cref="P:C1.C1Report.Layout.PaperSize" />プロパティを
          <see cref="F:System.Drawing.Printing.PaperKind.Custom" />に設定し、
          <see cref="P:C1.C1Report.Layout.CustomWidth" />プロパティと
          <see cref="P:C1.C1Report.Layout.CustomHeight" />プロパティを用紙のサイズ（ツイップ単位）に設定します。
        </para>
        <para>
          <see cref="P:C1.C1Report.Layout.PaperSize" />が
          <see cref="F:System.Drawing.Printing.PaperKind.Custom" />以外の値に設定されている場合、用紙サイズはその設定によって決定されます。この場合、
          <see cref="P:C1.C1Report.Layout.CustomWidth" />プロパティと
          <see cref="P:C1.C1Report.Layout.CustomHeight" />プロパティは使用されません。
        </para>
        <para>
          <see cref="P:C1.C1Report.Layout.PaperSize" />が
          <see cref="F:System.Drawing.Printing.PaperKind.Custom" />に設定され、
          <see cref="P:C1.C1Report.Layout.CustomWidth" />プロパティと
          <see cref="P:C1.C1Report.Layout.CustomHeight" />プロパティが０に設定されている場合は、プリンタのデフォルトの用紙サイズが使用されます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.CustomHeight">
      <summary>レポートの独自の高さを取得または設定します（ツイップ単位）。</summary>
      <remarks>
        <para>
          独自の用紙サイズでレポートを作成するには、
          <see cref="P:C1.C1Report.Layout.PaperSize" />プロパティを
          <see cref="F:System.Drawing.Printing.PaperKind.Custom" />に設定し、
          <see cref="P:C1.C1Report.Layout.CustomWidth" />プロパティと
          <see cref="P:C1.C1Report.Layout.CustomHeight" />プロパティを用紙のサイズ（ツイップ単位）に設定します。
        </para>
        <para>
          <see cref="P:C1.C1Report.Layout.PaperSize" />が
          <see cref="F:System.Drawing.Printing.PaperKind.Custom" />以外の値に設定されている場合、用紙サイズはその設定によって決定されます。この場合、
          <see cref="P:C1.C1Report.Layout.CustomWidth" />プロパティと
          <see cref="P:C1.C1Report.Layout.CustomHeight" />プロパティは使用されません。
        </para>
        <para>
          <see cref="P:C1.C1Report.Layout.PaperSize" />が
          <see cref="F:System.Drawing.Printing.PaperKind.Custom" />に設定され、
          <see cref="P:C1.C1Report.Layout.CustomWidth" />プロパティと
          <see cref="P:C1.C1Report.Layout.CustomHeight" />プロパティが０に設定されている場合は、プリンタのデフォルトの用紙サイズが使用されます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.Orientation">
      <summary>用紙の方向を取得または設定します。</summary>
      <seealso cref="T:C1.C1Report.OrientationEnum" />
    </member>
    <member name="P:C1.C1Report.Layout.PageHeader">
      <summary>どのページにページヘッダーセクションを表示するかを決定する値を取得または設定します。</summary>
      <remarks>
        <para>
          <b>PageHeader</b>プロパティと
          <b>PageFooter</b>プロパティを使用して、レポートのページヘッダーまたはページフッターをレポートヘッダーまたはレポートフッターと同じページに出力するかどうかを指定します。
        </para>
        <para>たとえば、レポートヘッダーを表示にする場合は、レポートの最初のページには、ページ番号を含むページヘッダーを出力しないようにできます。</para>
      </remarks>
      <seealso cref="T:C1.C1Report.HdrFtrEnum" />
    </member>
    <member name="P:C1.C1Report.Layout.PageFooter">
      <summary>どのページにページフッターセクションを表示するかを決定する値を取得または設定します。</summary>
      <seealso cref="T:C1.C1Report.HdrFtrEnum" />
    </member>
    <member name="P:C1.C1Report.Layout.Picture">
      <summary>レポート本体の背景画像を取得または設定します。</summary>
      <remarks>
        <para>
          <see cref="P:C1.C1Report.Layout.Picture" />プロパティを使用して、レポートの背景（透かし模様）として表示されるビットマップなどの画像タイプを指定します。
        </para>
        <para>
          <see cref="P:C1.C1Report.Layout.PictureShow" />、
          <see cref="P:C1.C1Report.Layout.PictureAlign" />、
          <see cref="P:C1.C1Report.Layout.PictureScale" />の各プロパティを使用して、画像を表示するページと画像の配置方法を指定します。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.PictureAlign">
      <summary>背景画像の配置方法を取得または設定します。</summary>
      <remarks>
        背景画像とその表示方法を選択するには、
        <see cref="P:C1.C1Report.Layout.Picture" />プロパティと
        <see cref="P:C1.C1Report.Layout.PictureShow" />プロパティを使用します。
      </remarks>
    </member>
    <member name="P:C1.C1Report.Layout.PictureScale">
      <summary>背景画像の配置方法を取得または設定します。</summary>
      <para>This property determines how background images are scaled to fit the page. Depending on the setting of this property, images may be clipped, stretched, scaled (which preserves the image's aspect ratio), tiled, or hidden.</para>
      <para>
        This property works with the
        <see cref="P:C1.C1Report.Layout.PictureAlign" />property so you can control image scaling and alignment independently.
      </para>
    </member>
    <member name="P:C1.C1Report.Layout.PictureShow">
      <summary>背景画像が表示される場所を取得または設定します。</summary>
      <remarks>
        背景画像とその配置方法を選択するには、
        <see cref="P:C1.C1Report.Layout.Picture" />、
        <see cref="P:C1.C1Report.Layout.PictureAlign" />、
        <see cref="P:C1.C1Report.Layout.PictureScale" />の各プロパティを使用します。
      </remarks>
      <seealso cref="T:C1.C1Report.PictureShowEnum" />
    </member>
    <member name="P:C1.C1Report.Layout.LabelSpacingX">
      <summary>デザインサーフェスで水平ラベル間隔を無視するためにデザイナによって使用されます。</summary>
    </member>
    <member name="P:C1.C1Report.Layout.LabelSpacingY">
      <summary>デザインサーフェスで垂直ラベル間隔を無視するためにデザイナによって使用されます。</summary>
    </member>
    <member name="P:C1.C1Report.Layout.OverlayReplacements">
      <summary>
        レポート本体で置換／生成される辞書（
        <see cref="T:System.Collections.IDictionary" />）を取得します。
      </summary>
      <remarks>
        <para>このプロパティはエクスポートフィルタの実装時に役に立ちます。</para>
        <para>ページ数やグループページ数を含むレポートは、レポート本体に特別なタグを保存します。レポート描画が終了したとき、これらのタグは実際のページ数と置き換えられる必要があります。フィルタはこの辞書を使ってタグと置き換えられる値のリストを取得することができます。辞書内のキーのペアは、タグとそれらが置き換えられる値を格納しています。</para>
      </remarks>
      <example>
        次のコードは、テキストフィルタの実装の一部を示しています。
        <b>EndReport</b>メソッドでは、オーバーレイ置換辞書を取得して、
        <b>ReplaceInStream</b>メソッドを呼び出してストリームの各行をスキャンしてキーを対応する値に置き換えます。例えば、総ページ数は "#pages#" のようなキーで表され、ストリーム中のすべてのキーは実際の総ページ数に置き換えられます。
        <code>
          <![CDATA[
          public class MyTextFilter : ExportFilter
          {
            // ...
            
            override public void EndReport()
            {
              // 出力ストリームを閉じます
              Layout layout = _ownerReport.GetLayout();
              ReplaceInStream(_exportStream, layout.OverlayReplacements);
              _exportStream.Close();
            }
          }
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.C1Report.Layout.ParentReport">
      <summary>
        この
        <see cref="T:C1.C1Report.Layout" />オブジェクトを含む
        <see cref="T:C1.C1Report.C1Report" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Report.ReportParameterCollection">
      <summary>
        <see cref="T:C1.C1Report.ReportParameter" />オブジェクトのコレクションを表します。
      </summary>
      <remarks>
        このコレクションは、
        <see cref="E:C1.C1Report.C1Report.InitializeParametersDialog" />イベントでパラメータとして利用可能であり、イベントハンドリング中にレポートパラメータ値を確認したり変更したりできます。
      </remarks>
    </member>
    <member name="P:C1.C1Report.ReportParameterCollection.Item(System.String)">
      <summary>名前を指定してレポートパラメータを取得します。</summary>
    </member>
    <member name="P:C1.C1Report.ReportParameterCollection.Item(System.Int32)">
      <summary>インデックスを指定してレポートパラメータを取得します。</summary>
    </member>
    <member name="P:C1.C1Report.ReportParameterCollection.Count">
      <summary>コレクション内のオブジェクト数を取得します。</summary>
    </member>
    <member name="T:C1.C1Report.ReportParameter">
      <summary>パラメータ化されたレポートデータソースのパラメータを表します。</summary>
    </member>
    <member name="P:C1.C1Report.ReportParameter.Name">
      <summary>パラメータ名を取得します。</summary>
    </member>
    <member name="P:C1.C1Report.ReportParameter.Type">
      <summary>パラメータ種別を取得します。</summary>
    </member>
    <member name="P:C1.C1Report.ReportParameter.Value">
      <summary>パラメータ値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Report.IC1ReportExternalRecordset">
      <summary>
        個別のアセンブリに常在する外部レポートセットを表します。
        <para>
          アセンブリがこのインタフェースをサポートするタイプを含んでいる場合、 そのアセンブリとタイプはレポートデザイナ内でレポートのデータソースとして選択できます。 そのタイプへの参照とレコードセット初期化パラメータ （
          <see cref="P:C1.C1Report.IC1ReportExternalRecordset.Params" />を参照）は、 XML レポート定義ファイルに保存されます。レポートがロードされると、 レコードセットオブジェクトは保存済みの情報に基づいて作成され、 レポートのデータソースとして使用されます。
        </para>
      </summary>
    </member>
    <member name="M:C1.C1Report.IC1ReportExternalRecordset.EditParams">
      <summary>このメソッドを使って、現在のレコードセットのパラメータを設定します。 たとえば、このメソッドの実装は、ユーザーがパラメータを編集できる ダイアログを表示できます。</summary>
    </member>
    <member name="M:C1.C1Report.IC1ReportExternalRecordset.GetRecordset">
      <summary>
        データのアクセスに使用される
        <see cref="T:C1.C1Report.IC1ReportRecordset" />インタフェースを返します。
      </summary>
      <returns>
        データのアクセスに使用される
        <see cref="T:C1.C1Report.IC1ReportRecordset" />インタフェース。
      </returns>
    </member>
    <member name="P:C1.C1Report.IC1ReportExternalRecordset.Caption">
      <summary>現在のレコードセットのユーザーフレンドリな名前を取得します。</summary>
    </member>
    <member name="P:C1.C1Report.IC1ReportExternalRecordset.Params">
      <summary>現在のレコードセットのパラメータを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Report.IC1ReportRecordset">
      <summary>データソースオブジェクトからレポートデータにアクセスするために使用されるインタフェース。</summary>
      <remarks>
        <para>レポートのカスタムデータソースとして使用されるオブジェクトは、このインタフェースを実装する必要があります。</para>
        <para>
          <see cref="T:C1.C1Report.C1Report" />コンポーネントは、よく使用されるデータソースに対して、このインタフェースの実装を提供しています（
          <see cref="T:System.Data.DataTable" />クラス、
          <see cref="T:System.Data.DataView" />クラスなど）。
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.GetFieldNames">
      <summary>データソース内の各フィールドの名前を表す文字列ベクターを取得します。</summary>
      <returns>データソース内の各フィールドの名前を表す文字列ベクター。</returns>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.GetFieldTypes">
      <summary>データソース内の各フィールドのタイプを表すベクターを取得します。</summary>
      <returns>データソース内の各フィールドのタイプを表すベクター。</returns>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.GetFieldValue(System.Int32)">
      <summary>カーソル位置にある特定のフィールドの値を取得します。</summary>
      <param name="fieldIndex">フィールドのインデックス。</param>
      <returns>フィールドの値。</returns>
      <remarks>カーソルがデータの終わり（EOF 条件）を過ぎると、このメソッドは null を返し、 例外をスローしません。</remarks>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.BOF">
      <summary>カーソルがデータソースの最初のレコードの位置にある場合は true を返します。</summary>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.EOF">
      <summary>カーソルがデータソースの最後のレコードを過ぎた位置にある場合は true を返します。</summary>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.MoveFirst">
      <summary>カーソルをデータソースの最初のレコードに移動します。</summary>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.MoveLast">
      <summary>カーソルをデータソースの最後のレコードに移動します。</summary>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.MovePrevious">
      <summary>カーソルをデータソースの前のレコードに移動します。</summary>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.MoveNext">
      <summary>カーソルをデータソースの次のレコードに移動します。</summary>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.GetBookmark">
      <summary>現在のカーソル位置を返します。</summary>
      <returns>現在のレコードのインデックス。</returns>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.SetBookmark(System.Int32)">
      <summary>現在のカーソル位置を指定された値に設定します。</summary>
      <param name="bkmk">レコードのインデックス。</param>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.ApplyFilter(System.String)">
      <summary>
        フィルタ文字列を適用します。詳細については、
        <see cref="P:System.Data.DataView.RowFilter" />プロパティを参照してください。
      </summary>
      <param name="filter">フィルタ文字列。</param>
    </member>
    <member name="M:C1.C1Report.IC1ReportRecordset.ApplySort(System.String)">
      <summary>
        ソート文字列を適用します。詳細については、
        <see cref="P:System.Data.DataView.Sort" />プロパティを参照してください。
      </summary>
      <param name="sort">ソート文字列。</param>
    </member>
    <member name="T:C1.C1Report.DataAccessException">
      <summary>
        データアクセスエラーが発生した場合に生成される
        <see cref="T:System.Exception" />。
      </summary>
    </member>
    <member name="M:C1.C1Report.DataAccessException.#ctor">
      <summary>DataAccessException クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Report.DataAccessException.#ctor(System.String)">
      <summary>指定されたエラーメッセージを使用して、DataAccessException クラスの新しいインスタンスを初期化します。</summary>
      <param name="msg">エラーについて説明するメッセージ。</param>
    </member>
    <member name="M:C1.C1Report.DataAccessException.#ctor(System.String,System.Exception)">
      <summary>指定されたエラーメッセージとこの例外の原因となった内部例外への参照を使用して、DataAccessException クラスの新しいインスタンスを初期化します。</summary>
      <param name="msg">この例外の理由について説明するエラーメッセージ。</param>
      <param name="x">この例外の原因になった例外。</param>
    </member>
    <member name="M:C1.C1Report.DataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化されたデータを使って、DataAccessException クラスの新しいインスタンスを初期化します。</summary>
      <param name="si">シリアル化されたオブジェクトデータを保持するオブジェクト。</param>
      <param name="sc">ソースまたは宛先に関するコンテキスト情報。</param>
    </member>
    <member name="T:C1.C1Report.FileFormatEnum">
      <summary>エクスポートファイルの形式を指定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Report.C1Report" />クラスの
        <see cref="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)" />メソッドのパラメータを設定できます。
      </remarks>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.HTML">
      <summary>プレーン HTML 形式。この設定は、任意の Web ブラウザで表示できる１つの HTML ファイルを作成します。</summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.HTMLPaged">
      <summary>ページ区切り HTML 形式。この設定は、レポート内のページごとに１つの HTML ファイルを作成します。ファイルには、ページ間を移動するリンクがあります。</summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.HTMLDrillDown">
      <summary>ドリルダウン HTML 形式。この設定は、折りたたみ可能な見出しを含む１つの HTML ファイルを作成します。DHTML 対応のブラウザで表示した場合は、グループヘッダーをクリックすると、見出しが折りたたまれたり、展開されて詳細が表示されます。</summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.PDF">
      <summary>Adobe PDF 形式。この設定は、Adobe Acrobat ソフトウェアを使って表示できる PDF ファイルを作成します。</summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.PDFEmbedFonts">
      <summary>Adobe PDF 形式（フォントを埋め込み）。この設定は、Adobe Acrobat ソフトウェアを使って表示できる PDF ファイルを作成します。</summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.Text">
      <summary>プレーンテキスト。この設定は、プレーン ASCII ファイルを作成します。</summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.RTF">
      <summary>RTF 形式。この設定は、Microsoft Word、WordPad などの RTF 対応テキストエディタで開くことができる RTF ファイルを作成します。</summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.Excel">
      <summary>Microsoft Excel ファイル。この設定は、Microsoft Excel 97 以降で開くことができる BIFF-8 Excel ファイルを作成します。</summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.TIFF">
      <summary>TIFF 形式。この設定は、複数ページの TIFF ファイルを作成します。</summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.PDFPrintUtil">
      <summary>非推奨になりました。代わりに、PDF、DFEmbedFonts、または PDFProcted を使用してください。</summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.PDFProtected">
      <summary>保護 PDF 形式。この設定は、ランダムパスワード付きの PDF ファイルを作成します。このファイルは、誰でも開いたり印刷することはできますが、変更することはできません。</summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.RTFLabels">
      <summary>RTF フィールドベース形式。この設定は、フィールドを絶対位置で配置した RTF ファイルを作成します。この形式は、プレーン RTF 形式より正確にレポートをレンダリングします。ラベルスタイルのレポートを作成する場合にお勧めします。ただし、この設定で作成したファイルは、プレーン RTF 形式より編集が困難です。また、Microsoft Word を使用した場合にだけ正しくプレビューおよび印刷できます（WordPad では機能しない）。</summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.TextSinglePage">
      <summary>プレーンテキスト。この設定は、１ページのプレーン ASCII ファイルを作成します。</summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.Metafile">
      <summary>圧縮されたメタファイル。この設定は、ページごとに１つのメタファイル（emf）が入った zip ファイルを作成します。この形式のデフォルトのファイル拡張子は、「zip」または「emz」です。</summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.OpenXml">
      <summary>Open XML Excel ファイル。この設定は、Microsoft Excel 2007 以降で開くことができる Open XML Excel ファイルを作成します。</summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.HTMLTableBased">
      <summary>
        テーブルベースの HTML 形式。 この設定は、任意の Web ブラウザで表示可能な単一の HTML ファイルを作成します。 プレーンな
        <see cref="F:C1.C1Report.FileFormatEnum.HTML" />形式とは異なり、オブジェクトの配置に絶対座標ではなくテーブルを使用します。
      </summary>
    </member>
    <member name="T:C1.C1Report.GrowShrinkModeEnum">
      <summary>CanGrow/CanShrink フィールドを処理するためのロジックを指定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="F:C1.C1Report.GrowShrinkModeEnum.C1Report" />クラスの
        <see cref="P:C1Report.GrowShrinkMode" />プロパティの値を設定します。
      </remarks>
    </member>
    <member name="F:C1.C1Report.GrowShrinkModeEnum.C1Report">
      <summary>標準の C1Report モードを使用します。このモードでは、フィールドが拡大または縮小すると、その真下にあるフィールドにだけ影響します。</summary>
    </member>
    <member name="F:C1.C1Report.GrowShrinkModeEnum.Access">
      <summary>MS Access と同じモードを使用します。このモードでは、フィールドが拡大または縮小すると、そのフィールドの下にあるすべてのフィールド（水平方向に重なっていないフィールドを含む）に影響します。</summary>
    </member>
    <member name="T:C1.C1Report.FontProcessingOptions">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />のフォント処理オプションを指定します。 このクラスは、
        <see cref="T:C1.C1Preview.FontProcessingOptions" />から継承し、 唯一の違いは一部のプロパティのデフォルト値が変更されていることです。
      </summary>
    </member>
    <member name="T:C1.C1Preview.FontProcessingOptions">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />のフォント処理オプションを指定します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.FontProcessingOptions.AssignFrom(C1.C1Preview.FontProcessingOptions)">
      <summary>別のオブジェクトからこのオブジェクトにプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.FontProcessingOptions.Reset">
      <summary>このオブジェクトのプロパティをデフォルト値にリセットします。</summary>
    </member>
    <member name="P:C1.C1Preview.FontProcessingOptions.FontHandling">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.C1PrintDocument" />または
        <see cref="N:C1.C1Report" />によるフォントの埋め込みと代替の処理方法を示す値を取得または設定します。
        <para>
          使用可能なオプションの詳細については、
          <see cref="T:C1.C1Preview.FontHandling" />列挙体のメンバを参照してください。
        </para><para>
          このプロパティが
          <see cref="F:C1.C1Preview.FontHandling.EmbedFonts" />または
          <see cref="F:C1.C1Preview.FontHandling.EmbedActualFonts" />以外の値に設定される （すなわち、フォントが自動的に埋め込まれない）場合は、 埋め込みたい特定のフォントをドキュメントの
          <see cref="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts" />コレクションに手動で追加できることに注意してください。
        </para><para>
          このプロパティのデフォルト値は
          <see cref="F:C1.C1Preview.FontHandling.None" />です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.FontProcessingOptions.SubstitutionFallbackFontName">
      <summary>
        ドキュメントまたはレポートでテキストの表示に適切なフォントが見つからない場合に使用されるフォントの名前を取得または設定します。 このプロパティは、
        <see cref="P:C1.C1Preview.FontProcessingOptions.FontHandling" />を
        <see cref="F:C1.C1Preview.FontHandling.EmbedActualFonts" />または
        <see cref="F:C1.C1Preview.FontHandling.BuildActualDocumentFonts" />に設定し、
        <see cref="P:C1.C1Preview.FontProcessingOptions.UseOldSubstitutionAlgorithm" />を
        <b>false</b>に設定した場合にのみ使用されます。
        <para>
          デフォルト値は「
          <b>Arial Unicode MS</b>」です。 このプロパティを設定する場合は、できるだけ多くの Unicode 文字のシンボルを含むフォントを指定してください。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.FontProcessingOptions.UseOldSubstitutionAlgorithm">
      <summary>
        フォント代替の古い（2013v1 リリースより前の）アルゴリズムを使用するかどうかを示す値を取得または設定します。 このプロパティは、
        <see cref="P:C1.C1Preview.FontProcessingOptions.FontHandling" />を
        <see cref="F:C1.C1Preview.FontHandling.EmbedActualFonts" />または
        <see cref="F:C1.C1Preview.FontHandling.BuildActualDocumentFonts" />に設定した場合にのみ使用されます。 デフォルト値は
        <b>false</b>です。
      </summary>
    </member>
    <member name="P:C1.C1Preview.FontProcessingOptions.EmbeddedFontsGlyphsBuildMode">
      <summary>
        <see cref="P:C1.C1Preview.FontProcessingOptions.FontHandling" />を
        <see cref="F:C1.C1Preview.FontHandling.EmbedActualFonts" />または
        <see cref="F:C1.C1Preview.FontHandling.BuildActualDocumentFonts" />に設定したときに
        <see cref="T:C1.C1Preview.EmbeddedFont" />がグリフのリストを構築する方法を示す値を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Report.PageRenderingMode">
      <summary>レポートの生成時に使用されるページレンダリングモードを指定します。</summary>
      <seealso cref="P:C1.C1Report.C1Report.PageRenderingMode" />
    </member>
    <member name="F:C1.C1Report.PageRenderingMode.Default">
      <summary>デフォルトのページレンダリングモード。</summary>
    </member>
    <member name="F:C1.C1Report.PageRenderingMode.AsMetafiles">
      <summary>レポートの生成時、ページごとにメタファイルを生成してシリアル化した後、 すべてのページ関連のデータをメモリから消去します。 このモードはデフォルトよりも処理が遅くなりますが、使用メモリが低減されます。 デフォルトモードを使用するとメモリ不足になる大きいレポートの場合はこのモードを使用します。</summary>
    </member>
    <member name="F:C1.C1Report.PageRenderingMode.ReflowableDocument">
      <summary>
        生成されたレポートを表す
        <see cref="T:C1.C1Preview.C1PrintDocument" />（
        <see cref="!:C1Document" />プロパティを介してアクセス可能）はリフロー可能であるため、 レポートの生成後に追加的な要素（オーバーレーなど）をドキュメントに追加でき、 C1Report.C1Document.Generate() を呼び出して 追加のコンテンツをレンダリングできます。
        <para>このモードがデフォルトより処理が遅くなることに注意してください。必要な場合にのみ使用してください。</para>
      </summary>
    </member>
    <member name="T:C1.C1Report.C1Report">
      <summary>
        <b>C1Report</b>コンポーネントは、Access スタイルの水平区切りデータベースレポートを生成します。生成されたレポートは、直接プリンタにレンダリングしたり、さまざまな移植可能な形式（HTML 形式、PDF 形式、テキスト形式など）にエクスポートしたり、Microsoft PrintPreview コントロールや ComponentOne C1PrintPreview コントロールなどのプレビューコントロールにレンダリングすることができます。
      </summary>
    </member>
    <member name="M:C1.C1Report.C1Report.#ctor">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />コンポーネントの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Report.C1Report.Dispose(System.Boolean)">
      <summary>コンポーネントによって使用されるリソースを解放します。</summary>
      <param name="disposing">true の場合はマネージドリソースもアンマネージドリソースも解放され、 false の場合はアンマネージドリソースのみが破棄されます。</param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnStartReport(System.EventArgs)">
      <summary>
        <see cref="E:C1.C1Report.C1Report.StartReport" />イベントを起こします。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.EventArgs" />。
      </param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnEndReport(System.EventArgs)">
      <summary>
        <see cref="E:C1.C1Report.C1Report.EndReport" />イベントを起こします。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.EventArgs" />。
      </param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnNoReportData(System.EventArgs)">
      <summary>
        <see cref="E:C1.C1Report.C1Report.NoData" />イベントを起こします。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.EventArgs" />。
      </param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnStartPage(C1.C1Report.ReportEventArgs)">
      <summary>
        <see cref="E:C1.C1Report.C1Report.StartPage" />イベントを起こします。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.C1Report.ReportEventArgs" />。
      </param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnEndPage(C1.C1Report.ReportEventArgs)">
      <summary>
        <see cref="E:C1.C1Report.C1Report.EndPage" />イベントを起こします。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.C1Report.ReportEventArgs" />。
      </param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnStartSection(C1.C1Report.ReportEventArgs)">
      <summary>
        <see cref="E:C1.C1Report.C1Report.StartSection" />イベントを起こします。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.C1Report.ReportEventArgs" />。
      </param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnPrintSection(C1.C1Report.ReportEventArgs)">
      <summary>
        <see cref="E:C1.C1Report.C1Report.PrintSection" />イベントを起こします。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.C1Report.ReportEventArgs" />。
      </param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnEndSection(C1.C1Report.ReportEventArgs)">
      <summary>
        <see cref="E:C1.C1Report.C1Report.EndSection" />イベントを起こします。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.C1Report.ReportEventArgs" />。
      </param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnReportError(C1.C1Report.ReportEventArgs)">
      <summary>
        <see cref="E:C1.C1Report.C1Report.ReportError" />イベントを起こします。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.C1Report.ReportEventArgs" />。
      </param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnInitializeParametersDialog(C1.C1Report.DialogEventArgs)">
      <summary>
        <see cref="E:C1.C1Report.C1Report.InitializeParametersDialog" />イベントを起こします。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.C1Report.DialogEventArgs" />。
      </param>
    </member>
    <member name="M:C1.C1Report.C1Report.OnAddOutlineEntry(C1.C1Report.ReportEventArgs)">
      <summary>
        <see cref="E:C1.C1Report.C1Report.AddOutlineEntry" />イベントを起こします。
      </summary>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.C1Report.ReportEventArgs" />。
      </param>
    </member>
    <member name="M:C1.C1Report.C1Report.GetReportList(System.IO.Stream)">
      <summary>XML レポート定義ファイルとして入手可能なレポートのリストを取得します。</summary>
      <param name="stream">XML レポート定義のストリームが含まれています。</param>
      <returns>XML 定義のすべてのレポートの名前を含む文字列配列。</returns>
    </member>
    <member name="M:C1.C1Report.C1Report.GetReportList(System.String)">
      <summary>XML レポート定義ファイルに含まれるレポートのリストを取得します。</summary>
      <param name="fileName">XML レポート定義ファイルの完全名を含みます。</param>
      <returns>XML ファイル内のすべてのレポートの名前を含む文字列配列。</returns>
    </member>
    <member name="M:C1.C1Report.C1Report.GetReportList(System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlDocument" />に含まれるレポートのリストを取得します。
      </summary>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" />オブジェクトへの参照。
      </param>
      <returns>
        <b>XmlDocument</b>内のすべてのレポートの名前を含む文字列配列。
      </returns>
    </member>
    <member name="M:C1.C1Report.C1Report.BeginInit">
      <summary>オブジェクトに初期化が開始されたことを通知します。</summary>
    </member>
    <member name="M:C1.C1Report.C1Report.EndInit">
      <summary>オブジェクトに初期化が完了したことを通知します。</summary>
    </member>
    <member name="M:C1.C1Report.C1Report.ClearGeneratedPages">
      <summary>レポートの生成中に作成されたページおよびその他の情報をクリアします。 このメソッドでは、レポートの定義はクリアされません。</summary>
    </member>
    <member name="M:C1.C1Report.C1Report.GetReportInfo(System.String)">
      <summary>XML レポート定義ファイルに含まれるレポートのリストを取得します。</summary>
      <param name="fileName">XML レポート定義ファイルの完全名を含みます。</param>
      <returns>XML ファイル内のすべてのレポートの名前を含む文字列配列。</returns>
    </member>
    <member name="M:C1.C1Report.C1Report.GetReportInfo(System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlDocument" />に含まれるレポートのリストを取得します。
      </summary>
      <param name="doc">
        レポートが含まれる
        <see cref="T:System.Xml.XmlDocument" />への参照。
      </param>
      <returns>
        <b>XmlDocument</b>内のすべてのレポートの名前を含む文字列配列。
      </returns>
    </member>
    <member name="M:C1.C1Report.C1Report.Load(System.IO.Stream,System.String)">
      <summary>ストリームの XML レポート定義からレポートをロードします。</summary>
      <param name="stream">XML レポート定義を含むストリーム。</param>
      <param name="reportName">ファイルから取得するレポートの名前（大文字と小文字を区別しない）。</param>
      <remarks>
        <see cref="M:C1.C1Report.C1Report.GetReportInfo(System.String)" />メソッドを使用して、ファイルで入手可能なレポートのリストを取得できます。
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Load(System.String,System.String)">
      <summary>XML レポート定義ファイルからレポートをロードします。</summary>
      <param name="fileName">XML レポート定義ファイルの完全名。</param>
      <param name="reportName">ファイルから取得するレポートの名前（大文字小文字を区別）。</param>
      <remarks>
        このファイルに含まれるレポートのリストを取得するには、
        <see cref="M:C1.C1Report.C1Report.GetReportInfo(System.String)" />メソッドを使用します。
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Load(System.Xml.XmlDocument,System.String)">
      <summary>
        <see cref="T:System.Xml.XmlDocument" />からレポートをロードします。
      </summary>
      <param name="doc">
        レポートが含まれる
        <see cref="T:System.Xml.XmlDocument" />への参照。
      </param>
      <param name="reportName">ファイルから取得するレポートの名前（大文字小文字を区別）。</param>
      <remarks>
        このファイルに含まれるレポートのリストを取得するには、
        <see cref="M:C1.C1Report.C1Report.GetReportInfo(System.String)" />メソッドを使用します。
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Save(System.String)">
      <summary>現在のレポート定義をファイルに保存します。</summary>
      <param name="fileName">作成されるファイルの完全名。そのファイルがすでに存在する場合は上書きされます。</param>
      <remarks>このメソッドは、出力ファイルに画像やサブレポートを埋め込みません。サブレポートは名前だけを保存し、画像は外部ファイルに保存します。</remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Save(System.String,System.Boolean)">
      <summary>現在のレポート定義をファイルに保存します。</summary>
      <param name="fileName">作成されるファイルの完全名。そのファイルがすでに存在する場合は上書きされます。</param>
      <param name="embedAll">画像とサブレポートを出力ファイルに埋め込むかどうか。</param>
    </member>
    <member name="M:C1.C1Report.C1Report.Save(System.String,System.Boolean,System.Boolean)">
      <summary>現在のレポート定義をファイルに保存します。</summary>
      <param name="fileName">作成されるファイルの完全名。そのファイルがすでに存在する場合は上書きされます。</param>
      <param name="embedPics">画像を出力ファイルに埋め込むかどうか。</param>
      <param name="embedSubs">サブレポートを出力ファイルに埋め込むかどうか。</param>
    </member>
    <member name="M:C1.C1Report.C1Report.Save(System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>現在のレポート定義をストリームに保存します。</summary>
      <param name="stream">保存先のストリーム。</param>
      <param name="embedPics">画像を出力ファイルに埋め込むかどうかを示します。</param>
      <param name="embedSubs">サブレポートを出力ファイルに埋め込むかどうかを示します。</param>
    </member>
    <member name="M:C1.C1Report.C1Report.Save(System.Xml.XmlTextWriter)">
      <summary>
        現在のレポート定義を
        <see cref="T:System.Xml.XmlTextWriter" />オブジェクトに保存します。
      </summary>
      <param name="writer">
        レポート定義が保存される
        <see cref="T:System.Xml.XmlTextWriter" />オブジェクト。
      </param>
      <remarks>このメソッドは、出力ファイルに画像やサブレポートを埋め込みません。サブレポートは名前だけを保存し、画像は外部ファイルに保存します。</remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Save(System.Xml.XmlTextWriter,System.Boolean)">
      <summary>現在のレポート定義を XmlTextWriter オブジェクトに保存します。</summary>
      <param name="writer">
        レポート定義が保存される
        <see cref="T:System.Xml.XmlTextWriter" />オブジェクト。
      </param>
      <param name="embed">画像とサブレポートを出力ストリームに埋め込むかどうか。</param>
    </member>
    <member name="M:C1.C1Report.C1Report.Save(System.Xml.XmlTextWriter,System.Boolean,System.Boolean)">
      <summary>現在のレポート定義を XmlTextWriter オブジェクトに保存します。</summary>
      <param name="writer">
        レポート定義が保存される
        <see cref="T:System.Xml.XmlTextWriter" />オブジェクト。
      </param>
      <param name="embedPics">画像を出力ストリームに埋め込むかどうか。</param>
      <param name="embedSubs">サブレポートを出力ストリームに埋め込むかどうか。</param>
    </member>
    <member name="M:C1.C1Report.C1Report.Print">
      <summary>印刷の進行状況ダイアログを表示せずに、 現在のレポートをデフォルトのプリンタ設定で印刷します。</summary>
      <remarks>
        このメソッドは、現在のレポートの
        <see cref="P:C1.C1Report.C1Report.C1Document" />プロパティの対応する Print(...) メソッドへのショートカットです。 レポートはまだレンダリングされていなかった場合はレンダリングされます。
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Print(System.Drawing.Printing.PrinterSettings)">
      <summary>印刷の進行状況ダイアログを表示せずに、 現在のレポートを指定のプリンタ設定で印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <remarks>
        このメソッドは、 現在のレポートの
        <see cref="P:C1.C1Report.C1Report.C1Document" />プロパティの対応する Print(...) メソッドへのショートカットです。 レポートはまだレンダリングされていなかった場合はレンダリングされます。
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Print(System.Drawing.Printing.PrinterSettings,System.Boolean)">
      <summary>オプションで印刷の進行状況ダイアログを表示しながら、 現在のレポートを指定のプリンタ設定で印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="showProgress">印刷の進行状況ダイアログを表示するかどうかを示すフラグ。</param>
      <remarks>
        このメソッドは、 現在のレポートの
        <see cref="P:C1.C1Report.C1Report.C1Document" />プロパティの対応する Print(...) メソッドへのショートカットです。 レポートはまだレンダリングされていなかった場合はレンダリングされます。
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Print(System.Drawing.Printing.PrinterSettings,C1.C1Preview.OutputRange)">
      <summary>印刷の進行状況ダイアログを表示せずに、 現在のレポートのページ範囲を指定のプリンタ設定で印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="outputRange">エクスポートするページの範囲（すべてのページをエクスポートする場合は null）。</param>
      <remarks>
        このメソッドは、 現在のレポートの
        <see cref="P:C1.C1Report.C1Report.C1Document" />プロパティの対応する Print(...) メソッドへのショートカットです。 レポートはまだレンダリングされていなかった場合はレンダリングされます。
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Print(System.Drawing.Printing.PrinterSettings,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>オプションで印刷の進行状況ダイアログを表示しながら、 現在のレポートのページ範囲を指定のプリンタ設定で印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="outputRange">エクスポートするページの範囲（すべてのページを印刷する場合は null を使用）。</param>
      <param name="showProgress">進行状況ダイアログを表示するかどうかを示すフラグ。</param>
      <remarks>
        このメソッドは、 現在のレポートの
        <see cref="P:C1.C1Report.C1Report.C1Document" />プロパティの対応する Print(...) メソッドへのショートカットです。 レポートはまだレンダリングされていなかった場合はレンダリングされます。
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,C1.C1Preview.OutputRange)">
      <summary>印刷の進行状況ダイアログを表示せずに、 現在のレポートのページ範囲を指定のプリンタとデフォルトのページ設定で印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="defaultPageSettings">使用するデフォルトのページ設定。</param>
      <param name="outputRange">エクスポートするページの範囲（すべてのページをエクスポートする場合は null）。</param>
      <remarks>
        このメソッドは、 現在のレポートの
        <see cref="P:C1.C1Report.C1Report.C1Document" />プロパティの対応する Print(...) メソッドへのショートカットです。 レポートはまだレンダリングされていなかった場合はレンダリングされます。
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,System.Boolean)">
      <summary>オプションで印刷の進行状況ダイアログを表示して、 現在のドキュメントを指定されたプリンタ設定およびデフォルトのプリンタ設定で印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="defaultPageSettings">使用するデフォルトのページ設定。</param>
      <param name="showProgress">進行状況ダイアログを表示するかどうかを示すフラグ。</param>
      <remarks>
        このメソッドは、 現在のレポートの
        <see cref="P:C1.C1Report.C1Report.C1Document" />プロパティの対応する Print(...) メソッドへのショートカットです。 レポートはまだレンダリングされていなかった場合はレンダリングされます。
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>オプションで印刷の進行状況ダイアログを表示しながら、 現在のレポートのページ範囲を指定のプリンタとデフォルトのページ設定で印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="defaultPageSettings">使用するデフォルトのページ設定。</param>
      <param name="outputRange">エクスポートするページの範囲（すべてのページを印刷する場合は null を使用）。</param>
      <param name="showProgress">進行状況ダイアログを表示するかどうかを示すフラグ。</param>
      <remarks>
        このメソッドは、 現在のレポートの
        <see cref="P:C1.C1Report.C1Report.C1Document" />プロパティの対応する Print(...) メソッドへのショートカットです。 レポートはまだレンダリングされていなかった場合はレンダリングされます。
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.PrintDialog">
      <summary>標準印刷ダイアログを表示して、ユーザーに現在のドキュメントの印刷を許可します。</summary>
      <returns>
        ドキュメントが印刷された場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
      <remarks>
        このメソッドは、 現在のレポートの
        <see cref="P:C1.C1Report.C1Report.C1Document" />プロパティの対応する PrintDialog(...) メソッドへのショートカットです。 レポートはまだレンダリングされていなかった場合はレンダリングされます。
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.PrintDialog(System.Drawing.Printing.PrinterSettings,System.Int32[],System.Boolean)">
      <summary>標準印刷ダイアログを表示して、ユーザーに現在のドキュメントの印刷を許可します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="selectedPageNumbers">
        選択されたページ番号のリスト。 このパラメータが
        <b>null</b>でない場合、ダイアログで［
        <b>選択</b>］オプションが有効になります。
      </param>
      <param name="showProgress">印刷の進行状況を表示するかどうか。</param>
      <returns>
        ドキュメントが印刷された場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
      <remarks>
        このメソッドは、 現在のレポートの
        <see cref="P:C1.C1Report.C1Report.C1Document" />プロパティの対応する PrintDialog(...) メソッドへのショートカットです。 レポートはまだレンダリングされていなかった場合はレンダリングされます。
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Clear">
      <summary>現在のレポートをクリアします。</summary>
      <remarks>
        <para>このメソッドは、現在のレポートからすべてのグループ、グループセクション、およびフィールドを削除します。</para>
        <para>
          また、
          <see cref="P:C1.C1Report.C1Report.DataSource" />オブジェクトと
          <see cref="P:C1.C1Report.C1Report.Layout" />オブジェクトをリセットし、すべてのレポートに存在する固定セクション（
          <b>Detail</b>、
          <b>Header</b>、
          <b>Footer</b>、
          <b>PageHeader</b>、
          <b>PageFooter</b>）をクリアします（ただし、削除はしない）。
        </para>
        <para>このメソッドは、レポートをクリアし、最初から新しいレポートを作成する場合に使用します。</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.Evaluate(System.String)">
      <summary>
        現在のレポートコンテキストで
        <b>VBScript</b>式を評価します。
      </summary>
      <param name="expression">
        評価する
        <b>VBScript</b>式を含む文字列。
      </param>
      <returns>式の値。</returns>
      <remarks>
        <para>このメソッドを使用すると、レポートの生成時に評価されるとおりに式を評価できます。このメソッドは、デザイナのようなアプリケーションで、ユーザーがただちに式をテストできるウィンドウを提供する場合に便利です。</para>
        <para>
          <b>expression</b>文字列の構文が有効でないか、評価エラーが発生すると、コントロールは
          <see cref="E:C1.C1Report.C1Report.ReportError" />イベントを発生させます。この場合、イベントの
          <i>Handled</i>パラメータは true に設定され、デフォルトでは例外が無視されます。
        </para>
      </remarks>
      <example>
        <para>
          式には、次のような単純な
          <b>VBScript</b>式を指定することもできます。
        </para>
        <code>
          <![CDATA[
          Console.WriteLine(_c1r.Evaluate("2+2"));
          <i>4</i>
          
          Console.WriteLine(_c1r.Evaluate(" \"A\" &amp; \"B\" ");
          <i>AB</i>
          ]]>
        </code>
        <para>
          また、
          <b>Report</b>オブジェクトやそのサブオブジェクトへの参照を入れることもできます。次に例を示します。
        </para>
        <code>
          <![CDATA[
          Console.WriteLine(_c1r.Evaluate("Report.DataSource.RecordSource"));
          <i>SELECT * FROM Employees</i>
          
          Console.WriteLine(_c1r.Evaluate("Report.DataSource.Recordset.Fields.Count"));
          <i>7</i>
          
          Console.WriteLine(_c1r.Evaluate("Report.Fields(0).Name"));
          <i>FirstNameField</i>
          ]]>
        </code>
        <para>
          さらに、データフィールド、
          <see cref="T:C1.C1Report.Field" />オブジェクト、および
          <see cref="T:C1.C1Report.Section" />オブジェクトは、名前で直接参照できます。
        </para>
        <code>
          <![CDATA[
          Console.WriteLine(_c1r.Evaluate("FirstNameField.Value"));
          <i>Andrew</i>
          
          Console.WriteLine(_c1r.Evaluate("CategoryName"));
          <i>Beverages</i>
          ]]>
        </code>
      </example>
    </member>
    <member name="M:C1.C1Report.C1Report.Execute(System.String)">
      <summary>
        現在のレポートコンテキストで
        <b>VBScript</b>文を実行します。
      </summary>
      <param name="statement">
        実行する
        <b>VBScript</b>命令を含む文字列。
      </param>
      <remarks>
        <para>
          このメソッドは、値を返さないこと以外は、
          <see cref="M:C1.C1Report.C1Report.Evaluate(System.String)" />メソッドと同じです。
        </para>
        <para>
          <b>expression</b>文字列の構文が有効でないか、評価エラーが発生すると、コントロールは
          <see cref="E:C1.C1Report.C1Report.ReportError" />イベントを発生させます。この場合、イベントの
          <i>Handled</i>パラメータは true に設定され、デフォルトでは例外が無視されます。
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.ParseExpression(System.String)">
      <summary>
        現在のレポートコンテキストで
        <b>VBScript</b>式を解析します。
      </summary>
      <param name="expression">
        解析する
        <b>VBScript</b>式を含む文字列。
      </param>
      <returns>
        式が無効な場合は
        <see cref="T:System.Exception" />、エラーが検出されなかった場合は null。
      </returns>
      <remarks>
        このメソッドは、デザイナアプリケーションで
        <b>VBScript</b>の構文チェックを提供する場合に便利です。
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.ParseStatement(System.String)">
      <summary>
        現在のレポートコンテキストで
        <b>VBScript</b>文を解析します。
      </summary>
      <param name="statement">
        解析する
        <b>VBScript</b>文を含む文字列。
      </param>
      <returns>
        文が無効な場合は
        <see cref="T:System.Exception" />、エラーが検出されなかった場合は null。
      </returns>
      <remarks>
        このメソッドは、デザイナアプリケーションで
        <b>VBScript</b>の構文チェックを提供する場合に便利です。
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.ParseStatement(System.String,System.String,System.Boolean)">
      <summary>
        現在のレポートコンテキストで、名前付き
        <b>VBScript</b>文を解析します。
      </summary>
      <param name="statement">
        解析する
        <b>VBScript</b>文を含む文字列。
      </param>
      <param name="name">
        <paramref name="statement" />の名前。 文には、いくつかの名前付きの関数やプロシージャが含まれることがあります。この場合、 それらの関数やプロシージャは、文の名前と関数名またはプロシージャ名の組み合わせで識別されます。
      </param>
      <param name="isGlobal">
        解析する文が
        <see cref="P:C1.C1Report.C1Report.GlobalScripts" />であるかどうかを示します。
      </param>
      <returns>
        文が無効な場合は
        <see cref="T:System.Exception" />、エラーが検出されなかった場合は null。
      </returns>
      <remarks>
        このメソッドは、デザイナアプリケーションで
        <b>VBScript</b>の構文チェックを提供する場合に便利です。
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.GetPageImages">
      <summary>
        生成レポートのページ画像（メタファイルで表現）を列挙します。 このメソッドを foreach ループで使用することで、 システムリソースを枯渇させずに大規模レポートのすべてのページに渡って繰り返しを実行できます。 このアプローチは、すべてのページの画像を作成し大量のリソースを消費する
        <see cref="P:C1.C1Report.C1Report.PageImages" />プロパティへのアクセスより推奨されます。
      </summary>
      <returns>
        ページ画像に対して繰り返しを実行できる
        <b>IEnumerable</b>。
      </returns>
      <remarks>
        ページの作成または更新には
        <see cref="M:C1.C1Report.C1Report.Render" />メソッドを呼び出す必要があります。
      </remarks>
      <seealso cref="M:C1.C1Report.C1Report.GetPageImage(System.Int32)" />
      <seealso cref="M:C1.C1Report.C1Report.GetPageCount" />
    </member>
    <member name="M:C1.C1Report.C1Report.GetPageImage(System.Int32)">
      <summary>
        指定されたページを表すメタファイルを取得します。 このメソッドは
        <see cref="P:C1.C1Report.C1Report.PageImages" />コレクションの代わりに使用してください。 このプロパティにアクセスすると、 すべてのページの画像が一度に作成され、システムリソースが浪費されます。
      </summary>
      <param name="pageIndex">０から始まるページインデックス。</param>
      <returns>ページを表すメタファイル。</returns>
      <remarks>
        ページの作成または更新には
        <see cref="M:C1.C1Report.C1Report.Render" />メソッドを呼び出す必要があります。
      </remarks>
      <seealso cref="M:C1.C1Report.C1Report.GetPageCount" />
      <seealso cref="M:C1.C1Report.C1Report.GetPageImages" />
    </member>
    <member name="M:C1.C1Report.C1Report.GetPageCount">
      <summary>
        生成レポートの総ページ数を取得します。 このメソッドは
        <see cref="P:C1.C1Report.C1Report.PageImages" />コレクションの
        <b>Count</b>の代わりに使用してください。 このプロパティにアクセスすると、 すべてのページの画像が一度に作成され、システムリソースが浪費されます。
      </summary>
      <returns>総ページ数。</returns>
      <remarks>
        ページの作成または更新には
        <see cref="M:C1.C1Report.C1Report.Render" />メソッドを呼び出す必要があります。
      </remarks>
      <seealso cref="M:C1.C1Report.C1Report.GetPageImage(System.Int32)" />
      <seealso cref="M:C1.C1Report.C1Report.GetPageImages" />
    </member>
    <member name="M:C1.C1Report.C1Report.Render">
      <summary>レポートを画像の内部コレクションにレンダリングします。</summary>
      <remarks>
        <para>
          このメソッドは、他のクラスが
          <see cref="P:C1.C1Report.C1Report.Document" />プロパティにアクセスしたときに暗黙的に呼び出されます。したがって、コードから
          <see cref="M:C1.C1Report.C1Report.Render" />を直接呼び出す必要はほとんどありません。
        </para>
        <para>
          場合によっては、
          <see cref="P:C1.C1Report.C1Report.PageImages" />プロパティによって公開されるページのコレクションとしてレポートにアクセスする必要があることもあります。画像コレクションを最新の状態で確実に取得するには、
          <see cref="M:C1.C1Report.C1Report.Render" />メソッドを直接呼び出します。
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.C1Report.FileFormatEnum)">
      <summary>
        レポートを
        <see cref="T:System.IO.Stream" />オブジェクトにレンダリングします。
      </summary>
      <param name="stream">レポートのレンダリング先のストリーム。</param>
      <param name="fmt">出力ストリームに挿入するレポート形式。</param>
      <remarks>
        <para>このメソッドは、ASP.NET 環境で、一時ファイルを作成せずに、HTML または PDF ストリームにレポートをレンダリングする場合に特に役立ちます。</para>
        <para>すべてのタイプのレポートをストリームにレンダリングできるわけではありません。Excel 形式は、OLE 複合ファイルを必要とし、ファイルにだけレンダリングできます。</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.C1Report.FileFormatEnum,System.String,System.String)">
      <summary>
        レポートを HTML
        <see cref="T:System.IO.Stream" />にレンダリングします。
      </summary>
      <param name="stream">レポートのレンダリング先のストリーム。</param>
      <param name="fmt">出力ストリームに挿入するレポート形式。</param>
      <param name="idPrefix">同じストリームに格納される複数のレポートを識別するために使用される一意の ID。</param>
      <param name="fileName">一時画像ファイルの構築に使用される基本ファイル名。</param>
      <remarks>このメソッドは、ASP.NET ページで HTML レポートを生成するために C1WebReport コントロールによって使用されます。</remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.RenderToFile(System.String,C1.C1Report.FileFormatEnum)">
      <summary>レポートをファイルにレンダリングします。</summary>
      <param name="fileName">レポートのレンダリング先のファイルの名前。</param>
      <param name="fmt">作成するファイルのタイプ。</param>
      <remarks>このメソッドによって現在のレポートがファイルにレンダリングされます。ユーザーインタフェースがなく、複数のレポートをバッチモードで作成するサーバーアプリケーションで特に役立ちます。</remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.RenderToFilter(C1.C1Report.ExportFilter)">
      <summary>
        レポートを
        <see cref="T:C1.C1Report.ExportFilter" />オブジェクトにレンダリングします。
      </summary>
      <param name="filter">レポートをレンダリングするエクスポートフィルタ。</param>
      <remarks>
        <para>
          <see cref="T:C1.C1Report.C1Report" />には、レポートを HTML、PDF、RTF、Excel などの形式にエクスポートできるエクスポートフィルタが組み込まれています。
        </para>
        <para>これらの基本フィルタの派生クラスを作成することで、独自のフィルタを作成できます。</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.CopyFrom(C1.C1Report.C1Report)">
      <summary>
        別の
        <see cref="T:C1.C1Report.C1Report" />コンポーネントからレポート定義をコピーします。
      </summary>
      <param name="sourceReport">
        コピーするレポートが含まれる
        <see cref="T:C1.C1Report.C1Report" />。
      </param>
      <remarks>
        このメソッドの機能は、
        <see cref="T:C1.C1Report.C1Report" />の
        <see cref="P:C1.C1Report.C1Report.ReportDefinition" />プロパティを別の
        <see cref="T:C1.C1Report.C1Report" />にコピーすることと同じですが、このメソッドの方がかなり高速です。
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.AddScriptObject(System.String,System.Object)">
      <summary>レポートのスクリプトコンテキストにオブジェクトを追加します。</summary>
      <param name="name">新しいオブジェクトの名前（大文字小文字を区別）。</param>
      <param name="value">新しいオブジェクトの値。</param>
      <remarks>
        <para>
          このメソッドを使用して、
          <see cref="T:C1.C1Report.C1Report" />スクリプトインタープリタのコンテキストにカスタムオブジェクトを追加できます。
        </para>
        <para>
          スクリプトインタープリタのコンテキストは、レポートのレンダリングが開始されるたびにクリアされるため、このメソッドは、必ず
          <see cref="E:C1.C1Report.C1Report.StartReport" />イベントハンドラから呼び出す必要があります。
        </para>
      </remarks>
      <example>
        <para>
          次のコードは、
          <see cref="E:C1.C1Report.C1Report.StartReport" />イベントを使用して、mainForm という名前の変数をスクリプトコンテキストに追加します。次に、レポートのレンダリングが開始されたときにフォームのキャプションを表示するように、レポートの
          <see cref="P:C1.C1Report.C1Report.OnOpen" />イベントにスクリプトをアタッチします。
        </para>
        <code>
          <![CDATA[
          private void _c1r_StartReport(object sender, System.EventArgs e)
          {
            _c1r.AddScriptObject("mainForm", this);
          }
          
          private void button1_Click(object sender, System.EventArgs e)
          {
            _c1r.OnOpen = "msgbox(mainForm.Text)";
            _c1r.Render();
          }
          ]]>
        </code>
      </example>
    </member>
    <member name="M:C1.C1Report.C1Report.AddScriptObject(System.String,System.Object,System.Boolean)">
      <summary>レポートのスクリプトコンテキストにオブジェクトを追加します。</summary>
      <param name="name">新しいオブジェクトの名前（大文字小文字を区別）。</param>
      <param name="value">新しいオブジェクトの値。</param>
      <param name="addToSubreports">すべてのサブレポートのスクリプトコンテキストにもオブジェクトを追加するかどうか。</param>
      <remarks>
        <para>
          このメソッドを使用して、
          <see cref="T:C1.C1Report.C1Report" />スクリプトインタープリタのコンテキストにカスタムオブジェクトを追加できます。
        </para>
        <para>
          スクリプトインタープリタのコンテキストは、レポートのレンダリングが開始されるたびにクリアされるため、このメソッドは、必ず
          <see cref="E:C1.C1Report.C1Report.StartReport" />イベントハンドラから呼び出す必要があります。
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.C1Report.SetCreationDevice(C1.C1Preview.MeasurementDeviceEnum,System.String)">
      <summary>
        指定した値を
        <see cref="P:C1.C1Report.C1Report.CreationDevice" />と
        <see cref="P:C1.C1Report.C1Report.CreationPrinterName" />プロパティに割り当てます。 このメソッドを使用すると、２つのプロパティを個別に設定するよりも効率が向上します。
      </summary>
      <param name="creationDevice">
        <see cref="P:C1.C1Report.C1Report.CreationDevice" />プロパティの値。
      </param>
      <param name="creationPrinterName">
        <see cref="P:C1.C1Report.C1Report.CreationPrinterName" />プロパティの値。
      </param>
    </member>
    <member name="E:C1.C1Report.C1Report.LongOperation">
      <summary>ドキュメントの生成中に一定間隔で発生します。 進捗状況の表示が可能になり、生成をキャンセルする機能をユーザーに提供できます。</summary>
    </member>
    <member name="E:C1.C1Report.C1Report.StartReport">
      <summary>コントロールがソースレコードセットを開く前にレポートのレンダリングを開始すると発生します。</summary>
      <remarks>
        <para>
          このイベントを使用して、ユーザーにフィードバックを提供したり、
          <see cref="P:C1.C1Report.DataSource.ConnectionString" />プロパティや
          <see cref="P:C1.C1Report.DataSource.RecordSource" />プロパティを変更できます。
        </para>
        <para>
          たとえば、ユーザーに情報の入力を求め、それに応じて
          <see cref="P:C1.C1Report.DataSource.RecordSource" />プロパティを変更することにより、独自の方法によるパラメータクエリーを実装できます。
        </para>
        <para>
          また、このイベントを使用して、
          <see cref="T:System.Data.DataTable" />オブジェクトをレポートの
          <see cref="P:C1.C1Report.DataSource.Recordset" />プロパティに直接割り当てることもできます。すでにレポートデータを所有しているアプリケーションでは、この手順を実行して、
          <see cref="T:C1.C1Report.C1Report" />がデータのコピーを独自にロードしないようにし、時間を節約する必要があります。
        </para>
      </remarks>
    </member>
    <member name="E:C1.C1Report.C1Report.EndReport">
      <summary>コントロールがレポートのレンダリングを終了すると発生します。</summary>
    </member>
    <member name="E:C1.C1Report.C1Report.NoData">
      <summary>コントロールがレポートのレンダリングを開始し、データソースが空の場合に発生します。</summary>
      <remarks>
        <para>このイベントを使用して、ソースレコードセットが空の場合にレポートのレンダリングをキャンセルできます。</para>
        <para>レポートをキャンセルしない場合、そのレポートは非連結レポート（基底のデータがない自己完結型レポート）としてレンダリングされます。</para>
      </remarks>
      <example>
        次のコードは、レポートにデータがない場合に、そのレポートをキャンセルします。
        <code>
          <![CDATA[
          private void c1r_NoData(object sender, EventArgs e)
          {
            _c1r.Cancel = true;
          }
          ]]>
        </code>
      </example>
    </member>
    <member name="E:C1.C1Report.C1Report.StartPage">
      <summary>コントロールが各ページのレンダリングを開始すると発生します。</summary>
      <remarks>
        <para>このイベントは、ユーザーインタフェースを更新して、これまでに印刷されたページ数を表示する場合に使用できます。</para>
        <para>
          このイベントの処理中に
          <see cref="P:C1.C1Report.C1Report.Cancel" />プロパティを使用して、レポートのレンダリングをキャンセルできます。印刷できるページ数を制限するには、
          <see cref="P:C1.C1Report.C1Report.MaxPages" />プロパティを使用します。
        </para>
      </remarks>
    </member>
    <member name="E:C1.C1Report.C1Report.EndPage">
      <summary>コントロールが各ページのレンダリングを終了すると発生します。</summary>
      <remarks>
        <para>このイベントは、ユーザーインタフェースを更新して、これまでに印刷されたページ数を表示する場合に使用できます。</para>
        <para>
          このイベントの処理中に
          <see cref="P:C1.C1Report.C1Report.Cancel" />プロパティを使用して、レポートのレンダリングをキャンセルできます。印刷できるページ数を制限するには、
          <see cref="P:C1.C1Report.C1Report.MaxPages" />プロパティを使用します。
        </para>
      </remarks>
    </member>
    <member name="E:C1.C1Report.C1Report.StartSection">
      <summary>
        各
        <see cref="T:C1.C1Report.Section" />が書式設定される前に発生します。
      </summary>
      <remarks>
        <para>このイベントが発生した時点では、レポートフィールドは現在の値またはサイズで更新されていません。</para>
        <para>このイベントは、現在のデータ値に基づいてフィールドの書式設定パラメータや表示状態を設定する場所として適しています。</para>
        <para>
          このイベントは、
          <see cref="P:C1.C1Report.Section.OnFormat" />スクリプトプロパティと同じ機能です。
        </para>
      </remarks>
    </member>
    <member name="E:C1.C1Report.C1Report.PrintSection">
      <summary>
        各
        <see cref="T:C1.C1Report.Section" />が印刷される前に発生します（セクションを書式設定した後）。
      </summary>
      <remarks>
        <para>このイベントが発生した時点では、フィールドの値とサイズがコントロールによって設定されています。</para>
        <para>
          この値は変更できますが、フィールドのレイアウトには影響しません。たとえば、ここで、フィールドの
          <see cref="P:C1.C1Report.Field.Text" />プロパティを変更しても、フィールドは拡大または縮小されません。
        </para>
        <para>
          このイベントは、
          <see cref="P:C1.C1Report.Section.OnPrint" />スクリプトプロパティと同じ機能です。
        </para>
      </remarks>
    </member>
    <member name="E:C1.C1Report.C1Report.EndSection">
      <summary>
        コントロールが各
        <see cref="T:C1.C1Report.Section" />のレンダリングを終了すると発生します。
      </summary>
    </member>
    <member name="E:C1.C1Report.C1Report.ReportError">
      <summary>レポートのレンダリング中にエラーがあると発生します。</summary>
      <remarks>
        <para>レポートのレンダリング時に最もよく検出されるエラーは次のとおりです。</para>
        <para>
          １）
          <see cref="!:DataSource.ConnectionString" />パラメータまたは
          <see cref="!:DataSource.RecordSource" />パラメータが無効。通常、これは、システムが指定のデータベースを開くことができなかったか（サーバーがオフラインである、またはデータベースファイルが指定の場所にない）、
          <see cref="!:DataSource.RecordSource" />プロパティで使用されている SQL 構文にエラーがあることを示します。
        </para>
        <para>２）スクリプトの実行エラーまたは式の評価エラー。これは、通常、使用される VBScript 式に構文エラーがあることを示します。このような場合は、例外メッセージを確認してください。通常は、エラーの発生原因に関する適切な説明が記述されています。</para>
      </remarks>
    </member>
    <member name="E:C1.C1Report.C1Report.InitializeParametersDialog">
      <summary>
        コントロールが
        <b>レポートパラメータの入力</b>ダイアログを表示する前に発生します。
      </summary>
      <remarks>
        <para>
          <see cref="!:DataSource.RecordSource" />プロパティに
          <b>PARAMETERS</b>節を含むレポートは、ユーザーがレポートパラメータを入力するためのダイアログを表示します。
        </para>
        <para>このイベントは、このダイアログが表示される前に発生するため、キャプション、フォント、色などを変更してダイアログをカスタマイズできます。</para>
      </remarks>
      <example>
        次のコードは、
        <b>InitializeParametersDialog</b> イベントを使用してレポートパラメータの値を変更し、パラメータダイアログの表示を抑制します。
        <code>
          <![CDATA[
          private void c1Report1_InitializeParametersDialog(object sender, C1.C1Report.DialogEventArgs e)
          {
            // パラメータ値を変更します
            ReportParameterCollection p = e.Parameters;
            p["TheString"].Value = "east";
            p["TheNumber"].Value = 12;
            p["TheDate"].Value = DateTime.Now;
            p["TheBool"].Value = true;
            
            // ダイアログを表示ません
            e.ShowDialog = false;
          }
          ]]>
        </code>
      </example>
    </member>
    <member name="E:C1.C1Report.C1Report.AddOutlineEntry">
      <summary>コントロールがレポートにアウトラインエントリを追加する前に発生します。</summary>
      <remarks>
        <para>レポート出力形式によっては、レポートグループに基づいて構築されるアウトラインが含まれます。たとえば、PDF レポートでは、このアウトラインがリーダーアプリケーションの左側のペインに表示されます。</para>
        <para>
          アウトラインには、グループヘッダーごとに１つのエントリが含まれ、エントリのテキストは、グループの
          <see cref="P:C1.C1Report.Group.GroupBy" />式の値に基づいて表示されます。
        </para>
        <para>このイベントを使用して、アウトラインに表示されるテキストを変更したり、テキストを非表示にできます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.UsePrinterResolution">
      <summary>高解像度で描画するために印刷解像度を使用するかどうかを指定します。</summary>
      <remarks>
        <para>
          デフォルトでは、
          <see cref="T:C1.C1Report.C1Report" />は高解像度
          <see cref="T:System.Drawing.Graphics" />オブジェクトを取得するためにインストールされたプリンタをスキャンします。
        </para>
        <para>この手順を飛ばして画面解像度を使用してレポートを生成するためには、このプロパティを false に設定してください。</para>
        <para>ある状況下、とりわけ Windows サービスで実行するときに、.NET 印刷機能は正常に機能せず、インストールされたプリンタを列挙しようとしてメモリ割り当て問題が発生する可能性があります。このような場合には、このプロパティを false に設定する必要があります。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.CreationDevice">
      <summary>
        レポートの生成時に参照グラフィックスの提供に使用される デバイスのタイプを取得または設定します。 このプロパティが
        <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Printer" />（デフォルト）の場合、
        <see cref="P:C1.C1Report.C1Report.CreationPrinterName" />はプリンタを指定します。
      </summary>
      <remarks>
        <para>
          これや関連の
          <see cref="P:C1.C1Report.C1Report.CreationPrinterName" />プロパティの目的が
          <see cref="T:C1.C1Preview.C1PrintDocument" />のそれらのプロパティと同じ場合、
          <see cref="T:C1.C1Report.C1Report" />のデフォルトは静的プロパティである
          <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementDevice" />と
          <see cref="P:C1.C1Preview.C1PrintDocument.MeasurementPrinterName" />の影響を受けないことに注意してください。 代わりに、
          <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Printer" />がデフォルトとして使用され、 デフォルトプリンタ名は null（プリンタを自動的に選択）です。 これは旧バージョンとの互換性のために行われています。
        </para>
        <para>
          通常、すべてのインストールされているプリンタが高解像度の参照
          <see cref="T:System.Drawing.Graphics" />オブジェクトを取得するためにスキャンされます。 この処理を省略するには、このプロパティを
          <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Screen" />に設定します。 これでレンダリングをスピードアップできますが、 その際にレイアウトの精度が多少失われる場合があります。
        </para>
      </remarks>
      <seealso cref="P:C1.C1Report.C1Report.CreationPrinterName" />
      <seealso cref="P:C1.C1Report.C1Report.CreationDpi" />
      <seealso cref="P:C1.C1Report.C1Report.CreationGraphics" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationPrinterName" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Report.C1Report.CreationPrinterName">
      <summary>
        レポートの生成時に参照グラフィックスの提供に使用される プリンタの名前を取得または設定します。
        <para>
          このプロパティは
          <see cref="P:C1.C1Report.C1Report.CreationDevice" />を
          <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Printer" />に設定した場合にのみ使用されます。
        </para><para>
          このプロパティを
          <b>null</b>設定すると、参照プリンタを自動的に選択します。
        </para>
      </summary>
      <seealso cref="P:C1.C1Report.C1Report.CreationDevice" />
      <seealso cref="P:C1.C1Report.C1Report.CreationDpi" />
      <seealso cref="P:C1.C1Report.C1Report.CreationGraphics" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationPrinterName" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Report.C1Report.CreationDpi">
      <summary>レポートの生成時に使用される解像度（DPI）を取得または設定します。</summary>
      <seealso cref="P:C1.C1Report.C1Report.CreationDevice" />
      <seealso cref="P:C1.C1Report.C1Report.CreationPrinterName" />
      <seealso cref="P:C1.C1Report.C1Report.CreationGraphics" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationPrinterName" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Report.C1Report.CreationGraphics">
      <summary>
        レポートの生成時に参照として使用する
        <see cref="T:System.Drawing.Graphics" />オブジェクトを取得または設定します。 この
        <b>Graphics</b>はテキストサイズの計算、RTF テキストの測定などに使用されます。
      </summary>
      <seealso cref="P:C1.C1Report.C1Report.CreationDevice" />
      <seealso cref="P:C1.C1Report.C1Report.CreationPrinterName" />
      <seealso cref="P:C1.C1Report.C1Report.CreationDpi" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationPrinterName" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Report.C1Report.ActualCreationDevice">
      <summary>
        レポートの生成に使用された実際の測定デバイスを取得します。 このデバイスは、
        <see cref="P:C1.C1Report.C1Report.CreationDevice" />での指定と異なることができます（
        <see cref="P:C1.C1Report.C1Report.CreationDevice" />を
        <see cref="F:C1.C1Preview.MeasurementDeviceEnum.Printer" />に設定した場合に 現在のシステムにプリンタがインストールされていない場合など）。
      </summary>
      <seealso cref="P:C1.C1Report.C1Report.CreationDevice" />
      <seealso cref="P:C1.C1Report.C1Report.CreationPrinterName" />
      <seealso cref="P:C1.C1Report.C1Report.CreationDpi" />
      <seealso cref="P:C1.C1Report.C1Report.CreationGraphics" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Report.C1Report.ActualCreationPrinterName">
      <summary>
        レポートの生成に使用された実際の測定プリンタを取得します。 これは、
        <see cref="P:C1.C1Report.C1Report.CreationPrinterName" />で指定された名前と異なることができます （該当するプリンタがないシステム上でレポートがレンダリングされた場合など）。
      </summary>
      <seealso cref="P:C1.C1Report.C1Report.CreationDevice" />
      <seealso cref="P:C1.C1Report.C1Report.CreationPrinterName" />
      <seealso cref="P:C1.C1Report.C1Report.CreationDpi" />
      <seealso cref="P:C1.C1Report.C1Report.CreationGraphics" />
      <seealso cref="P:C1.C1Report.C1Report.ActualCreationDevice" />
    </member>
    <member name="P:C1.C1Report.C1Report.PageRenderingMode">
      <summary>
        レポートの生成時に使用する ページレンダリングモードを指定する値を取得または設定します。 デフォルトモードを使用するとメモリ不足になる非常に大きいレポートに
        <see cref="F:C1.C1Report.PageRenderingMode.AsMetafiles" />を使用します。
      </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.FontProcessingOptions">
      <summary>
        レポートの生成時にフォントの代替と埋め込みを処理する方法を決定する
        <see cref="P:C1.C1Report.C1Report.FontProcessingOptions" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.CompatibilityOptions">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />の旧バージョンとの互換性を決める
        <see cref="P:C1.C1Report.C1Report.CompatibilityOptions" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.ColorizeHyperlinks">
      <summary>
        レポート内のハイパーリンクに自動的に色を付けるかどうかを示す値を取得または設定します。
        <para>
          デフォルトは
          <c>false</c>です（
          <c>C1Report</c>の旧バージョンと互換性があります）。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.GeneratingComplete">
      <summary>
        現在のレポートが生成中の場合（
        <see cref="P:C1.C1Report.C1Report.IsBusy" />を参照）、 0（0% 完了）～1（100% 完了）の範囲でおおよその完了率を取得します。 レポートが現在生成中でない場合は、１になります。
      </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.EmfType">
      <summary>
        現在のレポートで作成されるメタファイルのタイプを取得または設定します。 デフォルトは
        <see cref="F:System.Drawing.Imaging.EmfType.EmfOnly" />です。
      </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.UseGdiPlusTextRendering">
      <summary>
        GDI+ テキスト API を使用して現在のレポート内のすべてのテキストを 描画するかどうかを示す値を取得または設定します。
        <para>
          デフォルト値は
          <b>false</b>です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.ReportName">
      <summary>レポートの名前（Load メソッドで使用）を取得または設定します。</summary>
      <remarks>
        <para>レポートをレポート定義ファイルに保存するときに、このプロパティでレポートを識別します。</para>
        <para>
          レポート定義ファイルからレポートを取得するには、
          <see cref="M:C1.C1Report.C1Report.Load(System.String,System.String)" />メソッドを使用し、この名前をパラメータとして渡します。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.ReportInfo">
      <summary>
        レポートのメタデータを含む
        <see cref="P:C1.C1Report.C1Report.ReportInfo" />オブジェクトを取得または設定します。
      </summary>
      <remarks>
        <para>レポートには、タイトル、作成者、キーワードなどの一般情報を含めることができます。</para>
        <para>このようなドキュメント自体に関するグローバル情報（コンテンツや構造ではなく）はメタデータと呼ばれ、外部データベースでレポートやレポート定義をカタログ化したり検索する際に役立ちます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.DataSource">
      <summary>
        レポートの
        <see cref="P:C1.C1Report.C1Report.DataSource" />オブジェクトへの参照を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.Layout">
      <summary>
        レポートの
        <see cref="P:C1.C1Report.C1Report.Layout" />オブジェクトへの参照を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.Font">
      <summary>新しいフィールドのデフォルトフォントを取得または設定します。</summary>
      <remarks>このプロパティは、レポートのレンダリング時には直接使用されません。新しいフィールドのデフォルトフォントとして使用されます。</remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.MaxPages">
      <summary>１つのレポートに許可される最大ページ数を取得または設定します。</summary>
      <remarks>
        <para>このプロパティは、レポート内のページの最大数を制限する場合に役立ちます。</para>
        <para>たとえば、プレビューウィンドウにレポートの最初の５ページだけを表示するようなレポートデザイナを記述できます。</para>
        <para>このプロパティを０に設定すると、任意の長さのレポートが許可されます。</para>
        <para>
          <see cref="P:C1.C1Report.DataSource.MaxRecords" />プロパティを設定してレポートの大きさを制限することもできます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.DoEvents">
      <summary>レポートのレンダリング中に、コントロールが Windows のメッセージを処理するかどうかを指定します。</summary>
      <remarks>
        <para>このプロパティを true に設定すると、レポートの生成中に、ユーザーがフォームをサイズ変更したり、ボタンをクリックすることができます。これにより、アプリケーションの応答性がよくなります。また、レポートのキャンセルボタンを提供する場合には必要です。そうしないと、レポートの生成が終了するまで、ユーザーはこのボタンをクリックできなくなります。</para>
        <para>このプロパティを false に設定すると、レポートが多少速くレンダリングされます。</para>
      </remarks>
      <example>
        <para>
          次のコードは、
          <see cref="T:C1.C1Report.C1Report" />コンポーネントに関連付けられた［Render］ボタンと［Cancel］ボタンを実装します。
        </para>
        <para>
          ［Render］ボタンは、レポートのレンダリングを開始する前に
          <see cref="T:C1.C1Report.C1Report" />コンポーネントがビジー状態かどうかをチェックします。コンポーネントがレポートのレンダリングを終了する前に、ユーザーが連続して［Render］ボタンをクリックする可能性があるため、この処理は必要です。コンポーネントがビジー状態のときに
          <see cref="M:C1.C1Report.C1Report.Render" />メソッドを呼び出すと、
          <see cref="T:System.Exception" />が生成されます。
        </para>
        <para>
          ［Cancel］ボタンは、コンポーネントがレポートをレンダリングしているかどうかをチェックし、
          <see cref="P:C1.C1Report.C1Report.Cancel" />プロパティを true に設定します。
        </para>
        <code>
          <![CDATA[
          _c1r.DoEvents = true;
          private void Render_Click(object sender, EventArgs e)
          {
            if (_c1r.IsBusy)
            {
              Console.WriteLine("コンポーネントがビジー状態なので描画できません");
            }
            else
            {
              ppv.Document = c1r.Document;
            }
          }
          
          private void Cancel_Click(object sender, EventArgs e)
          {
            if (_c1r.IsBusy)
            {
              _c1r.Cancel = true;
            }
            else
            {
              Console.WriteLine("レポート描画をキャンセルしません");
            }
          }
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.C1Report.C1Report.OnOpen">
      <summary>
        レポートがレンダリングを開始するときに実行される
        <b>VBScript</b>を取得または設定します。
      </summary>
      <remarks>
        <para>
          また、コントロールは、同時に
          <see cref="E:C1.C1Report.C1Report.StartReport" />イベントを発生させます。
        </para>
        <para>通常のイベントと VBScript プロパティの違いは、通常のイベントのハンドラがアプリケーションに属し、したがって、レポートからは独立した作業をサポートするために使用されることです。たとえば、レンダリングの開始時にメインウィンドウにメッセージを表示できます。</para>
        <para>このプロパティの VBScript ハンドラはレポートに属し、アプリケーションに関係なく実行されます。たとえば、レポートがレンダリングを開始するときに、VBScript コンテキスト内のグローバル変数をリセットする VBScript ハンドラをレポートに入れることができます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.OnClose">
      <summary>
        レポートがレンダリングを終了するときに実行される
        <b>VBScript</b>を取得または設定します。
      </summary>
      <remarks>
        <para>
          また、コントロールは、同時に
          <see cref="E:C1.C1Report.C1Report.EndReport" />イベントを発生させます。
        </para>
        <para>通常のイベントと VBScript プロパティの違いは、通常のイベントのハンドラがアプリケーションに属し、したがって、レポートからは独立した作業をサポートするために使用されることです。たとえば、レンダリングの終了時にメインウィンドウにメッセージを表示できます。</para>
        <para>このプロパティの VBScript ハンドラはレポートに属し、アプリケーションに関係なく実行されます。たとえば、レポートがレンダリングを開始するときに、VBScript コンテキスト内のグローバル変数をリセットする VBScript ハンドラをレポートに入れることができます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.OnNoData">
      <summary>
        レポートがレンダリングを開始し、そのソースレコードセットが空の場合に実行される
        <b>VBScript</b>を取得または設定します。
      </summary>
      <remarks>
        <para>
          また、コントロールは、同時に
          <see cref="E:C1.C1Report.C1Report.NoData" />イベントを発生させます。
        </para>
        <para>通常のイベントと VBScript プロパティの違いは、通常のイベントのハンドラがアプリケーションに属し、したがって、レポートからは独立した作業をサポートするために使用されることです。たとえば、データがないレポートのレンダリングをキャンセルできます。</para>
        <para>このプロパティの VBScript ハンドラはレポートに属し、アプリケーションに関係なく実行されます。たとえば、レポートには、ソースレコードセットが空の場合にフィールドの値を変更する VBScript ハンドラを入れることができます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.OnPage">
      <summary>
        新しいページが作成されるときに実行される
        <b>VBScript</b>を取得または設定します。
      </summary>
      <remarks>
        <para>
          また、コントロールは、同時に
          <see cref="E:C1.C1Report.C1Report.StartPage" />イベントを発生させます。
        </para>
        <para>通常のイベントと VBScript プロパティの違いは、通常のイベントのハンドラがアプリケーションに属し、したがって、レポートからは独立した作業をサポートするために使用されることです。たとえば、これまでにレンダリングされたページ数を示すラベルを更新します。</para>
        <para>このプロパティの VBScript ハンドラはレポートに属し、アプリケーションに関係なく実行されます。たとえば、ページ区切りごとに変数を更新する VBScript ハンドラをレポートに入れることができます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.OnError">
      <summary>
        エラーが発生したときに実行される
        <b>VBScript</b>を取得または設定します。
      </summary>
      <remarks>
        <para>
          また、コントロールは、同時に
          <see cref="E:C1.C1Report.C1Report.ReportError" />イベントを発生させます。
        </para>
        <para>通常のイベントと VBScript プロパティの違いは、通常のイベントのハンドラがアプリケーションに属し、したがって、レポートからは独立した作業をサポートするために使用されることです。たとえば、エラーの発生時にアプリケーションのダイアログボックスを表示できます。</para>
        <para>このプロパティの VBScript ハンドラはレポートに属し、アプリケーションに関係なく実行されます。たとえば、レポートには、エラーが発生した場合にフィールドの値を変更する VBScript ハンドラを入れることができます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.GlobalScripts">
      <summary>
        グローバル
        <b>VBScript</b>モジュールを取得または設定します。 ここで（標準の VBScript 構文を使用して）定義される関数とサブルーチンは、標準の VBScript 関数と同様に、 現在のレポートの他のスクリプトで使用できます。
      </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.Page">
      <summary>現在のページ番号を取得または設定します。</summary>
      <remarks>
        <para>
          このプロパティは、
          <b>VBScript</b>式で使用できるグローバル変数の１つです。
        </para>
        <para>このプロパティは、レポートがレンダリングを開始するときにコントロールによって自動的に１に初期化され、ページ区切りごとに１ずつ値が増えます。</para>
        <para>このプロパティは読み書き可能なので、スクリプトを使ってリセットできます。たとえば、新しいグループのレンダリングが開始されるたびに現在のページを１にリセットできます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.Cancel">
      <summary>現在のレポートの生成をキャンセルするかどうかを指定します。</summary>
      <remarks>レポートの生成中にこのプロパティを true に設定すると、レポート生成処理が中止されます。すでに作成されたページはドキュメントに保持され、関連付けられた印刷プレビューコントロールでプレビューまたは印刷できます。</remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.IsBusy">
      <summary>レポートが現在生成中であるかどうかを判定する値を取得します。</summary>
      <remarks>
        <para>このプロパティを使用して、コントロールが現在レポートの生成中でビジーかどうかを判定します。</para>
        <para>
          このプロパティは、
          <see cref="P:C1.C1Report.C1Report.DoEvents" />プロパティが true に設定されている場合に特に便利です。この場合、アプリケーションは、コントロールがレポートを生成中でもユーザー入力を処理し続けるため、ユーザーは、現在のレポートの生成が終了する前に別のレポートの生成を開始できます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.Tag">
      <summary>呼び出し側のプログラムで必要な追加のデータを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.C1Report.ParentReport">
      <summary>このサブレポートを含むメインレポートを取得します（これがメインレポートの場合は null）。</summary>
    </member>
    <member name="P:C1.C1Report.C1Report.Document">
      <summary>
        レポートをプリンタまたは印刷プレビューコントロールにレンダリングするために使用できる
        <see cref="T:System.Drawing.Printing.PrintDocument" />オブジェクトを取得します。
      </summary>
      <example>
        次の例は、
        <see cref="P:C1.C1Report.C1Report.Document" />プロパティを使用して、レポートを印刷したり、
        <see cref="T:System.Windows.Forms.PrintPreviewDialog" />コントロールにレポートを表示する方法を示します。
        <code>
          <![CDATA[
          // デフォルトプリンタにレポートを出力します
          _c1r.Document.Print();
          
          // レポートを PrintPreviewDialog に表示します
          PrintPreviewDialog p = new PrintPreviewDialog();
          p.Document = _c1r.Document;
          p.ShowDialog();
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.C1Report.C1Report.PageImages">
      <summary>
        レポート内のページに対応する
        <see cref="T:System.Drawing.Imaging.Metafile" />オブジェクトのリストを取得します。
      </summary>
      <remarks>
        <see cref="M:C1.C1Report.C1Report.Render" />メソッドを使用して、ページイメージを作成または更新します。
      </remarks>
      <seealso cref="M:C1.C1Report.C1Report.GetPageImages" />
      <seealso cref="M:C1.C1Report.C1Report.GetPageImage(System.Int32)" />
      <seealso cref="M:C1.C1Report.C1Report.GetPageCount" />
    </member>
    <member name="P:C1.C1Report.C1Report.C1Document">
      <summary>
        レポートのコンテンツを表す
        <see cref="T:C1.C1Preview.C1PrintDocument" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.Groups">
      <summary>レポート内のすべてのグループを含むコレクションを取得します。</summary>
      <remarks>
        <para>
          <b>Groups</b>コレクションには、現在のレポートで定義されているすべての
          <see cref="T:C1.C1Report.Group" />オブジェクトが含まれます。
        </para>
        <para>
          コレクションから
          <b>Group</b>を削除すると、関連付けられているヘッダーセクションとフッターセクション、およびこれらのセクション内のすべてのフィールドも削除されます。
        </para>
        <para>
          コレクションに
          <b>Group</b>を追加すると、対応するグループヘッダーセクションとグループフッターセクションがレポートに追加されます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.Sections">
      <summary>
        レポート定義内の
        <see cref="T:C1.C1Report.Section" />オブジェクトのコレクションを取得します。
      </summary>
      <remarks>このコレクションには、常に表示される標準のレポートセクションに対応した少なくとも５つの項目（Detail、Header、Footer、PageHeader、PageFooter）が含まれます。</remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.Fields">
      <summary>
        レポート定義内の
        <see cref="T:C1.C1Report.Field" />オブジェクトのコレクションを取得します。
      </summary>
      <remarks>
        <see cref="T:C1.C1Report.Section" />オブジェクトには、そのセクション内のフィールドのコレクションも含まれます。
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.ReportDefinition">
      <summary>完全なレポート定義を含む XML 文字列を取得または設定します。</summary>
      <remarks>
        このプロパティを使用して、データベースにレポート定義を格納したり、クリップボードにレポート定義を配置したり、１つの
        <see cref="T:C1.C1Report.C1Report" />コンポーネントから別のコンポーネントにレポートをコピーすることができます。
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.OutlineRootLevel">
      <summary>このレポート内のグループの開始アウトラインレベルを取得または設定します。</summary>
      <remarks>
        <para>
          デフォルトでは、
          <see cref="T:C1.C1Report.C1Report" />は、レポートグループに基づいてアウトラインを作成します。アウトラインはレベル０から始まり、PDF バージョンのレポートに表示されます。
        </para>
        <para>このプロパティを使用して、カスタムレベルでレポートを開始できます。これは、複数のレポートを１つの大きなドキュメントにレンダリングする場合に便利です（たとえば、C1PrintDocument を使用）。</para>
        <para>このプロパティを -1 に設定して、アウトラインを非表示にできます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.LabelOffset">
      <summary>一部が使用済みのシートの最初のラベルの位置を取得または設定します。</summary>
      <remarks>
        このプロパティを使用して、一部が使用済みのラベルシートにラベルを印刷できます。たとえば、１枚のシートで 12 枚のラベルを印刷でき、５枚のラベルが使用済みの場合は、
        <b>LabelOffset</b>プロパティを６に設定すると、すでに使用済みのラベルをスキップできます。
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.GrowShrinkMode">
      <summary>CanGrow/CanShrink フィールドの処理に使用される方法を取得または設定します。</summary>
      <remarks>
        <para>
          このプロパティが
          <see cref="F:C1.C1Report.GrowShrinkModeEnum.C1Report" />に設定されている場合は、
          <see cref="P:C1.C1Report.Field.CanGrow" />または
          <see cref="P:C1.C1Report.Field.CanShrink" />プロパティが true に設定されているフィールドが拡大または縮小すると、その真下にあるフィールドが移動します。下にあっても水平方向に重なっていないフィールドは移動しません。
        </para>
        <para>
          このプロパティが
          <see cref="F:C1.C1Report.GrowShrinkModeEnum.Access" />に設定されている場合、フィールドが拡大または縮小すると、
          <b>CanGrow</b>/
          <b>CanShrink</b>の結果として変更されたフィールドの真下にないフィールドでも、その下にあるすべてのフィールドに影響します。これは、Microsoft Access の動作と同じです。
        </para>
        <para>
          たとえば、フィールドがグリッドレイアウトで配置され、
          <see cref="P:C1.C1Report.C1Report.GrowShrinkMode" />が
          <see cref="F:C1.C1Report.GrowShrinkModeEnum.Access" />に設定されている場合、上部のフィールドが拡大または縮小しても、その下にある各行内のフィールドは垂直方向に整列したままになります。
        </para>
        <para>
          <see cref="P:C1.C1Report.C1Report.GrowShrinkMode" />が
          <see cref="F:C1.C1Report.GrowShrinkModeEnum.C1Report" />に設定されている場合、各列内のフィールドは他の列内のフィールドとは無関係に移動し、各行内のフィールドは垂直方向に整列しなくなります。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.IgnoreScriptErrors">
      <summary>コンポーネントがデフォルトでスクリプトエラーを無視するかどうかを指定します。</summary>
      <remarks>
        <para>
          スクリプトインタープリタがスクリプトまたは式でエラーを見つけると、コンポーネントが
          <see cref="E:C1.C1Report.C1Report.ReportError" />イベントを生成します。このプロパティは、そのイベントの
          <b>Handled</b>パラメータのデフォルト値を指定します。
        </para>
        <para>
          <b>IgnoreScriptErrors</b>が true に設定されると、デフォルトでスクリプトエラーは無視されます（
          <b>Handled</b>パラメータが true に初期化される）。
        </para>
        <para>
          <b>IgnoreScriptErrors</b>が false に設定されると、デフォルトでスクリプトエラーは例外を生成します（
          <b>Handled</b>パラメータが false に初期化される）。
        </para>
        <para>
          どちらの場合も、
          <see cref="E:C1.C1Report.C1Report.ReportError" />イベントハンドラで
          <b>Handled</b>パラメータの値を変更して、デフォルトをオーバーライドできます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.ExposeScriptObjects">
      <summary>
        <see cref="M:C1.C1Report.C1Report.AddScriptObject(System.String,System.Object)" />メソッドで追加されたスクリプトオブジェクトがサブレポートに公開されるかどうかを指定します。
      </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.RecordsPerPage">
      <summary>１ページに出力される詳細セクションの数を取得または設定します。</summary>
      <remarks>詳細セクションを指定した数だけ出力したら、改ページが挿入されます。また、１ページの詳細セクション数が指定した数に満たない場合は、不足分だけ空行（データが空の詳細セクション）を挿入します。</remarks>
    </member>
    <member name="P:C1.C1Report.C1Report.AvailableHeight">
      <summary>
        現在のページのセクションで利用できる残りの領域の高さを取得します。 このプロパティは、レポートの描画中（
        <see cref="P:C1.C1Report.C1Report.IsBusy" />が true）の場合のみ使用できます。 その他の場合は値
        <b>-1</b>が返されます。 OnPrint/OnFormat スクリプトで使用した場合、この値はまだ現在のセクションを反映していません。
      </summary>
      <remarks>
        OnFormat スクリプトの詳細スクリプトで使用できるコードの例を示します。 現在の詳細セクションがページ上で印刷される最後のセクションかどうかを判定します （テストは現在のセクションがページに収まり、次のセクションが収まらないことをテストします）。
        <code>
          <![CDATA[
          h = Detail.RenderHeight
          ah = Report.AvailableHeight
          if (h &lt; ah) and (2 * h &gt; ah) then
            Detail.BackColor = RGB(255, 0, 0) ' ページで最後
          else
            Detail.BackColor = RGB(255, 255, 255)
          endif
          ]]>
        </code>
      </remarks>
    </member>
    <member name="T:C1.C1Report.C1Report.EditExpressionDelegate">
      <summary>スクリプトエディタのカスタムハンドラの指定に使用されるデリゲートタイプ。</summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Report.C1Report" />コンポーネントが
          <see cref="T:System.Windows.Forms.PropertyGrid" />コントロールと共に使用される場合、 プロパティグリッドはカスタムのタイプエディタを使用して、スクリプト、 ステートメント、およびデータソースプロパティを編集するためのユーザーインタフェース要素を提供します。
        </para>
        <para>このデリゲートでは、レポートデザイナアプリケーションはこれらの要素を編集するための 独自のユーザーインタフェースを提供できます。</para>
        <para>
          これらのデリゲートの使用方法の例については、C1Report Designer Edition に付属する
          <b>C1ReportDesigner</b>アプリケーションのソースコードを 参照してください。
        </para>
      </remarks>
    </member>
    <member name="T:C1.C1Report.C1Report.EditDataSourceDelegate">
      <summary>データソースエディタのカスタムハンドラの指定に使用されるデリゲートタイプ。</summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Report.C1Report" />コンポーネントが
          <see cref="T:System.Windows.Forms.PropertyGrid" />コントロールと共に使用される場合、 プロパティグリッドはカスタムのタイプエディタを使用して、スクリプト、 ステートメント、およびデータソースプロパティを編集するためのユーザーインタフェース要素を提供します。
        </para>
        <para>このデリゲートでは、レポートデザイナアプリケーションはこれらの要素を編集するための 独自のユーザーインタフェースを提供できます。</para>
        <para>
          これらのデリゲートの使用方法の例については、C1Report Designer Edition に付属する
          <b>C1ReportDesigner</b>アプリケーションのソースコードを 参照してください。
        </para>
      </remarks>
    </member>
    <member name="T:C1.C1Report.ReportEventHandler">
      <summary>
        <see cref="E:C1.C1Report.C1Report.StartPage" />、
        <see cref="E:C1.C1Report.C1Report.EndPage" />、
        <see cref="E:C1.C1Report.C1Report.StartSection" />、
        <see cref="E:C1.C1Report.C1Report.PrintSection" />、
        <see cref="E:C1.C1Report.C1Report.EndSection" />、
        <see cref="E:C1.C1Report.C1Report.ReportError" />、および
        <see cref="E:C1.C1Report.C1Report.AddOutlineEntry" />イベントを処理するメソッドを表します。
      </summary>
    </member>
    <member name="T:C1.C1Report.ReportEventArgs">
      <summary>
        <see cref="E:C1.C1Report.C1Report.StartPage" />、
        <see cref="E:C1.C1Report.C1Report.EndPage" />、
        <see cref="E:C1.C1Report.C1Report.StartSection" />、
        <see cref="E:C1.C1Report.C1Report.PrintSection" />、
        <see cref="E:C1.C1Report.C1Report.EndSection" />、
        <see cref="E:C1.C1Report.C1Report.ReportError" />、および
        <see cref="E:C1.C1Report.C1Report.AddOutlineEntry" />イベントのデータを提供します。
      </summary>
    </member>
    <member name="F:C1.C1Report.ReportEventArgs.Page">
      <summary>現在のページ。</summary>
    </member>
    <member name="F:C1.C1Report.ReportEventArgs.Section">
      <summary>現在のセクション。</summary>
    </member>
    <member name="F:C1.C1Report.ReportEventArgs.Exception">
      <summary>
        エラーの原因となった
        <see cref="F:C1.C1Report.ReportEventArgs.Exception" />。
      </summary>
      <remarks>
        このプロパティは、
        <see cref="E:C1.C1Report.C1Report.ReportError" />イベントでのみ使用されます。
      </remarks>
    </member>
    <member name="F:C1.C1Report.ReportEventArgs.Handled">
      <summary>
        コンポーネントが、検出された
        <see cref="F:C1.C1Report.ReportEventArgs.Exception" />を生成するか、それともエラーを無視してレポートのレンダリングを続行するかを示す値を取得または設定します。
      </summary>
      <remarks>
        このプロパティは、
        <see cref="E:C1.C1Report.C1Report.ReportError" />イベントでのみ使用されます。
      </remarks>
    </member>
    <member name="F:C1.C1Report.ReportEventArgs.Text">
      <summary>アウトラインエントリとして使用されるテキストを取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <see cref="E:C1.C1Report.C1Report.AddOutlineEntry" />イベントでのみ使用されます。
      </remarks>
    </member>
    <member name="T:C1.C1Report.DialogEventHandler">
      <summary>
        <see cref="E:C1.C1Report.C1Report.InitializeParametersDialog" />イベントを処理するメソッドを表します。
      </summary>
    </member>
    <member name="T:C1.C1Report.DialogEventArgs">
      <summary>
        <see cref="E:C1.C1Report.C1Report.InitializeParametersDialog" />イベントのデータを提供します。
      </summary>
    </member>
    <member name="F:C1.C1Report.DialogEventArgs.Dialog">
      <summary>
        表示されようとしている
        <see cref="T:System.Windows.Forms.Form" />への参照。
      </summary>
    </member>
    <member name="F:C1.C1Report.DialogEventArgs.ShowDialog">
      <summary>コンポーネントがパラメータダイアログを表示するかどうかを決定する値を取得または設定します。</summary>
    </member>
    <member name="F:C1.C1Report.DialogEventArgs.Parameters">
      <summary>レポートで定義されたパラメータのコレクションを取得します。</summary>
      <remarks>TODO</remarks>
    </member>
    <member name="T:C1.C1Report.AddOutlineEntryHandler">
      <summary>
        <see cref="E:C1.C1Report.C1Report.AddOutlineEntry" />イベントを処理するメソッドを表します。
      </summary>
    </member>
    <member name="T:C1.C1Report.ReportInfo">
      <summary>レポートのメタデータを含むクラス。</summary>
      <remarks>
        <para>レポートには、タイトル、作成者、キーワードなどの一般情報を含めることができます。</para>
        <para>このようなドキュメント自体に関するグローバル情報（コンテンツや構造ではなく）はメタデータと呼ばれ、外部データベースでレポートやレポート定義をカタログ化したり検索する際に役立ちます。</para>
      </remarks>
    </member>
    <member name="M:C1.C1Report.ReportInfo.Clear">
      <summary>
        <see cref="T:C1.C1Report.ReportInfo" />オブジェクトをクリアします。
      </summary>
    </member>
    <member name="M:C1.C1Report.ReportInfo.Clone">
      <summary>
        この
        <see cref="T:C1.C1Report.ReportInfo" />オブジェクトのコピーを返します。
      </summary>
      <returns>
        この
        <see cref="T:C1.C1Report.ReportInfo" />オブジェクトのコピー。
      </returns>
    </member>
    <member name="M:C1.C1Report.ReportInfo.ToString">
      <summary>
        現在の
        <see cref="T:C1.C1Report.ReportInfo" />オブジェクトを表す文字列を返します。
      </summary>
      <returns>
        現在の
        <see cref="T:C1.C1Report.ReportInfo" />オブジェクトを表す文字列を返します。
      </returns>
    </member>
    <member name="P:C1.C1Report.ReportInfo.Author">
      <summary>レポートを作成したユーザーの名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.ReportInfo.Title">
      <summary>レポートのタイトルを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.ReportInfo.Subject">
      <summary>レポートのサブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.ReportInfo.Keywords">
      <summary>レポートに関連付けられたキーワードを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.ReportInfo.Creator">
      <summary>レポートを作成したアプリケーションの名前を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Report.IReportScriptContext">
      <summary>スクリプトの評価と実行のローカルコンテキストを表します。</summary>
    </member>
    <member name="M:C1.C1Report.IReportScriptContext.GetObjectByName(System.String)">
      <summary>オブジェクトを名前で取得します。</summary>
      <param name="name">取得するオブジェクトの名前。</param>
      <returns>指定したオブジェクト。</returns>
    </member>
    <member name="M:C1.C1Report.IReportScriptContext.IsNameDefined(System.String)">
      <summary>指定された名前が現在のコンテキストに存在するかどうかをテストします。 コンテキストによって特定の名前が定義されている場合（このメソッドが true を返す場合）、 同じ名前のオブジェクトがすでに存在していても、 名前付きオブジェクトがコンテキストから取得されます。</summary>
      <param name="name">テストする名前。</param>
      <returns>名前がコンテキストに存在する場合は true、そうでない場合は false。</returns>
    </member>
    <member name="T:C1.C1Report.SectionTypeEnum">
      <summary>
        セクションのタイプを指定します。これは、コントロールの
        <see cref="P:C1.C1Report.C1Report.Sections" />コレクションに含まれる
        <see cref="T:C1.C1Report.Section" />オブジェクトのインデックスと同じです。
      </summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="P:C1.C1Report.Field.Section" />プロパティと
        <see cref="P:C1.C1Report.Section.Type" />プロパティの値を設定します。
      </remarks>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.Undefined">
      <summary>
        未定義。
        <see cref="M:C1.C1Report.FieldCollection.Add(System.String,System.String,System.Double,System.Double,System.Double,System.Double)" />メソッドを使って作成されたフィールドは、どのセクションにも属さず、レポートと共にレンダリングされません。
      </summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.Detail">
      <summary>詳細セクション：ソースレコードセット内の各レコードごとに繰り返し表示されます。</summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.Header">
      <summary>レポートヘッダーセクション：レポートの最初に１回表示されます。</summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.Footer">
      <summary>レポートフッターセクション：レポートの最後に１回表示されます。</summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.PageHeader">
      <summary>
        ページヘッダーセクション：
        <see cref="P:C1.C1Report.Layout.PageHeader" />プロパティの設定に従って、各ページの上部に表示されます。
      </summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.PageFooter">
      <summary>
        ページフッターセクション：
        <see cref="P:C1.C1Report.Layout.PageFooter" />プロパティの設定に従って、各ページの下部に表示されます。
      </summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.GroupHeader1">
      <summary>レベル１グループの前に表示されるグループヘッダーセクション。</summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.GroupFooter1">
      <summary>レベル１グループの後に表示されるグループフッターセクション。</summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.GroupHeader2">
      <summary>レベル２グループの前に表示されるグループヘッダーセクション。</summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.GroupFooter2">
      <summary>レベル２グループの後に表示されるグループフッターセクション。</summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.GroupHeader3">
      <summary>レベル３グループの前に表示されるグループヘッダーセクション。</summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.GroupFooter3">
      <summary>レベル３グループの後に表示されるグループフッターセクション。</summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.GroupHeader4">
      <summary>レベル４グループの前に表示されるグループヘッダーセクション。</summary>
    </member>
    <member name="F:C1.C1Report.SectionTypeEnum.GroupFooter4">
      <summary>レベル４グループの後に表示されるグループフッターセクション。</summary>
    </member>
    <member name="T:C1.C1Report.Section">
      <summary>レポート領域を表します。</summary>
      <remarks>
        <para>
          各
          <b>Section</b>オブジェクトには、セクション内の個別のデータ項目を表示するフィールドオブジェクトのコレクションが含まれます。
        </para>
        <para>各レポートには、次のセクションがあります。</para>
        <para>
          <b>詳細</b>セクション。
        </para>
        <para>
          <b>レポートヘッダー</b>セクションと
          <b>レポートフッター</b>セクション。
        </para>
        <para>
          <b>ページヘッダー</b>セクションと
          <b>ページフッター</b>セクション。
        </para>
        <para>
          レポート内の各
          <see cref="T:C1.C1Report.Group" />オブジェクトに
          <b>グループヘッダー</b>セクションと
          <b>グループフッター</b>セクション。
        </para>
        <para>
          レポート内のセクションの総数は、
          <code>
            <![CDATA[
            5 + 2 * Groups.Count
            ]]>
          </code>
          になります。セクションをレポートに直接追加したり、レポートから直接削除することはできません。セクションの数は、グループの数の関数になります。
        </para>
        <para>
          セクションは削除できませんが、
          <see cref="P:C1.C1Report.Section.Visible" />プロパティを false に設定して非表示にすることはできます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Section.Name">
      <summary>
        <see cref="T:C1.C1Report.Section" />名を取得または設定します。
      </summary>
      <remarks>
        <para>
          セクション名は、コントロールの
          <see cref="P:C1.C1Report.C1Report.Sections" />コレクションへのインデックスとして使用できます。
        </para>
        <para>
          セクション名は、
          <b>VBScript</b>式でフィールドを識別するためにも使用されます。
        </para>
        <para>重複または空のセクション名を使用することもできますが、セクション名をスクリプトで使用したり、インデクサとして使用する場合は避けてください。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Section.Visible">
      <summary>
        <see cref="T:C1.C1Report.Section" />がレポートにレンダリングされるかどうかを指定します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Section.Type">
      <summary>
        <see cref="T:C1.C1Report.Section" />のタイプ（PageHeader、Detail など）を返します。
      </summary>
      <seealso cref="T:C1.C1Report.SectionTypeEnum" />
    </member>
    <member name="P:C1.C1Report.Section.Fields">
      <summary>
        この
        <see cref="T:C1.C1Report.Section" />内のすべてのフィールドのコレクションを返します。
      </summary>
      <remarks>
        <para>
          <b>Fields</b>コレクションには、現在のセクションで定義されているすべての
          <see cref="T:C1.C1Report.Field" />オブジェクトが含まれます。
        </para>
        <para>
          セクションの
          <b>Fields</b>コレクションにフィールドを追加すると、そのフィールドは、そのコレクションを所有するセクションに自動的に割り当てられます。たとえば、次のコードは、フィールドを
          <b>Detail</b>セクションに追加します。
        </para>
        <code>
          <![CDATA[
          _c1r.Sections.Detail.Fields.Add("new field", "CompanyLogo", rc);
          ]]>
        </code>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Section.Tag">
      <summary>呼び出し側のプログラムで使用される追加のデータを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.Section.ParentReport">
      <summary>
        この
        <see cref="T:C1.C1Report.Section" />を含む
        <see cref="T:C1.C1Report.C1Report" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Section.Height">
      <summary>
        <see cref="T:C1.C1Report.Section" />の高さ（ツイップ単位）を取得または設定します。
      </summary>
      <remarks>
        <para>セクションの高さは、セクション内のすべてのフィールドに見合った十分な大きさを持つ必要があります。</para>
        <para>レポートデザイナは、フィールドが追加、移動、またはサイズ変更されると、セクションの高さを自動的に調整します。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Section.RenderHeight">
      <summary>
        <see cref="P:C1.C1Report.Section.CanGrow" />プロパティおよび
        <see cref="P:C1.C1Report.Section.CanShrink" />プロパティがセクションに適用された後のセクションの高さを返します。
      </summary>
      <remarks>
        <para>
          セクションが拡大または縮小しても、セクションの
          <see cref="P:C1.C1Report.Section.Height" />プロパティは変更されません。
        </para>
        <para>
          （たとえば、
          <see cref="P:C1.C1Report.Section.OnPrint" />イベントの処理中に）セクションのレンダリングに使用される実際の高さを取得する必要がある場合は、代わりに
          <see cref="P:C1.C1Report.Section.RenderHeight" />プロパティを使用してください。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Section.KeepTogether">
      <summary>
        <see cref="T:C1.C1Report.Section" />が１ページに収められるかどうかを指定します。
      </summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Report.Group" />オブジェクトと
          <see cref="T:C1.C1Report.Field" />オブジェクトにも、
          <b>KeepTogether</b>プロパティがあります。
        </para>
        <para>
          <see cref="T:C1.C1Report.Group" />オブジェクトの
          <see cref="P:C1.C1Report.Group.KeepTogether" />プロパティは、複数のセクションにまたがって機能します。このプロパティは、グループヘッダーを最初の詳細セクションと一緒にするか、それともグループ全体を１ページに収めるかなどを指定します。
        </para>
        <para>
          <see cref="T:C1.C1Report.Field" />オブジェクトの
          <see cref="P:C1.C1Report.Field.KeepTogether" />プロパティは、フィールドを１ページにレンダリングするか、それともページ区切りで分割可能かなどを指定します。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Section.ForcePageBreak">
      <summary>セクションがレンダリングされる前後にページ区切りが挿入されるかどうかを指定します。</summary>
      <seealso cref="T:C1.C1Report.ForcePageBreakEnum" />
    </member>
    <member name="P:C1.C1Report.Section.CanGrow">
      <summary>セクションの高さが、そのコンテンツに合わせて自動的に大きくなるかどうかを指定します。</summary>
      <remarks>
        <para>
          <see cref="P:C1.C1Report.Section.CanGrow" />プロパティと
          <see cref="P:C1.C1Report.Section.CanShrink" />プロパティを使用して、レポートのフィールドとセクションの外観を制御できます。
        </para>
        <para>たとえば、両方のプロパティを true に設定すると、セクションまたはフィールドに含まれるすべてのデータが印刷またはプレビューされるように、セクションまたはフィールドの高さが自動的に調整されます。</para>
        <para>セクションの幅全体が垂直方向に拡大または縮小されます。</para>
        <para>
          セクションが拡大または縮小しても、セクションの
          <see cref="P:C1.C1Report.Section.Height" />プロパティは変更されません。実際のレンダリング高さを取得するには、
          <see cref="P:C1.C1Report.Section.RenderHeight" />プロパティを使用します。
        </para>
        <para>
          <see cref="P:C1.C1Report.Field.Anchor" />プロパティを設定することで、フィールドをセクションのサイズに合わせて拡大または縮小できます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Section.CanShrink">
      <summary>
        １つ以上のフィールドが縮小された場合に、
        <see cref="T:C1.C1Report.Section" />の高さも縮小されるかどうかを指定します。
      </summary>
      <remarks>
        <para>
          <see cref="P:C1.C1Report.Section.CanGrow" />プロパティと
          <see cref="P:C1.C1Report.Section.CanShrink" />プロパティを使用して、レポートのフィールドとセクションのレイアウトを制御できます。
        </para>
        <para>たとえば、両方のプロパティを true に設定すると、セクションまたはフィールドに含まれるすべてのデータが印刷またはプレビューされるように、セクションまたはフィールドの高さが自動的に調整されます。</para>
        <para>
          セクションが拡大または縮小しても、セクションの
          <see cref="P:C1.C1Report.Section.Height" />プロパティは変更されません。実際の（調整された）高さを取得するには、
          <see cref="P:C1.C1Report.Section.RenderHeight" />プロパティを使用します。
        </para>
        <para>
          <see cref="P:C1.C1Report.Field.Anchor" />プロパティを設定することで、フィールドをセクションのサイズに合わせて拡大または縮小できます。
        </para>
      </remarks>
      <seealso cref="P:C1.C1Report.Section.CanGrow" />
    </member>
    <member name="P:C1.C1Report.Section.Repeat">
      <summary>
        <see cref="T:C1.C1Report.Section" />を各ページの先頭に繰り返し表示するかどうかを指定します。
      </summary>
      <remarks>
        <para>このプロパティは、グループヘッダーセクションにだけ適用されます。</para>
        <para>この値を true に設定すると、各ページの先頭（詳細セクションの前）にグループヘッダーが繰り返し表示されます。</para>
        <para>
          複数のグループがある場合は、
          <b>Repeat</b>プロパティが true に設定されているすべてのグループヘッダーセクションが各ページの先頭から順にレンダリングされます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Section.PrintAtPageBottom">
      <summary>
        マスターレポートのフッターセクションでのみ、 現在のセクションを詳細の真下ではなく、 ページフッターのすぐ上のページの下部に印刷するかどうかを示す値を取得または設定します。 デフォルトは
        <b>false</b>です。
        <para>このプロパティは、 非フッターセクションやサブレポートのフッターでは無視されます。</para>
      </summary>
    </member>
    <member name="P:C1.C1Report.Section.BackColor">
      <summary>
        この
        <see cref="T:C1.C1Report.Section" />の背景色を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Section.OnFormat">
      <summary>
        <see cref="T:C1.C1Report.Section" />が書式設定される前に実行される
        <b>VBScript</b>コードを含む文字列を取得または設定します。
      </summary>
      <remarks>
        <para>
          このプロパティには、セクション内のフィールドが計算される前に実行される
          <b>VBScript</b>命令が含まれます。このスクリプトが実行される時点で、レコードセットはセクションに表示されるデータをすでに保持していますが、それらのフィールドの値はまだ更新されていません。
        </para>
        <para>
          このイベントを使用して、計算が行われる前にフィールドに値を割り当てることができます。これにより、
          <see cref="P:C1.C1Report.Section.CanGrow" />プロパティまたは
          <see cref="P:C1.C1Report.Section.CanShrink" />プロパティが true に設定されている場合は、コントロールがフィールドのサイズや位置を計算するときに新しい値が考慮されます。
        </para>
        <para>
          フィールドの現在の値に基づいてフィールドのプロパティを設定する場合は、代わりに
          <see cref="P:C1.C1Report.Section.OnPrint" />プロパティを使用します。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Report.Section.OnPrint">
      <summary>
        <see cref="T:C1.C1Report.Section" />が書式設定された後で、印刷される前に実行される
        <b>VBScript</b>コードを含む文字列を取得または設定します。
      </summary>
      <remarks>
        このプロパティには、セクション内のフィールドが計算された後で実行される
        <b>VBScript</b>命令が含まれます。
      </remarks>
    </member>
    <member name="T:C1.C1Report.SectionCollection">
      <summary>
        <see cref="T:C1.C1Report.Section" />オブジェクトのコレクション。
      </summary>
    </member>
    <member name="M:C1.C1Report.SectionCollection.CopyTo(C1.C1Report.Section[],System.Int32)">
      <summary>
        コレクションの要素を特定の配列インデックス位置から順に
        <see cref="T:System.Array" />にコピーします。
      </summary>
      <param name="array">
        コレクションからコピーされる要素のコピー先の１次元
        <see cref="T:System.Array" />。配列のインデックスは０から始める必要があります。
      </param>
      <param name="index">コピーを開始する位置の０から始まる配列のインデックス。</param>
    </member>
    <member name="M:C1.C1Report.SectionCollection.Contains(C1.C1Report.Section)">
      <summary>
        コレクションに特定の
        <see cref="T:C1.C1Report.Section" />が含まれるかどうかを判定します。
      </summary>
      <param name="s">
        <see cref="T:C1.C1Report.Section" />オブジェクト。
      </param>
      <returns>コレクションに指定されたセクションが含まれる場合は True。そうでない場合は False。</returns>
    </member>
    <member name="P:C1.C1Report.SectionCollection.Item(System.Int32)">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Sections" />コレクションから１つのセクションを返します。
      </summary>
      <remarks>
        index パラメータには、０～
        <see cref="P:C1.C1Report.SectionCollection.Count" />-1 の整数を指定できます。
      </remarks>
    </member>
    <member name="P:C1.C1Report.SectionCollection.Item(C1.C1Report.SectionTypeEnum)">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Sections" />コレクションから１つのセクションを返します。
      </summary>
    </member>
    <member name="P:C1.C1Report.SectionCollection.Item(System.String)">
      <summary>
        <see cref="P:C1.C1Report.C1Report.Sections" />コレクションから１つのセクションを返します。
      </summary>
      <remarks>name パラメータには、セクション名を含む文字列を指定できます。</remarks>
    </member>
    <member name="P:C1.C1Report.SectionCollection.Detail">
      <summary>レポートの詳細セクションへの参照を返します。</summary>
      <remarks>このプロパティは、this[SectionTypeEnum.Detail] と同じです。</remarks>
    </member>
    <member name="P:C1.C1Report.SectionCollection.Header">
      <summary>レポートヘッダーセクションへの参照を返します。</summary>
      <remarks>このプロパティは、this[SectionTypeEnum.Header] と同じです。</remarks>
    </member>
    <member name="P:C1.C1Report.SectionCollection.Footer">
      <summary>レポートフッターセクションへの参照を返します。</summary>
      <remarks>このプロパティは、this[SectionTypeEnum.Footer] と同じです。</remarks>
    </member>
    <member name="P:C1.C1Report.SectionCollection.PageHeader">
      <summary>レポートのページヘッダーセクションへの参照を返します。</summary>
      <remarks>このプロパティは、this[SectionTypeEnum.PageHeader] と同じです。</remarks>
    </member>
    <member name="P:C1.C1Report.SectionCollection.PageFooter">
      <summary>レポートのページフッターセクションへの参照を返します。</summary>
      <remarks>このプロパティは、this[SectionTypeEnum.PageFooter] と同じです。</remarks>
    </member>
    <member name="P:C1.C1Report.SectionCollection.Count">
      <summary>コレクション内の要素の数を返します。</summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Report.SectionCollection" />クラスには、
          <b>Add</b>メソッドまたは
          <b>Remove</b>メソッドはありません。
        </para>
        <para>これは、レポート内のセクションの数がその時点でのグループの数によって決まるからです。レポートにセクションを追加したり削除するには、グループを追加または削除する必要があります。</para>
      </remarks>
    </member>
    <member name="T:C1.C1Report.ShapeBase">
      <summary>
        レポートフィールドによって描画される形状の抽象基本クラス （
        <see cref="P:C1.C1Report.Field.ShapeType" />と
        <see cref="!:Shape" />を参照）。
      </summary>
    </member>
    <member name="M:C1.C1Report.ShapeBase.#ctor">
      <summary>
        <see cref="T:C1.C1Report.ShapeBase" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Report.ShapeBase.AssignFrom(C1.C1Report.ShapeBase)">
      <summary>
        別の
        <see cref="T:C1.C1Report.ShapeBase" />のプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Report.ShapeBase.Clone">
      <summary>
        現在の
        <see cref="T:C1.C1Report.ShapeBase" />オブジェクトのコピーを作成します。 プロパティ
        <see cref="P:C1.C1Report.ShapeBase.Owner" />はコピーされず、
        <see cref="P:C1.C1Report.ShapeBase.Owner" />プロパティの値は null になります。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Report.ShapeBase" />オブジェクト。
      </returns>
    </member>
    <member name="P:C1.C1Report.ShapeBase.ShapeType">
      <summary>現在の形状のタイプを取得します。</summary>
    </member>
    <member name="P:C1.C1Report.ShapeBase.Owner">
      <summary>
        現在の
        <see cref="T:C1.C1Report.ShapeBase" />オブジェクトを所有している
        <see cref="T:C1.C1Report.Field" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Report.LineShapeBase">
      <summary>
        <see cref="T:C1.C1Report.LineShape" />および
        <see cref="!:PolygonShape" />クラスの抽象基本クラス。
      </summary>
    </member>
    <member name="M:C1.C1Report.LineShapeBase.#ctor">
      <summary>
        <see cref="T:C1.C1Report.LineShapeBase" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="T:C1.C1Report.LineShape">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />内の線形状を表します。
      </summary>
    </member>
    <member name="M:C1.C1Report.LineShape.#ctor">
      <summary>
        <see cref="T:C1.C1Report.LineShape" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Report.LineShape.#ctor(C1.C1Report.LineSlantEnum)">
      <summary>
        <see cref="T:C1.C1Report.LineShape" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="lineSlant">使用する線の傾斜を示します。</param>
    </member>
    <member name="M:C1.C1Report.LineShape.AssignFrom(C1.C1Report.ShapeBase)">
      <summary>
        別の
        <see cref="T:C1.C1Report.ShapeBase" />のプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Report.LineShape.ShapeType">
      <summary>
        オーバーライドされます。
        <see cref="F:C1.C1Report.ShapeType.Line" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.LineShape.LineSlant">
      <summary>フィールド内で線をどのように引くかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Report.TriangleShapeBase">
      <summary>
        <see cref="T:C1.C1Report.IsoscelesTriangleShape" />タイプおよび
        <see cref="T:C1.C1Report.RightTriangleShape" />タイプの抽象基本クラス。
      </summary>
    </member>
    <member name="M:C1.C1Report.TriangleShapeBase.#ctor">
      <summary>
        <see cref="T:C1.C1Report.TriangleShapeBase" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="T:C1.C1Report.IsoscelesTriangleShape">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />内の二等辺三角形を表します。
      </summary>
    </member>
    <member name="M:C1.C1Report.IsoscelesTriangleShape.#ctor">
      <summary>
        <see cref="T:C1.C1Report.IsoscelesTriangleShape" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.C1Report.IsoscelesTriangleShape.ShapeType">
      <summary>
        オーバーライドされます。
        <see cref="F:C1.C1Report.ShapeType.IsoscelesTriangle" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Report.RightTriangleShape">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />内の直角三角形を表します。
      </summary>
    </member>
    <member name="M:C1.C1Report.RightTriangleShape.#ctor">
      <summary>
        <see cref="T:C1.C1Report.RightTriangleShape" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.C1Report.RightTriangleShape.ShapeType">
      <summary>
        オーバーライドされます。
        <see cref="F:C1.C1Report.ShapeType.RightTriangle" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Report.RectangleShape">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />内の矩形を表します。
      </summary>
    </member>
    <member name="M:C1.C1Report.RectangleShape.#ctor">
      <summary>
        <see cref="T:C1.C1Report.RectangleShape" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.C1Report.RectangleShape.ShapeType">
      <summary>
        オーバーライドされます。
        <see cref="F:C1.C1Report.ShapeType.Rectangle" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Report.EllipseShape">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />内の楕円形を表します。
      </summary>
    </member>
    <member name="M:C1.C1Report.EllipseShape.#ctor">
      <summary>
        <see cref="T:C1.C1Report.EllipseShape" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.C1Report.EllipseShape.ShapeType">
      <summary>
        オーバーライドされます。
        <see cref="F:C1.C1Report.ShapeType.Ellipse" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Report.EllipsePartShape">
      <summary>
        <see cref="T:C1.C1Report.ArcShape" />および
        <see cref="T:C1.C1Report.PieShape" />クラスの抽象基本クラス。
      </summary>
    </member>
    <member name="M:C1.C1Report.EllipsePartShape.#ctor">
      <summary>
        <see cref="T:C1.C1Report.EllipsePartShape" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Report.EllipsePartShape.AssignFrom(C1.C1Report.ShapeBase)">
      <summary>
        別の
        <see cref="T:C1.C1Report.ShapeBase" />のプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Report.EllipsePartShape.StartAngle">
      <summary>
        <b>X</b>軸から現在の形状を定義する扇形の第１の辺まで、 時計回りに測定された角度（度単位）を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Report.EllipsePartShape.SweepAngle">
      <summary>
        <see cref="P:C1.C1Report.EllipsePartShape.StartAngle" />から現在の形状を定義する扇形の第２の辺まで、 時計回りに測定された角度（度単位）で取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Report.ArcShape">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />内の形状を表します。
      </summary>
    </member>
    <member name="M:C1.C1Report.ArcShape.#ctor">
      <summary>
        <see cref="T:C1.C1Report.ArcShape" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Report.ArcShape.AssignFrom(C1.C1Report.ShapeBase)">
      <summary>
        別の
        <see cref="T:C1.C1Report.ShapeBase" />のプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Report.ArcShape.ShapeType">
      <summary>
        オーバーライドされます。
        <see cref="F:C1.C1Report.ShapeType.Arc" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.ArcShape.Closed">
      <summary>現在の円弧が閉じられるかどうか （円弧の開始点と終了点が直線で結合されるかどうか）を示す値を取得または設定します。</summary>
      <remarks>
        このプロパティのデフォルト値は
        <b>false</b>です。
      </remarks>
    </member>
    <member name="T:C1.C1Report.PieShape">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />内の円形を表します。
      </summary>
    </member>
    <member name="M:C1.C1Report.PieShape.#ctor">
      <summary>
        <see cref="T:C1.C1Report.PieShape" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.C1Report.PieShape.ShapeType">
      <summary>
        オーバーライドされます。
        <see cref="F:C1.C1Report.ShapeType.Pie" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Report.Util.FontHolder">
      <summary>
        <see cref="P:C1.C1Report.Util.FontHolder.Font" />オブジェクトをカプセル化して、フォントプロパティへの get／set アクセスを提供します。
      </summary>
    </member>
    <member name="M:C1.C1Report.Util.FontHolder.#ctor(System.Drawing.Font)">
      <summary>
        <see cref="T:C1.C1Report.Util.FontHolder" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="font">
        <b>FontHolder</b>の初期化に使用される
        <see cref="P:C1.C1Report.Util.FontHolder.Font" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Report.Util.FontHolder.op_Implicit(C1.C1Report.Util.FontHolder)~System.Drawing.Font">
      <summary>
        <see cref="T:C1.C1Report.Util.FontHolder" />オブジェクトを
        <see cref="P:C1.C1Report.Util.FontHolder.Font" />オブジェクトに変換します。
      </summary>
      <param name="fontHolder">
        <see cref="T:C1.C1Report.Util.FontHolder" />オブジェクト。
      </param>
      <returns>
        <see cref="P:C1.C1Report.Util.FontHolder.Font" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Report.Util.FontHolder.op_Implicit(System.Drawing.Font)~C1.C1Report.Util.FontHolder">
      <summary>
        <see cref="P:C1.C1Report.Util.FontHolder.Font" />オブジェクトを
        <see cref="T:C1.C1Report.Util.FontHolder" />オブジェクトに変換します。
      </summary>
      <param name="f">
        <see cref="P:C1.C1Report.Util.FontHolder.Font" />オブジェクト。
      </param>
      <returns>
        提供されたフォントオブジェクトと等しい
        <see cref="P:C1.C1Report.Util.FontHolder.Font" />プロパティを保持する新しい
        <see cref="T:C1.C1Report.Util.FontHolder" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Report.Util.FontHolder.ToString">
      <summary>
        この
        <see cref="T:C1.C1Report.Util.FontHolder" />を表す文字列を取得します。
      </summary>
      <returns>
        この
        <see cref="T:C1.C1Report.Util.FontHolder" />を表す文字列。
      </returns>
    </member>
    <member name="P:C1.C1Report.Util.FontHolder.Name">
      <summary>
        カプセル化された
        <see cref="P:C1.C1Report.Util.FontHolder.Font" />オブジェクトの名前を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Util.FontHolder.Size">
      <summary>
        カプセル化された
        <see cref="P:C1.C1Report.Util.FontHolder.Font" />オブジェクトの
        <see cref="P:System.Drawing.Font.Size" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Util.FontHolder.Bold">
      <summary>
        カプセル化された
        <see cref="P:C1.C1Report.Util.FontHolder.Font" />が太字かどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Util.FontHolder.Italic">
      <summary>
        カプセル化された
        <see cref="P:C1.C1Report.Util.FontHolder.Font" />が斜体かどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Util.FontHolder.Underline">
      <summary>
        カプセル化された
        <see cref="P:C1.C1Report.Util.FontHolder.Font" />に下線が付くかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Util.FontHolder.Strikethrough">
      <summary>
        カプセル化された
        <see cref="P:C1.C1Report.Util.FontHolder.Font" />がテキストを貫く水平線を持つかどうかを示す値を 取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Util.FontHolder.GdiCharSet">
      <summary>
        カプセル化された
        <see cref="P:C1.C1Report.Util.FontHolder.Font" />によって使用される GDI 文字セットを取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Report.Util.Misc">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Report.Util.Misc.IsBracket(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="s"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Report.Util.Misc.Unbracket(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="s"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Report.Util.Misc.Bracket(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="s"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Report.Util.Misc.BracketSqlObject(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="s"></param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Report.Util.PictureHolder">
      <summary>
        <see cref="P:C1.C1Report.Util.PictureHolder.Image" />オブジェクトをカプセル化して、画像を画像ファイルまたは バイナリデータベースフィールドからロードするメソッドを提供します。
      </summary>
      <remarks>
        <see cref="T:C1.C1Report.Util.PictureHolder" />オブジェクトは、非連結の画像（ファイルまたは URL から）を含むことも、 画像を含むデータベースフィールドの名前を含むこともできます。
      </remarks>
    </member>
    <member name="M:C1.C1Report.Util.PictureHolder.op_Implicit(C1.C1Report.Util.PictureHolder)~System.Drawing.Image">
      <summary>
        <see cref="T:C1.C1Report.Util.PictureHolder" />オブジェクトを
        <see cref="P:C1.C1Report.Util.PictureHolder.Image" />オブジェクトに変換します。
      </summary>
      <param name="picHolder">
        <see cref="T:C1.C1Report.Util.PictureHolder" />オブジェクト。
      </param>
      <returns>
        <see cref="P:C1.C1Report.Util.PictureHolder.Image" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Report.Util.PictureHolder.GetDefaultPath">
      <summary>これは内部使用専用です。 画像その他のファイルのデフォルトパスを取得します。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Report.Util.PictureHolder.ToString">
      <summary>
        この
        <see cref="T:C1.C1Report.Util.PictureHolder" />を表す文字列を取得します。
      </summary>
      <returns>
        この
        <see cref="T:C1.C1Report.Util.PictureHolder" />を表す文字列。
      </returns>
    </member>
    <member name="P:C1.C1Report.Util.PictureHolder.IsBound">
      <summary>
        この
        <see cref="T:C1.C1Report.Util.PictureHolder" />がデータベースフィールドにバインドされているかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Util.PictureHolder.IsUrl">
      <summary>
        この
        <see cref="T:C1.C1Report.Util.PictureHolder" />が画像の URL を含むかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Util.PictureHolder.IsEmpty">
      <summary>
        この
        <see cref="T:C1.C1Report.Util.PictureHolder" />が空かどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Util.PictureHolder.FieldName">
      <summary>
        この
        <see cref="T:C1.C1Report.Util.PictureHolder" />が画像をロードする元のデータベースフィールドの名前を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Util.PictureHolder.Image">
      <summary>
        この
        <see cref="T:C1.C1Report.Util.PictureHolder" />によってロードされる
        <see cref="P:C1.C1Report.Util.PictureHolder.Image" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Report.Util.PictureHolder.Url">
      <summary>
        この
        <see cref="T:C1.C1Report.Util.PictureHolder" />によってロードされる
        <see cref="P:C1.C1Report.Util.PictureHolder.Image" />を含む URL を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.IDataHandler">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.BeginDataEnumeration">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.EndDataEnumeration">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.First">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.MoveNext">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.BeginGroupEnumeration">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.EndGroupEnumeration">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.GroupFirst">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.GroupMoveNext">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.GetValue(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="fieldName"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.CreateGroupDataHandler(C1.C1Preview.DataBinding.C1DataBinding)">
      <summary>これは内部使用専用です。</summary>
      <param name="owner"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.GetFields(C1.C1Preview.DataBinding.FieldCollection)">
      <summary>これは内部使用専用です。</summary>
      <param name="fields"></param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.GetPosition">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.SetPosition(C1.C1Preview.DataBinding.DataHandlerPosition)">
      <summary>これは内部使用専用です。</summary>
      <param name="position"></param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDataHandler.IsOnLastRecord">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.IDataHandler.Owner">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.IDataHandler.DataEnumerationStarted">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.IDataHandler.RowNumber">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1dbExportProvider">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />のネイティブ C1DB 形式
        <see cref="T:C1.C1Preview.Export.ExportProvider" />を表します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1dExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.C1dxExporter" />
    </member>
    <member name="T:C1.C1Preview.Export.ExportProvider">
      <summary>
        サポートされたエクスポート形式を記述する抽象基本クラス。 特定の形式（PDF または HTML など）を記述するすべてのエクスポートプロバイダはこのクラスから派生します。 使用可能なすべてのエクスポートプロバイダのリストについては、
        <see cref="P:C1.C1Preview.Export.ExportProviders.RegisteredProviders" />を参照してください。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ExportProvider.CanExportObject(System.Object)">
      <summary>
        指定したオブジェクトが現在のエクスポートプロバイダ（
        <see cref="M:C1.C1Preview.Export.ExportProvider.NewExporter" />を参照）に関連付けられた
        <see cref="T:C1.C1Preview.Export.Exporter" />によってエクスポートできる ドキュメントを表すかどうかをテストします。 このメソッドのデフォルト実装は
        <b>false</b>を返します。
      </summary>
      <param name="obj">テストするオブジェクト（ドキュメント）。</param>
      <returns>
        関連付けられた
        <see cref="T:C1.C1Preview.Export.Exporter" />が指定したオブジェクトをエクスポートできる場合は
        <b>true</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportProvider.CanExportType(System.Type)">
      <summary>
        指定したタイプのドキュメントを現在のエクスポートプロバイダに関連付けられている
        <see cref="T:C1.C1Preview.Export.Exporter" />で エクスポートできるかどうかをテストします（
        <see cref="M:C1.C1Preview.Export.ExportProvider.NewExporter" />を参照）。
        <para>
          タイプだけではそのタイプのドキュメントをエクスポートできるかどうか判定できない場合（例：オブジェクトの配列は、 その配列内のすべてのオブジェクトが画像の場合のみ一部のエクスポータでエクスポートできます）、 このメソッドは
          <b>false</b>を返します。 確実な値を取得するには、
          <see cref="M:C1.C1Preview.Export.ExportProvider.CanExportObject(System.Object)" />を使用します。
        </para>
      </summary>
      <param name="documentType">テストするドキュメントタイプ。</param>
      <returns>
        関連付けられている
        <see cref="T:C1.C1Preview.Export.Exporter" />が指定したタイプのドキュメントをエクスポートできる場合は
        <b>true</b>、 そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportProvider.CanExportRange(C1.C1Preview.OutputRangeTypeEnum)">
      <summary>
        現在のエクスポートプロバイダに関連付けられた
        <see cref="T:C1.C1Preview.Export.Exporter" />が指定したタイプの ドキュメントページ範囲を処理できるかどうかをテストします。 このメソッドのデフォルト実装は、指定した範囲タイプが
        <see cref="F:C1.C1Preview.OutputRangeTypeEnum.All" />の場合は
        <b>true</b>、その他の場合は
        <b>false</b>を返します。
      </summary>
      <param name="range">テストする範囲のタイプ。</param>
      <returns>
        関連付けられた
        <see cref="T:C1.C1Preview.Export.Exporter" />が指定した出力範囲を処理できる場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportProvider.NewExporter">
      <summary>
        新しい Exporter オブジェクトを作成します。 派生クラスでオーバーライドされた場合、
        <see cref="T:C1.C1Preview.Export.Exporter" />から派生した特殊クラスのインスタンスを返します。
      </summary>
      <returns>新しく作成されたエクスポータを返します。</returns>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.FormatKey">
      <summary>
        現在のエクスポートプロバイダ／形式を一意に識別できる任意の文字列である、 フォーマットキーを取得します。 デフォルト実装は、現在の
        <see cref="T:C1.C1Preview.Export.ExportProvider" />のタイプ名を返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.FormatName">
      <summary>現在のエクスポート形式の簡単な記述を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.DefaultExtension">
      <summary>現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.CanExportToStream">
      <summary>ストリームへのエクスポートが現在の形式によってサポートされているかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.CanShowOptions">
      <summary>
        関連付けられた
        <see cref="T:C1.C1Preview.Export.Exporter" />がユーザーに エクスポートオプションの編集を許可するダイアログを表示できるかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.DefaultOptionsFormClass">
      <summary>デフォルトでエクスポートオプションの編集に使用されるフォームのタイプを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.SupportedDocumentInfoFields">
      <summary>
        現在のエクスポート形式によってサポートされる
        <see cref="T:C1.C1Preview.DocumentInfo" />クラスの フィールドを示すフラグの組み合わせを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.C1ReportFileFormat">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />固有のエクスポートプロバイダの場合、 現在のプロバイダに関連付けられている
        <see cref="T:C1.C1Report.FileFormatEnum" />を取得します。 その他のプロバイダの場合は、
        <c>null</c>を返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProvider.ShouldEnsureGeneratedDocument">
      <summary>
        派生クラスでオーバーライドされて、
        <see cref="T:C1.C1Preview.C1PrintDocument" />がエクスポートされる場合に、 エクスポートする前にドキュメントを生成する必要があるかどうか を示す値を返します。 ドキュメントを生成する必要がないエクスポータ （カスタム生成を必要とするエクスポータ）は、
        <b>false</b>を返す必要があります。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1dbExportProvider.CanExportObject(System.Object)">
      <summary>
        指定したオブジェクトが
        <see cref="T:C1.C1Preview.Export.C1dbExporter" />によって エクスポートできるドキュメントを表すかどうかをテストします。
      </summary>
      <param name="obj">テストするオブジェクト（ドキュメント）。</param>
      <returns>
        <paramref name="obj" />が
        <see cref="T:C1.C1Preview.C1PrintDocument" />または
        <see cref="T:C1.C1Report.C1Report" />のインスタンスである場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1dbExportProvider.CanExportType(System.Type)">
      <summary>
        指定されたタイプのドキュメントを
        <see cref="T:C1.C1Preview.Export.C1dbExporter" />で エクスポートできるかどうかをテストします。
      </summary>
      <param name="documentType">テストするタイプ。</param>
      <returns>
        <paramref name="documentType" />が
        <see cref="T:C1.C1Preview.C1PrintDocument" />または
        <see cref="T:C1.C1Report.C1Report" />である場合は
        <b>true</b>、 そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1dbExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.C1Preview.Export.C1dxExporter" />の新しいインスタンスを作成します。
      </summary>
      <returns>新しく作成されたインスタンス。</returns>
    </member>
    <member name="P:C1.C1Preview.Export.C1dbExportProvider.PreferredOrdinal">
      <summary>［名前を付けて保存...］および類似のダイアログにおけるエクスポート形式の優先序数を指定します。 この実装は１を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dbExportProvider.FormatName">
      <summary>C1DX エクスポート形式の簡単な記述を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dbExportProvider.DefaultExtension">
      <summary>現在のエクスポート形式についてデフォルトのファイル名拡張子を取得します。 この実装は c1db を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dbExportProvider.CanExportToStream">
      <summary>
        ストリームへのエクスポートが現在の形式によってサポートされているかどうかを示す値を取得します。 この実装は
        <b>true</b>を返します（ストリームへのエクスポートがサポートされます）。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dbExportProvider.DefaultOptionsFormClass">
      <summary>デフォルトでエクスポートオプションの編集に使用されるフォームのタイプを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dbExportProvider.SupportedDocumentInfoFields">
      <summary>
        現在のエクスポート形式によってサポートされる
        <see cref="T:C1.C1Preview.DocumentInfo" />クラスの フィールドを示すフラグの組み合わせを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dbExportProvider.ShouldEnsureGeneratedDocument">
      <summary>false を返します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1dbExporter">
      <summary>ドキュメントを C1DB 形式にエクスポートするために使用できるオブジェクトを表します。</summary>
      <seealso cref="T:C1.C1Preview.Export.C1dbExportProvider" />
    </member>
    <member name="T:C1.C1Preview.Export.C1dExporterBase">
      <summary>
        <see cref="T:C1.C1Preview.Export.C1dExporter" />および
        <see cref="T:C1.C1Preview.Export.C1dxExporter" />クラスの抽象基本クラス。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1dExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.C1dxExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.C1dExporter" />
      <seealso cref="T:C1.C1Preview.Export.C1dxExporter" />
    </member>
    <member name="T:C1.C1Preview.Export.C1ExporterBase">
      <summary>
        <see cref="T:C1.C1Preview.Export.C1dExporterBase" />および
        <see cref="T:C1.C1Preview.Export.C1mdxExporter" />クラスの抽象基本クラス。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1dExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.C1dxExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.C1dExporter" />
      <seealso cref="T:C1.C1Preview.Export.C1dxExporter" />
      <seealso cref="T:C1.C1Preview.Export.C1mdxExporter" />
    </member>
    <member name="T:C1.C1Preview.Export.Exporter">
      <summary>すべてのエクスポータの抽象基本クラス。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.Exporter" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.CanPreviewOutputFile">
      <summary>
        <see cref="P:C1.C1Preview.Export.Exporter.OutputFileName" />をプレビューできるかどうかをテストします。 この（ベース）実装は、
        <c>FindExecutable</c>API を使って適切な実行可能ファイルを探して、 それが見つかったかどうかを示す値を返します。
        <para>
          これをオーバーライドする場合は、
          <see cref="M:C1.C1Preview.Export.Exporter.PreviewOutputFile" />もオーバーライドする必要があります。
        </para>
      </summary>
      <returns>
        出力ファイルをプレビューできる場合は
        <c>true</c>、その他の場合は
        <c>false</c>。
      </returns>
      <seealso cref="M:C1.C1Preview.Export.Exporter.PreviewOutputFile" />
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.PreviewOutputFile">
      <summary>
        <see cref="P:C1.C1Preview.Export.Exporter.OutputFileName" />をプレビューします。 この（ベース）実装は、
        <c>System.Diagnostics.Process.Start()</c>を使って 出力ファイルを開きます。
        <para>
          <see cref="M:C1.C1Preview.Export.Exporter.CanPreviewOutputFile" />をオーバーライドする場合は、これをオーバーライドします。
        </para>
      </summary>
      <seealso cref="M:C1.C1Preview.Export.Exporter.CanPreviewOutputFile" />
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.GetPageFileName(System.Int32)">
      <summary>指定したページを含むファイルのファイル名（パス付き）を取得します。 ファイルごとにページを保存するエクスポート形式（TIFF など）の場合にのみ使用されます。</summary>
      <param name="pageNo">１から始まるページ番号。</param>
      <returns>出力ファイル名。</returns>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.ProcessPage(System.Drawing.Imaging.Metafile,C1.C1Preview.C1MetafileInfo,System.Int32,System.Boolean)">
      <summary>
        <see cref="T:System.Drawing.Imaging.Metafile" />によって表されるドキュメントの１ページをエクスポートします。
      </summary>
      <param name="pageImage">
        エクスポートするページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />。
      </param>
      <param name="metafileInfo">
        <paramref name="pageImage" />に関する情報を含む
        <see cref="T:C1.C1Preview.C1MetafileInfo" />。
      </param>
      <param name="pageNo">１から始まるページ番号。</param>
      <param name="firstPage">
        <paramref name="pageImage" />がドキュメントの先頭ページを表す場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.Reset">
      <summary>エクスポータの内部状態をリセットします。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.Clear">
      <summary>エクスポータとそのすべてのパブリックプロパティの内部状態をリセットします。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.OnDocumentChanged">
      <summary>
        <see cref="P:C1.C1Preview.Export.Exporter.Document" />プロパティが変更された後に呼び出されます。 これをオーバーライドする場合は、このベースメソッドも呼び出されていることを確認してください。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.EnumeratePages">
      <summary>エクスポートされる範囲のすべてのページを処理（エクスポート）します。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.ConvertEmfPlusToEmfOnly">
      <summary>
        エクスポート前に、
        <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusDual" />および
        <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusOnly" />タイプの ページメタファイルが
        <see cref="F:System.Drawing.Imaging.EmfType.EmfOnly" />タイプに変換されるかどうかを示します。 このベース実装は
        <b>false</b>を返します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.InternalExport">
      <summary>
        ディスクファイルまたはストリームへのエクスポートを実行します。 出力先（ファイルまたはストリーム）は、このメソッドの実行時にプロパティ （
        <see cref="P:C1.C1Preview.Export.Exporter.OutputFileName" />または
        <see cref="P:C1.C1Preview.Export.Exporter.OutputStream" />）の いずれが非
        <b>null</b>かによって決定されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.EnsureGeneratedDocument">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />または
        <see cref="T:C1.C1Report.C1Report" />クラスのインスタンスである場合は、
        <see cref="P:C1.C1Preview.Export.Exporter.Document" />が生成されていることを確認します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>現在のエクスポータのプロパティを指定したエクスポートオプションフォームの 対応するユーザー編集可能なオプションにコピーします。 派生クラスでオーバーライドして、形式固有のオプションを処理できます。</summary>
      <param name="f">
        プロパティのコピー先の
        <see cref="T:C1.C1Preview.Export.ExportOptionsFormBase" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.CopyPropertiesFromOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>指定したエクスポートオプションフォームからのオプションを 現在のエクスポータ上の対応するプロパティにコピーします。 派生クラスでオーバーライドして、形式固有のオプションを処理できます。</summary>
      <param name="f">
        オプションのコピー元の
        <see cref="T:C1.C1Preview.Export.ExportOptionsFormBase" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.Export(System.String)">
      <summary>ファイルにエクスポートします。</summary>
      <param name="fileName">ファイル名。</param>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.Export(System.IO.Stream)">
      <summary>ストリームにエクスポートします。</summary>
      <param name="stream">エクスポート先のストリーム。</param>
    </member>
    <member name="M:C1.C1Preview.Export.Exporter.ShowOptionsDialog">
      <summary>エクスポートのオプション設定ダイアログを表示します。</summary>
      <returns>ユーザーがダイアログの OK ボタンを押したかどうかを返します。</returns>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.OutputFileName">
      <summary>
        出力ファイル名を取得します。 このプロパティは、
        <see cref="M:C1.C1Preview.Export.Exporter.Export(System.String)" />メソッドが呼び出されるときに設定されます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.OutputStream">
      <summary>
        出力ストリームを取得します。 このプロパティは、
        <see cref="M:C1.C1Preview.Export.Exporter.Export(System.IO.Stream)" />メソッドが呼び出されるときに設定されます。
      </summary>
    </member>
    <member name="E:C1.C1Preview.Export.Exporter.LongOperation">
      <summary>エクスポート中に周期的に発生します。 進行状況を表示して、エンドユーザーに操作をキャンセルする機能を提供します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.OutputFiles">
      <summary>エクスポート時に生成されたファイルのリストを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.DocumentInfo">
      <summary>ドキュメント情報を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.ExportProvider">
      <summary>
        現在のエクスポータに関連付けられたエクスポート形式を記述する
        <see cref="P:C1.C1Preview.Export.Exporter.ExportProvider" />から派生したクラスのインスタンスを取得します。 このインスタンスを使って、形式の記述やデフォルト拡張子などの 現在のエクスポート形式に関する静的情報を取り出すことができます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.Document">
      <summary>エクスポートするドキュメントを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.Preview">
      <summary>エクスポートされたファイルを開くかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.ShowOptions">
      <summary>エクスポートの前にオプションダイアログを表示するかどうかを取得または設定します。</summary>
      <seealso cref="P:C1.C1Preview.Export.Exporter.OptionsFormClass" />
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.Range">
      <summary>エクスポートするページの範囲を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.ReferenceGraphics">
      <summary>エクスポートで使用する Graphics オブジェクトを指定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.OptionsFormClass">
      <summary>
        エクスポートオプションの編集に使用されるフォームのタイプを取得または設定します。 このフォームは、
        <see cref="P:C1.C1Preview.Export.Exporter.ShowOptions" />が true の場合に
        <see cref="M:C1.C1Preview.Export.Exporter.Export(System.String)" />または
        <see cref="M:C1.C1Preview.Export.Exporter.Export(System.IO.Stream)" />メソッドが呼び出されると表示されます。 フォームのタイプは、
        <see cref="P:C1.C1Preview.Export.ExportProvider.DefaultOptionsFormClass" />プロパティによって 指定されたタイプに設定可能である必要があります。
      </summary>
      <seealso cref="P:C1.C1Preview.Export.Exporter.OptionsFormClassName" />
      <see cref="P:C1.C1Preview.Export.Exporter.ShowOptions" />
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.OptionsFormClassName">
      <summary>
        エクスポートオプションの編集に使用されるフォームのタイプ名を取得または設定します。 このフォームは、
        <see cref="P:C1.C1Preview.Export.Exporter.ShowOptions" />が true の場合に
        <see cref="M:C1.C1Preview.Export.Exporter.Export(System.String)" />または
        <see cref="M:C1.C1Preview.Export.Exporter.Export(System.IO.Stream)" />メソッドが呼び出されると表示されます。 フォームのタイプは、
        <see cref="P:C1.C1Preview.Export.ExportProvider.DefaultOptionsFormClass" />プロパティによって 指定されたタイプに設定可能である必要があります。
      </summary>
      <seealso cref="P:C1.C1Preview.Export.Exporter.OptionsFormClass" />
      <see cref="P:C1.C1Preview.Export.Exporter.ShowOptions" />
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.DocumentInfoFormClass">
      <summary>
        <see cref="P:C1.C1Preview.Export.Exporter.DocumentInfo" />クラスのフィールドの編集に使用されるフォームのタイプを取得または設定します。 このフォームは、エクスポートオプションフォーム（
        <see cref="P:C1.C1Preview.Export.Exporter.OptionsFormClass" />）から呼び出すことができます。 フォームのタイプは、
        <see cref="T:C1.C1Preview.Forms.DocumentInfoForm" />に割り当て可能である必要があります。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Exporter.RangeFormClass">
      <summary>
        エクスポートの出力範囲の入力に使用されるフォームのタイプを取得または設定します。 このフォームは、エクスポートオプションフォーム（
        <see cref="P:C1.C1Preview.Export.Exporter.OptionsFormClass" />）から呼び出すことができます。 フォームのタイプは、
        <see cref="T:C1.C1Preview.Forms.OutputRangeForm" />に割り当て可能である必要があります。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ExporterBase.CanPreviewOutputFile">
      <summary>
        オーバーライドされます。
        <see cref="P:C1.C1Preview.Export.Exporter.OutputFileName" />をプレビューできるかどうかをテストします。 ベース実装を呼び出して、それが
        <b>false</b>を返す場合は、
        <b>C1.Win.C1Preview.C1PrintPreviewDialog</b>のインスタンスの作成を試み、 成功した場合は
        <b>true</b>を返します。
      </summary>
      <returns>
        出力ファイルをプレビューできる場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
      <seealso cref="M:C1.C1Preview.Export.C1ExporterBase.PreviewOutputFile" />
    </member>
    <member name="M:C1.C1Preview.Export.C1ExporterBase.PreviewOutputFile">
      <summary>
        オーバーライドされます。
        <see cref="P:C1.C1Preview.Export.Exporter.OutputFileName" />をプレビューします。 OS シェル、または現在のシステム上にシェルの関連付けが存在しない場合は
        <c>C1.Win.C1Preview.C1PrintPreviewDialog</c>独自のインスタンスを使って、 出力ファイルのプレビューを試みます。
      </summary>
      <seealso cref="M:C1.C1Preview.Export.C1ExporterBase.CanPreviewOutputFile" />
    </member>
    <member name="M:C1.C1Preview.Export.C1ExporterBase.ProcessPage(System.Drawing.Imaging.Metafile,C1.C1Preview.C1MetafileInfo,System.Int32,System.Boolean)">
      <summary>このクラスではサポートされていません。</summary>
      <param name="pageImage"></param>
      <param name="metafileInfo"></param>
      <param name="pageNo"></param>
      <param name="firstPage"></param>
    </member>
    <member name="M:C1.C1Preview.Export.C1dExporterBase.Clear">
      <summary>エクスポータとそのすべてのパブリックプロパティの内部状態をリセットします。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1dExporterBase.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>現在のエクスポータのプロパティを指定したエクスポートオプションフォームの 対応するユーザー編集可能なオプションにコピーします。</summary>
      <param name="f">
        プロパティのコピー先の
        <see cref="T:C1.C1Preview.Export.C1dOptionsForm" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.C1dExporterBase.CopyPropertiesFromOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>指定したエクスポートオプションフォームからのオプションを 現在のエクスポータ上の対応するプロパティにコピーします。</summary>
      <param name="f">
        オプションのコピー元の
        <see cref="T:C1.C1Preview.Export.C1dOptionsForm" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.C1dExporterBase.InternalExport">
      <summary>ディスクファイルまたはストリームへのエクスポートを実行します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExporterBase.C1DocumentFormat">
      <summary>
        ドキュメントの保存に使用される形式を決定する
        <see cref="T:C1.C1Preview.C1DocumentFormatEnum" />値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExporterBase.EmbedTrueTypeFonts">
      <summary>
        ソースドキュメントで使用された TrueType フォントを生成されたドキュメントに埋め込むかどうかを示す値を取得または設定します。
        <see cref="P:C1.C1Preview.Export.C1dExporterBase.CanChangeFontEmbedding" />を
        <c>false</c>を取得する場合は、このプロパティは設定できないことに注意してください。
        <para>デフォルト値は、エクスポートされるドキュメントによって決まります。</para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExporterBase.CanChangeFontEmbedding">
      <summary>
        エクスポートされたドキュメント内のフォントの埋め込みが変更できるかどうかを示す値を取得します。 ソースドキュメントが異なるフォントの埋め込み設定で再生成できない場合は
        <c>false</c>を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExporterBase.FontHandling">
      <summary>
        このエクスポータによって使用される
        <see cref="T:C1.C1Preview.FontHandling" />値を取得します。 ドキュメントの独自の値と異なる場合は、ドキュメントは エクスポート中に再生成されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1dbExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>現在のエクスポータのプロパティを指定したエクスポートオプションフォームの対応する ユーザー編集可能なオプションにコピーします。</summary>
      <param name="f">
        プロパティのコピー先の
        <see cref="T:C1.C1Preview.Export.C1dOptionsForm" />オブジェクト。
      </param>
    </member>
    <member name="P:C1.C1Preview.Export.C1dbExporter.C1DocumentFormat">
      <summary>
        オーバーライドされます。 ドキュメントの保存に使用される形式を決定する
        <see cref="T:C1.C1Preview.C1DocumentFormatEnum" />値を取得します。 この実装は
        <see cref="F:C1.C1Preview.C1DocumentFormatEnum.C1db" />を返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dbExporter.ExportProvider">
      <summary>
        <see cref="P:C1.C1Preview.Export.ExportProviders.C1dbExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1mdxExportProvider">
      <summary>
        <see cref="T:C1.C1Preview.C1MultiDocument" />のネイティブ C1MDX 形式
        <see cref="T:C1.C1Preview.Export.ExportProvider" />を表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1mdxExportProvider.CanExportObject(System.Object)">
      <summary>
        指定したオブジェクトが
        <see cref="T:C1.C1Preview.Export.C1mdxExporter" />によって エクスポートできるドキュメントを表すかどうかをテストします。
      </summary>
      <param name="obj">テストするオブジェクト（ドキュメント）。</param>
      <returns>
        <paramref name="obj" />が
        <see cref="T:C1.C1Preview.C1MultiDocument" />のインスタンスである場合は
        <b>true</b>、 そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1mdxExportProvider.CanExportType(System.Type)">
      <summary>
        指定されたタイプのドキュメントを
        <see cref="T:C1.C1Preview.Export.C1mdxExporter" />で エクスポートできるかどうかをテストします。
      </summary>
      <param name="documentType">テストするタイプ。</param>
      <returns>
        <paramref name="documentType" />が
        <see cref="T:C1.C1Preview.C1MultiDocument" />である場合は
        <b>true</b>、 そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1mdxExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.C1Preview.Export.C1mdxExporter" />の新しいインスタンスを作成します。
      </summary>
      <returns>新しく作成されたインスタンス。</returns>
    </member>
    <member name="P:C1.C1Preview.Export.C1mdxExportProvider.PreferredOrdinal">
      <summary>［名前を付けて保存...］および類似のダイアログにおけるエクスポート形式の優先序数を指定します。 この実装は１を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1mdxExportProvider.FormatName">
      <summary>C1DX エクスポート形式の簡単な記述を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1mdxExportProvider.DefaultExtension">
      <summary>現在のエクスポート形式についてデフォルトのファイル名拡張子を取得します。 この実装は「c1dx」を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1mdxExportProvider.CanExportToStream">
      <summary>
        ストリームへのエクスポートが現在の形式によってサポートされているかどうかを示す値を取得します。 この実装は
        <b>true</b>を返します（ストリームへのエクスポートがサポートされます）。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1mdxExportProvider.DefaultOptionsFormClass">
      <summary>デフォルトでエクスポートオプションの編集に使用されるフォームのタイプを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1mdxExportProvider.SupportedDocumentInfoFields">
      <summary>
        現在のエクスポート形式によってサポートされる
        <see cref="T:C1.C1Preview.DocumentInfo" />クラスのフィールドを示すフラグの組み合わせを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1mdxExportProvider.ShouldEnsureGeneratedDocument">
      <summary>false を返します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1mdxExporter">
      <summary>ドキュメントを C1MDX 形式にエクスポートするために使用できるオブジェクトを表します。</summary>
      <seealso cref="T:C1.C1Preview.Export.C1dxExportProvider" />
    </member>
    <member name="M:C1.C1Preview.Export.C1mdxExporter.InternalExport">
      <summary>ディスクファイルまたはストリームへのエクスポートを実行します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1mdxExporter.ExportProvider">
      <summary>
        <see cref="P:C1.C1Preview.Export.ExportProviders.C1mdxExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1ReportExportProvider">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />固有の
        <see cref="T:C1.C1Report.ExportFilter" />クラスを使用して エクスポートを実行するエクスポート形式を記述する抽象ベース基本クラス。 すべての派生エクスポート形式は
        <see cref="T:C1.C1Report.C1Report" />オブジェクトの エクスポートのみをサポートします。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.C1Preview.Export.C1ReportExporter" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportExportProvider.CanExportObject(System.Object)">
      <summary>
        指定したオブジェクトが現在のエクスポートプロバイダによってエクスポートできるドキュメントを表すかどうかをテストします。 この実装は、渡されたオブジェクトが
        <see cref="T:C1.C1Report.C1Report" />の場合は
        <b>true</b>、 その他の場合は
        <b>false</b>を返します。
      </summary>
      <param name="obj">テストするオブジェクト（ドキュメント）。</param>
      <returns>
        オブジェクトがエクスポートできるドキュメントを表す場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportExportProvider.CanExportType(System.Type)">
      <summary>指定したタイプのドキュメントを現在のエクスポートプロバイダでエクスポートできるかどうかをテストします。</summary>
      <param name="documentType">テストするタイプ。</param>
      <returns>
        <paramref name="documentType" />が
        <see cref="T:C1.C1Report.C1Report" />である場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportExportProvider.FileFormat">
      <summary>
        現在のエクスポートプロバイダによって生成されるエクスポートファイルの形式を決定する
        <see cref="T:C1.C1Report.FileFormatEnum" />値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportExportProvider.DefaultExtension">
      <summary>現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportExportProvider.FormatName">
      <summary>現在のエクスポート形式の簡単な記述を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportExportProvider.PreferredOrdinal">
      <summary>
        「保存...」および類似のダイアログにおける現在のエクスポート形式の優先序数を指定します。
        <para>
          <c>-1</c>の値は、エクスポート形式がまったくリストされないことを示します。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportExportProvider.C1ReportFileFormat">
      <summary>
        現在のプロバイダに関連付けられた
        <see cref="T:C1.C1Report.FileFormatEnum" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportHTMLDrillDownExportProvider">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />からドリルダウン HTML（
        <see cref="F:C1.C1Report.FileFormatEnum.HTMLDrillDown" />）への エクスポートを記述します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportHTMLDrillDownExportProvider.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.ReportHTMLDrillDownExportProvider" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportHTMLPagedExportProvider">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />からページ単位の HTML（
        <see cref="F:C1.C1Report.FileFormatEnum.HTMLPaged" />）への エクスポートを記述します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportHTMLPagedExportProvider.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.ReportHTMLPagedExportProvider" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportHTMLExportProvider">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />から HTML（
        <see cref="F:C1.C1Report.FileFormatEnum.HTML" />、
        <see cref="F:C1.C1Report.FileFormatEnum.HTMLPaged" />、または
        <see cref="F:C1.C1Report.FileFormatEnum.HTMLDrillDown" />）への エクスポートを記述します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportHtmlExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportHTMLExportProvider.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.ReportHTMLExportProvider" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ReportHTMLExportProvider.NewExporter">
      <summary>
        オーバーライドされます。
        <see cref="T:C1.C1Preview.Export.C1ReportHtmlExporter" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ReportHTMLExportProvider.DefaultOptionsFormClass">
      <summary>
        オーバーライドされます。デフォルトでエクスポートオプションの編集に使用されるフォームのタイプを取得します。 この実装は
        <see cref="T:C1.C1Preview.Export.ReportHtmlOptionsForm" />を返します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportPDFEmbedFontsExportProvider">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />からフォントが埋め込まれた PDF （
        <see cref="F:C1.C1Report.FileFormatEnum.PDFEmbedFonts" />）へのエクスポートを記述します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportPDFEmbedFontsExportProvider.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.ReportPDFEmbedFontsExportProvider" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportPDFExportProvider">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />から PDF（
        <see cref="F:C1.C1Report.FileFormatEnum.PDF" />）への エクスポートを記述します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportPDFExportProvider.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.ReportPDFExportProvider" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportPDFProtectedExportProvider">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />から保護された PDF （
        <see cref="F:C1.C1Report.FileFormatEnum.PDFProtected" />）へのエクスポートを記述します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportPDFProtectedExportProvider.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.ReportPDFProtectedExportProvider" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportPDFPrintUtilExportProvider">
      <summary>
        廃止。
        <see cref="T:C1.C1Report.C1Report" />から PDF（
        <see cref="F:C1.C1Report.FileFormatEnum.PDFPrintUtil" />）への エクスポートを記述します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportPDFPrintUtilExportProvider.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.ReportPDFPrintUtilExportProvider" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportRTFExportProvider">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />から RTF（
        <see cref="F:C1.C1Report.FileFormatEnum.RTF" />または
        <see cref="F:C1.C1Report.FileFormatEnum.RTFLabels" />）へのエクスポートを記述します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportRTFExportProvider.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.ReportRTFExportProvider" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ReportRTFExportProvider.NewExporter">
      <summary>
        オーバーライドされます。
        <see cref="T:C1.C1Preview.Export.C1ReportRtfExporter" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ReportRTFExportProvider.DefaultOptionsFormClass">
      <summary>
        オーバーライドされます。デフォルトでエクスポートオプションの編集に使用されるフォームのタイプを取得します。 この実装は
        <see cref="T:C1.C1Preview.Export.ReportRtfOptionsForm" />を返します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportRTFLabelsExportProvider">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />からフィールドベースの RTF （
        <see cref="F:C1.C1Report.FileFormatEnum.RTFLabels" />）への エクスポートを記述します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportRTFLabelsExportProvider.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.ReportRTFLabelsExportProvider" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportTextExportProvider">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />からプレーンテキスト（
        <see cref="F:C1.C1Report.FileFormatEnum.Text" />）への エクスポートを記述します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportTextExportProvider.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.ReportTextExportProvider" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ReportTextExportProvider.NewExporter">
      <summary>
        オーバーライドされます。
        <see cref="T:C1.C1Preview.Export.C1ReportRtfExporter" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ReportTextExportProvider.DefaultOptionsFormClass">
      <summary>
        オーバーライドされます。デフォルトでエクスポートオプションの編集に使用されるフォームのタイプを取得します。 この実装は
        <see cref="T:C1.C1Preview.Export.ReportRtfOptionsForm" />を返します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportTextSinglePageExportProvider">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />から単一ページテキスト（
        <see cref="F:C1.C1Report.FileFormatEnum.TextSinglePage" />）への エクスポートを記述します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportTextSinglePageExportProvider.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.ReportTextSinglePageExportProvider" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportMetafileExportProvider">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />から圧縮メタファイル（
        <see cref="F:C1.C1Report.FileFormatEnum.Metafile" />）への エクスポートを記述します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportMetafileExportProvider.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.ReportMetafileExportProvider" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportExcelExportProvider">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />から Microsoft Excel（
        <see cref="F:C1.C1Report.FileFormatEnum.Excel" />）への エクスポートを記述します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportExcelExportProvider.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.ReportExcelExportProvider" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportOpenXmlExportProvider">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />から OpenXml Excel（
        <see cref="F:C1.C1Report.FileFormatEnum.OpenXml" />）への エクスポートを記述します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportOpenXmlExportProvider.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.ReportOpenXmlExportProvider" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ReportTIFFExportProvider">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />から TIFF 画像（
        <see cref="F:C1.C1Report.FileFormatEnum.TIFF" />）への エクスポートを記述します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1ReportExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.ReportTIFFExportProvider.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.ReportTIFFExportProvider" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ReportTIFFExportProvider.NewExporter">
      <summary>
        オーバーライドされます。
        <see cref="T:C1.C1Preview.Export.C1ReportTIFFExporter" />クラスの新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ReportTIFFExportProvider.DefaultOptionsFormClass">
      <summary>
        オーバーライドされます。 デフォルトでエクスポートオプションの編集に使用されるフォームのタイプを取得します。 この実装は
        <see cref="T:C1.C1Preview.Export.ReportTIFFOptionsForm" />を返します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1ReportTIFFExporter">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />から TIFF 画像へのエクスポートを提供します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1ReportExporter">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />固有の
        <see cref="T:C1.C1Report.ExportFilter" />クラスの１つを使用して、
        <see cref="T:C1.C1Report.C1Report" />の外部形式へのエクスポートを提供します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportExporter.MakeFilter(System.String)">
      <summary>
        <see cref="P:C1.C1Preview.Export.C1ReportExporter.FileFormat" />によって決定された
        <see cref="T:C1.C1Report.ExportFilter" />のインスタンスを作成します。
      </summary>
      <param name="fileName">フィルタの作成対象のファイル。</param>
      <returns>作成されたフィルタ。</returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportExporter.Clear">
      <summary>エクスポータとそのすべてのパブリックプロパティの内部状態をリセットします。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportExporter.ConvertEmfPlusToEmfOnly">
      <summary>
        エクスポート前に、
        <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusDual" />および
        <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusOnly" />タイプのページメタファイルが
        <see cref="F:System.Drawing.Imaging.EmfType.EmfOnly" />タイプに変換されるかどうかを示します。 この実装は
        <b>false</b>を返します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportExporter.Reset">
      <summary>エクスポータの内部状態をリセットします。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportExporter.BaseFileFormat">
      <summary>
        現在のエクスポータによってサポートされた基本エクスポートファイル形式を取得します。 実際の形式（
        <see cref="P:C1.C1Preview.Export.C1ReportExporter.FileFormat" />）は、 同じ形式、またはその形式固有の変形が可能です。 たとえば、このプロパティが
        <see cref="F:C1.C1Report.FileFormatEnum.HTML" />の場合、
        <see cref="P:C1.C1Preview.Export.C1ReportExporter.FileFormat" />は
        <see cref="F:C1.C1Report.FileFormatEnum.HTMLPaged" />が可能です。
      </summary>
      <seealso cref="P:C1.C1Preview.Export.C1ReportExporter.FileFormat" />
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportExporter.FileFormat">
      <summary>現在のエクスポータによってサポートされた実際のエクスポートファイル形式を取得します。</summary>
      <seealso cref="P:C1.C1Preview.Export.C1ReportExporter.BaseFileFormat" />
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportExporter.ExportProvider">
      <summary>
        現在のエクスポータによってサポートされた
        <see cref="P:C1.C1Preview.Export.C1ReportExporter.BaseFileFormat" />を記述する
        <see cref="T:C1.C1Preview.Export.C1ReportExportProvider" />のインスタンスを取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportTIFFExporter.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.C1ReportTextExporter" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportTIFFExporter.MakeFilter(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="fileName"></param>
      <returns></returns>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportTIFFExporter.Monochrome">
      <summary>TIFF ドキュメントをモノクロ形式で保存するかどうかを示す値を取得または設定します。</summary>
      <remarks>
        <para>このプロパティのデフォルト値は true です。 FAX 機向けのサイズの小さいドキュメントが生成されます（使用される圧縮方式は CompressionCCITT4 です）。</para>
        <para>このプロパティを false に設定すると、 LZW 圧縮を使用したカラードキュメントが生成されますが、モノクロドキュメントよりかなりサイズが大きくなります（同じ解像度で 100 倍くらい大きくなります）。</para>
      </remarks>
    </member>
    <member name="T:C1.C1Preview.Export.C1ReportHtmlExporter">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />への HTML エクスポートを提供します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportHtmlExporter.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.C1ReportHtmlExporter" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportHtmlExporter.FileFormat">
      <summary>
        オーバーライドされます。 現在のエクスポートプロバイダによって生成されるエクスポートファイルの形式を決定する
        <see cref="T:C1.C1Report.FileFormatEnum" />値を取得します。
        <see cref="P:C1.C1Preview.Export.C1ReportHtmlExporter.Paged" />および
        <see cref="P:C1.C1Preview.Export.C1ReportHtmlExporter.DrillDown" />プロパティに応じて、
        <see cref="F:C1.C1Report.FileFormatEnum.HTML" />、
        <see cref="F:C1.C1Report.FileFormatEnum.HTMLPaged" />、 または
        <see cref="F:C1.C1Report.FileFormatEnum.HTMLDrillDown" />を返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportHtmlExporter.TableBased">
      <summary>
        テーブルベースの HTML（
        <see cref="F:C1.C1Report.FileFormatEnum.HTMLTableBased" />を参照） を作成するかどうかを示す値を取得または設定します。
        <para>
          このプロパティが
          <b>true</b>の場合、
          <see cref="P:C1.C1Preview.Export.C1ReportHtmlExporter.Paged" />と
          <see cref="P:C1.C1Preview.Export.C1ReportHtmlExporter.DrillDown" />は無視されます。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportHtmlExporter.Paged">
      <summary>
        ページ単位の HTML（
        <see cref="F:C1.C1Report.FileFormatEnum.HTMLPaged" />を参照）を 作成するかどうかを示す値を取得または設定します。
        <para>
          これと
          <see cref="P:C1.C1Preview.Export.C1ReportHtmlExporter.DrillDown" />の両方が
          <c>true</c>の場合は、 このプロパティが優先されます。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportHtmlExporter.DrillDown">
      <summary>
        ドリルダウン HTML（
        <see cref="F:C1.C1Report.FileFormatEnum.HTMLDrillDown" />を参照）を 作成するかどうかを示す値を取得または設定します。
        <para>
          これと
          <see cref="P:C1.C1Preview.Export.C1ReportHtmlExporter.Paged" />の両方が
          <c>true</c>の場合は、
          <see cref="P:C1.C1Preview.Export.C1ReportHtmlExporter.Paged" />が優先されます。
        </para>
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1ReportRtfExporter">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />の RTF へのエクスポートを提供します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportRtfExporter.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.C1ReportRtfExporter" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportRtfExporter.FileFormat">
      <summary>
        オーバーライドされます。 現在のエクスポートプロバイダによって生成されるエクスポートファイルの形式を決定する
        <see cref="T:C1.C1Report.FileFormatEnum" />値を取得します。
        <see cref="P:C1.C1Preview.Export.C1ReportRtfExporter.AbsolutePositioning" />プロパティに応じて、
        <see cref="F:C1.C1Report.FileFormatEnum.RTF" />または
        <see cref="F:C1.C1Report.FileFormatEnum.RTFLabels" />を返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportRtfExporter.AbsolutePositioning">
      <summary>
        エクスポートされた RTF ファイルで絶対位置を使用するかどうかを示す値を 取得または設定します （
        <see cref="F:C1.C1Report.FileFormatEnum.RTFLabels" />を参照）。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1ReportTextExporter">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />のプレーンテキストへのエクスポートを提供します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportTextExporter.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.C1ReportTextExporter" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1ReportTextExporter.MakeFilter(System.String)">
      <summary>
        オーバーライドされます。
        <see cref="!:UseTextFilterClassic" />によって決定される
        <see cref="!:TextFilterClassic" />または
        <see cref="T:C1.C1Report.TextFilter" />クラスの インスタンスを作成します。
      </summary>
      <param name="fileName">フィルタを作成するファイル。</param>
      <returns>作成されたフィルタ。</returns>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportTextExporter.FileFormat">
      <summary>
        オーバーライドされます。 現在のエクスポートプロバイダによって生成されるエクスポートファイルの形式を決定する
        <see cref="T:C1.C1Report.FileFormatEnum" />値を取得します。
        <see cref="P:C1.C1Preview.Export.C1ReportTextExporter.SinglePage" />プロパティに応じて、
        <see cref="F:C1.C1Report.FileFormatEnum.Text" />または
        <see cref="F:C1.C1Report.FileFormatEnum.TextSinglePage" />を返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportTextExporter.SinglePage">
      <summary>
        レポートが単一ページ（
        <see cref="F:C1.C1Report.FileFormatEnum.TextSinglePage" />を参照）として エクスポートされるかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1ReportTextExporter.UseTextFilterClassic">
      <summary>TextFilter の旧バージョンを使用する必要があるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.EmfTextFragment">
      <summary>これは内部使用専用です。 書式付きテキストのコピーをサポートするために、 テキスト型メタファイルレコードのフラグメントを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.EmfTextFragment.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>コンストラクタ</summary>
      <param name="recordIndex"></param>
      <param name="firstTextIndex"></param>
      <param name="lastTextIndex"></param>
    </member>
    <member name="P:C1.C1Preview.Export.EmfTextFragment.EmfRecordIndex">
      <summary>メタファイルレコードの０から始まるインデックス（EnumerateMetafile による番号付け）を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.EmfTextFragment.EmfTextFirstIndex">
      <summary>メタファイルレコード内のこのフラグメントの先頭文字の０から始まるインデックスを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.EmfTextFragment.EmfTextLastIndex">
      <summary>メタファイルレコード内のこのフラグメントの末尾文字の０から始まるインデックスを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.EmfTextPage">
      <summary>これは内部使用専用です。 メタファイル、およびメタファイル上の（選択された）テキストのリストを表します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.EmfTextExporterBase">
      <summary>これは内部使用専用です。 メタファイルテキストエクスポータの抽象基本クラス。 これらのエクスポータはクリップボードの書式付きテキストの生成に使用されます。 異なる書式の３つの仮想メソッドを実装します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.EmfTextToHtmlExporter">
      <summary>これは内部使用専用です。 クリップボードへの HTML 形式のコピーを提供するために使用されます。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.ClipboardFormatter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1dOptionsForm">
      <summary>C1D／C1DX エクスポートモジュールのデフォルトオプションフォームを表します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.ExportOptionsFormBase">
      <summary>
        <see cref="P:C1.C1Preview.Export.ExportOptionsFormBase.Exporter" />によって使用されるエクスポートオプションを編集するためのフォームを表します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Forms.BaseForm">
      <summary>C1Preview のすべてのカスタムフォームの基本クラス。</summary>
    </member>
    <member name="M:C1.C1Preview.Forms.BaseForm.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Forms.BaseForm" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.BaseForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="M:C1.C1Preview.Export.ExportOptionsFormBase.CreateForm(C1.C1Preview.Export.Exporter,System.Type,System.Type)">
      <summary>
        <see cref="T:C1.C1Preview.Export.ExportOptionsFormBase" />派生クラスの新しいインスタンスを作成します。
      </summary>
      <param name="exporter">使用するエクスポータ。</param>
      <param name="customType">カスタムフォームタイプ。</param>
      <param name="defaultType">デフォルトフォームタイプ。</param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportOptionsFormBase.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="P:C1.C1Preview.Export.ExportOptionsFormBase.Exporter">
      <summary>関連付けられたエクスポータを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportOptionsFormBase.ExportProvider">
      <summary>関連付けられたエクスポートプロバイダを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportOptionsFormBase.Document">
      <summary>エクスポートされるドキュメントを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportOptionsFormBase.Preview">
      <summary>結果のドキュメントがデフォルトシステムビューアを使って開かれるかどうかを示す値を 取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportOptionsFormBase.DocumentInfo">
      <summary>ドキュメント情報を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportOptionsFormBase.Range">
      <summary>エクスポートされるページ範囲を取得または設定します。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1dOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="P:C1.C1Preview.Export.C1dOptionsForm.EmbedTrueTypeFonts">
      <summary>ドキュメントで使用される埋め込み可能なフォントを埋め込むかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dOptionsForm.EmbedTrueTypeFontsEnabled">
      <summary>［フォントを埋め込む］チェックボックスを有効にできるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1mdxOptionsForm">
      <summary>C1D／C1DX エクスポートモジュールのデフォルトオプションフォームを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.C1mdxOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、そうでない場合は false。</param>
    </member>
    <member name="T:C1.C1Preview.Export.ReportTextOptionsForm">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />固有のプレーンテキストエクスポートモジュールの デフォルトオプションフォームを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ReportTextOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="T:C1.C1Preview.Export.ReportRtfOptionsForm">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />固有の RTF エクスポートモジュールの デフォルトオプションフォームを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ReportRtfOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="T:C1.C1Preview.Export.ReportHtmlOptionsForm">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />固有の HTML エクスポートモジュールの デフォルトオプションフォームを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ReportHtmlOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="M:C1.C1Preview.Export.PdfViewerPreferencesForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="T:C1.C1Preview.BordersModeEnum">
      <summary>オブジェクトをドキュメントにレイアウトする際の枠線の太さを示すさまざまなモードを指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.BordersModeEnum.Default">
      <summary>
        枠線全体はオブジェクトの一部であると見なされます。 これは
        <see cref="T:C1.C1Preview.C1PrintDocument" />のオブジェクトのデフォルト動作です。
      </summary>
    </member>
    <member name="F:C1.C1Preview.BordersModeEnum.C1Report">
      <summary>
        枠線の太さの内側 1/2 はオブジェクトの一部と見なされ、 枠線の外側 1/2 はオブジェクトのスペース外と見なされます。 これは
        <see cref="F:C1.C1Preview.BordersModeEnum.C1Report" />の オブジェクトのデフォルト動作です（MS Access の場合と同じ）。
      </summary>
    </member>
    <member name="F:C1.C1Preview.BordersModeEnum.Rdl">
      <summary>枠線の太さはオブジェクトのサイズとレイアウトの計算時にまったく考慮されません。 枠線はオブジェクトの範囲に中央揃えにして描画されます。</summary>
    </member>
    <member name="T:C1.C1Preview.CompatibilityOptions">
      <summary>C1PrintDocument の互換性オプションを定義します。C1PrintDocument の前のバージョンとの互換性を指定するプロパティが含まれます。</summary>
    </member>
    <member name="M:C1.C1Preview.CompatibilityOptions.AssignFrom(C1.C1Preview.CompatibilityOptions)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.CompatibilityOptions.Reset">
      <summary>このオブジェクトのプロパティをデフォルト値にリセットします。</summary>
    </member>
    <member name="P:C1.C1Preview.CompatibilityOptions.WhiteRtfBackground">
      <summary>RTF の背景色を白色にするか、指定した色を使用するかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.CompatibilityOptions.HeaderFooterWidthAsTotalColumnWidth">
      <summary>ページヘッダーおよびフッターの幅がページのすべての列の幅の合計と等しいかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.CompatibilityOptions.TopLevelPositionRelativeToPageMargins">
      <summary>
        ドキュメント内の最上位オブジェクトの絶対座標の基準を ページマージンにするか物理的なページ範囲にするかを示す値を 取得または設定します。
        <para>
          このプロパティのデフォルト値は
          <b>false</b>です。 ページ端を基準とした従来の座標が使用されます。
          <b>true</b>に設定すると、座標はページマージン基準と見なされます。
        </para><para>
          たとえば、このプロパティが
          <b>false</b>（デフォルト）で、 ページマージンが１インチ、最上位オブジェクトの X 座標が 0.5 インチと指定されている場合、 オブジェクトはページの左端から 0.5 インチに配置されます。 これは左ページマージンの中央です。
        </para><para>
          このプロパティを
          <b>true</b>に設定すると、同じオブジェクトは左ページマージンの右端から 0.5 インチの位置に配置されます。 これはページの端から 1.5 インチの位置です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.CompatibilityOptions.BordersMode">
      <summary>
        枠線がドキュメント内のオブジェクトのレイアウトにどのように影響するかを示す値を取得または設定します。
        <para>
          詳細については、
          <see cref="T:C1.C1Preview.BordersModeEnum" />を参照してください。
        </para><para>
          デフォルト値は
          <see cref="F:C1.C1Preview.BordersModeEnum.Default" />です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.CompatibilityOptions.KeepImages">
      <summary>
        ドキュメントディクショナリ内の画像を
        <b>Image</b>オブジェクトとして保持するかどうかを示します。 このプロパティを
        <b>false</b>に設定すると、メモリ使用を最適化するため、画像は未処理のデータとして保存されます。
      </summary>
      <para>
        The default value is
        <b>true</b>.
      </para>
    </member>
    <member name="P:C1.C1Preview.CompatibilityOptions.StretchBarCodesAsImages">
      <summary>
        バーコードを画像としてストレッチするかどうかを示す値を取得または設定します。
        <para>デフォルト値は false で、旧バージョンと互換性があります。</para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.CompatibilityOptions.UseGdiLinesInPdfExport">
      <summary>PDF への出力のレンダリング時に GDI 関数を線の描画に使用するかどうかを示す値を取得または設定します。 デフォルト値は false です。 このプロパティを true に設定すると、多くの破線や点線を含むドキュメントのファイルサイズを非常に小さくできます。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataHandlerC1ReportPosition">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataHandlerPosition">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataHandlerPosition.Equals(System.Object)">
      <summary>指定されたオブジェクトが現在のオブジェクトに等しいかどうかを決定します。</summary>
      <param name="o">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>指定されたオブジェクトが現在のオブジェクトと等しい場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataHandlerPosition.GetHashCode">
      <summary>特定のタイプのハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュコード。</returns>
    </member>
    <member name="T:C1.C1Preview.Export.C1dExportProvider">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />のネイティブ C1D 形式
        <see cref="T:C1.C1Preview.Export.ExportProvider" />を表します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1dxExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.C1dExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.C1dExportProvider.CanExportObject(System.Object)">
      <summary>
        指定したオブジェクトが
        <see cref="T:C1.C1Preview.Export.C1dExporter" />によって エクスポートできるドキュメントを表すかどうかをテストします。
      </summary>
      <param name="obj">テストするオブジェクト（ドキュメント）。</param>
      <returns>
        <paramref name="obj" />が
        <see cref="T:C1.C1Preview.C1PrintDocument" />または
        <see cref="T:C1.C1Report.C1Report" />のインスタンスである場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1dExportProvider.CanExportType(System.Type)">
      <summary>
        指定されたタイプのドキュメントを
        <see cref="T:C1.C1Preview.Export.C1dExporter" />で エクスポートできるかどうかをテストします。
      </summary>
      <param name="documentType">テストするタイプ。</param>
      <returns>
        <paramref name="documentType" />が
        <see cref="T:C1.C1Preview.C1PrintDocument" />または
        <see cref="T:C1.C1Report.C1Report" />である場合は
        <b>true</b>、 そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1dExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.C1Preview.Export.C1dExporter" />の新しいインスタンスを作成します。
      </summary>
      <returns>新しく作成されたインスタンス。</returns>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExportProvider.PreferredOrdinal">
      <summary>「保存...」および類似のダイアログにおけるエクスポート形式の優先序数を指定します。 この実装は 1 を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExportProvider.FormatName">
      <summary>C1D エクスポート形式の簡単な記述を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExportProvider.DefaultExtension">
      <summary>現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。 この実装は「c1d」を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExportProvider.CanExportToStream">
      <summary>
        ストリームへのエクスポートが現在の形式によってサポートされているかどうかを示す値を取得します。 この実装は
        <b>true</b>を返します（ストリームへのエクスポートがサポートされます）。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExportProvider.DefaultOptionsFormClass">
      <summary>デフォルトでエクスポートオプションの編集に使用されるフォームのタイプを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExportProvider.SupportedDocumentInfoFields">
      <summary>
        現在のエクスポート形式によってサポートされる
        <see cref="T:C1.C1Preview.DocumentInfo" />クラスの フィールドを示すフラグの組み合わせを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExportProvider.ShouldEnsureGeneratedDocument">
      <summary>
        <b>false</b>を返します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1dExporter">
      <summary>C1D 形式のエクスポータを表します。</summary>
      <seealso cref="T:C1.C1Preview.Export.C1dExportProvider" />
    </member>
    <member name="M:C1.C1Preview.Export.C1dExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>現在のエクスポータのプロパティを指定したエクスポートオプションフォームの 対応するユーザー編集可能なオプションにコピーします。</summary>
      <param name="f">
        プロパティのコピー先の
        <see cref="T:C1.C1Preview.Export.C1dOptionsForm" />オブジェクト。
      </param>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExporter.C1DocumentFormat">
      <summary>
        オーバーライドされます。 ドキュメントの保存に使用される形式を決定する
        <see cref="T:C1.C1Preview.C1DocumentFormatEnum" />値を取得します。 この実装は
        <see cref="F:C1.C1Preview.C1DocumentFormatEnum.C1d" />を返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dExporter.ExportProvider">
      <summary>
        <see cref="P:C1.C1Preview.Export.ExportProviders.C1dExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.DocxOptionsForm">
      <summary>
        Open XML DOCX 形式へのエクスポート時に
        <see cref="T:C1.C1Preview.Export.RtfExporter" />によって使用される エクスポートオプションの編集用のフォームを表します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.RtfOptionsForm">
      <summary>
        <see cref="T:C1.C1Preview.Export.RtfExporter" />によって使用されるエクスポートオプションを編集するためのフォームを表します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ComplexExporterOptionsForm">
      <summary>
        <see cref="T:C1.C1Preview.Export.ComplexExporter" />によって使用されるエクスポートオプションの編集用のフォームを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ComplexExporterOptionsForm.ProcessPaginated">
      <summary>Paginated プロパティに応じてコントロールを更新するために使用できます。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.ComplexExporterOptionsForm.Init">
      <summary>追加の初期化を実行します。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.ComplexExporterOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="F:C1.C1Preview.Export.ComplexExporterOptionsForm.m_chkPaginated">
      <summary>［改ページを保持］チェックボックス。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.ComplexExporterOptionsForm.m_chkFixedPositioning">
      <summary>［固定配置］チェックボックス。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.ComplexExporterOptionsForm.m_chkOpenXmlDocument">
      <summary>［Open XML］チェックボックス。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ComplexExporterOptionsForm.AllowNotPaginated">
      <summary>元のドキュメントの改ページを保持しないエクスポートが許可されるかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ComplexExporterOptionsForm.Paginated">
      <summary>エクスポートが元のドキュメントの改ページを保持するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ComplexExporterOptionsForm.FixedPositioning">
      <summary>ドキュメント内のオブジェクトが絶対固定位置を持っているかどうか、可能な場合に ドキュメントフローに追加されるどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ComplexExporterOptionsForm.OpenXmlDocument">
      <summary>エクスポートが Open XML ファイル形式を使用するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.RtfOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="P:C1.C1Preview.Export.RtfOptionsForm.UseDrawingCanvas">
      <summary>エクスポートされたドキュメントのキャンバスを使用するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfOptionsForm.ShapesWord2007Compatible">
      <summary>形状が Word 2007 と互換性のあるモードで描画されるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.DocxOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="T:C1.C1Preview.Export.DefaultExportOptionsForm">
      <summary>カスタムオプションを何も持たないエクスポートモジュールのデフォルトオプションフォームを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.DefaultExportOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="T:C1.C1Preview.Export.ReportTIFFOptionsForm">
      <summary>
        <see cref="T:C1.C1Report.C1Report" />固有のプレーンテキストエクスポートモジュールの デフォルトオプションフォームを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ReportTIFFOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、そうでない場合は false。</param>
    </member>
    <member name="T:C1.C1Preview.Export.XlsxOptionsForm">
      Represents a form for editing the export options used by an
      <see cref="T:C1.C1Preview.Export.XlsExporter" />when exporting to Open XML XLSX format.
    </member>
    <member name="T:C1.C1Preview.Export.XlsOptionsForm">
      <summary>
        <see cref="T:C1.C1Preview.Export.XlsExporter" />によって使用されるエクスポートオプションを編集するためのフォームを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.XlsOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="P:C1.C1Preview.Export.XlsOptionsForm.BookContent">
      <summary>ソースドキュメントの主なコンテンツタイプを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsOptionsForm.FontScaling">
      <summary>フォントのスケール係数を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsOptionsForm.Tolerance">
      <summary>許容範囲を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsOptionsForm.PagePerSheet">
      <summary>ソースドキュメントの各ページが別シートとしてエクスポートされるかどうかを示す値を 取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsOptionsForm.DataOnly">
      <summary>データのみをエクスポートするかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.XlsxOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="T:C1.C1Preview.Export.XpsExportProvider">
      <summary>XPS 形式へのエクスポートを記述します。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.XpsExportProvider.CanExportObject(System.Object)">
      <summary>
        指定されたオブジェクトが、関連付けられている
        <see cref="T:C1.C1Preview.Export.XpsExporter" />によって エクスポートできるドキュメントを表すかどうかをテストします。
      </summary>
      <param name="obj">テストするオブジェクト（ドキュメント）。</param>
      <returns>
        <paramref name="obj" />が
        <see cref="T:C1.C1Preview.C1PrintDocument" />のインスタンスである場合は
        <b>true</b>、 そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.XpsExportProvider.CanExportType(System.Type)">
      <summary>
        関連付けられている
        <see cref="T:C1.C1Preview.Export.XpsExporter" />が指定された型のドキュメントを エクスポートできるかどうかをテストします。
      </summary>
      <param name="documentType">テストする型。</param>
      <returns>
        <paramref name="documentType" />が
        <see cref="T:C1.C1Preview.C1PrintDocument" />の場合は
        <b>true</b>、 そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.XpsExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.C1Preview.Export.XpsExporter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.Export.XpsExporter" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.XpsExportProvider.CanExportRange(C1.C1Preview.OutputRangeTypeEnum)">
      <summary>
        関連付けられているエクスポータが 指定された型のドキュメントページ範囲を処理できるかどうかを示します。 この実装は
        <b>false</b>を返します。
      </summary>
      <param name="range">テストする範囲の型。</param>
      <returns>
        <b>false</b>。
      </returns>
    </member>
    <member name="P:C1.C1Preview.Export.XpsExportProvider.FormatName">
      <summary>XPS エクスポート形式の簡単な説明を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XpsExportProvider.DefaultExtension">
      <summary>現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。 この実装は "xps" を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XpsExportProvider.CanExportToStream">
      <summary>
        ストリームへのエクスポートが現在の形式でサポートされているかどうかを示す値を取得します。 この実装は
        <b>false</b>を返します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.XpsExporter">
      <summary>ドキュメントを XPS（XML Paper Specification）形式にエクスポートするために 使用できるオブジェクトを表します。</summary>
      <seealso cref="T:C1.C1Preview.Export.XpsExportProvider" />
    </member>
    <member name="P:C1.C1Preview.Export.XpsExporter.ExportProvider">
      <summary>
        <see cref="P:C1.C1Preview.Export.ExportProviders.XpsExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.Xps.XpsC1Doc">
      <summary>C1PrintDocument の XPS 表現を提供します。 生成された XPS は、この型のインスタンスの作成に使用されたコンストラクタに応じて、 ディスクファイルまたはメモリのいずれかに保存されます。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.Xps.XpsC1Doc.#ctor(C1.C1Preview.C1PrintDocument)">
      <summary>XPS ドキュメントをメモリに保持する XpsC1Doc のインスタンスを作成します。</summary>
      <param name="c1doc">
        ソース
        <see cref="T:C1.C1Preview.C1PrintDocument" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.Xps.XpsC1Doc.#ctor(C1.C1Preview.C1PrintDocument,System.String)">
      <summary>XPS ドキュメントをディスクファイルに作成する XpsC1Doc のインスタンスを作成します。</summary>
      <param name="c1doc">
        ソース
        <see cref="T:C1.C1Preview.C1PrintDocument" />。
      </param>
      <param name="filename">ターゲット XPS ファイル名。</param>
    </member>
    <member name="M:C1.C1Preview.Export.Xps.XpsC1Doc.UnitToXpsPixel(C1.C1Preview.Unit)">
      <summary>
        ページ解像度（
        <see cref="P:C1.C1Preview.Export.Xps.XpsC1Doc.XpsDpi" />）を使用して、
        <see cref="T:C1.C1Preview.Unit" />値を XPS ピクセル値に変換します。
      </summary>
      <param name="unit">変換する単位値。</param>
      <returns>変換後の値。</returns>
    </member>
    <member name="M:C1.C1Preview.Export.Xps.XpsC1Doc.RuToXpsPixel(System.Double)">
      <summary>ドキュメントの ResolvedUnitType 単位の絶対値を XPS ピクセル単位の値に変換します。</summary>
      <param name="ru">変換する値。</param>
      <returns>変換後の値。</returns>
    </member>
    <member name="M:C1.C1Preview.Export.Xps.XpsC1Doc.Commit">
      <summary>ドキュメントをコミットします。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.Xps.XpsC1Doc.Document">
      <summary>
        ソースの
        <see cref="T:C1.C1Preview.C1PrintDocument" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Xps.XpsC1Doc.XpsDpi">
      <summary>ページのコンテンツに使用される解像度を取得します。現在のバージョンでは、 これは、ソース C1PrintDocument の CreationDpi によって決定されます。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.Xps.XpsC1Doc.XpsDocument">
      <summary>
        ソースドキュメントを表す
        <see cref="P:C1.C1Preview.Export.Xps.XpsC1Doc.XpsDocument" />を取得します。 このプロパティに最初にアクセスした時点でドキュメントはコミットされ、 以後は変更できなくなります。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.Xps.XpsC1Doc.LongOperationEventHandler">
      <summary>ドキュメントの生成中に定期的に呼び出されるデリゲートを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.Xps.XpsC1Doc.LongOperationEventSender">
      <summary>時間のかかる処理イベントの送信元引数を取得または設定します。 設定しない場合は、現在のオブジェクトが使用されます。</summary>
    </member>
    <member name="T:C1.C1Preview.EmbeddedFontsGlyphsBuildMode">
      <summary>
        <see cref="T:C1.C1Preview.EmbeddedFont" />内のグリフのリストの作成に使用されるメソッドを定義します。
      </summary>
    </member>
    <member name="F:C1.C1Preview.EmbeddedFontsGlyphsBuildMode.UsedChars">
      <summary>
        ドキュメントまたはレポート内で使用される実際の文字列のグリフのみが
        <see cref="T:C1.C1Preview.EmbeddedFont" />に追加されます。
      </summary>
    </member>
    <member name="F:C1.C1Preview.EmbeddedFontsGlyphsBuildMode.UnicodeRanges">
      <summary>
        ドキュメントまたはレポート内で使用される文字ごとに、その Unicode 範囲全体が
        <see cref="T:C1.C1Preview.EmbeddedFont" />に追加されます。
      </summary>
    </member>
    <member name="F:C1.C1Preview.EmbeddedFontsGlyphsBuildMode.All">
      <summary>
        すべてのフォントグリフを
        <see cref="T:C1.C1Preview.EmbeddedFont" />に追加します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.FontHandling">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />によってフォントの埋め込みと置換が処理される方法を指定します （詳細は
        <see cref="P:C1.C1Preview.C1PrintDocument.FontHandling" />を参照）。
      </summary>
    </member>
    <member name="F:C1.C1Preview.FontHandling.None">
      <summary>
        フォントが埋め込まれず、フォントの置換も分析されません。
        <see cref="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts" />と
        <see cref="P:C1.C1Preview.C1PrintDocument.DocumentFonts" />コレクションには、 ドキュメントの生成時に読み込まれません。
      </summary>
    </member>
    <member name="F:C1.C1Preview.FontHandling.BuildDocumentFonts">
      <summary>
        フォントが埋め込まれず、フォントの置換が分析されません。 ただし、
        <see cref="P:C1.C1Preview.C1PrintDocument.DocumentFonts" />コレクションには、 ドキュメントの生成時にドキュメントで明示的に使用される フォントが読み込まれます。
        <see cref="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts" />コレクションには読み込まれません。
      </summary>
    </member>
    <member name="F:C1.C1Preview.FontHandling.BuildActualDocumentFonts">
      <summary>
        フォントは埋め込まれませんが、フォントの置換が分析されます。
        <see cref="P:C1.C1Preview.C1PrintDocument.DocumentFonts" />コレクションには、 ドキュメントの生成時にドキュメントで実際に使用される フォントが読み込まれます。
        <see cref="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts" />コレクションには読み込まれません。
      </summary>
    </member>
    <member name="F:C1.C1Preview.FontHandling.EmbedFonts">
      <summary>
        フォントが埋め込まれますが、フォントの置換は分析されません。
        <see cref="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts" />と
        <see cref="P:C1.C1Preview.C1PrintDocument.DocumentFonts" />コレクションには、 ドキュメントの生成時にドキュメントで実際に使用される フォントが読み込まれます。
      </summary>
    </member>
    <member name="F:C1.C1Preview.FontHandling.EmbedActualFonts">
      <summary>
        フォントが埋め込まれ、フォントの置換が分析されます。
        <see cref="P:C1.C1Preview.C1PrintDocument.EmbeddedFonts" />と
        <see cref="P:C1.C1Preview.C1PrintDocument.DocumentFonts" />コレクションには、 ドキュメントの生成時にドキュメントで実際に使用される フォントが読み込まれます。
      </summary>
    </member>
    <member name="T:C1.C1Preview.UnicodeRangeEnum">
      <summary>使用可能なユニコード範囲を定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.C0ControlsandBasicLatin">
      <summary>C0 制御と基本ラテン</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.C1ControlsandLatin1Supplement">
      <summary>C1 制御とラテン１補助</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.LatinExtendedA">
      <summary>ラテン拡張文字-A。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.LatinExtendedB">
      <summary>ラテン拡張文字-B。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.IPAExtensions">
      <summary>IPA 拡張。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SpacingModifierLetters">
      <summary>スペース調整文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CombiningDiacriticalMarks">
      <summary>結合分音記号。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.GreekandCoptic">
      <summary>ギリシャおよびコプト</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Cyrillic">
      <summary>キリル文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CyrillicSupplement">
      <summary>キリル補助</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Armenian">
      <summary>アルメニア文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Hebrew">
      <summary>ヘブライ文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Arabic">
      <summary>アラビア文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Syriac">
      <summary>シリア文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.ArabicSupplement">
      <summary>アラビア補助</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Thaana">
      <summary>ターナ文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.NKo">
      <summary>ンコ文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Samaritan">
      <summary>サマリア文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Mandaic">
      <summary>マンダ文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.ArabicExtendedA">
      <summary>アラビア文字拡張 A</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Devanagari">
      <summary>デーヴァナーガリー文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Bengali">
      <summary>ベンガル文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Gurmukhi">
      <summary>グルムキー文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Gujarati">
      <summary>グジャラート文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Oriya">
      <summary>オリヤー文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Tamil">
      <summary>タミル文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Telugu">
      <summary>テルグ文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Kannada">
      <summary>カンナダ文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Malayalam">
      <summary>マラヤーラム文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Sinhala">
      <summary>シンハラ文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Thai">
      <summary>タイ文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Lao">
      <summary>ラオ文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Tibetan">
      <summary>チベット文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Myanmar">
      <summary>ミャンマー文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Georgian">
      <summary>グルジア文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HangulJamo">
      <summary>ハングル字母（韓国語）。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Ethiopic">
      <summary>エチオピア文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.EthiopicSupplement">
      <summary>エチオピア文字補助</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Cherokee">
      <summary>チェロキー文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.UnifiedCanadianAboriginalSyllabics">
      <summary>統合カナダ先住民音節</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Ogham">
      <summary>オガム文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Runic">
      <summary>ルーン文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Tagalog">
      <summary>タガログ文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Hanunoo">
      <summary>ハヌノオ文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Buhid">
      <summary>ブヒッド文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Tagbanwa">
      <summary>タグバヌア文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Khmer">
      <summary>クメール文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Mongolian">
      <summary>モンゴル文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.UnifiedCanadianAboriginalSyllabicsExtended">
      <summary>統合カナダ先住民音節拡張</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Limbu">
      <summary>リンブ文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.TaiLe">
      <summary>タイロ文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.NewTaiLue">
      <summary>新タイロ</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.KhmerSymbols">
      <summary>クメール記号</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Buginese">
      <summary>ブギス文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.TaiTham">
      <summary>ラーンナー文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Balinese">
      <summary>バリ文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Sundanese">
      <summary>スンダ文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Batak">
      <summary>バタク文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Lepcha">
      <summary>レプチャ文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.OlChiki">
      <summary>オルチキ文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SundaneseSupplement">
      <summary>スンダ補助</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.VedicExtensions">
      <summary>ヴェーダ拡張</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.PhoneticExtensions">
      <summary>ふりがな拡張</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.PhoneticExtensionsSupplement">
      <summary>ふりがな拡張補助</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CombiningDiacriticalMarksSupplement">
      <summary>結合分音記号補助</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.LatinExtendedAdditional">
      <summary>ラテン文字拡張（追補）。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.GreekExtended">
      <summary>ギリシャ文字拡張。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.GeneralPunctuation">
      <summary>一般句読点。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SuperscriptsandSubscripts">
      <summary>上付き／下付きの文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CurrencySymbols">
      <summary>通貨記号。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CombiningDiacriticalMarksforSymbols">
      <summary>記号用結合分音記号</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.LetterlikeSymbols">
      <summary>文字種記号</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.NumberForms">
      <summary>数字の形。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Arrows">
      <summary>矢印。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MathematicalOperators">
      <summary>数学記号。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MiscellaneousTechnical">
      <summary>その他の技術用記号。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.ControlPictures">
      <summary>制御機能用記号。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.OpticalCharacterRecognition">
      <summary>OCR。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.EnclosedAlphanumerics">
      <summary>囲み英数字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.BoxDrawing">
      <summary>罫線素辺。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.BlockElements">
      <summary>ブロック要素。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.GeometricShapes">
      <summary>幾何学模様。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MiscellaneousSymbols">
      <summary>その他の記号。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Dingbats">
      <summary>装飾記号。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MiscellaneousMathematicalSymbolsA">
      <summary>その他の数学記号 A</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SupplementalArrowsA">
      <summary>補助矢印 A</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.BraillePatterns">
      <summary>ブライユ点字パターン</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SupplementalArrowsB">
      <summary>補助矢印 B</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MiscellaneousMathematicalSymbolsB">
      <summary>その他の数学記号 B</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SupplementalMathematicalOperators">
      <summary>補助数学演算記号</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MiscellaneousSymbolsandArrows">
      <summary>その他の記号と矢印</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Glagolitic">
      <summary>グラゴル文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.LatinExtendedC">
      <summary>ラテン文字拡張 C</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Coptic">
      <summary>コプト文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.GeorgianSupplement">
      <summary>グルジア文字補助</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Tifinagh">
      <summary>ティフィナグ文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.EthiopicExtended">
      <summary>エチオピア文字拡張</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CyrillicExtendedA">
      <summary>キリル文字拡張 A</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SupplementalPunctuation">
      <summary>補助句読点</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKRadicalsSupplement">
      <summary>CJK 部首追加。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.KangxiRadicals">
      <summary>康煕部首。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.IdeographicDescriptionCharacters">
      <summary>表意文字構造</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKSymbolsandPunctuation">
      <summary>CJK 用の記号および分音記号</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Hiragana">
      <summary>ひらがな（日本語）。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Katakana">
      <summary>カタカナ（日本語）。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Bopomofo">
      <summary>Bopomofo （中国語）。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HangulCompatibilityJamo">
      <summary>ハングル互換字母（韓国語）。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Kanbun">
      <summary>漢文</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.BopomofoExtended">
      <summary>注音字母（最小元素理解法）拡張</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKStrokes">
      <summary>CJK 字画</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.KatakanaPhoneticExtensions">
      <summary>カタカナふりがな拡張</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.EnclosedCJKLettersandMonths">
      <summary>囲み CJK 文字・月</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKCompatibility">
      <summary>CJK 互換用文字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKUnifiedIdeographsExtensionA">
      <summary>CJK 統合漢字拡張 A</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.YijingHexagramSymbols">
      <summary>易経の六線星形の記号</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKUnifiedIdeographs">
      <summary>CJK 統合漢字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.YiSyllables">
      <summary>イ音節</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.YiRadicals">
      <summary>イ部首</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Lisu">
      <summary>リス文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Vai">
      <summary>ヴァイ文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CyrillicExtendedB">
      <summary>キリル文字拡張 B</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Bamum">
      <summary>バムン文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.ModifierToneLetters">
      <summary>声調記号</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.LatinExtendedD">
      <summary>ラテン文字拡張 D</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SylotiNagri">
      <summary>シロティナグリ文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CommonIndicNumberForms">
      <summary>共通インド数字形</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Phagspa">
      <summary>パスパ文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Saurashtra">
      <summary>サウラーシュトラー文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.DevanagariExtended">
      <summary>デバナガリ拡張</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.KayahLi">
      <summary>カヤーリー文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Rejang">
      <summary>ルジャン文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HangulJamoExtendedA">
      <summary>ハングル字母拡張 A</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Javanese">
      <summary>ジャワ文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Cham">
      <summary>チャム文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MyanmarExtendedA">
      <summary>ミャンマー文字拡張 A</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.TaiViet">
      <summary>タイベト文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MeeteiMayekExtensions">
      <summary>メイティマイェック拡張</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.EthiopicExtendedA">
      <summary>エチオピア文字拡張 A</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.MeeteiMayek">
      <summary>メイティマイェック文字</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HangulSyllables">
      <summary>ハングル音節</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HangulJamoExtendedB">
      <summary>ハングル字母拡張 B</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HighSurrogates">
      <summary>上位サロゲート</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HighPrivateUseSurrogates">
      <summary>上位私用サロゲート</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.LowSurrogates">
      <summary>下位サロゲート</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.PrivateUseArea">
      <summary>私用領域。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKCompatibilityIdeographs">
      <summary>CJK 互換漢字。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.AlphabeticPresentationForms">
      <summary>アルファベット表示形。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.ArabicPresentationFormsA">
      <summary>アラビア文字表示形 A。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.VariationSelectors">
      <summary>バリエーションの選択</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.VerticalForms">
      <summary>垂直形</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CombiningHalfMarks">
      <summary>結合半角記号。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.CJKCompatibilityForms">
      <summary>CJK 互換形。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.SmallFormVariants">
      <summary>小字形。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.ArabicPresentationFormsB">
      <summary>アラビア文字表示形 B。</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.HalfwidthandFullwidthForms">
      <summary>半角／全角形</summary>
    </member>
    <member name="F:C1.C1Preview.UnicodeRangeEnum.Specials">
      <summary>特殊文字。</summary>
    </member>
    <member name="T:C1.C1Preview.Forms.TagsInputForm">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />の
        <see cref="P:C1.C1Preview.C1PrintDocument.Tags" />コレクションの 編集に使用された標準フォームを表します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Forms.TagsInputFormBase">
      <summary>タグ入力の基本フォームを記述します。</summary>
    </member>
    <member name="M:C1.C1Preview.Forms.TagsInputFormBase.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Forms.TagsInputFormBase" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.TagsInputFormBase.EditTags(C1.C1Preview.C1PrintDocument)">
      <summary>派生クラスでオーバーライドされた場合、タグ入力ダイアログを表示して、 ユーザーがダイアログを承認したかどうかを示す値を返す必要があります。</summary>
      <param name="document">
        編集する
        <see cref="P:C1.C1Preview.C1PrintDocument.Tags" />コレクションのオーナー。
      </param>
      <returns>
        ユーザーがダイアログを承認した場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Forms.TagsInputFormBase.DoEditTags(C1.C1Preview.C1PrintDocument)">
      <summary>タグ入力ダイアログを表示して、ユーザーがダイアログを 承認したかどうかを示す値を返します。</summary>
      <param name="document">
        編集する
        <see cref="P:C1.C1Preview.C1PrintDocument.Tags" />コレクションのオーナー。
      </param>
      <returns>
        ユーザーがダイアログを承認した場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Forms.TagsInputFormBase.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="M:C1.C1Preview.Forms.TagsInputForm.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Forms.TagsInputForm" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.TagsInputForm.EditTags(C1.C1Preview.C1PrintDocument)">
      <summary>タグ入力ダイアログを表示して、 ユーザーがダイアログを承認したかどうかを示す値を返します。</summary>
      <param name="document">
        編集する
        <see cref="P:C1.C1Preview.C1PrintDocument.Tags" />コレクションのオーナー。
      </param>
      <returns>
        ユーザーがダイアログを承認した場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Forms.TagsInputForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="P:C1.C1Preview.Forms.TagsInputForm.Document">
      <summary>
        編集されるタグのオーナーである
        <see cref="T:C1.C1Preview.C1PrintDocument" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.PagesEventArgs">
      <summary>
        <see cref="E:C1.C1Preview.C1MultiDocument.PagesAdded" />や
        <see cref="E:C1.C1Preview.C1MultiDocument.PagesChanged" />などのページ関連イベントのデータを提供します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.PagesEventArgs.FirstPageIndex">
      <summary>このイベントに関連付けられている最初のページのインデックスを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.PagesEventArgs.PageCount">
      <summary>このイベントに関連付けられているページの数を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.PagesEventHandler">
      <summary>
        <see cref="E:C1.C1Preview.C1MultiDocument.PagesAdded" />や
        <see cref="E:C1.C1Preview.C1MultiDocument.PagesChanged" />など、
        <see cref="T:C1.C1Preview.C1MultiDocument" />のページ関連イベントを処理できるメソッドを表します。
      </summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.C1Preview.PagesEventArgs" />。
      </param>
    </member>
    <member name="T:C1.C1Preview.MultiDocumentItemEventArgs">
      <summary>
        <see cref="E:C1.C1Preview.C1MultiDocument.ItemGenerated" />などの項目関連の
        <see cref="T:C1.C1Preview.C1MultiDocument" />イベントのデータを提供します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.MultiDocumentItemEventArgs.Item">
      <summary>
        このイベントに関連付けられた
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.MultiDocumentItemEventHandler">
      <summary>
        <see cref="E:C1.C1Preview.C1MultiDocument.ItemGenerated" />などの項目関連の
        <see cref="T:C1.C1Preview.C1MultiDocument" />イベントを処理できるメソッドを表します。
      </summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.C1Preview.MultiDocumentItemEventArgs" />。
      </param>
    </member>
    <member name="T:C1.C1Preview.MultiDocumentItemLoadedEventArgs">
      <summary>
        <see cref="E:C1.C1Preview.C1MultiDocument.ItemLoaded" />イベントのデータを提供します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.MultiDocumentItemLoadedEventArgs.Document">
      <summary>
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />によって表されるレポートまたはドキュメントを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.MultiDocumentItemLoadedEventHandler">
      <summary>
        <see cref="T:C1.C1Preview.C1MultiDocument" />の ItemLoaded イベントを処理できるメソッドを表します。
      </summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.C1Preview.MultiDocumentItemLoadedEventArgs" />。
      </param>
    </member>
    <member name="T:C1.C1Preview.StorageType">
      <summary>
        <see cref="T:C1.C1Preview.C1MultiDocument" />によって使用される一時ストレージのタイプを示します。
      </summary>
    </member>
    <member name="F:C1.C1Preview.StorageType.Memory">
      <summary>ドキュメント項目をメモリに格納します。</summary>
    </member>
    <member name="F:C1.C1Preview.StorageType.Disk">
      <summary>ドキュメント項目をディスクに格納します。</summary>
    </member>
    <member name="T:C1.C1Preview.C1MultiDocument">
      <summary>マルチドキュメントを表します。 マルチドキュメントとは、 ページ番号が共通の単一の大きなドキュメントとしてまとめて処理できる（印刷やエクスポート）一連のドキュメントです。 メモリ不足に陥らずに非常に大きなドキュメントを作成できます。</summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.C1MultiDocument" />タイプの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Dispose(System.Boolean)">
      <summary>オーバーライドされます。 現在のオブジェクトを破棄します。</summary>
      <param name="disposing"></param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.MakeOutlines">
      <summary>
        現在のマルチドキュメントのアウトラインツリーを構築します。 これをマルチドキュメント自体のアウトライン（
        <see cref="P:C1.C1Preview.C1MultiDocument.Outlines" />）と、 マルチドキュメント内のドキュメントとレポートのアウトラインツリーをマージすることで行います。
        <para>
          詳細については、
          <seealso cref="P:C1.C1Preview.C1MultiDocument.Outlines" />プロパティの備考セクションを参照してください。
        </para>
      </summary>
      <returns>マルチドキュメントの複合アウトライン。</returns>
      <seealso cref="P:C1.C1Preview.C1MultiDocument.Outlines" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.OutlineNode" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.Outlines" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.NestedOutlinesMode" />
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.ClearGeneratedPages">
      <summary>ドキュメントの生成中に作成されたページおよびその他の情報をクリアします。 このメソッドでは、ドキュメントの構造や内容はクリアされません。</summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Clear">
      <summary>
        現在の
        <b>C1MultiDocument</b>をクリアします。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Load(System.IO.Stream)">
      <summary>現在のドキュメントをストリームからロードします。</summary>
      <param name="stream">ドキュメントのロード元のストリーム。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Load(System.String)">
      <summary>現在のドキュメントをファイルからロードします。</summary>
      <param name="fileName">ソースファイル名。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Save(System.IO.Stream)">
      <summary>現在のドキュメントをストリームに保存します。</summary>
      <param name="stream">ターゲットストリーム。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Save(System.String)">
      <summary>現在のドキュメントをディスクファイルに保存します。</summary>
      <param name="fileName">ターゲットファイル名。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Generate">
      <summary>現在の C1MultiDocument を生成します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.PageAsMetafile(System.Int32,C1.C1Preview.PageDrawParams)">
      <summary>
        指定したページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />を取得します。
      </summary>
      <param name="pageIndex">ページインデックス（０ベース）。</param>
      <param name="pdp">描画パラメータを指定します。</param>
      <returns>
        指定したページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />。インデックスが無効だった場合は null。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.PageAsMetafile(System.Int32,System.Boolean,System.Drawing.Drawing2D.SmoothingMode)">
      <summary>
        指定したページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />を取得します。
      </summary>
      <param name="pageIndex">ページインデックス（ゼロ基準）。</param>
      <param name="renderInputControls">入力（プレビューフォーム）コントロールを描画するかどうかを示す値。</param>
      <param name="smoothingMode">使用するスムージングモード。</param>
      <returns>
        指定されたページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />、インデックスが無効の場合は null。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.PageAsMetafile(System.Int32)">
      <summary>
        指定したページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />を取得します。
      </summary>
      <param name="pageIndex">ページインデックス（ゼロ基準）。</param>
      <returns>
        指定されたページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />、インデックスが無効の場合は null。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.GetPageInfo(System.Int32,System.Int32@,System.Int32@,System.Int32@)">
      <summary>インデックスを指定してページに関する拡張情報を取得します。</summary>
      <param name="pageIndex">ターゲットページのインデックス（ゼロ基準）。</param>
      <param name="itemIndex">
        OUT: ターゲットページを含むドキュメント項目のゼロ基準のインデックス（
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />）。
      </param>
      <param name="itemPageIndex">
        OUT: ターゲットページを含むドキュメント項目（
        <paramref name="itemIndex" />で示されます)内でのターゲットページのインデックス（ゼロ基準）。
      </param>
      <param name="pageNo">OUT: 現在のドキュメント内の論理ページ番号。</param>
      <returns>
        <paramref name="pageIndex" />が有効な場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.GetPageInfo(System.Int32,System.Int32@,C1.C1Preview.ResolvedPage@)">
      <summary>指定されたインデックスを持つページに関する拡張情報を取得します。</summary>
      <param name="pageIndex">ターゲットのインデックス。</param>
      <param name="pageNo">出力：現在のドキュメント内での論理ページ番号。</param>
      <param name="resolvedPage">出力：ResolvedPage。</param>
      <returns>
        <paramref name="pageIndex" />が有効な場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.FindAnchor(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="anchorName"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.SetStorage(C1.C1Preview.StorageType,System.String)">
      <summary>現在のマルチドキュメントが使用する一時ストレージタイプを設定します。 このメソッドによって実際にドキュメント項目が古いストレージから新しいストレージに移動する点に注意してください。</summary>
      <param name="storageType">使用する新しいストレージタイプ。</param>
      <param name="storagePath">
        <paramref name="storageType" />が
        <b>StorageType.Disk</b>の場合に使用する一時ディレクトリ。
      </param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.SetStorage(C1.C1Preview.StorageType)">
      <summary>現在のマルチドキュメントが使用する一時ストレージタイプを設定します。 このメソッドによって実際にドキュメント項目が古いストレージから新しいストレージに移動する点に注意してください。</summary>
      <param name="storageType">使用する新しいストレージタイプ。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Export(System.String,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>現在のマルチドキュメントをファイルにエクスポートします。</summary>
      <param name="fileName">出力ファイル名。 エクスポート形式はファイルの拡張子で決まります。</param>
      <param name="outputRange">エクスポートするページの範囲（すべてのページをエクスポートする場合は null）。</param>
      <param name="showProgress">進行状況ダイアログを表示するかどうかを示すフラグ。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Export(System.String,System.Boolean)">
      <summary>現在のマルチドキュメントをファイルにエクスポートします。</summary>
      <param name="fileName">出力ファイル名。 エクスポート形式はファイルの拡張子で決まります。</param>
      <param name="showProgress">進行状況ダイアログを表示するかどうかを示すフラグ。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Export(System.String)">
      <summary>現在のマルチドキュメントをファイルにエクスポートします。</summary>
      <param name="fileName">出力ファイル名。 エクスポート形式はファイルの拡張子で決まります。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Export(System.IO.Stream,C1.C1Preview.Export.ExportProvider,System.Boolean)">
      <summary>現在のマルチドキュメントをストリームにエクスポートします。</summary>
      <param name="stream">出力先ストリーム。</param>
      <param name="exportProvider">
        エクスポートプロバイダ。
        <see cref="T:C1.C1Preview.Export.ExportProviders" />クラスで使用できる静的エクスポートプロバイダのいずれかを使用します。
      </param>
      <param name="showProgress">進行状況ダイアログを表示するかどうかを示すフラグ。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Export(System.IO.Stream,C1.C1Preview.Export.ExportProvider)">
      <summary>現在のマルチドキュメントをストリームにエクスポートします。</summary>
      <param name="stream">出力先ストリーム。</param>
      <param name="exportProvider">
        エクスポートプロバイダ。
        <see cref="T:C1.C1Preview.Export.ExportProviders" />クラスで使用できる静的エクスポートプロバイダのいずれかを使用します。
      </param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Export(System.String,C1.C1Preview.Export.ExportProvider,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>現在のマルチドキュメントをファイルにエクスポートします。</summary>
      <param name="fileName">出力ファイル名。 エクスポート形式はファイルの拡張子で決まります。</param>
      <param name="exportProvider">
        エクスポートプロバイダ。
        <see cref="T:C1.C1Preview.Export.ExportProviders" />クラスで使用できる静的エクスポートプロバイダのいずれかを使用します。
      </param>
      <param name="outputRange">エクスポートするページの範囲（すべてのページをエクスポートする場合は null）。</param>
      <param name="showProgress">進行状況ダイアログを表示するかどうかを示すフラグ。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Export(System.IO.Stream,C1.C1Preview.Export.ExportProvider,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>現在のマルチドキュメントをストリームにエクスポートします。</summary>
      <param name="stream">出力先ストリーム。</param>
      <param name="exportProvider">
        エクスポートプロバイダ。
        <see cref="T:C1.C1Preview.Export.ExportProviders" />クラスで使用できる静的エクスポートプロバイダのいずれかを使用します。
      </param>
      <param name="outputRange">エクスポートするページの範囲（すべてのページをエクスポートする場合は null）。</param>
      <param name="showProgress">進行状況ダイアログを表示するかどうかを示すフラグ。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Print">
      <summary>印刷の進行状況ダイアログを表示せずに、 現在のドキュメントをデフォルトプリンタ設定で印刷します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Print(System.Drawing.Printing.PrinterSettings)">
      <summary>印刷の進行状況ダイアログを表示せずに、 現在のドキュメントを指定されたプリンタ設定で印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Print(System.Drawing.Printing.PrinterSettings,System.Boolean)">
      <summary>オプションで印刷の進行状況ダイアログを表示して、 現在のドキュメントを指定されたプリンタ設定で印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="showProgress">印刷の進行状況ダイアログを表示するかどうかを示すフラグ。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Print(System.Drawing.Printing.PrinterSettings,C1.C1Preview.OutputRange)">
      <summary>印刷の進行状況ダイアログを表示せずに、 現在のドキュメントのページ範囲を指定されたプリンタ設定で印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="outputRange">印刷するページの範囲（すべてのページを印刷する場合は null）。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Print(System.Drawing.Printing.PrinterSettings,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>オプションで印刷の進行状況ダイアログを表示して、 現在のドキュメントのページ範囲を指定されたプリンタ設定で印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="outputRange">印刷するページの範囲（すべてのページを印刷する場合は null）。</param>
      <param name="showProgress">進行状況ダイアログを表示するかどうかを示すフラグ。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,C1.C1Preview.OutputRange)">
      <summary>印刷の進行状況ダイアログを表示せずに、 現在のドキュメントのページ範囲を指定されたプリンタ設定およびデフォルトのページ設定で印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="defaultPageSettings">使用するデフォルトページ設定。</param>
      <param name="outputRange">印刷するページの範囲（すべてのページを印刷する場合は null）。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,System.Boolean)">
      <summary>オプションで印刷の進行状況ダイアログを表示して、 現在のドキュメントを指定されたプリンタ設定およびデフォルトのプリンタ設定で印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="defaultPageSettings">使用するデフォルトページ設定。</param>
      <param name="showProgress">進行状況ダイアログを表示するかどうかを示すフラグ。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,C1.C1Preview.OutputRange,System.Boolean)">
      <summary>オプションで印刷の進行状況ダイアログを表示して、 現在のドキュメントのページ範囲を指定されたプリンタ設定およびデフォルトのページ設定で印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="defaultPageSettings">使用するデフォルトページ設定。</param>
      <param name="outputRange">印刷するページの範囲（すべてのページを印刷する場合は null）。</param>
      <param name="showProgress">進行状況ダイアログを表示するかどうかを示すフラグ。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.PrintDialog">
      <summary>標準印刷ダイアログを表示して、ユーザーに現在のドキュメントの印刷を許可します。</summary>
      <returns>
        ドキュメントが印刷された場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocument.PrintDialog(System.Drawing.Printing.PrinterSettings,System.Int32[],System.Boolean)">
      <summary>標準印刷ダイアログを表示して、ユーザーに現在のドキュメントの印刷を許可します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="selectedPageNumbers">
        選択されたページ番号のリスト。 このパラメータが
        <b>null</b>でない場合、ダイアログで［
        <b>選択</b>］オプションが有効になります。
      </param>
      <param name="showProgress">印刷の進行状況を表示するかどうかを示します。</param>
      <returns>
        ドキュメントが印刷された場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.DocumentName">
      <summary>ドキュメントの名前を取得または設定します（印刷タスクなどでドキュメントを識別するために使用します）。</summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.EmfType">
      <summary>
        現在のドキュメントによって作成されるメタファイルのタイプを取得または設定します。
        <para>
          デフォルトは
          <b>null</b>です（このプロパティはマルチドキュメントレベルでは定義されていません）。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.UseGdiPlusTextRendering">
      <summary>
        現在のドキュメント内のテキストを GDI+ text API を使用して 描画するかどうかを示す値を取得または設定します。
        <para>
          デフォルトは
          <b>null</b>です（このプロパティはマルチドキュメントレベルでは定義されていません）。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.ColorizeHyperlinks">
      <summary>
        レポート内のハイパーリンクに色を付けるかどうかを示す値を取得または設定します。 このプロパティは、マルチドキュメントの
        <see cref="N:C1.C1Report" />項目にのみ影響します。
        <para>
          デフォルトは
          <b>null</b>です（このプロパティはマルチドキュメントレベルでは定義されていません）。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.Outlines">
      <summary>
        マルチドキュメントに指定されたアウトラインノードを含む
        <see cref="T:C1.C1Preview.OutlineNodeCollection" />を取得します。
        <para>
          このコレクションには、このマルチドキュメント内のドキュメントとレポートのアウトラインは含まれていない点に注意してください。 マルチドキュメントの完全なアウトラインツリーを構築するには、
          <see cref="M:C1.C1Preview.C1MultiDocument.MakeOutlines" />メソッドを使用します。
        </para><para>詳細については、備考を参照してください。</para>
      </summary>
      <remarks>
        マルチドキュメントの結果のアウトライン（
        <see cref="M:C1.C1Preview.C1MultiDocument.MakeOutlines" />メソッドによって構築され、 プレビューでインスタンスとして表示されるもの）は、 マルチドキュメント自体の
        <b>Outlines</b>コレクションで定義されるアウトラインノードと、 マルチドキュメントの項目として表されるドキュメントとレポートのアウトラインから構成されます。
        <para>
          マルチドキュメント自体の
          <b>Outlines</b>コレクションが最初に処理され、そのコレクションに由来するノードは、結果のアウトラインに含まれます。 あるノードが、中に格納されている
          <see cref="T:C1.C1Preview.C1MultiDocumentItem" />の
          <see cref="P:C1.C1Preview.C1MultiDocumentItem.OutlineNode" />としても示されている場合（２つのノードが同一のオブジェクトを参照している場合）、 その項目として表されているドキュメントまたはレポートのアウトライン全体が結果のアウトラインに挿入されます。 マルチドキュメント項目の
          <see cref="P:C1.C1Preview.C1MultiDocumentItem.NestedOutlinesMode" />の値に応じて、 ドキュメントまたはレポートのノードは、 アウトラインノード内でネストされるかアウトラインノードを置き換えます。 （前述の項目の
          <see cref="P:C1.C1Preview.C1MultiDocumentItem.OutlineNode" />プロパティによって）
        </para><para>
          マルチドキュメントの
          <b>Outlines</b>コレクションに 含まれていない項目として表されるドキュメント またレポートのアウトラインは 自動的に結果のアウトラインに順次追加されます。
        </para>
      </remarks>
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.OutlineNode" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.Outlines" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.NestedOutlinesMode" />
      <seealso cref="M:C1.C1Preview.C1MultiDocument.MakeOutlines" />
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.IsDirty">
      <summary>
        現在の
        <b>C1MultiDocument</b>が最後に生成されてから 変更されたかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.IsEmpty">
      <summary>
        現在の
        <b>C1MultiDocument</b>が 空（データを含む
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />オブジェクトがない）かどうかを示す 値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.IsGenerating">
      <summary>ドキュメントが現在生成中かどうかを示します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.StorageType">
      <summary>現在のマルチドキュメントが使用している一時ストレージタイプを取得します。</summary>
      <seealso cref="P:C1.C1Preview.C1MultiDocument.StoragePath" />
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.StoragePath">
      <summary>
        一時ストレージタイプが
        <see cref="F:C1.C1Preview.StorageType.Disk" />の場合に、 現在のマルチドキュメントが使用している一時ディレクトリを取得します。
      </summary>
      <seealso cref="P:C1.C1Preview.C1MultiDocument.StorageType" />
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.Items">
      <summary>
        現在の
        <b>C1MultiDocument</b>に含まれるドキュメントを格納している
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />オブジェクトのコレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.DoEvents">
      <summary>
        生成時に現在の
        <see cref="T:C1.C1Preview.C1MultiDocument" />が Windows メッセージを処理するかどうかを示す値を取得または設定します。
        <para>デフォルト値は false です。</para>
      </summary>
      <remarks>
        <para>このプロパティを true に設定すると、ドキュメントの生成時にユーザーはフォームのサイズ変更、 ボタンのクリックなどを実行できます。 これはアプリケーションの反応を速くし、 ドキュメント生成の停止に〈キャンセル〉ボタンを提供する場合に必要となります（そうでない場合、生成が完了するまでユーザーはボタンをクリックできません）。</para>
        <para>このプロパティを false に設定するとドキュメントは少し速く生成します。</para>
      </remarks>
      <example>
        <para>
          下のコードは
          <see cref="T:C1.C1Preview.C1PrintDocument" />にアタッチされた〈生成〉および〈キャンセル〉ボタンを実装します。
        </para>
        <para>
          〈生成〉ボタンは生成を開始する前にドキュメントがビジーかどうかを確認します。 これが必要なのは、ドキュメントの生成が完了する前に、 ユーザーが〈生成〉ボタンを連続してクリックすることがあるためです （コンポーネントがビジーのときに
          <see cref="M:C1.C1Preview.C1MultiDocument.Generate" />メソッドを呼び出すと例外がスローされます）。
        </para>
        <para>
          〈キャンセル〉ボタンはドキュメントが現在生成中かどうかを確認し、生成中の場合に
          <see cref="P:C1.C1Preview.C1MultiDocument.Cancel" />プロパティを true に設定します。
        </para>
        <code>
          <![CDATA[
          _doc.DoEvents = true;
          
          private void Generate_Click(object sender, EventArgs e)
          {
            if (_doc.BusyState != BusyStateEnum.Ready)
              Console.WriteLine("現在生成できません。ドキュメントがビジー状態です。");
            else
              _doc.Generate();
          }
          
          private void Cancel_Click(object sender, EventArgs e)
          {
            if (_doc.BusyState != BusyStateEnum.Ready)
              _doc.Cancel = true;
            else
              Console.WriteLine("ドキュメントは生成されていません。キャンセルするものがありません。");
          }
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.Cancel">
      <summary>
        現在のドキュメントの生成をキャンセルするかどうかを示す値を取得または設定します。 このプロパティが有用なのは、
        <see cref="P:C1.C1Preview.C1MultiDocument.DoEvents" />が
        <b>true</b>に設定されている場合のみです。
      </summary>
      <remarks>
        このプロパティの
        <b>true</b>設定は、 現在のドキュメントが生成されている（
        <see cref="P:C1.C1Preview.C1MultiDocument.BusyState" />プロパティの値が
        <see cref="F:C1.C1Preview.BusyStateEnum.Generating" />に等しい）場合のみ行うことができます。 ドキュメントが生成されていないときにこのプロパティを
        <b>true</b>に設定しようとすると、例外が発生します。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.BusyState">
      <summary>現在のドキュメントの現在のビジー状態を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.PageCount">
      <summary>現在のマルチドキュメントの総ページ数を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocument.UserData">
      <summary>現在のドキュメントに関連付けられている任意のデータを取得または設定します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.DocumentStarting">
      <summary>ドキュメントの生成が開始したときに発生します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.DocumentEnded">
      <summary>ドキュメントの生成が終了したときに発生します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.LongOperation">
      <summary>ドキュメントの生成中に一定間隔で発生します。 進捗状況の表示が可能になり、生成をキャンセルする機能をユーザーに提供できます。</summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.BusyStateChanged">
      <summary>
        <see cref="P:C1.C1Preview.C1MultiDocument.BusyState" />プロパティ値が変化したときに発生します。
      </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.PagesAdded">
      <summary>現在のマルチドキュメントにページが追加されたときに発生します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.PagesChanged">
      <summary>現在のマルチドキュメント内のページが変更されたときに発生します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.PagesClear">
      <summary>現在のマルチドキュメント内のすべてのページが削除されたときに発生します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.ItemGenerating">
      <summary>
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />に関連付けられているドキュメントまたはレポートの生成が開始する直前に発生します。
      </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.ItemGenerated">
      <summary>
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />に関連付けられているドキュメントの生成が完了したときに発生します。 一部のシステムでは、
        <b>GC</b>を明示的に呼び出さないとガーベジコレクションが正常に動作しません。 このイベントを使用して、
        <b>GC.Collect()</b>を呼び出し、マルチドキュメントの生成によってメモリ不足例外が発生しないようにします。
      </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.ItemAdding">
      <summary>
        現在のマルチドキュメントの
        <see cref="P:C1.C1Preview.C1MultiDocument.Items" />コレクションに
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />が追加される直前に発生します。
      </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.ItemAdded">
      <summary>
        現在のマルチドキュメントの
        <see cref="P:C1.C1Preview.C1MultiDocument.Items" />コレクションに
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />が追加されたときに発生します。
      </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.ItemRemoving">
      <summary>
        現在のマルチドキュメントの
        <see cref="P:C1.C1Preview.C1MultiDocument.Items" />コレクションから
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />が削除される直前に発生します。
      </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.ItemRemoved">
      <summary>
        現在のマルチドキュメントの
        <see cref="P:C1.C1Preview.C1MultiDocument.Items" />コレクションから
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />が削除されたときに発生します。
      </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.ItemsClearing">
      <summary>
        現在のマルチドキュメントの
        <see cref="P:C1.C1Preview.C1MultiDocument.Items" />コレクションがクリアされる直前に発生します。
      </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.ItemsClear">
      <summary>
        現在のマルチドキュメントの
        <see cref="P:C1.C1Preview.C1MultiDocument.Items" />コレクションがクリアされたときに発生します。
      </summary>
    </member>
    <member name="E:C1.C1Preview.C1MultiDocument.ItemLoaded">
      <summary>
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />のロードとパラメータの準備（あれば）が完了しながらも、 項目として表されるレポートまたはドキュメントがまだ生成されていないときに発生します。 レポートまたはドキュメントのプロパティを生成前に調整することができます （例：この時点で
        <b>C1Report</b>を割り当てられます）。
      </summary>
    </member>
    <member name="T:C1.C1Preview.NestedOutlinesMode">
      <summary>マルチドキュメント全体のアウトラインツリーを準備するときに、 マルチドキュメント項目に関連付けられているドキュメントまたはレポートのアウトラインがどのように扱われるかを示します。</summary>
    </member>
    <member name="F:C1.C1Preview.NestedOutlinesMode.AddChildren">
      <summary>関連ドキュメントまたはレポートのアウトラインは マルチドキュメント項目のアウトラインノードの子として追加されます。</summary>
    </member>
    <member name="F:C1.C1Preview.NestedOutlinesMode.Replace">
      <summary>関連ドキュメントまたはレポートのアウトラインは マルチドキュメント項目のアウトラインノードを置き換えます。</summary>
    </member>
    <member name="T:C1.C1Preview.C1MultiDocumentItem">
      <summary>
        <see cref="T:C1.C1Preview.C1MultiDocument" />内の項目（個々のドキュメントまたはレポート）を表します。
      </summary>
      <seealso cref="T:C1.C1Preview.C1MultiDocumentItemCollection" />
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItem.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />タイプの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItem.Finalize">
      <summary>項目デストラクタ。</summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItem.Dispose">
      <summary>現在のマルチドキュメント項目を廃棄します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItem.SetDocument(System.Object)">
      <summary>現在の項目によって表されるドキュメントを設定します。</summary>
      <param name="document">この項目によって表されるドキュメント。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItem.GetDocument">
      <summary>現在のマルチドキュメント項目によって表されているドキュメントを取得します。</summary>
      <returns>この項目によって表されているドキュメント。</returns>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.Outlines">
      <summary>
        現在のマルチドキュメント項目によって表されているドキュメント またはレポートで定義されているアウトラインのコレクションを取得します。
        <para>
          詳細については、
          <seealso cref="P:C1.C1Preview.C1MultiDocument.Outlines" />プロパティの備考セクションを参照してください。
        </para>
      </summary>
      <seealso cref="P:C1.C1Preview.C1MultiDocument.Outlines" />
      <seealso cref="M:C1.C1Preview.C1MultiDocument.MakeOutlines" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.NestedOutlinesMode" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.OutlineNode" />
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.EmfType">
      <summary>
        現在のマルチドキュメント項目によって表されるドキュメント またはレポートの
        <b>EmfType</b>プロパティの値を取得します。 現在の項目に関連付けられているドキュメント またはレポートがない場合、このプロパティは
        <b>null</b>になります。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.UseGdiPlusTextRendering">
      <summary>
        現在のマルチドキュメント項目によって表されるドキュメント またはレポートの
        <b>UseGdiPlusTextRendering</b>プロパティの値を取得します。 現在の項目に関連付けられているドキュメントまたはレポートがない場合、 このプロパティは
        <b>null</b>になります。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.ColorizeHyperlinks">
      <summary>
        現在のマルチドキュメント項目によって表される
        <see cref="T:C1.C1Report.C1Report" />の
        <b>ColorizeHyperlinks</b>プロパティの値を取得します。 現在の項目が
        <b>C1Report</b>を表していない場合、 このプロパティは
        <b>null</b>になります。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.OutlineNode">
      <summary>
        <see cref="P:C1.C1Preview.C1MultiDocument.Outlines" />内の現在の項目を表すアウトラインノードを取得または設定します。
        <para>
          詳細については、
          <seealso cref="P:C1.C1Preview.C1MultiDocument.Outlines" />プロパティの備考セクションを参照してください。
        </para>
      </summary>
      <returns>マルチドキュメントの複合アウトライン。</returns>
      <seealso cref="P:C1.C1Preview.C1MultiDocument.Outlines" />
      <seealso cref="M:C1.C1Preview.C1MultiDocument.MakeOutlines" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.Outlines" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.NestedOutlinesMode" />
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.NestedOutlinesMode">
      <summary>
        マルチドキュメント全体のアウトラインを準備するときに、 現在の項目によって表されているドキュメントまたはレポートのアウトラインをどのように処理するかを指定する値を取得または設定します。 このプロパティは、
        <see cref="P:C1.C1Preview.C1MultiDocumentItem.OutlineNode" />が
        <b>null</b>の場合は無視されます。
        <para>
          詳細については、
          <seealso cref="P:C1.C1Preview.C1MultiDocument.Outlines" />プロパティの備考セクションを参照してください。
        </para>
      </summary>
      <seealso cref="P:C1.C1Preview.C1MultiDocument.Outlines" />
      <seealso cref="M:C1.C1Preview.C1MultiDocument.MakeOutlines" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.Outlines" />
      <seealso cref="P:C1.C1Preview.C1MultiDocumentItem.OutlineNode" />
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.MultiDocument">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Preview.C1MultiDocument" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.Owner">
      <summary>
        現在のオブジェクトを含む
        <see cref="T:C1.C1Preview.C1MultiDocumentItemCollection" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.Index">
      <summary>コンテナコレクション内の現在の項目のインデックスを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.FirstPageIndex">
      <summary>
        <see cref="T:C1.C1Preview.C1MultiDocument" />内の現在の項目に関連付けられているドキュメントの 最初のページのゼロ基準のインデックスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.LastPageIndex">
      <summary>
        <see cref="T:C1.C1Preview.C1MultiDocument" />内の現在の項目に関連付けられているドキュメントの 最後のページのゼロ基準のインデックスを取得します。
        <para>関連付けられているドキュメントが生成されていない場合の値は未定義です。</para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.PageCount">
      <summary>
        現在の項目に関連付けられている ドキュメントのページ総数を取得します。
        <para>
          関連付けられているドキュメントが生成されていない場合の値は
          <b>-1</b>です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.StorageFileName">
      <summary>
        現在の項目に関連付けられたドキュメントの格納に使用するディスクファイルの名前を取得します。 この項目がメモリに格納されている場合、この値は
        <b>null</b>になります。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.FileNames">
      <summary>
        現在の項目によって表されているドキュメントまたはレポートの格納に使用されているファイル名のリストを取得します。 この項目がメモリに格納されている場合、この値は
        <b>null</b>になります。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.IsEmpty">
      <summary>現在の項目が空かどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItem.PageNumberingChange">
      <summary>
        この
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />の最初のページに適用される
        <see cref="P:C1.C1Preview.C1MultiDocumentItem.PageNumberingChange" />オブジェクトを 取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.C1MultiDocumentItemCollection">
      <summary>
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />タイプ。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.Clear">
      <summary>
        現在のコレクションをクリアします。格納されている
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />オブジェクトはすべて廃棄されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.FindByOutlineNode(C1.C1Preview.OutlineNode)">
      <summary>
        このコレクションから
        <see cref="P:C1.C1Preview.C1MultiDocumentItem.OutlineNode" />プロパティの値が指定した値の
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />を検索します。
      </summary>
      <param name="outlineNode">検索するアウトラインノード。</param>
      <returns>
        要求された項目または
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.Add(C1.C1Preview.C1PrintDocument)">
      <summary>
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />を作成し、 指定されたドキュメントに関連付け、現在のコレクションに追加します。
        <para>
          メソッドに渡されるドキュメント参照は、作成される項目に格納されない点に注意してください。 詳細については、
          <see cref="M:C1.C1Preview.C1MultiDocumentItem.SetDocument(System.Object)" />を参照してください。
        </para>
      </summary>
      <param name="document">新しい項目に関連付けるドキュメント。</param>
      <returns>新しく作成された項目。</returns>
      <seealso cref="M:C1.C1Preview.C1MultiDocumentItem.SetDocument(System.Object)" />
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.Add(C1.C1Report.C1Report)">
      <summary>
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />を作成し、 指定されたレポートに関連付け、現在のコレクションに追加します。
        <para>
          メソッドに渡されるドキュメント参照は、作成される項目に格納されない点に注意してください。 詳細については、
          <see cref="M:C1.C1Preview.C1MultiDocumentItem.SetDocument(System.Object)" />を参照してください。
        </para>
      </summary>
      <param name="report">新しい項目に関連付けるレポート。</param>
      <returns>新しく作成された項目。</returns>
      <seealso cref="M:C1.C1Preview.C1MultiDocumentItem.SetDocument(System.Object)" />
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.Add(C1.C1Rdl.C1RdlReportBase)">
      <summary>
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />を作成し、 指定されたレポートに関連付け、現在のコレクションに追加します。
        <para>
          メソッドに渡されるドキュメント参照は、作成される項目に格納されない点に注意してください。 詳細については、
          <see cref="M:C1.C1Preview.C1MultiDocumentItem.SetDocument(System.Object)" />を参照してください。
        </para>
      </summary>
      <param name="report">新しい項目に関連付けるレポート。</param>
      <returns>新しく作成された項目。</returns>
      <seealso cref="M:C1.C1Preview.C1MultiDocumentItem.SetDocument(System.Object)" />
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.Add(C1.C1Preview.C1MultiDocumentItem)">
      <summary>指定された項目を現在のコレクションに追加します。</summary>
      <param name="item">追加する項目。</param>
      <returns>追加する項目のコレクション内のインデックス。</returns>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.Insert(System.Int32,C1.C1Preview.C1PrintDocument)">
      <summary>
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />を作成し、 指定されたドキュメントに関連付け、現在のコレクションの指定されたインデックス位置に挿入します。
        <para>
          メソッドに渡されるドキュメント参照は、作成される項目に格納されない点に注意してください。 詳細については、
          <see cref="M:C1.C1Preview.C1MultiDocumentItem.SetDocument(System.Object)" />を参照してください。
        </para>
      </summary>
      <param name="index">新しい項目を挿入する位置のインデックス（ゼロ基準）。</param>
      <param name="document">新しい項目に関連付けるドキュメント。</param>
      <returns>新しく作成された項目。</returns>
      <seealso cref="M:C1.C1Preview.C1MultiDocumentItem.SetDocument(System.Object)" />
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.Insert(System.Int32,C1.C1Preview.C1MultiDocumentItem)">
      <summary>現在のコレクションの指定されたインデックス位置に項目を挿入します。</summary>
      <param name="index">項目を挿入する位置のインデックス（ゼロ基準）。</param>
      <param name="item">挿入する項目。</param>
    </member>
    <member name="M:C1.C1Preview.C1MultiDocumentItemCollection.Remove(C1.C1Preview.C1MultiDocumentItem)">
      <summary>項目を現在のコレクションから削除します。</summary>
      <param name="item">削除する項目。</param>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItemCollection.MultiDocument">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Preview.C1MultiDocument" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1MultiDocumentItemCollection.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Preview.C1MultiDocumentItem" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.DataElementStyle">
      <summary>リーフレベルの値（テキストボックス値やグラフデータ値）を要素として描画するか、 属性として描画するかを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.DataElementStyle.Auto">
      <summary>データ要素スタイルは自動的に決定されます。</summary>
    </member>
    <member name="F:C1.C1Rdl.DataElementStyle.Attribute">
      <summary>値を属性として描画します。</summary>
    </member>
    <member name="F:C1.C1Rdl.DataElementStyle.Element">
      <summary>値を要素として描画します。</summary>
    </member>
    <member name="T:C1.C1Rdl.ShouldNeverBeHereException">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.C1RdlReportBase">
      <summary>さまざまなバリエーションの RDL（Report Definition Language）仕様を実装するレポートの抽象基本クラス。</summary>
      <seealso cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.#ctor">
      <summary>
        <b>C1RdlReportBase</b>の新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.Finalize">
      <summary>
        <b>C1RdlReportBase</b>の現在のインスタンスを破壊します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.Dispose(System.Boolean)">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />で使用されるリソースを解放します。
      </summary>
      <param name="disposing">
        <b>true</b>では、マネージドリソースとアンマネージドリソースが両方とも解放され、
        <b>false</b>では、アンマネージドリソースのみが解放されます。
      </param>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.ClearTemporaryInfo">
      <summary>レポートの生成中に作成されたすべての一時データをクリアします。</summary>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.IsRdlVersionSupported(C1.C1Rdl.RdlFormatVersion)">
      <summary>指定された RDL 形式のバージョンが現在のコンポーネントによってサポートされているかどうかをテストします。</summary>
      <param name="rdlFormatVersion">テストする RDL 形式のバージョン。</param>
      <returns>
        指定された形式バージョンがサポートされている場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.ClearGeneratedPages">
      <summary>ドキュメントの生成によって作成されたページおよびその他の情報をクリアします。</summary>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.AssignFrom(C1.C1Rdl.C1RdlReportBase)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.C1RdlReportBase" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.Clear">
      <summary>現在のレポートをクリアし、すべてのプロパティをデフォルト値に設定します。</summary>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.Load(System.IO.Stream)">
      <summary>ストリームから現在のレポートにレポート定義をロードします。 ストリームにはサポートされている形式の RDL レポート定義が含まれている必要があります。</summary>
      <param name="stream">レポート定義を含むストリーム。</param>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.Load(System.String)">
      <summary>ファイルから現在のレポートにレポート定義をロードします。 ファイルにはサポートされている形式の RDL レポート定義が含まれている必要があります。</summary>
      <param name="fileName">レポート定義を含むファイル。</param>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.Save(System.IO.Stream)">
      <summary>現在ロードされているレポート定義をストリームに保存します。</summary>
      <param name="stream">ターゲットストリーム。</param>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.Save(System.String)">
      <summary>現在ロードされているレポート定義をディスクファイルに保存します。</summary>
      <param name="fileName">ターゲットファイル名。</param>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.Render">
      <summary>レポートを描画します。</summary>
      <remarks>
        このメソッドは、
        <see cref="P:C1.C1Rdl.C1RdlReportBase.C1Document" />プロパティにアクセスがあったときに暗黙的に呼び出されるため、 コードから直接呼び出すことはあまりありません。
      </remarks>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.FromStream(System.IO.Stream)">
      <summary>
        指定されたストリームに含まれている RDL 形式をサポートする
        <see cref="T:C1.C1Rdl.C1RdlReportBase" />の派生タイプの新しいインスタンスを作成します。 タイプはストリーム内の RDL のバージョンから特定されます。
      </summary>
      <param name="stream">レポートのロード元のストリーム。</param>
      <returns>作成されたレポートコンポーネント。</returns>
    </member>
    <member name="M:C1.C1Rdl.C1RdlReportBase.FromFile(System.String)">
      <summary>
        指定されたファイルに含まれている RDL 形式をサポートする
        <see cref="T:C1.C1Rdl.C1RdlReportBase" />の派生タイプの新しいインスタンスを作成します。 タイプはファイル内の RDL のバージョンから特定されます。
      </summary>
      <param name="fileName">レポートのロード元のファイル名。</param>
      <returns>作成されたレポートコンポーネント。</returns>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.DocumentName">
      <summary>ドキュメントの名前を取得します（印刷タスクなどでレポートを識別するために使用します）。</summary>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.RdlVersion">
      <summary>
        現在ロードされているレポート定義の RDL 形式バージョンを取得または設定します。
        <para>レポートがロードされた後でこのプロパティの値を変更することで、 形式バージョンを指定し直して保存することができます。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.C1Document">
      <summary>
        レポートを表す
        <see cref="T:C1.C1Preview.C1PrintDocument" />オブジェクトを取得します。 レポートが空の場合、レポートはこのプロパティが返される前に描画されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.IsEmpty">
      <summary>
        現在のレポートが生成されてない （生成されたページがない）かどうかを示す値を取得します。
        <para>このプロパティは、 レポート定義が現在のレポートにロードされているかどうかには影響されません。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.Warnings">
      <summary>現在のレポートが生成されたときに出力された警告のコレクションを取得します。 これがサブレポートの場合、マスターレポートの警告のコレクションが返されます。</summary>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.ExecutionTime">
      <summary>
        レポートの生成開始時の日付／時刻を取得します。 これがサブレポートの場合、マスターレポートの
        <c>ExecutionTime</c>が返されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.FileName">
      <summary>現在のレポート定義のロード元のファイル、 または定義が最後に保存されたファイルの名前を取得します。</summary>
      <seealso cref="M:C1.C1Rdl.C1RdlReportBase.Load(System.String)" />
      <seealso cref="M:C1.C1Rdl.C1RdlReportBase.Save(System.String)" />
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.GeneratingComplete">
      <summary>
        現在のレポートが生成中の場合（
        <see cref="P:C1.C1Rdl.C1RdlReportBase.IsBusy" />を参照）、 0（0% 完了）～1（100% 完了）の範囲でおおよその完了率を取得します。 レポートが現在生成中でない場合は、１になります。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.IsBusy">
      <summary>レポートが現在生成中かどうかを決定する値を取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.UserData">
      <summary>現在のレポートに関連付けられている任意のデータを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.C1RdlReportBase.ReportDefinition">
      <summary>完全なレポート定義を含む XML 文字列を取得または設定します。</summary>
      <remarks>このプロパティを使用して、レポート定義をデータベースやクリップボードに格納したり、 RDL レポートコンポーネント間でレポートをコピーしたりできます。</remarks>
    </member>
    <member name="E:C1.C1Rdl.C1RdlReportBase.LongOperation">
      <summary>レポートの生成中に一定間隔で発生します。 進捗状況の表示が可能になり、生成をキャンセルする機能をユーザーに提供できます。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Drillthrough">
      <summary>ドリルスルーアクションに関する情報を表します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner.SetHost(C1.C1Rdl.Rdl2008.Scripting.ExpressionHostBase)">
      <summary>これは内部使用専用です。</summary>
      <param name="host"></param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner.GetChildren">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner.HostType">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Drillthrough.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Drillthrough" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Drillthrough.AssignFrom(C1.C1Rdl.Rdl2008.Drillthrough)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.Drillthrough" />オブジェクトのプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Drillthrough.ReportName">
      <summary>
        ドリルスルーレポートの完全なフォルダパス （例：/salesreports/orderdetails）、 相対パス（例：../orderdetails）、 または URL（例：http://reportserver/reports/sales/orderdetails）を取得または設定します。 相対パスの基準はレポートと同じフォルダです。
        <para>注意： 現在のレポートがサブレポートとして使用されている場合、 最上位レポートの場所が相対パスの基準として使用されます。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Drillthrough.Parameters">
      <summary>
        ドリルスルーレポートのパラメータを含む
        <see cref="P:C1.C1Rdl.Rdl2008.Drillthrough.Parameters" />コレクションを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Action">
      <summary>レポート要素に関連付けるハイパーリンク、 ブックマークリンク、またはドリルスルーアクションを定義します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Action.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Action" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Action.AssignFrom(C1.C1Rdl.Rdl2008.Action)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.Action" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Action.Actions">
      <summary>
        現在のオブジェクトを含む
        <see cref="P:C1.C1Rdl.Rdl2008.Action.Actions" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Action.Hyperlink">
      <summary>
        ハイパーリンクの URL として評価される
        <see cref="T:C1.C1Rdl.RdlString" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Action.Drillthrough">
      <summary>
        現在のハイパーリンクをクリックしたときに実行されるドリルスルーレポートについての情報を含む
        <see cref="P:C1.C1Rdl.Rdl2008.Action.Drillthrough" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Action.BookmarkLink">
      <summary>
        このレポート項目をクリックしたときの移動先のレポート内ブックマークの ID として評価される
        <see cref="T:C1.C1Rdl.RdlString" />を取得または設定します。
        <para>（この ID のブックマークが見つからなかった場合、リンクはレポートに含まれません。 ブックマークが非表示の場合、リンクの移動先はブックマークがあるページの先頭になります。 この ID のブックマークが複数見つかった場合、 リンクの移動先は最初のブックマークになります。）</para>
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Actions">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Action" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Actions.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Actions" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Actions.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.Action" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Actions.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.Action" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ActionInfo">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />に関連付けるアクションのリストを定義します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ActionInfo.AssignFrom(C1.C1Rdl.Rdl2008.ActionInfo)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ActionInfo" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ActionInfo.Actions">
      <summary>
        現在のオブジェクトによって表される
        <see cref="P:C1.C1Rdl.Rdl2008.ActionInfo.Actions" />コレクションを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Body">
      <summary>レポート本文の視覚要素を表します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ReportElement">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Body" />、
        <see cref="T:C1.C1Rdl.Rdl2008.PageSection" />、
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />などのレポート要素の抽象基本クラス。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.IStyleOwner">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Style" />オブジェクトを所有するクラスによって実装される必要があります。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.IStyleOwner.DefBorderColor">
      <summary>デフォルトの枠線の色を取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.IStyleOwner.DefColor">
      <summary>デフォルトの色を取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.IStyleOwner.DefBackgroundColor">
      <summary>デフォルト背景色を取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.IStyleOwner.DefBackgroundGradientEndColor">
      <summary>デフォルトグラデーションの最後の色を取得します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportElement.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportElement" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportElement.ScriptHostOwnerGetChildren(System.Collections.Generic.List{C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner})">
      <summary>これは内部使用専用です。</summary>
      <param name="children"></param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportElement.ScriptHostOwnerSetHost(C1.C1Rdl.Rdl2008.Scripting.ExpressionHostBase)">
      <summary>これは内部使用専用です。</summary>
      <param name="host"></param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportElement.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ReportElement" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportElement.Clear">
      <summary>現在のオブジェクトをクリアし、すべてのプロパティをデフォルト値に設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportElement.ScriptContextHostType">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportElement.Style">
      <summary>
        現在の
        <see cref="T:C1.C1Rdl.Rdl2008.ReportElement" />のスタイル情報を定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ReportElement.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Body.#ctor(C1.C1Rdl.Rdl2008.C1RdlReport)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Body" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Body.ScriptHostOwnerGetChildren(System.Collections.Generic.List{C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner})">
      <summary>これは内部使用専用です。</summary>
      <param name="children"></param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Body.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.Body" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Body.Clear">
      <summary>現在のオブジェクトをクリアし、すべてのプロパティをデフォルト値に設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Body.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Body.ReportItems">
      <summary>
        現在のレポート本文の要素を含む
        <see cref="P:C1.C1Rdl.Rdl2008.Body.ReportItems" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Body.Height">
      <summary>現在のレポート本文の高さを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DataElementStyle">
      <summary>リーフレベルの値（テキストボックス値やグラフデータ値）を要素として描画するか、 属性として描画するかを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.DataElementStyle.Auto">
      <summary>データ要素スタイルは自動的に決定されます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.DataElementStyle.Attribute">
      <summary>値を属性として描画します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.DataElementStyle.Element">
      <summary>値を要素として描画します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.C1RdlReport">
      <summary>RDL（Report Definition Language）仕様の 2008 バージョンを使用して定義された RDL レポートを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.C1RdlReport.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.C1RdlReport.ClearTemporaryInfo">
      <summary>オーバーライドされます。 レポートの生成中に作成されたすべての一時データをクリアします。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.C1RdlReport.AssignFrom(C1.C1Rdl.C1RdlReportBase)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.C1RdlReport.Clear">
      <summary>現在のレポートをクリアし、すべてのプロパティをデフォルト値に設定します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.C1RdlReport.GetSubreports">
      <summary>
        現在のレポート定義をスキャンし、 現在のレポートに含まれている
        <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.Subreport" />項目のレポート名のリスト （
        <see cref="P:C1.C1Rdl.Rdl2008.Subreport.ReportName" />）を取得します。
      </summary>
      <returns>レポート名のリスト。サブレポートがない場合は空のリスト。</returns>
      <seealso cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.HasSubreports" />
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.DocumentName">
      <summary>
        オーバーライドされます。 現在のレポートの
        <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.Description" />（印刷タスクなどでレポートの識別に使用されます）を返します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.ShowParametersInputDialog">
      <summary>
        レポートが生成される前に、 一部またはすべてのレポートパラメータ（
        <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.ReportParameters" />コレクションの要素）の値を入力できるダイアログがユーザーに表示されるかどうかを示す値を取得または設定します。 パラメータをダイアログに包含または除外するには、
        <see cref="P:C1.C1Rdl.Rdl2008.ReportParameter.Hidden" />を使用します。
        <para>
          デフォルト値は
          <b>true</b>です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.UseGdiPlusTextRendering">
      <summary>
        GDI+ テキスト API を使用して現在のレポート内の すべてのテキストを描画するかどうかを示す値を取得または設定します。
        <para>
          デフォルト値は
          <b>false</b>です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.EmfType">
      <summary>
        現在のレポートで作成されるメタファイルのタイプを取得または設定します。 デフォルトは
        <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusOnly" />です。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.Description">
      <summary>レポートの説明を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.Author">
      <summary>レポートの作者を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.AutoRefresh">
      <summary>（HTML として表示された）レポートページの表示が自動的に更新される間隔（秒単位）を取得または設定します。 負の値は使用できません。 省略した場合またはゼロの場合、レポートページは自動更新されません。 最大値：2147483647。 既定値：０。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.DataSources">
      <summary>このレポートのデータセットの取得元のデータソースを取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.DataSets">
      <summary>レポートの一部として表示されるデータを取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.Body">
      <summary>
        レポートの本文の構成と描画の方法を記述する
        <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.Body" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.ReportParameters">
      <summary>
        レポートのパラメータを含む
        <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.ReportParameters" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.CustomProperties">
      <summary>
        レポート描画コンポーネントに渡されるカスタム情報を含む
        <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.CustomProperties" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.Code">
      <summary>レポート内の式で使用するカスタム関数の 定義を含む文字列を取得または設定します。 カスタム関数はインスタンスメソッドである必要があります。 関数 OnInit() はコード内で定義され、パラメータ、レポート、 およびページヘッダー／フッターの初期化中に呼び出されます。 関数は Protected および Overrides として定義する必要があります。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.Width">
      <summary>レポートの幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.Page">
      <summary>
        レポートに関するページレイアウト情報を含む
        <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.Page" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.EmbeddedImages">
      <summary>
        レポートに埋め込まれている画像を含む
        <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.EmbeddedImages" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.Language">
      <summary>テキストの主要言語を取得または設定します。 レポート内のすべての言語に依存する式でデフォルトとして使用されます。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.CodeModules">
      <summary>
        レポート内の式で使用できるようにするコードモジュールを含む
        <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.CodeModules" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.Classes">
      <summary>
        レポートの初期化中にインスタンス化するクラスについての情報を含む
        <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.Classes" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.Variables">
      <summary>
        レポート全体に対して定義されている変数を含む
        <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.Variables" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.DeferVariableEvaluation">
      <summary>レポート全体の変数がレポート処理の開始時点で事前に評価されている必要がなく、 実際の使用時にオンデマンドで評価されることを示す値を 取得または設定します。 遅延変数評価によってパフォーマンスが向上しますが、 時間に依存する変数がある場合は使用しないでください。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.ConsumeContainerWhitespace">
      <summary>
        コンテンツの量が増えたときに、コンテンツとコンテナ（
        <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.Body" />や
        <see cref="T:C1.C1Rdl.Rdl2008.Rectangle" />など）の間のホワイトスペースを最小限に留めず、 コンテナ内のすべてのホワイトスペースを使用するかどうかを示す値を 取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.DataTransform">
      <summary>レポートデータの描画に適用する変換の場所を取得または設定します。 これは完全なフォルダパス（例：/xsl/xfrm.xsl）でも、 相対パス（例：xfrm.xsl）でも構いません。 相対パスの基準はレポートと同じフォルダです。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.DataSchema">
      <summary>レポートデータの描画に使用するスキーマまたは名前空間を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.DataElementName">
      <summary>レポートデータを表す最上位要素の名前を取得または設定します。 既定値：Report。CLS 準拠の識別子にする必要があります。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.DataElementStyle">
      <summary>リーフレベルの値（テキストボックス値やグラフデータ値）を要素として描画するか、 属性として描画するかを示す値を 取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.C1RdlReport.HasSubreports">
      <summary>
        現在のレポートに
        <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.Subreport" />項目が１つでも含まれているかどうかを示す値を取得します。
      </summary>
      <seealso cref="M:C1.C1Rdl.Rdl2008.C1RdlReport.GetSubreports" />
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Class">
      <summary>レポート初期化中にインスタンス化するクラスについての情報が含まれています。 このクラスインスタンスは、レポート全体で式の中で使用できます。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Class.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.Class" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Class.ClassName">
      <summary>クラスの名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Class.InstanceName">
      <summary>クラスを割り当てる Class のメンバ変数の名前。 このメンバ変数は、レポート全体で式の中で使用できます。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Classes">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Class" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Classes.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Classes" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Classes.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.Class" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Classes.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.Class" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.CodeModule">
      <summary>レポート要素に関連付けるハイパーリンク、ブックマークリンク、 またはドリルスルーアクションを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CodeModule.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CodeModule.#ctor(System.String)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="name">
        <see cref="P:C1.C1Rdl.Rdl2008.CodeModule.Name" />プロパティの値。
      </param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CodeModule.AssignFrom(C1.C1Rdl.Rdl2008.CodeModule)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.CodeModule.Owner">
      <summary>
        現在のオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.CodeModules" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.CodeModule.Name">
      <summary>
        現在の
        <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" />の名前を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.CodeModule.TypeConverter">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" />と別のタイプ間で双方向変換します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CodeModule.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
        文字列を
        <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" />に変換します。
      </summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="str">変換する文字列。</param>
      <returns>
        <paramref name="str" />を表す
        <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" />。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CodeModule.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>オブジェクトを文字列に変換します。</summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="o">変換するオブジェクト。</param>
      <returns>変換された文字列。</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.CodeModules">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CodeModules.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.CodeModules" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CodeModules.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.CodeModules.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.CodeModule" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.UserDefinedProperty">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" />、
        <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperties" />、および
        <see cref="T:C1.C1Rdl.Rdl2008.CustomProperties" />は、 カスタムレポートレンダラとカスタムレポート項目に情報を渡すことができます。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.UserDefinedProperty.#ctor(C1.C1Rdl.RdlString,C1.C1Rdl.RdlObject)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="name">
        <see cref="P:C1.C1Rdl.Rdl2008.UserDefinedProperty.Name" />プロパティの値。
      </param>
      <param name="value">
        <see cref="P:C1.C1Rdl.Rdl2008.UserDefinedProperty.Value" />プロパティの値。
      </param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.UserDefinedProperty.AssignFrom(C1.C1Rdl.Rdl2008.UserDefinedProperty)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.UserDefinedProperty.Name">
      <summary>プロパティの名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.UserDefinedProperty.Value">
      <summary>プロパティの値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.UserDefinedProperties">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.UserDefinedProperties.Add(C1.C1Rdl.Rdl2008.UserDefinedProperty)">
      <summary>
        指定された
        <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" />を現在のコレクションに追加します。
      </summary>
      <param name="value">追加するオブジェクト。</param>
      <returns>現在のコレクションに新しく追加されたオブジェクトのインデックス。</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.UserDefinedProperties.Add(C1.C1Rdl.RdlString,C1.C1Rdl.RdlObject)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" />オブジェクトを作成し、現在のコレクションに追加します。
      </summary>
      <param name="name">
        <see cref="P:C1.C1Rdl.Rdl2008.UserDefinedProperty.Name" />プロパティの値。
      </param>
      <param name="value">
        <see cref="P:C1.C1Rdl.Rdl2008.UserDefinedProperty.Value" />プロパティの値。
      </param>
      <returns>現在のコレクションに新しく追加されたオブジェクトのインデックス。</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.UserDefinedProperties.FindByName(System.String)">
      <summary>
        指定された名前の
        <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" />オブジェクトを検索します。 検索で大文字と小文字は区別されません。
      </summary>
      <param name="name">
        <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" />の名前。
      </param>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" />オブジェクトまたは null。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.UserDefinedProperties.AssignFrom(C1.C1Rdl.Rdl2008.UserDefinedProperties)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperties" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.UserDefinedProperties.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.UserDefinedProperties.Item(System.String)">
      <summary>
        指定された名前の
        <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" />の値を取得または設定します。 オブジェクトが見つからなかった場合は null が返されます。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.CustomProperties">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperty" />、
        <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperties" />、 および
        <see cref="T:C1.C1Rdl.Rdl2008.CustomProperties" />は、カスタムレポートレンダラとカスタムレポート項目に情報を渡すことができます。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CustomProperties.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.CustomProperties" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CustomProperties.AssignFrom(C1.C1Rdl.Rdl2008.CustomProperties)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.CustomProperties" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CustomProperties.Clear">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.CustomProperties.UserDefined" />コレクションをクリアし、 すべてのプロパティをデフォルト値にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.CustomProperties.UserDefined">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.UserDefinedProperties" />コレクションを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DataAggregateFunction">
      <summary>データ集計関数の抽象基本クラス。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataAggregateFunction.IsNull(System.Object)">
      <summary>オブジェクトが null 値を表すかどうかをテストします。</summary>
      <param name="v">チェックするオブジェクト。</param>
      <returns>
        <paramref name="v" />が null 値を表す場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataAggregateFunction.IsNumber(System.Object)">
      <summary>オブジェクトが数値を表すかどうかをテストします。</summary>
      <param name="v">チェックするオブジェクト。</param>
      <returns>
        <paramref name="v" />が数値を表す場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataAggregateFunction.AsNumber(System.Object)">
      <summary>オブジェクトを倍精度浮動小数点数に変換します。</summary>
      <param name="v">変換するオブジェクト。</param>
      <returns>変換された倍精度浮動小数点値。</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataAggregateFunction.Reset">
      <summary>
        このメソッドは、集計を開始するときに呼び出されます。
        <para>派生クラスでオーバーライドする必要があります。</para>
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataAggregateFunction.Iterate(System.Object)">
      <summary>
        このメソッドは、データスコープの各値に対して呼び出されます。
        <para>派生クラスでオーバーライドする必要があります。</para>
      </summary>
      <param name="v">集計する値。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataAggregateFunction.Finish">
      <summary>
        このメソッドは、データスコープに対する繰り返しが完了したときに呼び出されます。
        <para>派生クラスでオーバーライドする必要があります。</para>
      </summary>
      <returns>集計関数の値。</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataAggregateFunction.GetEmptyValue">
      <summary>このメソッドは、集計値のリストが空のときに呼び出されます。</summary>
      <returns>集計値のリストが空のときの集計関数の値。</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.SumAgg">
      <summary>合計（SUM）集計関数を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.SumAgg.Reset">
      <summary>現在の集計をリセットします。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.SumAgg.Iterate(System.Object)">
      <summary>値を集計します。</summary>
      <param name="v">集計する値。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.SumAgg.Finish">
      <summary>集計値を返します。</summary>
      <returns>集計値。</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.AvgAgg">
      <summary>平均（AVG）集計関数を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.AvgAgg.Reset">
      <summary>現在の集計をリセットします。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.AvgAgg.Iterate(System.Object)">
      <summary>値を集計します。</summary>
      <param name="v">集計する値。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.AvgAgg.Finish">
      <summary>集計値を返します。</summary>
      <returns>集計値。</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.MaxAgg">
      <summary>最大値（MAX）集計関数を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.MaxAgg.Reset">
      <summary>現在の集計をリセットします。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.MaxAgg.Iterate(System.Object)">
      <summary>値を集計します。</summary>
      <param name="v">集計する値。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.MaxAgg.Finish">
      <summary>集計値を返します。</summary>
      <returns>集計値。</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.MinAgg">
      <summary>最小値（MIN）集計関数を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.MinAgg.Reset">
      <summary>現在の集計をリセットします。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.MinAgg.Iterate(System.Object)">
      <summary>値を集計します。</summary>
      <param name="v">集計する値。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.MinAgg.Finish">
      <summary>集計値を返します。</summary>
      <returns>集計値。</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.CountAgg">
      <summary>カウント（COUNT）集計関数を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CountAgg.Reset">
      <summary>現在の集計をリセットします。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CountAgg.Iterate(System.Object)">
      <summary>値を集計します。</summary>
      <param name="v">集計する値。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CountAgg.Finish">
      <summary>集計値を返します。</summary>
      <returns>集計値。</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CountAgg.GetEmptyValue">
      <summary>空リストに対応する集計値を取得します。</summary>
      <returns>
        ゼロ（
        <b>０</b>）。
      </returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.CountDistinctAgg">
      <summary>個別のカウント集計関数を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CountDistinctAgg.Reset">
      <summary>現在の集計をリセットします。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CountDistinctAgg.Iterate(System.Object)">
      <summary>値を集計します。</summary>
      <param name="v">集計する値。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CountDistinctAgg.Finish">
      <summary>集計値を返します。</summary>
      <returns>集計値。</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CountDistinctAgg.GetEmptyValue">
      <summary>空リストに対応する集計値を取得します。</summary>
      <returns>
        ゼロ（
        <b>０</b>）。
      </returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.VarStDevAgg">
      <summary>標準偏差および分散集計関数の抽象基本クラス。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.VarStDevAgg.Reset">
      <summary>現在の集計をリセットします。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.VarStDevAgg.Iterate(System.Object)">
      <summary>値を集計します。</summary>
      <param name="v">集計する値。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.VarStDevAgg.Finish">
      <summary>集計値を返します。</summary>
      <returns>集計値。</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.VarStDevAgg.Finish(System.Double,System.Double,System.Int32)">
      <summary>
        集計値を計算するため、
        <see cref="M:C1.C1Rdl.Rdl2008.VarStDevAgg.Finish" />によって呼び出されます。
      </summary>
      <param name="average">平均値。</param>
      <param name="sumSquares">二乗した値の合計。</param>
      <param name="valuesCount">値の数。</param>
      <returns>集計値。</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.StDevAgg">
      <summary>標準偏差（STDEV）集計関数を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.StDevAgg.Finish(System.Double,System.Double,System.Int32)">
      <summary>集計値を計算します。</summary>
      <param name="average">平均値。</param>
      <param name="sumSquares">二乗した値の合計。</param>
      <param name="valuesCount">値の数。</param>
      <returns>集計値。</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.StDevPAgg">
      <summary>母集団全体の標準偏差（STDEVP）集計関数を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.StDevPAgg.Finish(System.Double,System.Double,System.Int32)">
      <summary>集計値を計算します。</summary>
      <param name="average">平均値。</param>
      <param name="sumSquares">二乗した値の合計。</param>
      <param name="valuesCount">値の数。</param>
      <returns>集計値。</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.VarAgg">
      <summary>分散（VAR）集計関数を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.VarAgg.Finish(System.Double,System.Double,System.Int32)">
      <summary>集計値を計算します。</summary>
      <param name="average">平均値。</param>
      <param name="sumSquares">二乗した値の合計。</param>
      <param name="valuesCount">値の数。</param>
      <returns>集計値。</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.VarPAgg">
      <summary>母集団全体の分散（VARP）集計関数を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.VarPAgg.Finish(System.Double,System.Double,System.Int32)">
      <summary>集計値を計算します。</summary>
      <param name="average">平均値。</param>
      <param name="sumSquares">二乗した値の合計。</param>
      <param name="valuesCount">値の数。</param>
      <returns>集計値。</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.QueryParameter">
      <summary>クエリーの一部としてデータソースに渡される パラメータに関する情報が含まれます。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.QueryParameter.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.QueryParameter" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.QueryParameter.Value">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.QueryParameter" />の値を式として指定できるかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.QueryParameters">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.QueryParameter" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.QueryParameters.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.QueryParameters" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.QueryParameters.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.DataSource" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.QueryParameters.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.QueryParameter" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.CommandType">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Query" />のタイプを定義します。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.CommandType.Text">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Query" />の
        <see cref="P:C1.C1Rdl.Rdl2008.Query.CommandText" />には、SQL クエリーテキストが含まれています。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.CommandType.StoredProcedure">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Query" />の
        <see cref="P:C1.C1Rdl.Rdl2008.Query.CommandText" />には、 データの取得に使用するストアドプロシージャの名前が含まれています。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.CommandType.TableDirect">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Query" />の
        <see cref="P:C1.C1Rdl.Rdl2008.Query.CommandText" />には、 データテーブルの名前が含まれています。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Query">
      <summary>レポートのデータを取得するために実行するクエリーの説明が含まれています。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Query.AssignFrom(C1.C1Rdl.Rdl2008.Query)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.Query" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Query.Owner">
      <summary>
        この
        <see cref="T:C1.C1Rdl.Rdl2008.Query" />オブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.DataSet" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Query.DataSourceName">
      <summary>
        クエリーの実行対象の
        <see cref="T:C1.C1Rdl.Rdl2008.DataSource" />の名前を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Query.CommandType">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.Query.CommandText" />に含まれているクエリーのタイプを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Query.CommandText">
      <summary>レポートのデータを取得するために実行するクエリーを取得または設定します。 式として指定できます。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Query.Parameters">
      <summary>
        クエリーの一部としてデータソースに渡されるパラメータのリストを含む
        <see cref="T:C1.C1Rdl.Rdl2008.QueryParameters" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Query.Timeout">
      <summary>クエリーの実行がタイムアウトするまでの秒数を取得または設定します。 負の値は使用できません。 ゼロ（デフォルト）の場合、クエリーはタイムアウトしません。 最大値：2147483647。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Field">
      <summary>レポートのデータモデルのフィールドに関する情報が含まれています。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Field.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.DataSource" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Field.DataField">
      <summary>
        クエリーのフィールド名を取得または設定します。 注意： データフィールド名が一意である必要はありません。 複数のフィールドが同じデータフィールド名を参照することができます。 フィールドには
        <see cref="P:C1.C1Rdl.Rdl2008.Field.DataField" />と
        <see cref="P:C1.C1Rdl.Rdl2008.Field.Value" />のいずれか一方が１つだけ必要です。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Field.Value">
      <summary>
        このフィールドの値として評価される式を取得または設定します。 たとえば、=Fields!Price.Value+Fields!Tax.Value のような式です。 式にレポート項目への参照や集計を含めることはできません。 フィールドには
        <see cref="P:C1.C1Rdl.Rdl2008.Field.DataField" />と
        <see cref="P:C1.C1Rdl.Rdl2008.Field.Value" />のいずれか一方が１つだけ必要です。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Fields">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Field" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Fields.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Fields" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Fields.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.DataSource" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Fields.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.Field" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Filter">
      <summary>データセットまたはデータ領域のデータ行に適用するフィルタ、 またはグループインスタンスに適用するフィルタを記述します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Filter.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Filter" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Filter.AssignFrom(C1.C1Rdl.Rdl2008.Filter)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.Filter" />のプロパティを現在のオブジェクトにコピーします。
        <see cref="P:C1.C1Rdl.Rdl2008.Filter.Expression" />と
        <see cref="P:C1.C1Rdl.Rdl2008.Filter.Values" />は参照によってコピーされます。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Filter.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.Filters" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Filter.Expression">
      <summary>
        グループ内の各インスタンス、またはデータセット／データ領域の各行に対して評価され、
        <see cref="P:C1.C1Rdl.Rdl2008.Filter.Values" />と比較される （
        <see cref="P:C1.C1Rdl.Rdl2008.Filter.Operator" />を使用）式を取得または設定します。 比較に失敗すると、 その行／インスタンスがデータセット、データ領域、またはグループから除外されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Filter.Operator">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.Filter.Expression" />と
        <see cref="P:C1.C1Rdl.Rdl2008.Filter.Values" />の比較に使用する演算子を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Filter.Values">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.Filter.Expression" />と比較する値を取得します。 Equal、Like、NotEqual、GreaterThan、GreaterThanOrEqual、、LessThan、 LessThanOrEqual、TopN、BottomN、TopPercent、BottomPercent、の場合、FilterValue が厳密に１つ必要です。 TopN と BottomN の場合、整数に評価される FilterValue 式が必要です。 TopPercent と BottomPercent の場合、 整数または浮動小数点数に評価される FilterValue 式が必要です。 Between の場合、 FilterValue 要素が厳密に２つ必要です。 In の場合、
        <see cref="P:C1.C1Rdl.Rdl2008.Filter.Values" />はセットとして扱われます （
        <see cref="P:C1.C1Rdl.Rdl2008.Filter.Values" />のどこかに
        <see cref="P:C1.C1Rdl.Rdl2008.Filter.Expression" />値が含まれている場合、 そのインスタンスは除外されません）。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Filters">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Filter" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Filters.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Filters" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Filters.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.Filter" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Filters.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.Filter" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DataSet">
      <summary>レポートの一部として表示するデータのセットに関する情報が含まれています。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSet.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.DataSet" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSet.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.DataSet" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.Owner">
      <summary>
        このコレクションを所有している
        <see cref="T:C1.C1Rdl.Rdl2008.DataSets" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.Fields">
      <summary>
        データセットのフィールドを含む
        <see cref="P:C1.C1Rdl.Rdl2008.DataSet.Fields" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.Query">
      <summary>
        データソースに関する情報を含む
        <see cref="P:C1.C1Rdl.Rdl2008.DataSet.Query" />オブジェクトを取得します。 接続情報、クエリーなどが含まれ、 データソースからデータを取得するために必要です。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.CaseSensitivity">
      <summary>
        データの大文字と小文字を区別するかどうかを示す値を取得または設定します。
        <list type="bullet">
          <item>
            <term>
              <b>Auto</b>
            </term>
            <description>デフォルト。 大文字と小文字の区別の設定は、データプロバイダへの問い合わせによって自動的に設定されます。 データプロバイダがそのメソッドをサポートしていない場合のデフォルト値は false です。</description>
          </item>
          <item>
            <term>
              <b>True</b>
            </term>
            <description>このデータセット内のデータの大文字と小文字が区別されます。</description>
          </item>
          <item>
            <term>
              <b>False</b>
            </term>
            <description>このデータセット内のデータの大文字と小文字が区別されなくなります。</description>
          </item>
        </list>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.Collation">
      <summary>
        データをソートするための照合順序に使用するロケールを取得または設定します。 Microsoft SQL Server の標準照合順序名を使用します。 Collation が指定されない場合、照合順序設定はデータプロバイダへの問い合わせによって自動的に設定されます。 データプロバイダがそのメソッドをサポートしていない場合や、 未サポートまたは無効な値を返した場合のデフォルトは、 レポートの
        <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.Language" />プロパティに対応する照合順序です。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.AccentSensitivity">
      <summary>
        データのアクセントを区別するかどうかを示す値を取得または設定します。
        <list type="bullet">
          <item>
            <term>
              <b>Auto</b>
            </term>
            <description>デフォルト。 アクセントの区別の設定は、データプロバイダへの問い合わせによって自動的に設定されます。 データプロバイダがそのメソッドをサポートしていない場合のデフォルト値は false です。</description>
          </item>
          <item>
            <term>
              <b>True</b>
            </term>
            <description>このデータセット内のデータのアクセントが区別されます。</description>
          </item>
          <item>
            <term>
              <b>False</b>
            </term>
            <description>このデータセット内のデータのアクセントが区別されなくなります。</description>
          </item>
        </list>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.KanatypeSensitivity">
      <summary>
        データのひらがなとカタカナを区別するかどうかを示す値を取得または設定します。
        <list type="bullet">
          <item>
            <term>
              <b>Auto</b>
            </term>
          </item>
          <description>デフォルト。 ひらがなとカタカナの区別の設定は、データプロバイダへの問い合わせによって自動的に設定されます。 データプロバイダがそのメソッドをサポートしていない場合のデフォルト値は false です。</description>
          <item>
            <term>
              <b>True</b>
            </term>
            <description>このデータセット内のデータのひらがなとカタカナが区別されます。</description>
          </item>
          <item>
            <term>
              <b>False</b>
            </term>
            <description>このデータセット内のデータのひらがなとカタカナが区別されなくなります。</description>
          </item>
        </list>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.WidthSensitivity">
      <summary>
        データの全角半角を区別するかどうかを示す値を取得または設定します。
        <list type="bullet">
          <item>
            <term>
              <b>Auto</b>
            </term>
            <description>デフォルト。 全角半角の区別の設定は、データプロバイダへの問い合わせによって自動的に設定されます。 データプロバイダがそのメソッドをサポートしていない場合のデフォルト値は false です。</description>
          </item>
          <item>
            <term>
              <b>True</b>
            </term>
            <description>このデータセット内のデータの全角半角が区別されます。</description>
          </item>
          <item>
            <term>
              <b>False</b>
            </term>
            <description>このデータセット内のデータの全角半角が区別されなくなります。</description>
          </item>
        </list>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSet.Filters">
      <summary>
        データセットのデータの各行に適用するフィルタを含む
        <see cref="P:C1.C1Rdl.Rdl2008.DataSet.Filters" />コレクションを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DataSets">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.DataSet" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSets.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.DataSets" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSets.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.DataSet" />タイプ。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSets.FindByName(System.String)">
      <summary>
        指定された名前の
        <see cref="T:C1.C1Rdl.Rdl2008.DataSet" />を返します。
      </summary>
      <param name="name">検索する項目の名前。</param>
      <returns>指定された項目。</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSets.Owner">
      <summary>
        このオブジェクトを所有している
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSets.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.DataSet" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ConnectionProperties">
      <summary>データソースへの接続方法を記述する情報が含まれています。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ConnectionProperties.AssignFrom(C1.C1Rdl.Rdl2008.ConnectionProperties)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ConnectionProperties" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ConnectionProperties.DataProvider">
      <summary>データソースのタイプを定義する文字列を 取得または設定します（SQL、OLEDB、OLEDB-MD など）。 これは登録データプロバイダの名前です。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ConnectionProperties.ConnectString">
      <summary>データソースの接続文字列を取得または設定します。 式として指定できます。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ConnectionProperties.IntegratedSecurity">
      <summary>このデータソースに接続するときに 統合セキュリティを使用するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ConnectionProperties.Prompt">
      <summary>このデータソースのデータベース資格情報の入力が必要なときに ユーザーに表示するプロンプトを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DataSource">
      <summary>データソースを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSource.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.DataSource" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSource.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.DataSource" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSource.Report">
      <summary>
        現在のオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSource.Owner">
      <summary>
        現在のオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.DataSources" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSource.Transaction">
      <summary>
        このデータソースを使用するデータセットを １回のトランザクションで実行するかどうかを示す値を取得または設定します。
        <para>
          デフォルトは
          <b>false</b>です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSource.ConnectionProperties">
      <summary>
        現在のデータソースに接続する方法に関する情報を含む
        <see cref="P:C1.C1Rdl.Rdl2008.DataSource.ConnectionProperties" />オブジェクトを取得します。
        <para>
          <see cref="T:C1.C1Rdl.Rdl2008.DataSource" />には、
          <see cref="P:C1.C1Rdl.Rdl2008.DataSource.DataSourceReference" />と
          <see cref="P:C1.C1Rdl.Rdl2008.DataSource.ConnectionProperties" />のいずれか一方だけが指定されている必要があります。
        </para>
      </summary>
      <seealso cref="P:C1.C1Rdl.Rdl2008.DataSource.DataSourceReference" />
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSource.DataSourceReference">
      <summary>
        同じサーバー上のデータソースへの完全なフォルダパス（例：/salesreports/salesdatabase）または相対パス（例：salesdatabase）を取得または設定します。 相対パスの基準はレポートと同じフォルダです。 データソースは DataSourceReference の 接続プロパティを使用します。 レポートがローカルで描画された場合、 このプロパティにはデータソースを記述する RDS ファイルへのパスが含まれます。
        <para>
          <see cref="T:C1.C1Rdl.Rdl2008.DataSource" />には、
          <see cref="P:C1.C1Rdl.Rdl2008.DataSource.DataSourceReference" />と
          <see cref="P:C1.C1Rdl.Rdl2008.DataSource.ConnectionProperties" />のいずれか一方だけが指定されている必要があります。
        </para>
      </summary>
      <seealso cref="P:C1.C1Rdl.Rdl2008.DataSource.ConnectionProperties" />
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSource.Recordset">
      <summary>
        TBD： この
        <see cref="T:C1.C1Rdl.Rdl2008.DataSource" />オブジェクトにデータを提供するデータソースオブジェクトを取得または設定します。
      </summary>
      <remarks>
        以下のオブジェクトはこのプロパティに割り当てられます。
        <list type="number">
          <item>
            <term>
              <see cref="T:System.Data.DataTable" />
            </term>
          </item>
          <item>
            <term>
              <see cref="T:System.Data.DataView" />
            </term>
          </item>
          <item>
            <term>
              <see cref="T:System.ComponentModel.IListSource" />インタフェースをサポートするオブジェクト
            </term>
          </item>
          <item>
            <term>
              <see cref="T:System.Collections.IEnumerable" />または
              <see cref="T:System.Collections.IEnumerator" />インタフェースをサポートするオブジェクト
            </term>
          </item>
        </list>割り当てられたオブジェクトにフィールドのリスト（DataTable や DataView など）が含まれていない場合、 フィールドは
        <see cref="T:System.ComponentModel.ITypedList" />インタフェースから構築されます。
        <see cref="T:System.ComponentModel.ITypedList" />インタフェースがサポートされない場合、 フィールドはコレクション内の最初のオブジェクトのパブリックプロパティになります。
      </remarks>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DataSources">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.DataSource" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSources.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.DataSources" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSources.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.DataSource" />タイプ。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSources.FindByName(System.String)">
      <summary>
        指定された名前の
        <see cref="T:C1.C1Rdl.Rdl2008.DataSource" />を検索します。
      </summary>
      <param name="name">検索する項目の名前。</param>
      <returns>指定された項目。</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSources.Owner">
      <summary>
        現在のコレクションを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSources.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.DataSource" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.EmbeddedImage">
      <summary>レポートに埋め込まれている画像を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.EmbeddedImage.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.EmbeddedImage" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.EmbeddedImage.MIMEType">
      <summary>画像の MIMEType を取得または設定します。 有効な値は、image/bmp、image/jpeg、image/gif、image/png、image/x-png です。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.EmbeddedImage.ImageData">
      <summary>base-64 エンコードされた画像データを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.EmbeddedImages">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.EmbeddedImage" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.EmbeddedImages.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.EmbeddedImages" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.EmbeddedImages.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.EmbeddedImage" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.EmbeddedImages.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.EmbeddedImage" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Group">
      <summary>データのグループ化に使用する式を定義します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Group.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Group" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Group.AssignFrom(C1.C1Rdl.Rdl2008.Group)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.Group" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Group.Name">
      <summary>Group の名前を取得または設定します。 ２つのグループ要素に同じ名前を使用することはできません。 グループ要素の名前をデータセットやデータ領域と同じ名前にすることはできません。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Group.DocumentMapLabel">
      <summary>クライアント UI でグループのインスタンスを識別するラベルを取得または設定します （検索用にユーザーフレンドリーなラベルを提供するため）。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Group.Expressions">
      <summary>データのグループ化に使用する式を取得します。 空の場合、 これは詳細グループ（データの詳細行ごとにグループのインスタンスが１つあります）。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Group.PageBreak">
      <summary>
        このグループの改ページ動作を定義する
        <see cref="P:C1.C1Rdl.Rdl2008.Group.PageBreak" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Group.Filters">
      <summary>
        グループの各インスタンスに適用するフィルタを含む
        <see cref="P:C1.C1Rdl.Rdl2008.Group.Filters" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Group.Parent">
      <summary>再帰型階層で親グループを識別する式を取得または設定します。</summary>
      <remarks>グループにグループ式が厳密に１つだけある場合のみ有効です。 次のような意味があります。 1. グループは再帰型階層に従ってソートされます （同じ階層のグループのソートには Sort が用いられます）。 2. （ドキュメントマップ内の）ラベルは、 再帰型階層に従って配置／インデントされます。 3. グループ内の表示／非表示は、 再帰型階層に従って項目をトグルします（ToggleItem を参照）。 グループのフィルタによってグループインスタンスの親が除外された場合、 そのインスタンスは親のそのまた親の子として扱われます。 ループが発生した場合、親子関係の１つが無視されます。</remarks>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Group.DataElementName">
      <summary>このグループのインスタンスのデータ要素に使用する名前を取得または設定します。 既定値（未指定の場合）： グループの名前。 CLS 準拠の識別子にする必要があります。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Group.DataElementOutput">
      <summary>データを描画する際にグループのインスタンスが 表示されるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Group.Variables">
      <summary>
        グループレベルで評価する変数のセットを含む
        <see cref="P:C1.C1Rdl.Rdl2008.Group.Variables" />コレクションを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.PageSection">
      <summary>
        レポートのすべてのページの上または下に表示されるレポート項目のレイアウトを定義します。
        <see cref="T:C1.C1Rdl.Rdl2008.PageSection" />要素自体は使用されません。
        <see cref="T:C1.C1Rdl.Rdl2008.PageSection" />のサブタイプの
        <see cref="T:C1.C1Rdl.Rdl2008.PageHeader" />、
        <see cref="T:C1.C1Rdl.Rdl2008.PageFooter" />のみが使用されます。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.PageSection.#ctor(C1.C1Rdl.Rdl2008.Page)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.PageSection" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.Page" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.PageSection.AssignFrom(C1.C1Rdl.Rdl2008.PageSection)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.PageSection" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.PageSection.Clear">
      <summary>現在のオブジェクトをクリアし、すべてのプロパティをデフォルト値に設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.PageSection.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.Page" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.PageSection.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.PageSection.Height">
      <summary>ページセクションの高さを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.PageSection.PrintOnFirstPage">
      <summary>ページセクションをレポートの最初のページに表示するかどうかを示す値を取得または設定します。 これが PageFooter の場合、 単一ページのレポートでは使用されません。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.PageSection.PrintOnLastPage">
      <summary>ページセクションをレポートの最後のページに表示するかどうかを示す値を取得または設定します。 これが PageHeader の場合、 単一ページのレポートでは使用されません。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.PageSection.ReportItems">
      <summary>
        ページセクションレイアウトの要素を含む
        <see cref="P:C1.C1Rdl.Rdl2008.PageSection.ReportItems" />コレクションを取得します。 ページセクションではデータ領域またはサブレポートを使用することはできません。 ページセクションではすべての改ページが無視されます。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.PageHeader">
      <summary>レポートのすべてのページの上に表示される レポート項目のレイアウトを定義します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.PageHeader.#ctor(C1.C1Rdl.Rdl2008.Page)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.PageHeader" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.Page" />オブジェクト。
      </param>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.PageFooter">
      <summary>レポートのすべてのページの下に表示される レポート項目のレイアウトを定義します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.PageFooter.#ctor(C1.C1Rdl.Rdl2008.Page)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.PageFooter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.Page" />オブジェクト。
      </param>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Page">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />のページレイアウト情報が含まれています。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Page.#ctor(C1.C1Rdl.Rdl2008.C1RdlReport)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Page" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Page.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.Page" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Page.Clear">
      <summary>現在のオブジェクトをクリアし、すべてのプロパティをデフォルト値に設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.PageHeader">
      <summary>
        レポートの各ページの上に描画される
        <see cref="P:C1.C1Rdl.Rdl2008.Page.PageHeader" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.PageFooter">
      <summary>
        レポートの各ページの下に描画される
        <see cref="P:C1.C1Rdl.Rdl2008.Page.PageFooter" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.PageHeight">
      <summary>物理ページ指向のレンダラでレポートを描画するときに使用するデフォルトの高さを取得または設定します。 既定値：11 インチ。 ０インチより大きい値にする必要があります。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.PageWidth">
      <summary>物理ページ指向のレンダラでレポートを描画するときに使用するデフォルトの幅さを取得または設定します。 既定値：8.5 インチ。 ０インチより大きい値にする必要があります。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.InteractiveHeight">
      <summary>
        インタラクティブレンダラを使用する場合のレポートの描画に使用するデフォルトの高さを取得または設定します。 最大サイズはありません。 値０（単位は関係なし）は、高さが無制限であることを示します。 デフォルトは
        <see cref="P:C1.C1Rdl.Rdl2008.Page.PageHeight" />です。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.InteractiveWidth">
      <summary>
        インタラクティブレンダラを使用する場合のレポートの描画に使用するデフォルトの幅を取得または設定します。 最大サイズはありません。 値０（単位は関係なし）は、幅が無制限であることを示します。 デフォルトは
        <see cref="P:C1.C1Rdl.Rdl2008.Page.PageWidth" />です。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.LeftMargin">
      <summary>左マージンの幅を取得または設定します。 既定値：０インチ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.TopMargin">
      <summary>上マージンの幅を取得または設定します。 既定値：０インチ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.RightMargin">
      <summary>右マージンの幅を取得または設定します。 既定値：０インチ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.BottomMargin">
      <summary>下マージンの幅を取得または設定します。 既定値：０インチ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.Columns">
      <summary>レポートの描画に使用するデフォルトのカラム数を取得または設定します。 既定値：1。 最小値：１。 最大値：1000。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Page.ColumnSpacing">
      <summary>マルチカラムレイアウトの場合のカラム間のスペースを取得または設定します。 既定値：0.5 インチ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.BreakLocation">
      <summary>改ページの位置を定義します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BreakLocation.Start">
      <summary>
        改ページを
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />の前、または
        <see cref="T:C1.C1Rdl.Rdl2008.Group" />の各インスタンスの前に配置します。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BreakLocation.End">
      <summary>
        改ページを
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />の後ろ、または
        <see cref="T:C1.C1Rdl.Rdl2008.Group" />の各インスタンスの後ろに配置します。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BreakLocation.StartAndEnd">
      <summary>
        改ページを
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />の前後、または
        <see cref="T:C1.C1Rdl.Rdl2008.Group" />の各インスタンスの前後に配置します。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BreakLocation.Between">
      <summary>
        改ページを
        <see cref="T:C1.C1Rdl.Rdl2008.Group" />の各インスタンスの間に配置します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.PageBreak">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Group" />または
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />の改ページ動作を定義します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.PageBreak.#ctor(C1.C1Rdl.Rdl2008.BreakLocation)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.PageBreak" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="breakLocation">BreakLocation プロパティの値。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.PageBreak.BreakLocation">
      <summary>改ページが発生する場所を示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Parameter">
      <summary>サブレポートまたはドリルスルーのパラメータに関する情報が含まれています。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Parameter.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.Parameter" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Parameter.Value">
      <summary>
        サブレポートまたはコントロールのパラメータとして評価される値または式を取得または設定します。
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />内の
        <see cref="T:C1.C1Rdl.Rdl2008.Drillthrough" />の場合、 これは式ではなく値の取得元の DataField の名前になります。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Parameter.Omit">
      <summary>
        パラメータをスキップするかどうかを示す値を取得または設定します。
        <see cref="T:C1.C1Rdl.Rdl2008.Drillthrough" />パラメータに対してのみ有効です。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Parameters">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Parameter" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Parameters.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Parameters" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Parameters.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.Parameter" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Parameters.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.Parameter" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.RenderRdlChart">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.RenderRdlChart.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Rdl.Rdl2008.RenderRdlChart" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Rdl.Rdl2008.RenderRdlChart" />オブジェクト。
      </returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.RenderRdlChartFragment">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderFragment">
      <summary>RenderObject のフラグメントを表すための抽象基本クラス。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ShouldSerializeSpacing">
      <summary>
        <see cref="P:C1.C1Preview.RenderFragment.Spacing" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.RenderFragment.Spacing" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ShouldSerializeBorders">
      <summary>
        <see cref="P:C1.C1Preview.RenderFragment.Borders" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.RenderFragment.Borders" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ShouldSerializePadding">
      <summary>
        <see cref="P:C1.C1Preview.RenderFragment.Padding" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.RenderFragment.Padding" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ShouldSerializeDrawInner">
      <summary>
        <see cref="P:C1.C1Preview.RenderFragment.DrawInner" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.RenderFragment.DrawInner" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.CreateSame">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RenderFragment" />オブジェクトと同じ型のオブジェクトのインスタンスを作成します。
      </summary>
      <returns>作成されたフラグメントオブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetFlag(System.Int32)">
      <summary>これは内部使用専用です。</summary>
      <param name="flagMask"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.SetFlag(System.Int32,System.Boolean)">
      <summary>これは内部使用専用です。</summary>
      <param name="flagMask"></param>
      <param name="value"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ChangeResolvedDimensions(System.Double,System.Double,System.Double,System.Double)">
      <summary>
        オブジェクトの解決されたサイズが変更されるときに呼び出されます。 たとえば、テーブルの解決が終了して、行内のすべてのオブジェクトの高さが同じ値に設定された場合です。 オブジェクトはこの変更を無視して、自身のサイズを変更しなくてもかまいません。 このメソッドは、
        <b>child</b>オブジェクトにのみ呼び出されます。 そのため、
        <paramref name="x" />と
        <paramref name="y" />は 親の左上隅に相対的です。
      </summary>
      <param name="x">フラグメントの新しい左座標。</param>
      <param name="y">フラグメントの新しい上座標。</param>
      <param name="width">フラグメントの新しい幅。</param>
      <param name="height">フラグメントの新しい高さ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.IsReresolvingNeeded(C1.C1Preview.PageAreaBase,System.Double,System.Double,System.Double,System.Double)">
      <summary>描画オブジェクト全体の完全な再解決が必要かどうかを示す値を取得します。</summary>
      <param name="pageArea">ページ上の領域。</param>
      <param name="left">ページ上の X 座標。</param>
      <param name="top">ページ上の Y 座標。</param>
      <param name="width">フラグメントの幅。</param>
      <param name="height">フラグメントの高さ。</param>
      <returns>
        このフラグメントを含む
        <see cref="P:C1.C1Preview.RenderFragment.RenderObject" />が再解決される場合は
        <b>true</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.CalcLengthAbs(C1.C1Preview.RefDim,C1.C1Preview.LengthAbs,System.Boolean,C1.C1Preview.PageAreaBase@,System.Double@)">
      <summary>LengthAbs によって指定されたディメンションの値を計算します。</summary>
      <param name="dim">計算するディメンション。</param>
      <param name="length">ディメンションの値を定義する LengthAbs オブジェクト。</param>
      <param name="customObjectDimension">カスタムオブジェクトのディメンションが解決されます。</param>
      <param name="pageArea">終了時に、LengthAbs によって参照された PageAreaBase オブジェクトを含みます。</param>
      <param name="value">終了時に、座標またはサイズの値を含みます。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetReferencedObject(C1.C1Preview.RefDim,C1.C1Preview.LengthRef)">
      <summary>
        <see cref="T:C1.C1Preview.LengthRef" />オブジェクトによって参照されるオブジェクトを取得します。
        <see cref="M:C1.C1Preview.RenderFragment.ResolveLengthRef(C1.C1Preview.RefDim,C1.C1Preview.LengthRef)" />からのみ呼び出されます。
      </summary>
      <param name="dim">
        <paramref name="length" />によって指定されるディメンション。
      </param>
      <param name="length">
        調べる
        <see cref="T:C1.C1Preview.LengthRef" />。
      </param>
      <returns>
        <paramref name="length" />によって参照されるオブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.CalcLengthRef(C1.C1Preview.RefDim,C1.C1Preview.LengthRef,System.Boolean,C1.C1Preview.PageAreaBase@,System.Double@)">
      <summary>LengthRef オブジェクトによって指定されたディメンションの値を計算します （ディメンションは別のオブジェクトのディメンションを参照します）。</summary>
      <param name="dim">計算するディメンション。</param>
      <param name="length">ディメンションの値を定義する LengthRef オブジェクト。</param>
      <param name="customObjectDimension">RenderLine のポイントの座標、RenderTable の列幅など、カスタムオブジェクトディメンションが解決されることを示します。</param>
      <param name="pageArea">終了時に、LengthRef によって参照された PageAreaBase オブジェクトを含みます。</param>
      <param name="value">終了時に、座標またはサイズの値を含みます。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.CalcLengthExp(C1.C1Preview.RefDim,C1.C1Preview.LengthExp,System.Boolean,C1.C1Preview.PageAreaBase@,System.Double@)">
      <summary>LengthExp オブジェクトによって指定されたディメンションの値を計算します （ディメンションは式です）。</summary>
      <param name="dim">計算するディメンション。</param>
      <param name="length">ディメンションの値を定義する LengthExp オブジェクト。</param>
      <param name="customObjectDimension">RenderLine のポイントの座標、RenderTable の列幅など、カスタムオブジェクトディメンションが解決されることを示します。</param>
      <param name="pageArea">終了時に、PageAreaBase オブジェクトを含みます。</param>
      <param name="value">終了時に、座標またはサイズの値を含みます。</param>
      <returns>
        エラーが発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ResolveLengthAbs(C1.C1Preview.RefDim,C1.C1Preview.LengthAbs)">
      <summary>オブジェクトの絶対ディメンションを解決します。</summary>
      <param name="dim">解決するディメンション。</param>
      <param name="length">ディメンションの値を定義する LengthAbs オブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ResolveLengthAuto(C1.C1Preview.RefDim,C1.C1Preview.LengthAuto)">
      <summary>オブジェクトの自動ディメンションを解決します。</summary>
      <param name="dim">解決するディメンション。</param>
      <param name="length">ディメンションの値を定義する LengthAuto オブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ResolveLengthRef(C1.C1Preview.RefDim,C1.C1Preview.LengthRef)">
      <summary>参照として指定されたオブジェクトのディメンションを解決します。</summary>
      <param name="dim">解決するディメンション。</param>
      <param name="length">ディメンションの値を定義する LengthRef オブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ResolveLengthExp(C1.C1Preview.RefDim,C1.C1Preview.LengthExp)">
      <summary>オブジェクトの式ディメンションを解決します。</summary>
      <param name="dim">解決するディメンション。</param>
      <param name="length">ディメンションの値を定義する LengthExp オブジェクト。</param>
      <returns>エラーが発生しない場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ResolveLength(C1.C1Preview.RefDim,C1.C1Preview.LengthBase)">
      <summary>これは内部使用専用です。</summary>
      <param name="dim"></param>
      <param name="length"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.CalcLength(C1.C1Preview.RefDim,C1.C1Preview.LengthBase,System.Boolean,C1.C1Preview.PageAreaBase@,System.Double@)">
      <summary>ディメンションの値を計算します。 LengthRef、LengthAbs、LengthExp のみが長さとして指定できます。</summary>
      <param name="dim">計算するディメンション。</param>
      <param name="length">ディメンションの値。LengthAbs、LengthRef、または LengthExp が可能です。</param>
      <param name="customObjectDimension">RenderLine のポイントの座標、RenderTable の列幅など、カスタムオブジェクトディメンションが解決されることを示します。</param>
      <param name="pageArea">終了時に、PageAreaBase オブジェクトを含みます。座標が相対の場合は null。</param>
      <param name="value">終了時に、座標またはサイズの値を含みます。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.CalcLength(C1.C1Preview.RefDim)">
      <summary>このメソッドは、LengthRef オブジェクトの解決中に *別の* RenderFragment オブジェクトによってのみ呼び出されます。</summary>
      <param name="dim">解決されるディメンション。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.InternalPrepareForReresolving(C1.C1Preview.FragmentResolvedInfo,C1.C1Preview.FragmentResolvedInfo,C1.C1Preview.SplitParams,System.Boolean@)">
      <summary>このメソッドをオーバーライドして、 解決時にオブジェクトの解決された情報の追加の初期化を実行します。 オブジェクトの一部のディメンションは分割時に変更されないため、 このメソッドを使って、 一部の情報を古い解決情報を新しい解決情報にコピーできます。</summary>
      <param name="newResolvedInfo"></param>
      <param name="oldResolvedInfo"></param>
      <param name="p"></param>
      <param name="forceChildrenReresolving"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetContentAutoWidth(System.Double,System.Double@)">
      <summary>
        このメソッドをオーバーライドして、オブジェクトの幅をそのコンテンツを基準にして計算します。 このメソッドはオブジェクトの幅が auto として指定されるときに呼び出されます。例：
        <code>
          <![CDATA[
          obj.Width = Unit.Auto;
          ]]>
        </code>
      </summary>
      <param name="width">オブジェクトのコンテンツ領域の高さ。</param>
      <param name="height">オブジェクトのコンテンツ領域の幅。値は「Document.ResolvedUnit」単位で指定する必要があります。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetContentAutoHeight(System.Double,System.Double@)">
      <summary>
        このメソッドをオーバーライドして、オブジェクトの高さをそのコンテンツを基準にして計算します。 このメソッドはオブジェクトの高さが auto として指定されるときに呼び出されます。例：
        <code>
          <![CDATA[
          obj.Height = Unit.Auto;
          ]]>
        </code>
      </summary>
      <param name="width">オブジェクトのコンテンツ領域の幅。</param>
      <param name="height">オブジェクトのコンテンツ領域の高さ。値は「Document.ResolvedUnit」単位で指定する必要があります。</param>
      <returns>エラーが発生しない場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetContentAutoSize(System.Double@,System.Double@)">
      <summary>このメソッドをオーバーライドして、オブジェクトのサイズをそのコンテンツを基準として計算します。 このメソッドはオブジェクトの幅と高さが auto として指定されるときに呼び出されます。</summary>
      <param name="width">オブジェクトのコンテンツ領域の幅。値は「Document.ResolvedUnit」単位で指定する必要があります。</param>
      <param name="height">オブジェクトのコンテンツ領域の高さ。値は「Document.ResolvedUnit」単位で指定する必要があります。</param>
      <returns>エラーが発生しない場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ResolveChildrenLayout(C1.C1Preview.LengthBase,C1.C1Preview.LengthBase)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetDrawingFlags(System.Boolean)">
      <summary>
        このメソッドをオーバーライドして、描画フラグを定義します。 これらのフラグはオブジェクトの描画方法を制御します。
        <seealso cref="T:C1.C1Preview.DrawingFlagsEnum" />
      </summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.FillRect(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,C1.C1Preview.Style,C1.C1Preview.Scripting.IScriptContext)">
      <summary>これは内部使用専用です。</summary>
      <param name="graphics"></param>
      <param name="left"></param>
      <param name="top"></param>
      <param name="right"></param>
      <param name="bottom"></param>
      <param name="style"></param>
      <param name="context"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.FillRect(System.Drawing.Graphics,System.Drawing.Rectangle,C1.C1Preview.Style,C1.C1Preview.Scripting.IScriptContext)">
      <summary>これは内部使用専用です。</summary>
      <param name="graphics"></param>
      <param name="rect"></param>
      <param name="style"></param>
      <param name="context"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>オブジェクトの背景を描画します。</summary>
      <param name="graphics">オブジェクトの描画先となるグラフィックスオブジェクト。</param>
      <param name="backgroundRect">オブジェクトの内側領域の境界。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetRoundBorderClipping(System.Drawing.Graphics,System.Drawing.Rectangle,C1.C1Preview.OffsetsI,C1.C1Preview.DrawingFlagsEnum,System.Drawing.Drawing2D.GraphicsPath@,System.IntPtr@)">
      <summary>角が丸いオブジェクトの枠線を表す GraphicsPath オブジェクトを返します。 枠線の角が丸くない場合は null を返します。</summary>
      <param name="graphics">使用するグラフィックス。</param>
      <param name="outerRect">枠線の外側の矩形。</param>
      <param name="borders">枠線のサイズ。</param>
      <param name="drawingFlags">GDI 描画を使用するかどうか。</param>
      <param name="clipPath">OUT: クリップパス。</param>
      <param name="clipRegion">OUT: クリップ領域。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.DrawBorders(System.Drawing.Graphics,System.Drawing.Rectangle,C1.C1Preview.OffsetsI,C1.C1Preview.PageDrawParams)">
      <summary>オブジェクトの枠線を描画します。</summary>
      <param name="graphics">オブジェクトの描画先となるグラフィックスオブジェクト。</param>
      <param name="outerRect">枠線の外側の矩形。</param>
      <param name="borders">枠線のサイズ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.InternalDraw(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>GetDrawingFlags が DrawingFlagsEnum.UseGdiDrawing フラグを設定しない場合はこのプロシージャをオーバーライドします。</summary>
      <param name="graphics">オブジェクトの描画先となるグラフィックスオブジェクト。</param>
      <param name="drawParams">描画に必要なデータが含まれています。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.InternalDraw(C1.C1Preview.GraphicsUtils.GdiDc,C1.C1Preview.DrawParams)">
      <summary>GetDrawingFlags が DrawingFlagsEnum.UseGdiDrawing フラグを設定する場合はこのプロシージャをオーバーライドします。</summary>
      <param name="dc">オブジェクトの描画先の DC。</param>
      <param name="drawParams">描画に必要なデータが含まれています。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetChildrenDrawBounds(C1.C1Preview.RenderFragment,System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="rfc"></param>
      <param name="graphics"></param>
      <param name="dp"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.DrawChildren(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="graphics"></param>
      <param name="dp"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.DrawContent(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="graphics"></param>
      <param name="dp"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetHorzSplits(System.Collections.Generic.List{System.Double})">
      <summary>このメソッドをオーバーライドして、コンテンツ領域の左辺に 相対的なオブジェクトの水平分割を返します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetVertSplits(System.Collections.Generic.List{System.Double})">
      <summary>このメソッドをオーバーライドして、コンテンツ領域の上辺に 相対的なオブジェクトの垂直分割を返します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.CreateSplitParams">
      <summary>SplitParams オブジェクトを作成します。分割中に使用され、 子クラスはこのメソッドをオーバーライドして、カスタムタイプ （SplitParams から派生）の SplitParams オブジェクトを作成できます。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.InitializeSplitParams(System.Boolean,C1.C1Preview.SplitPos,C1.C1Preview.SplitContext)">
      <summary>これは内部使用専用です。</summary>
      <param name="splitVert"></param>
      <param name="pos"></param>
      <param name="splitContext"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.FindVertSplitPosContent(C1.C1Preview.SplitParams)">
      <summary>オブジェクトのコンテンツが指定した位置で垂直方向に分割できるどうかを調べます。</summary>
      <param name="p">分割のパラメータを定義する SplitParams オブジェクト。</param>
      <returns>オブジェクトが指定した位置（p.ContentRealSplitPos）で分割できる場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.SplitVertContent(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams)">
      <summary>オブジェクトのコンテンツを垂直方向に分割します。デフォルトではこのプロシージャはオブジェクトを画像として分割します。</summary>
      <param name="newFragment">contentSplitPos の前のオブジェクトの部分を記述する作成されたフラグメント。</param>
      <param name="p">分割のパラメータを定義する SplitParams オブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.FindHorzSplitPosContent(C1.C1Preview.SplitParams)">
      <summary>オブジェクトのコンテンツが指定した位置で水平方向に分割できるかどうかを調べます。</summary>
      <param name="p">分割のパラメータを定義する SplitParams オブジェクト。</param>
      <returns>オブジェクトが指定した位置で分割できる場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.SplitHorzContent(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams)">
      <summary>オブジェクトのコンテンツを水平方向に分割します。デフォルトではこのプロシージャはオブジェクトを画像として分割します。</summary>
      <param name="newFragment">contentSplitPos の前のオブジェクトの部分を記述する作成されたフラグメント。</param>
      <param name="p">分割のパラメータを定義する SplitParams オブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.SplitChildren(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams,System.Double,System.Double,System.Double)">
      <summary>これは内部使用専用です。</summary>
      <param name="newFragment"></param>
      <param name="p"></param>
      <param name="splitPos"></param>
      <param name="nonSplitOffset"></param>
      <param name="splitOffset"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.Split(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams)">
      <summary>RenderFragment オブジェクトの分割を実行します。</summary>
      <param name="newFragment">分割の結果として作成された新しいフラグメント。</param>
      <param name="p">分割を記述する SplitParams オブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.IsShadowVisible">
      <summary>
        影が
        <see cref="T:C1.C1Preview.RenderFragment" />に表示される場合は
        <b>true</b>を返します。
      </summary>
      <returns>
        影が
        <see cref="T:C1.C1Preview.RenderFragment" />に表示される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.Clone">
      <summary>レンダーフラグメントのコピーを作成して返します。</summary>
      <returns>新しく作成されたオブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.AssignFrom(C1.C1Preview.RenderFragment)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.ResolvingFinished">
      <summary>このメソッドは、レンダーフラグメントが完全に解決された後で、レンダリングエンジンによって呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.InternalDrawShadow(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="graphics"></param>
      <param name="dp"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean,C1.C1Preview.PageDrawParams)">
      <summary>
        現在のフラグメントを指定した
        <see cref="T:System.Drawing.Graphics" />上に描画します。
      </summary>
      <param name="graphics">
        描画先の
        <see cref="T:System.Drawing.Graphics" />オブジェクト。
      </param>
      <param name="boundsPx">描画境界。</param>
      <param name="parentContentBoundsPx">親の境界。</param>
      <param name="renderChildren">
        子のフラグメントを描画する場合は
        <b>true</b>、無視する場合は
        <b>false</b>。
      </param>
      <param name="pdp">描画の追加パラメータを指定します。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        現在のフラグメントを指定した
        <see cref="T:System.Drawing.Graphics" />上に描画します。
      </summary>
      <param name="graphics">
        描画先の
        <see cref="T:System.Drawing.Graphics" />オブジェクト。
      </param>
      <param name="boundsPx">描画境界。</param>
      <param name="parentContentBoundsPx">親境界。</param>
      <param name="renderInputControls">
        入力コントロールを描画する場合は
        <b>true</b>（
        <see cref="T:C1.C1Preview.RenderInputBase" />を参照）、無視する場合は
        <b>false</b>。
      </param>
      <param name="renderChildren">
        子フラグメントを描画する場合は
        <b>true</b>、無視する場合は
        <b>false</b>。
      </param>
      <param name="writeMetafileComments">メタファイルコメント（アンカー、ハイパーリンクなどについての情報）をグラフィックスに書き込むかどうかを示します。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
      <summary>
        現在のフラグメントとその子を指定した
        <see cref="T:System.Drawing.Graphics" />上に描画します。
      </summary>
      <param name="graphics">
        描画先の
        <see cref="T:System.Drawing.Graphics" />オブジェクト。
      </param>
      <param name="parentContentBoundsPx">親の境界。</param>
      <param name="renderInputControls">
        入力コントロールを描画する（
        <see cref="T:C1.C1Preview.RenderInputBase" />を参照）場合は
        <b>true</b>、無視する場合は
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
      <summary>
        現在のフラグメントとその子を指定した
        <see cref="T:System.Drawing.Graphics" />上に描画します。
      </summary>
      <param name="graphics">
        描画先の
        <see cref="T:System.Drawing.Graphics" />オブジェクト。
      </param>
      <param name="parentContentBoundsPx">親境界。</param>
      <param name="renderInputControls">
        入力コントロールを描画する場合は
        <b>true</b>（
        <see cref="T:C1.C1Preview.RenderInputBase" />を参照）、無視する場合は
        <b>false</b>。
      </param>
      <param name="writeMetafileComments">
        アンカー、ハイパーリンクなどを含むメタファイルコメントを書き込む場合は
        <b>true</b>。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.Draw(System.Drawing.Graphics,System.Boolean)">
      <summary>
        現在のフラグメントとその子を指定した
        <see cref="T:System.Drawing.Graphics" />上に描画します。
      </summary>
      <param name="graphics">
        描画先の
        <see cref="T:System.Drawing.Graphics" />オブジェクト。
      </param>
      <param name="renderInputControls">
        入力コントロールを描画する（
        <see cref="T:C1.C1Preview.RenderInputBase" />を参照）場合は
        <b>true</b>、無視する場合は
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetAnchorRect(C1.C1Preview.C1Anchor,C1.C1Preview.RectangleD@,System.Boolean@)">
      <summary>
        現在のフラグメントを生成した描画オブジェクトの
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションに含まれた
        <see cref="T:C1.C1Preview.C1Anchor" />の位置を計算します。
      </summary>
      <param name="anchor">
        取得する位置の
        <see cref="T:C1.C1Preview.C1Anchor" />オブジェクト。
      </param>
      <param name="anchorRect">
        出力：フラグメント内の
        <paramref name="anchor" />の境界（
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位）。 （メソッドのリターン時に
        <paramref name="anchorVisible" />が
        <b>true</b>の場合にのみこのパラメータが有効値として割り当てられることに注意してください。）
      </param>
      <param name="anchorVisible">
        出力：
        <paramref name="anchor" />が現在のフラグメント内に発生する場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.FindHyperlink(C1.C1Preview.PointD)">
      <summary>
        現在のフラグメント内の指定した位置の
        <see cref="T:C1.C1Preview.C1Hyperlink" />オブジェクトを検索します。
      </summary>
      <param name="pt">フラグメントの左上隅に相対的な現在のフラグメント内のポイントを指定します。</param>
      <returns>
        見つかった
        <see cref="T:C1.C1Preview.C1Hyperlink" />を記述する
        <see cref="T:C1.C1Preview.C1HyperlinkInfo" />オブジェクト。何も見つからなかった場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.GetHyperlinks(C1.C1Preview.C1HyperlinkInfoCollection)">
      <summary>
        現在のフラグメントに表示されるすべてのハイパーリンクに関する情報を
        <see cref="T:C1.C1Preview.C1HyperlinkInfoCollection" />に追加します。
      </summary>
      <param name="hyperlinks">
        現在のフラグメント内のハイパーリンクに関するデータの追加先となる
        <see cref="T:C1.C1Preview.C1HyperlinkInfo" />オブジェクトのコレクション。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderFragment.HasClippedChildren(System.Boolean)">
      <summary>
        現在のフラグメントの任意の子フラグメントがその境界によって クリップされるかどうかを調べます。
        <paramref name="recursive" />パラメータに応じて、 すべての子フラグメントを再帰的にテストすることもできます。
      </summary>
      <param name="recursive">
        <b>true</b>の場合、このメソッドはすべての子フラグメントに再帰的に呼び出されます。
        <b>false</b>の場合、現在のフラグメントの直接の子のみが テストされます。
      </param>
      <returns>
        任意の子がフラグメントの境界によってクリップされる場合は
        <b>true</b>、 その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.ChildrenAlwaysCanSplitHorz">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.ChildrenAlwaysCanSplitVert">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.TableFragment">
      <summary>
        現在のフラグメントを含む最もネストした
        <see cref="T:C1.C1Preview.RenderTableFragment" />を取得します。 現在のオブジェクトがテーブルに含まれない場合は
        <b>null</b>です。
      </summary>
      <seealso cref="P:C1.C1Preview.RenderFragment.TableRowOnPage" />
      <seealso cref="P:C1.C1Preview.RenderFragment.TableColOnPage" />
    </member>
    <member name="P:C1.C1Preview.RenderFragment.TableRowOnPage">
      <summary>
        現在の描画オブジェクトを含む最もネストした
        <see cref="T:C1.C1Preview.RenderTableFragment" />内の行の ０から始まるインデックス（すなわち、現在のページ上の行インデックス）を取得します。 現在のオブジェクトがテーブルに含まれていない場合は
        <b>-1</b>です。
      </summary>
      <seealso cref="P:C1.C1Preview.RenderFragment.TableFragment" />
      <seealso cref="P:C1.C1Preview.RenderFragment.TableColOnPage" />
    </member>
    <member name="P:C1.C1Preview.RenderFragment.TableColOnPage">
      <summary>
        現在の描画オブジェクトを含む最もネストした
        <see cref="T:C1.C1Preview.RenderTableFragment" />内の列の ０から始まるインデックス（すなわち、現在のページ上の列インデックス）を取得します。 現在のオブジェクトがテーブルに含まれていない場合は
        <b>-1</b>です。
      </summary>
      <seealso cref="P:C1.C1Preview.RenderFragment.TableFragment" />
      <seealso cref="P:C1.C1Preview.RenderFragment.TableRowOnPage" />
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Page">
      <summary>現在のフラグメントを含むページを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.PageIndex">
      <summary>
        現在のフラグメントを含む
        <see cref="T:C1.C1Preview.C1Page" />の０から始まるインデックスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.ColumnIndex">
      <summary>
        現在のフラグメントを含むページ上の列の０から始まるインデックスを取得します。 デフォルトの単一列ページレイアウトの場合、このプロパティの値は
        <b>0</b>です。 現在のフラグメントがページヘッダーまたはフッターに属している場合、この値は
        <b>-1</b>です （
        <see cref="P:C1.C1Preview.RenderFragment.IsInPageHeader" />と
        <see cref="P:C1.C1Preview.RenderFragment.IsInPageFooter" />を参照）。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.IsInPageHeader">
      <summary>現在のフラグメントがページヘッダーに属しているかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.IsInPageFooter">
      <summary>現在のフラグメントがページフッターに属しているかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Bounds">
      <summary>親オブジェクト内のオブジェクトの四角形を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.InnerBounds">
      <summary>オブジェクトのコンテンツ領域の四角形を取得します（間隔、境界線、パディングを含まない）。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.BoundsOnPage">
      <summary>ページ内のオブジェクトの境界を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.InnerBoundsOnPage">
      <summary>ページ内のオブジェクトの内側領域の境界を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Document">
      <summary>このオブジェクトを含む C1PrintDocument オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.RenderObject">
      <summary>このオブジェクトを生成した RenderObject オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Parent">
      <summary>親の RenderFragment オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.TopParent">
      <summary>最上位の親の RenderFragment オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Visible">
      <summary>フラグメントが表示されるかどうかを示します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.IndexInRenderObject">
      <summary>所有者 RenderObject オブジェクト内のフラグメントのインデックスを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.IndexInParent">
      <summary>親オブジェクト内のフラグメントのインデックスを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Level">
      <summary>親オブジェクト内の RenderFragment のレベルを取得します。</summary>
      <seealso cref="P:C1.C1Preview.RenderFragment.Parent" />
    </member>
    <member name="P:C1.C1Preview.RenderFragment.HasChildren">
      <summary>フラグメントに子フラグメントがある場合は true を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.Children">
      <summary>子オブジェクトのコレクションを取得します。</summary>
      <remarks>
        このプロパティは常に非
        <b>null</b>のフラグメントコレクションを、 まだ初期化されていない場合は初期化して返します。
        <see cref="P:C1.C1Preview.RenderFragment.HasChildren" />を使って、
        <see cref="P:C1.C1Preview.RenderFragment.Children" />を初期化せずに子が存在するかどうかをテストします。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.ClipParent">
      <summary>親オブジェクトが表示領域で切り取って表示されるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.ContentBoundsOnPage">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderFragment.DrawBoundsOnPage">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.RenderRdlChartFragment.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="P:C1.C1Rdl.Rdl2008.RenderRdlChartFragment.RenderObject" />にリンクされた新しい空の
        <see cref="T:C1.C1Rdl.Rdl2008.RenderRdlChartFragment" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Rdl.Rdl2008.RenderRdlChartFragment" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.RenderRdlChartFragment.GetDrawingFlags(System.Boolean)">
      <summary>これは内部使用専用です。</summary>
      <param name="renderInputControls"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.RenderRdlChartFragment.InternalDraw(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="graphics"></param>
      <param name="drawParams"></param>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DataElementOutput">
      <summary>データ要素の出力タイプを表します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.DataElementOutput.Auto">
      <summary>
        Hidden に（式ではない）true が設定され、 ToggleItem のないすべてのレポート項目、および Hidden に式でない true を設定することでトグルできない静的 Tablix メンバ内のすべてのレポート項目に対して
        <see cref="F:C1.C1Rdl.Rdl2008.DataElementOutput.NoOutput" />として動作します。 それ以外の場合、定数の TextRun を持つ Textboxes に対しては NoOutput として、 Rectangles に対しては ContentsOnly として、 その他すべての項目に対しては Output として動作します。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.DataElementOutput.Output">
      <summary>項目を出力することを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.DataElementOutput.NoOutput">
      <summary>項目を出力しないことを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.DataElementOutput.ContentsOnly">
      <summary>項目が XML には現れないが、 その内容が項目のコンテナ内に存在するかのように描画することを示します。 Rectangles にのみ適用されます。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ReportItem">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Textbox" />、
        <see cref="T:C1.C1Rdl.Rdl2008.Rectangle" />などの焼オブジェクトの抽象基本クラス。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItem.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItem.ScriptHostOwnerGetChildren(System.Collections.Generic.List{C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner})">
      <summary>これは内部使用専用です。</summary>
      <param name="children"></param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItem.ScriptHostOwnerSetHost(C1.C1Rdl.Rdl2008.Scripting.ExpressionHostBase)">
      <summary>これは内部使用専用です。</summary>
      <param name="host"></param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItem.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ReportElement" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.ScriptContextHostType">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Doc">
      <summary>
        生成されたドキュメントを含む
        <see cref="T:C1.C1Preview.C1PrintDocument" />オブジェクトを取得します。 このプロパティは、レポート生成時にのみ使用できます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Report">
      <summary>
        現在のオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Name">
      <summary>現在のレポート項目の名前を取得または設定します。 空の名前は使えません。また、レポート内で一意である必要があります。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.ActionInfo">
      <summary>
        現在のオブジェクトに関連付けられているアクション（ハイパーリンクなど）を含む
        <see cref="P:C1.C1Rdl.Rdl2008.ReportItem.ActionInfo" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Top">
      <summary>
        コンテナオブジェクトの上から現在の項目までの距離を取得または設定します。
        <para>デフォルトは０です。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Left">
      <summary>
        コンテナオブジェクトの左から現在の項目までの距離を取得または設定します。
        <para>デフォルトは０です。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Width">
      <summary>
        現在の項目の幅を取得または設定します。 負のサイズは、線の場合のみ使用できます（高さ／幅は線の始点から末端までのオフセットです）。
        <para>
          デフォルトは null です。コンテナオブジェクトの幅から
          <see cref="P:C1.C1Rdl.Rdl2008.ReportItem.Left" />を引いた値になります。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Height">
      <summary>
        現在の項目の高さを取得または設定します。 負のサイズは、線の場合のみ使用できます（高さ／幅は線の始点から末端までのオフセットです）。
        <para>
          デフォルトは null です。コンテナオブジェクトの高さから
          <see cref="P:C1.C1Rdl.Rdl2008.ReportItem.Top" />を引いた値になります。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Right">
      <summary>現在のオブジェクトの右座標を取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Bottom">
      <summary>現在のオブジェクトの下部座標を取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.ZIndex">
      <summary>
        現在のレポート項目のコンテナオブジェクト内での描画順序を取得または設定します。 インデックスの小さい項目から先に描画されます（インデックスの大きい項目の背後に表示されます）。 複数の項目のインデックスが等しい場合、描画順序は無指定になります。
        <para>既定値：０。最小値０。最大値：2147483647。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Visibility">
      <summary>
        現在の項目を非表示にするかどうかを示す
        <see cref="P:C1.C1Rdl.Rdl2008.ReportItem.Visibility" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.ToolTip">
      <summary>現在のレポート項目のテキストラベルを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.DocumentMapLabel">
      <summary>クライアント UI 内で現在のレポート項目のインスタンスを識別するラベルを取得または設定します （検索用にユーザーフレンドリーなラベルを提供するため）。 UI（ドキュメントマップ）内のレポート項目とグループラベルの階層リストは、 レポート定義のオブジェクト格納階層を反映している必要があります。 同階層の項目は、左から右、上から下の順番でリストされます。 式が null を返した場合、 ドキュメントマップに項目は追加されません。 ページヘッダーまたはフッターのレポート項目には使用しないでください。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.Bookmark">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.Action.BookmarkLink" />アクションを通じてリンク可能なブックマークを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.RepeatWith">
      <summary>データ領域が複数のページにまたがる場合に、 このレポート項目が繰り返されるそのデータ領域の名前を取得または設定します。 データ領域は、 この ReportItem と同じ ReportItems コレクション内に格納されている必要があります（データ領域はページヘッダー／フッターに格納できないため。 つまり、RepeatWith はページヘッダー／フッターでは使用できません）。 このレポート項目が、 データ領域またはサブレポートを含むデータ領域、サブレポート、矩形の場合は使用できません。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.CustomProperties">
      <summary>
        現在のレポート項目に関するカスタム情報を含む
        <see cref="P:C1.C1Rdl.Rdl2008.ReportItem.CustomProperties" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.DataElementName">
      <summary>このレポート項目のデータ要素／属性に使用する名前を取得または設定します。 既定値： レポート項目の名前。 CLS 準拠の識別子にする必要があります。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItem.DataElementOutput">
      <summary>データを描画する際に現在の項目が表示されるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ReportItems">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItems.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItems" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItems.OnClear">
      <summary>コレクションがクリアされようとするときに呼び出されます。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItems.OnRemoveComplete(System.Int32,System.Object)">
      <summary>項目が削除された後に呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItems.OnSet(System.Int32,System.Object,System.Object)">
      <summary>項目が設定されようとするときに呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="oldValue">古い項目。</param>
      <param name="newValue">新しい項目。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItems.OnInsert(System.Int32,System.Object)">
      <summary>項目が挿入されようとするときに呼び出されます。</summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItems.GetItemType">
      <summary>
        typeof(
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />) を返します。
      </summary>
      <returns>
        typeof(
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />)。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItems.Add(C1.C1Rdl.Rdl2008.ReportItem)">
      <summary>
        指定された
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />を現在のコレクションに追加します。
      </summary>
      <param name="item">追加するオブジェクト。</param>
      <returns>現在のコレクションに新しく追加されたオブジェクトのインデックス。</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItems.Remove(C1.C1Rdl.Rdl2008.ReportItem)">
      <summary>
        指定した
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />を現在のコレクションから削除します。
      </summary>
      <param name="item">削除するオブジェクト。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItems.Insert(System.Int32,C1.C1Rdl.Rdl2008.ReportItem)">
      <summary>
        指定した
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />を現在のコレクションに挿入します。
      </summary>
      <param name="index">オブジェクトの挿入先のインデックス。</param>
      <param name="item">挿入するオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItems.Report">
      <summary>
        このコレクションを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItems.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ReportItemList">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />オブジェクトの単純なリストを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItemList.IndexByName(System.String)">
      <summary>
        現在のコレクションから指定した
        <see cref="P:C1.C1Rdl.Rdl2008.ReportItem.Name" />のオブジェクトを検索します。
      </summary>
      <param name="name">検索する名前。</param>
      <returns>現在のコレクション内のオブジェクトのインデックス。オブジェクトが見つからなかった場合は -1。</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportItemList.IndexOf(C1.C1Rdl.Rdl2008.ReportItem)">
      <summary>
        現在のコレクション内の
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />のインデックスを取得します。
      </summary>
      <param name="ri">検索する項目。</param>
      <returns>
        <paramref name="ri" />のインデックス。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportItemList.Item(System.Int32)">
      <summary>
        指定したインデックスの
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAxisTitlePosition">
      <summary>軸に対するタイトルの可能な位置を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisTitlePosition.Center">
      <summary>軸の中央にタイトルを配置します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisTitlePosition.Near">
      <summary>軸の手前側にタイトルを配置します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisTitlePosition.Far">
      <summary>軸の奥側にタイトルを配置します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAxisTitle">
      <summary>軸のタイトルを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAxisTitle.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAxisTitle" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAxisTitle.AssignFrom(C1.C1Rdl.Rdl2008.ChartAxisTitle)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAxisTitle" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisTitle.Caption">
      <summary>タイトルのキャプションを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisTitle.Position">
      <summary>
        軸に対するタイトルの位置を取得または設定します。
        <para>既定値：Center。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisTitle.TextOrientation">
      <summary>
        テキストの向きを取得または設定します。
        <para>既定値：Auto。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisTitle.Style">
      <summary>
        タイトルのスタイルプロパティを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartAxisTitle.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartBreakLineType">
      <summary>スケール区切りの表示に使用する線のタイプを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBreakLineType.Ragged">
      <summary>ゴツゴツした線として表示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBreakLineType.Straight">
      <summary>直線として表示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBreakLineType.Wave">
      <summary>波線として表示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBreakLineType.None">
      <summary>スケール区切りの線を表示しません。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak">
      <summary>スケール区切り動作と軸のスタイルを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.AssignFrom(C1.C1Rdl.Rdl2008.ChartAxisScaleBreak)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.Enabled">
      <summary>
        スケール区切りを自動的に適用するかどうかを示す値を取得または設定します。
        <para>既定値：false。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.BreakLineType">
      <summary>スケール区切りの表示に使用される線のタイプを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.CollapsibleSpaceThreshold">
      <summary>
        スケール区切りがトリガーされるまでに許される空きスペースの割合を取得または設定します。
        <para>０より大きい値にする必要があります。 既定値：25。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.MaxNumberOfBreaks">
      <summary>
        スケール区切りの最大適用数を取得または設定します。
        <para>既定値：2。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.Spacing">
      <summary>
        スケール区切りのために残しておくスペースを取得または設定します。 グラフサイズに対する割合として表します。
        <para>既定値：1.5。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.IncludeZero">
      <summary>
        スケール区切りがゼロにかからないようにするかどうかを示す値を取得または設定します。
        <para>既定値：Auto。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.Style">
      <summary>
        スケール区切りのスタイルプロパティを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAxisIntervalType">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" />で使用する単位を示します。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Default">
      <summary>デフォルトの間隔が使用されます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Auto">
      <summary>間隔の単位は軸にプロットされるデータに基づいて自動的に設定されます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Number">
      <summary>間隔は数値です。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Years">
      <summary>間隔は年です。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Months">
      <summary>間隔は月です。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Weeks">
      <summary>間隔は週です。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Days">
      <summary>間隔は日数です。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Hours">
      <summary>間隔は時間です。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Minutes">
      <summary>間隔は分です。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Seconds">
      <summary>間隔は秒です。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Milliseconds">
      <summary>間隔はミリ秒です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartGridLines">
      <summary>軸のグリッド線を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartGridLines.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartGridLines.AssignFrom(C1.C1Rdl.Rdl2008.ChartGridLines)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartGridLines" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartGridLines.Enabled">
      <summary>
        グリッド線を表示するかどうかを示す値を取得または設定します。
        <para>デフォルトは Auto です。この設定では主要グリッド線が true、補助グリッド線が false になります。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartGridLines.Interval">
      <summary>
        グリッド線の間隔を取得または設定します。
        <para>
          デフォルトの０では
          <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.Interval" />が使用されます。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartGridLines.IntervalType">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartGridLines.Interval" />の単位を取得または設定します。
        <para>
          既定値：
          <see cref="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Default" />。 この場合
          <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalType" />が使用されます。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartGridLines.IntervalOffset">
      <summary>
        軸の最小値から最初のグリッド線までのオフセットを取得または設定します。
        <para>
          デフォルトの０では
          <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalOffset" />が使用されます。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartGridLines.IntervalOffsetType">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartGridLines.IntervalOffset" />の単位を取得または設定します。
        <para>
          既定値：
          <see cref="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Default" />。 この場合
          <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalOffsetType" />が使用されます。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartGridLines.Style">
      <summary>
        グリッド線のスタイルを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartGridLines.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartTickMarksType">
      <summary>目盛記号のタイプを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTickMarksType.Outside">
      <summary>目盛記号は軸の外側です。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTickMarksType.Inside">
      <summary>目盛記号は軸の内側です。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTickMarksType.Cross">
      <summary>目盛記号は軸と交差します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTickMarksType.None">
      <summary>目盛記号なし。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartTickMarks">
      <summary>軸の目盛記号を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartTickMarks.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartTickMarks" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartTickMarks.AssignFrom(C1.C1Rdl.Rdl2008.ChartTickMarks)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartTickMarks" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTickMarks.Enabled">
      <summary>
        目盛記号を表示するかどうかを示す値を取得または設定します。
        <para>既定値： Auto。主目盛記号については true、補助目盛記号については false になります。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTickMarks.Type">
      <summary>目盛記号のタイプを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTickMarks.Style">
      <summary>
        目盛記号の線スタイルを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartTickMarks.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTickMarks.Length">
      <summary>
        目盛記号の長さをグラフサイズに対する割合として表した値を取得または設定します。
        <para>既定値：１。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTickMarks.Interval">
      <summary>
        目盛記号間の間隔を取得または設定します。
        <para>
          デフォルトの０では
          <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.Interval" />が使用されます。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTickMarks.IntervalType">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartTickMarks.Interval" />の単位を取得または設定します。
        <para>
          既定値：
          <see cref="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Default" />。 この場合
          <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalType" />を意味します。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTickMarks.IntervalOffset">
      <summary>
        軸の最小値から最初の目盛記号までのオフセットを取得または設定します。
        <para>
          デフォルトの０では
          <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalOffset" />が使用されます。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTickMarks.IntervalOffsetType">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartTickMarks.IntervalOffset" />の単位を取得または設定します。
        <para>
          既定値：
          <see cref="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Default" />。 この場合
          <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalOffsetType" />を意味します。
        </para>
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAxisLocation">
      <summary>軸どちら側に描画するかを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisLocation.Default">
      <summary>軸をデフォルトの側に描画します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisLocation.Opposite">
      <summary>軸を反対側に描画します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartStripLine">
      <summary>軸のカスタムストリップラインを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartStripLine.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartStripLine" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartStripLine.AssignFrom(C1.C1Rdl.Rdl2008.ChartStripLine)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartStripLine" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.Owner">
      <summary>
        現在のオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.ChartStripLines" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.Title">
      <summary>ストリップラインのタイトルを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.TextOrientation">
      <summary>タイトルテキストの向きを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.Style">
      <summary>
        目盛記号のスタイルプロパティを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartStripLine.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.ActionInfo">
      <summary>
        ストリップラインのアクションを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartStripLine.ActionInfo" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.ToolTip">
      <summary>ストリップラインに表示するツールチップを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.Interval">
      <summary>
        ストリップラインのサイズを取得または設定します。
        <para>既定値：０。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.IntervalType">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartStripLine.Interval" />の単位を取得または設定します。
        <para>既定値：Auto。 間隔の単位は軸にプロットされるデータに基づいて自動的に設定されます。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.IntervalOffset">
      <summary>
        前のストリップラインまたは軸の最小値（１本目のストリップラインの場合）からのオフセットを取得または設定します。
        <para>既定値：０。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.IntervalOffsetType">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartStripLine.IntervalOffset" />の単位を取得または設定します。
        <para>
          既定値：
          <see cref="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Auto" />。 単位は軸にプロットされるデータに基づいて自動的に設定されます。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.StripWidth">
      <summary>
        ストリップラインの幅を取得または設定します。
        <para>既定値：０。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLine.StripWidthType">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartStripLine.StripWidth" />の単位を取得または設定します。
        <para>
          既定値：
          <see cref="F:C1.C1Rdl.Rdl2008.ChartAxisIntervalType.Auto" />。 単位は軸にプロットされるデータに基づいて自動的に設定されます。
        </para>
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartStripLines">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartStripLine" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartStripLines.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartStripLines" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartStripLines.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartStripLine" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLines.Owner">
      <summary>
        このコレクションを所有している
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartStripLines.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartStripLine" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAxisArrows">
      <summary>軸ラベルの矢印のタイプを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisArrows.None">
      <summary>矢印なし。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisArrows.Triangle">
      <summary>三角形の矢印。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisArrows.SharpTriangle">
      <summary>鋭い三角形の矢印。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAxisArrows.Lines">
      <summary>線のみ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAllowLabelRotation">
      <summary>グラフ内に収まるように 軸ラベルを徐々に回転させるステップを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAllowLabelRotation.Rotate90">
      <summary>90°単位で回転します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAllowLabelRotation.Rotate30">
      <summary>30°単位で回転します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAllowLabelRotation.Rotate45">
      <summary>45°単位で回転します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAllowLabelRotation.None">
      <summary>回転を許可しません。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAxis">
      <summary>軸に付随するラベル、タイトル、およびグリッド線のプロパティを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAxis.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAxis.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Visible">
      <summary>
        軸が表示されるかどうかを示す値を取得または設定します。
        <para>
          既定値：
          <see cref="F:C1.C1Rdl.TriState.Auto" />。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Style">
      <summary>
        軸ラベルのテキストスタイルプロパティと軸線の線スタイルプロパティを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Title">
      <summary>
        軸のタイトルを定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAxisTitle" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Margin">
      <summary>
        軸マージンを作成するかどうかを示す値を取得または設定します。 マージンのサイズはデータポイントのスケールと数に基づいて 自動的に生成されます。
        <para>
          既定値：
          <see cref="F:C1.C1Rdl.TriState.Auto" />。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Interval">
      <summary>
        グリッド線、目盛記号、およびラベルの間のデフォルト間隔を取得または設定します。
        <para>デフォルトの０は軸が自動分割されることを意味します。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalType">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.Interval" />のデフォルト単位を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalOffset">
      <summary>
        軸の最小値から最初の目盛記号までのデフォルトオフセットを取得または設定します。
        <para>既定値：0。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalOffsetType">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalOffset" />のデフォルト単位を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.VariableAutoInterval">
      <summary>自動間隔を計算する場合に、 利用可能サイズに基づいて計算するかどうかを示す値を取得または設定します。 利用サイズに基づかない場合、間隔はデータ範囲のみに基づいて計算されます。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.LabelInterval">
      <summary>
        ラベル間の間隔を取得または設定します。
        <para>
          デフォルトの０では
          <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.Interval" />が使用されます。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.LabelIntervalType">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.LabelInterval" />の単位を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.LabelIntervalOffset">
      <summary>
        軸の最小値から最初のラベルまでのオフセットを取得または設定します。
        <para>
          デフォルトの０では
          <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.IntervalOffset" />が使用されます。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.LabelIntervalOffsetType">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.LabelIntervalOffset" />の単位を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.MajorGridLines">
      <summary>
        この軸に主要グリッド線をどのように表示するかを定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartGridLines" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.MinorGridLines">
      <summary>
        この軸に補助グリッド線をどのように表示するかを定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartGridLines" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.MajorTickMarks">
      <summary>
        軸の主要目盛記号を定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartTickMarks" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.MinorTickMarks">
      <summary>
        軸の補助目盛記号を定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartTickMarks" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.MarksAlwaysAtPlotEdge">
      <summary>
        記号を軸に合わせて移動せずプロット領域の縁に固定するかどうかを示す値を 取得または設定します。
        <para>既定値：false。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Reverse">
      <summary>
        軸を逆方向にプロットするかどうかを示す値を取得または設定します。
        <para>既定値：false。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.CrossAt">
      <summary>
        他方の軸と交差する値（
        <b>double</b>または
        <b>DateTime</b>型に評価されます)を取得または設定します。 null の場合（または式にエラーがある場合）、グラフタイプのデフォルト動作が使用されます。
        <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.Location" />をオーバーライドします。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Location">
      <summary>軸をデフォルトの側 （線グラフの値軸は左など）に描画するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Interlaced">
      <summary>
        このプロパティが true の場合、軸のグリッド線１本おきにストリップラインが引かれます。 軸にグリッド線が使用されない場合、 軸の目盛記号またはラベルを使用してインタレースストリップラインの間隔が決定されます。
        <para>既定値：false。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.InterlacedColor">
      <summary>インタレースストリップの色を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.StripLines">
      <summary>
        軸のカスタムストリップラインを定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartStripLines" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Arrows">
      <summary>
        軸ラベルの矢印のタイプを取得または設定します。
        <para>既定値：None。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Scalar">
      <summary>この軸の値がグラフに連続値として表示するスカラー値 （数値や日付）かどうかを示す値を取得または設定します。 軸に複数のグループ、静的なグループ、または複数のグループ式を持つグループがある場合は Scalar を true に設定することはできません。 スカラーのタイプ（日付、整数、浮動小数点）は 最初に見つかった非 null 値の派生クラスになります。 すべての値はそのタイプに変換されます。 非スカラー値が存在する場合、軸は非スカラーに戻ります。 これが ChartCategoryAxis である場合と、 この軸にプロットされた ChartSeries に ChartDataPointValues.X の定義された ChartDataPoint が含まれる場合は true として扱われます。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Minimum">
      <summary>軸の最小値を取得または設定します。 null（デフォルト）の場合または式にエラーが含まれる場合は自動的に調整されます。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Maximum">
      <summary>軸の最大値を取得または設定します。 null（デフォルト）の場合または式にエラーが含まれる場合は自動的に調整されます。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.LogScale">
      <summary>
        軸が対数かどうかを示す値を取得または設定します。
        <para>既定値：false。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.LogBase">
      <summary>
        対数目盛に使用する底を取得または設定します。
        <para>既定値：10。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.HideLabels">
      <summary>軸ラベルが非表示かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.Angle">
      <summary>
        軸ラベルを表示する角度を取得または設定します。 有効範囲は -90～90 の整数です。
        <para>既定値：0。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.PreventFontShrink">
      <summary>
        グラフの大きさに合わせて軸ラベルのフォントサイズを小さくすることを禁止するかどうかを示す値を 取得または設定します。
        <para>既定値：false。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.PreventFontGrow">
      <summary>
        グラフの大きさに合わせて軸ラベルのフォントサイズを大きくすることを禁止するかどうかを示す値を 取得または設定します。
        <para>既定値：false。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.PreventLabelOffset">
      <summary>グラフ内のスペースに合わせて軸ラベルを互い違いにずらすことを禁止するかどうかを示す値を 取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.PreventWordWrap">
      <summary>グラフ内のスペースに合わせて軸ラベルを折り返すことを禁止するかどうかを示す値を 取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.AllowLabelRotation">
      <summary>
        グラフ内に収まるように軸ラベルを徐々に回転させるステップを取得または設定します。
        <para>
          既定値：
          <see cref="F:C1.C1Rdl.Rdl2008.ChartAllowLabelRotation.Rotate90" />。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.IncludeZero">
      <summary>
        軸に常にゼロを含めるかどうかを示す値を取得または設定します。 Minimum が設定されている場合は無視されます。
        <para>既定値：true。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.LabelsAutoFitDisabled">
      <summary>
        軸ラベルを自動的に調整しないかどうかを示す値を取得または設定します。
        <para>既定値：false。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.MinFontSize">
      <summary>
        ラベルの大きさを自動調整するときの最小フォントサイズを取得または設定します。
        <para>既定値：６pt。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.MaxFontSize">
      <summary>
        ラベルの大きさを自動調整するときの最小フォントサイズを取得または設定します。
        <para>既定値：10pt。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.OffsetLabels">
      <summary>
        ラベルをオフセットするかどうかを示す値を取得または設定します。
        <para>既定値：false。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.HideEndLabels">
      <summary>
        軸の端でラベルを非表示にするかどうかを示す値を取得または設定します。
        <para>既定値：false。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.ScaleBreak">
      <summary>
        軸のスケール区切り動作を定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAxisScaleBreak" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxis.CustomProperties">
      <summary>
        軸のカスタムプロパティを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartAxis.CustomProperties" />コレクションを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAxes">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAxes.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAxes" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAxes.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" />タイプ。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAxes.FindByName(System.String)">
      <summary>
        指定された名前の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" />を検索します。
      </summary>
      <param name="name">検索する軸の名前。</param>
      <returns>指定された項目。</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxes.HasPrimaryAxis">
      <summary>Primary という名前の軸がコレクション内に存在するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxes.PrimaryAxis">
      <summary>
        主軸を表す
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxes.HasSecondaryAxis">
      <summary>Secondary という名前の軸がコレクション内に存在するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxes.SecondaryAxis">
      <summary>
        第２軸を表す
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAxes.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAxis" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartTreeDProjectionMode">
      <summary>3D 描画に使用する投影モードを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTreeDProjectionMode.Oblique">
      <summary>斜投影を使用します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTreeDProjectionMode.Perspective">
      <summary>透視投影を使用します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartTreeDShading">
      <summary>3D 陰影のタイプを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTreeDShading.Real">
      <summary>写実的陰影。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTreeDShading.Simple">
      <summary>簡略陰影。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTreeDShading.None">
      <summary>陰影なし。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartThreeDProperties">
      <summary>3D レイアウトのプロパティを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartThreeDProperties.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartThreeDProperties" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartThreeDProperties.AssignFrom(C1.C1Rdl.Rdl2008.ChartThreeDProperties)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartThreeDProperties" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.Enabled">
      <summary>
        グラフが 3D 表示されるかどうかを示す値を取得または設定します。
        <para>既定値：false（2D）。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.ProjectionMode">
      <summary>
        3D 描画に使用する投影モードを取得または設定します。
        <para>
          既定値：
          <see cref="F:C1.C1Rdl.Rdl2008.ChartTreeDProjectionMode.Oblique" />。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.Perspective">
      <summary>
        パース比率を取得または設定します。 透視投影が使用される場合（
        <see cref="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.ProjectionMode" />が
        <see cref="F:C1.C1Rdl.Rdl2008.ChartTreeDProjectionMode.Perspective" />の場合）のみ適用されます。
        <para>既定値：０。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.Rotation">
      <summary>
        回転角を取得または設定します。
        <para>既定値：30。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.Inclination">
      <summary>
        傾斜角を取得または設定します。
        <para>既定値：30。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.DepthRatio">
      <summary>
        奥行と幅の比率（パーセント）を取得または設定します。
        <para>既定値：100。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.Shading">
      <summary>
        3D 陰影のタイプを取得または設定します。
        <para>
          既定値：
          <see cref="F:C1.C1Rdl.Rdl2008.ChartTreeDShading.Real" />。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.GapDepth">
      <summary>
        3D の棒と棒の間の奥行ギャップを取得または設定します（パーセント単位）。
        <para>既定値：100。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.WallThickness">
      <summary>
        外壁の厚みをパーセントで取得または設定します。
        <para>既定値：７。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartThreeDProperties.Clustered">
      <summary>
        複数のデータ系列をまとめるかどうかを示す値を取得または設定します（独立した行に表示）。 横棒グラフタイプと縦棒グラフタイプにのみ適用されます。
        <para>既定値：false。</para>
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAlignOrientation">
      <summary>グラフ領域をターゲットグラフ領域に配置する向きを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAlignOrientation.None">
      <summary>揃えません。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAlignOrientation.Vertical">
      <summary>縦方向に揃えます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAlignOrientation.Horizontal">
      <summary>横方向に揃えます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAlignOrientation.All">
      <summary>縦横両方を揃えます。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartElementPosition">
      <summary>グラフ要素を描画する位置を定義します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartElementPosition.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartElementPosition" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartElementPosition.#ctor(C1.C1Rdl.RdlFloat,C1.C1Rdl.RdlFloat,C1.C1Rdl.RdlFloat,C1.C1Rdl.RdlFloat)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartElementPosition" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="left">
        <see cref="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Left" />プロパティに割り当てる値。
      </param>
      <param name="top">
        <see cref="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Top" />プロパティに割り当てる値。
      </param>
      <param name="width">
        <see cref="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Width" />プロパティに割り当てる値。
      </param>
      <param name="height">
        <see cref="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Height" />プロパティに割り当てる値。
      </param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartElementPosition.AssignFrom(C1.C1Rdl.Rdl2008.ChartElementPosition)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartElementPosition" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Top">
      <summary>
        コンテナオブジェクトの上端から項目までの距離を コンテナのサイズに対する割合として表した値を取得または設定します。
        <para>デフォルトは０です。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Left">
      <summary>
        コンテナオブジェクトの左端から項目までの距離を コンテナのサイズに対する割合として表した値を取得または設定します。
        <para>デフォルトは０です。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Width">
      <summary>
        項目の幅をコンテナオブジェクトのサイズに対する割合として表した値を取得または設定します。
        <para>
          null（デフォルト）に設定した場合、100 から
          <see cref="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Left" />を引いた値が使用されます。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Height">
      <summary>
        項目の高さをコンテナオブジェクトのサイズに対する割合として表した値を取得または設定します。
        <para>
          null（デフォルト）に設定した場合、100 から
          <see cref="P:C1.C1Rdl.Rdl2008.ChartElementPosition.Top" />を引いた値が使用されます。
        </para>
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAlignType">
      <summary>ターゲットグラフ領域と揃えるグラフ領域の要素を決定するプロパティを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAlignType.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAlignType" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAlignType.AssignFrom(C1.C1Rdl.Rdl2008.ChartAlignType)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAlignType" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAlignType.AxesView">
      <summary>グラフ領域を軸ビューに揃えるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAlignType.Cursor">
      <summary>グラフ領域をカーソルに揃えるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAlignType.Position">
      <summary>グラフ領域をグラフ領域位置に揃えるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAlignType.InnerPlotPosition">
      <summary>グラフ領域を内側のプロット位置に揃えるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartBorderSkinType">
      <summary>グラフの枠線スキンタイプを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.None">
      <summary>枠線スキンなし。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.Emboss">
      <summary>Emboss 枠線スキン。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.Raised">
      <summary>Raised 枠線スキン。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.Sunken">
      <summary>Sunken 枠線スキン。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameThin1">
      <summary>FrameThin1 枠線スキン。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameThin2">
      <summary>FrameThin2 枠線スキン。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameThin3">
      <summary>FrameThin3 枠線スキン。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameThin4">
      <summary>FrameThin4 枠線スキン。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameThin5">
      <summary>FrameThin5 枠線スキン。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameThin6">
      <summary>FrameThin6 枠線スキン。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameTitle1">
      <summary>FrameTitle1 枠線スキン。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameTitle2">
      <summary>FrameTitle2 枠線スキン。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameTitle3">
      <summary>FrameTitle3 枠線スキン。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameTitle4">
      <summary>FrameTitle4 枠線スキン。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameTitle5">
      <summary>FrameTitle5 枠線スキン。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameTitle6">
      <summary>FrameTitle6 枠線スキン。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameTitle7">
      <summary>FrameTitle7 枠線スキン。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBorderSkinType.FrameTitle8">
      <summary>FrameTitle8 枠線スキン。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartBorderSkin">
      <summary>プロット領域周囲の枠線スキンの外観を決定するプロパティを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartBorderSkin.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartBorderSkin" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartBorderSkin.AssignFrom(C1.C1Rdl.Rdl2008.ChartBorderSkin)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartBorderSkin" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartBorderSkin.BorderSkinType">
      <summary>グラフの枠線スキンタイプを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartBorderSkin.Style">
      <summary>
        枠線スキンのスタイルプロパティを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartBorderSkin.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartElementAutoPosition">
      <summary>凡例やタイトルなどのグラフ要素が自動配置される位置を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.TopCenter">
      <summary>上側中央。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.TopLeft">
      <summary>上側左。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.TopRight">
      <summary>上側右。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.LeftTop">
      <summary>左側上。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.LeftCenter">
      <summary>左側中央。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.LeftBottom">
      <summary>左側下。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.RightTop">
      <summary>右側上。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.RightCenter">
      <summary>右側中央。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.RightBottom">
      <summary>右側下。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.BottomRight">
      <summary>下側右。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.BottomCenter">
      <summary>下側中央。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.BottomLeft">
      <summary>下側左。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartTextOrientation">
      <summary>テキストの向きを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTextOrientation.Auto">
      <summary>コンテキストに基づいて自動的に向きを選択します （タイトルが左に配置された場合は Rotated270 など）。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTextOrientation.Horizontal">
      <summary>水平テキスト。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTextOrientation.Rotated90">
      <summary>垂直テキスト - 90°回転。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTextOrientation.Rotated270">
      <summary>垂直テキスト - 270°回転。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartTextOrientation.Stacked">
      <summary>垂直テキスト - 文字の回転なし。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartTitle">
      <summary>グラフのタイトルを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartTitle.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartTitle" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartTitle.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartTitle" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.ToolTip">
      <summary>タイトルに表示するツールチップを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.Caption">
      <summary>タイトルのキャプションを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.Hidden">
      <summary>タイトルを非表示にするかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.Style">
      <summary>
        タイトルのスタイルプロパティを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartTitle.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.Position">
      <summary>タイトルの位置を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.DockToChartArea">
      <summary>タイトルの描画先のグラフ領域の名前を取得または設定します。 省略した場合（または一致するグラフ領域名がなかった場合）、 タイトルは特定のグラフ領域ではなくグラフを基準に描画されます。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.DockOutsideChartArea">
      <summary>
        タイトルをグラフ領域の内側ではなく外側に付けるかどうかを示す値を取得または設定します。
        <see cref="P:C1.C1Rdl.Rdl2008.ChartTitle.DockToChartArea" />が設定されていない場合は無視されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.DockOffset">
      <summary>
        ドック位置からのオフセットをグラフサイズに対する割合として表した値を取得または設定します。
        <para>既定値：０。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.CustomPosition">
      <summary>
        タイトルのカスタム位置を定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartElementPosition" />オブジェクトを取得または設定します。 省略した場合は自動的に位置が調整されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.ActionInfo">
      <summary>
        タイトルのアクションを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartTitle.ActionInfo" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitle.TextOrientation">
      <summary>テキストの向きを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartTitles">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartTitle" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartTitles.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartTitles" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartTitles.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartTitle" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartTitles.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartTitle" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartNoDataMessage">
      <summary>グラフにデータが含まれていない場合に表示されるタイトルを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartNoDataMessage.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartNoDataMessage" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartLegendLayout">
      <summary>凡例内のラベルの配置のタイプを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLegendLayout.AutoTable">
      <summary>スペースに合わせてラベルを自動的に縦横に並べます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLegendLayout.Column">
      <summary>ラベルを縦に並べます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLegendLayout.Row">
      <summary>ラベルを横に並べます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLegendLayout.WideTable">
      <summary>ラベルを横長の表形式で並べます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLegendLayout.TallTable">
      <summary>ラベルを縦長の表形式で並べます。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartLine">
      <summary>グラフで区切りとして使用する線のタイプを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLine.None">
      <summary>線なし。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLine.Line">
      <summary>線。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLine.ThickLine">
      <summary>太線。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLine.DoubleLine">
      <summary>二重線。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLine.DashLine">
      <summary>破線。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLine.DotLine">
      <summary>点線。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLine.GradientLine">
      <summary>線（グラデーション）。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLine.ThickGradientLine">
      <summary>太線（グラデーション）。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartLegendTitle">
      <summary>凡例のタイトルを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartLegendTitle.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartLegendTitle" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartLegendTitle.AssignFrom(C1.C1Rdl.Rdl2008.ChartLegendTitle)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartLegendTitle" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegendTitle.Caption">
      <summary>タイトルのキャプションを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegendTitle.TitleSeparator">
      <summary>凡例タイトルに使用する区切りのタイプを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegendTitle.Style">
      <summary>
        タイトルのスタイルプロパティを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartLegendTitle.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartLegend">
      <summary>グラフ凡例の系列グループのインスタンスの 表示に使用できるプロパティを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartLegend.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartLegend" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartLegend.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartLegend" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.Hidden">
      <summary>凡例が非表示かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.Style">
      <summary>
        凡例のスタイルプロパティを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartLegend.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.Position">
      <summary>
        凡例の位置を取得または設定します。
        <para>
          既定値：
          <see cref="F:C1.C1Rdl.Rdl2008.ChartElementAutoPosition.RightTop" />。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.Layout">
      <summary>
        凡例内のラベルの配置を取得または設定します。
        <para>
          既定値：
          <see cref="F:C1.C1Rdl.Rdl2008.ChartLegendLayout.AutoTable" />。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.DockToChartArea">
      <summary>凡例の描画先のグラフ領域の名前を取得または設定します。 省略した場合（または一致するグラフ領域名がなかった場合）、 凡例は特定のグラフ領域ではなくグラフを基準に描画されます。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.DockOutsideChartArea">
      <summary>
        タイトルをグラフ領域の内側ではなく外側に付けるかどうかを示す値を 取得または設定します。
        <see cref="P:C1.C1Rdl.Rdl2008.ChartLegend.DockToChartArea" />が設定されていない場合は無視されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.CustomPosition">
      <summary>
        凡例のカスタム位置を定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartElementPosition" />オブジェクトを取得または設定します。 null の場合は自動的に位置が調整されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.Title">
      <summary>
        凡例のタイトルのプロパティを定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartLegendTitle" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.AutoFitTextDisabled">
      <summary>
        凡例領域に合わせたテキストサイズの自動調整を禁止するかどうかを示す値を 取得または設定します。
        <para>既定値：false。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.MinFontSize">
      <summary>
        凡例テキストのサイズを自動調整するときの最小サイズを取得または設定します。
        <para>既定値：７pt。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.HeaderSeparator">
      <summary>
        凡例ヘッダーに使用する区切りのタイプを取得または設定します。
        <para>
          既定値：
          <see cref="F:C1.C1Rdl.Rdl2008.ChartLine.None" />。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.HeaderSeparatorColor">
      <summary>
        凡例ヘッダー区切りに使用する色を取得または設定します。
        <para>既定値：Black。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.ColumnSeparator">
      <summary>
        列に使用する区切りのタイプを取得または設定します。
        <para>
          既定値：
          <see cref="F:C1.C1Rdl.Rdl2008.ChartLine.None" />。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.ColumnSeparatorColor">
      <summary>
        列区切りに使用する色を取得または設定します。
        <para>既定値：Black。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.ColumnSpacing">
      <summary>
        列間の間隔をフォントサイズの割合として表した値を取得または設定します。
        <para>既定値：50。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.InterlacedRows">
      <summary>凡例の行でインタレース色を使用するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.InterlacedRowsColor">
      <summary>
        凡例のインタレース行に使用する背景色を取得または設定します。
        <para>null（デフォルト）の場合、グラフ領域の背景色が使用されます。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.EquallySpacedItems">
      <summary>
        凡例項目を等間隔で配置するかどうかを示す値を取得または設定します。
        <para>既定値：false。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.Reversed">
      <summary>
        凡例の向きを反転するかどうかを示す値を取得または設定します。
        <para>既定値：Auto。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.MaxAutoSize">
      <summary>
        凡例の最大サイズをグラフサイズに対する割合として示す値を取得または設定します。
        <para>既定値：50。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegend.TextWrapThreshold">
      <summary>
        凡例テキストを折り返す文字数を取得または設定します。
        <para>既定値：25。</para>
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartLegends">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartLegend" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartLegends.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartLegends" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartLegends.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartLegend" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartLegends.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartLegend" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartArea">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />のデータ領域に描画されるグラフを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartArea.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartArea" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartArea.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartArea" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.Hidden">
      <summary>グラフ領域を非表示にするかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.CategoryAxes">
      <summary>
        カテゴリ軸を定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartArea.CategoryAxes" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.ValueAxes">
      <summary>
        値軸を定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartArea.ValueAxes" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.ThreeDProperties">
      <summary>
        3D グラフレイアウトのプロパティを定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartThreeDProperties" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.Style">
      <summary>
        グラフ領域のスタイルプロパティを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartArea.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.AlignOrientation">
      <summary>
        グラフ領域をターゲットグラフ領域と揃える向きを示す値を取得または設定します。
        <see cref="P:C1.C1Rdl.Rdl2008.ChartArea.AlignWithChartArea" />が設定されていない場合は無視されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.AlignType">
      <summary>
        ターゲットグラフ領域と揃えるグラフ領域の要素を定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAlignType" />オブジェクトを表します。
        <see cref="P:C1.C1Rdl.Rdl2008.ChartArea.AlignWithChartArea" />が設定されていない場合は無視されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.AlignWithChartArea">
      <summary>このグラフ領域を配置するグラフ領域の名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.CustomPosition">
      <summary>
        グラフ領域のカスタム位置を定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartElementPosition" />オブジェクトを取得または設定します。 null の場合は自動的に位置が調整されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.InnerPlotPosition">
      <summary>
        内側プロット領域のカスタム位置を定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartElementPosition" />オブジェクトを取得または設定します。 null の場合は自動的に位置が調整されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartArea.EquallySizedAxesFont">
      <summary>（フォントサイズが自動の場合に） すべての軸で同じフォントサイズを使用するかどうかを示す値を 取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAreas">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartArea" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAreas.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAreas" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartAreas.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartArea" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAreas.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartArea" />を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartAreas.Item(System.String)">
      <summary>
        指定された名前の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartArea" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartMember">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartMember.Chart" />のカテゴリまたは系列メンバを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartMember.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartMember" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartMember.AssignFrom(C1.C1Rdl.Rdl2008.ChartMember)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartMember" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.Owner">
      <summary>
        このオブジェクトを所有している
        <see cref="T:C1.C1Rdl.Rdl2008.ChartMembers" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.Hierarchy">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.ChartHierarchy" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.Chart">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.Group">
      <summary>
        データのグループ化を定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartMember.Group" />オブジェクトを取得します。
        <see cref="P:C1.C1Rdl.Rdl2008.ChartMember.Group" />が null の場合、 静的なメンバになります（そうでない場合は動的メンバ）。 先祖グループが詳細グループの場合、グループ化は許可されません。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.SortExpressions">
      <summary>
        グループインスタンスをソートする式を含む
        <see cref="P:C1.C1Rdl.Rdl2008.ChartMember.SortExpressions" />コレクションを取得します。
        <see cref="P:C1.C1Rdl.Rdl2008.ChartMember.Group" />が null の場合は使用されません。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.Members">
      <summary>
        このメンバのサブメンバを含む
        <see cref="T:C1.C1Rdl.Rdl2008.ChartMembers" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.CustomProperties">
      <summary>
        メンバのカスタムプロパティを含む
        <see cref="P:C1.C1Rdl.Rdl2008.ChartMember.CustomProperties" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.Label">
      <summary>
        凡例（
        <see cref="F:C1.C1Rdl.Rdl2008.ChartSeriesType.Shape" />のある系列メンバとカテゴリメンバ） またはカテゴリ軸（カテゴリメンバの場合）に表示するラベルを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.DataElementName">
      <summary>このメンバのデータ要素に使用する名前を取得または設定します。 CLS 準拠の識別子にする必要があります。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMember.DataElementOutput">
      <summary>データを描画する際にメンバが表示されるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartMembers">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartMembers.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartMembers" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartMembers.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartMember" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMembers.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMembers.Hierarchy">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.ChartHierarchy" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMembers.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartMember" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartHierarchy">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />のメンバの階層を表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartHierarchy.AssignFrom(C1.C1Rdl.Rdl2008.ChartHierarchy)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartHierarchy" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartHierarchy.Owner">
      <summary>
        このオブジェクトを所有している
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartHierarchy.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartHierarchy.Members">
      <summary>
        Tablix 階層のメンバの番号付きリストを含む
        <see cref="T:C1.C1Rdl.Rdl2008.ChartMembers" />コレクションを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartPalette">
      <summary>グラフ項目のカラーパレットを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.Default">
      <summary>デフォルトパレット。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.EarthTones">
      <summary>アーストーンパレット。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.Excel">
      <summary>Excelパレット。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.GrayScale">
      <summary>グレースケールパレット。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.Light">
      <summary>明るいパレット。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.Pastel">
      <summary>パステルパレット。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.SemiTransparent">
      <summary>半透明パレット。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.Berry">
      <summary>ベリーパレット。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.Chocolate">
      <summary>チョコレートパレット。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.Fire">
      <summary>火のパレット。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.SeaGreen">
      <summary>シーグリーンパレット。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.BrightPastel">
      <summary>明いパステルパレット。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPalette.Custom">
      <summary>カスタムパレット。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartPaletteHatchBehavior">
      <summary>グラフのデータポイントにどのようにハッチングを適用するかを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPaletteHatchBehavior.Default">
      <summary>デフォルト。 None として扱われます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPaletteHatchBehavior.None">
      <summary>データポイントにハッチングを適用しません。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPaletteHatchBehavior.Always">
      <summary>すべてのデータポイントに自動的にハッチングを適用します（BackgroundHatchType が非デフォルトとして指定されている場合を除く）。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointValues">
      <summary>グラフのデータポイントのデータ値のセットを表します。 各系列タイプには、もう１つ別の、必須データ値とオプションデータ値のセットがあります。 系列タイプに使用されないデータ値は無視されます。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataPointValues.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPointValues" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataPointValues.AssignFrom(C1.C1Rdl.Rdl2008.ChartDataPointValues)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPointValues" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointValues.X">
      <summary>データポイントの X 値を取得または設定します。 Type = Scatter の系列では必須です。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointValues.Y">
      <summary>データポイントの Y 値を取得または設定します。 Type が Range でない系列と、 Type = Range で Subtype = ErrorBar の系列では必須です。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointValues.Size">
      <summary>データポイントのサイズ値を取得または設定します。 Type = Scatter で Subtype = Bubble の系列ではオプションです。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointValues.High">
      <summary>データポイントの高値を取得または設定します。 Type = Range の系列では必須です。 Y が指定された場合は省略可能です。 その場合のデフォルトは Y です。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointValues.Low">
      <summary>データポイントの安値を取得または設定します。 Type = Range の系列では必須です。 Y が指定された場合は省略可能です。 その場合のデフォルトは Y です。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointValues.Start">
      <summary>データポイントの始値を取得または設定します。 Type = Range で SubType = Stock、Candlestick、 または BoxPlot の系列ではオプションです。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointValues.End">
      <summary>データポイントの終値を取得または設定します。 Type = Range で SubType = Stock、Candlestick、 または BoxPlot の系列ではオプションです。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointValues.Mean">
      <summary>データポイントの平均値を取得または設定します。 Type = Range で SubType = BoxPlot の系列ではオプションです。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointValues.Median">
      <summary>データポイントの中央値を取得または設定します。 Type = Range で SubType = BoxPlot の系列ではオプションです。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataLabelPosition">
      <summary>ラベルの位置を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.Auto">
      <summary>デフォルト。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.Top">
      <summary>データポイントの上にラベルを配置します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.TopLeft">
      <summary>データポイントの左上にラベルを配置します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.TopRight">
      <summary>データポイントの右上にラベルを配置します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.Left">
      <summary>データポイントの左にラベルを配置します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.Center">
      <summary>データポイントの中心にラベルを配置します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.Right">
      <summary>データポイントの右にラベルを配置します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.BottomRight">
      <summary>データポイントの右下にラベルを配置します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.Bottom">
      <summary>データポイントの下にラベルを配置します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.BottomLeft">
      <summary>データポイントの左下にラベルを配置します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartDataLabelPosition.Outside">
      <summary>データポイントの外側にラベルを配置します。 円グラフ以外の場合、外側は上として扱われます。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataLabel">
      <summary>データ値に表示するデータラベルを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataLabel.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPointValues" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataLabel.AssignFrom(C1.C1Rdl.Rdl2008.ChartDataLabel)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataLabel" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataLabel.Style">
      <summary>
        ラベルのスタイルプロパティを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartDataLabel.Style" />オブジェクトを取得します。
        <para>このスタイルが指定された場合、Series スタイルはオーバーライドされます。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataLabel.UseValueAsLabel">
      <summary>
        データポイントの Y 値をラベルとして使用するかどうかを示す値を取得または設定します。
        <para>既定値：false。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataLabel.Label">
      <summary>
        データポイントのラベルを取得または設定します。
        <para>
          <see cref="P:C1.C1Rdl.Rdl2008.ChartDataLabel.UseValueAsLabel" />が true の場合は使用されません。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataLabel.Visible">
      <summary>
        グラフにデータラベルを表示するかどうかを示す値を取得または設定します。
        <para>既定値：false。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataLabel.Position">
      <summary>
        ラベルの位置を取得または設定します。
        <para>既定値：Auto。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataLabel.Rotation">
      <summary>
        ラベルテキストの回転角を取得または設定します。
        <para>既定値：0。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataLabel.ToolTip">
      <summary>データラベルに表示するツールチップを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataLabel.ActionInfo">
      <summary>
        このデータラベルに関連付けるアクションを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartDataLabel.ActionInfo" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartMarkerType">
      <summary>表示されるグラフ値のマーカータイプを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.None">
      <summary>マーカーなし。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Square">
      <summary>正方形マーカー。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Circle">
      <summary>円形マーカー。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Diamond">
      <summary>ひし形マーカー。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Triangle">
      <summary>三角形マーカー。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Cross">
      <summary>十字マーカー。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Star4">
      <summary>四芒星マーカー。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Star5">
      <summary>五芒星マーカー。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Star6">
      <summary>六芒星マーカー。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Star10">
      <summary>十芒星マーカー。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartMarkerType.Auto">
      <summary>自動的に各系列に対してマーカータイプを順番に使用します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartMarker">
      <summary>表示されるグラフ値のマーカーを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartMarker.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartMarker" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartMarker.AssignFrom(C1.C1Rdl.Rdl2008.ChartMarker)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartMarker" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMarker.Type">
      <summary>値のマーカータイプを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMarker.Size">
      <summary>マーカーのプロット領域の高さと幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartMarker.Style">
      <summary>
        マーカーのスタイルプロパティを決定する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartMarker.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartItemInLegend">
      <summary>凡例に表示される系列またはデータポイントのセットの動作を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartItemInLegend.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartItemInLegend" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartItemInLegend.AssignFrom(C1.C1Rdl.Rdl2008.ChartItemInLegend)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartItemInLegend" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartItemInLegend.LegendText">
      <summary>
        凡例で
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoint" />の項目に使用するラベルを取得または設定します。
        <para>
          このプロパティを設定しない場合、 グラフカテゴリ階層の
          <b>Label</b>プロパティが凡例テキストとして使用されます （各ペアの間に – が入ります）。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartItemInLegend.ToolTip">
      <summary>凡例の項目に表示するツールチップを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartItemInLegend.ActionInfo">
      <summary>
        凡例の項目に関連付けられている
        <see cref="P:C1.C1Rdl.Rdl2008.ChartItemInLegend.ActionInfo" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartItemInLegend.Hidden">
      <summary>項目を凡例に表示しないかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartFunnelPyramidInsideLabelAlignment">
      <summary>じょうごまたはピラミッドの内側に配置されるデータポイントラベルの垂直配置を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidInsideLabelAlignment.Center">
      <summary>中央揃え。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidInsideLabelAlignment.Top">
      <summary>上揃え。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidInsideLabelAlignment.Bottom">
      <summary>下揃え。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartFunnelPyramidLabelStyle">
      <summary>じょうごグラフまたはピラミッドグラフのデータポイントラベルのスタイルを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidLabelStyle.Inside">
      <summary>ラベルは内側に配置されます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidLabelStyle.Outside">
      <summary>ラベルは外側に配置されます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidLabelStyle.OutsideInColumn">
      <summary>ラベルは外側に縦に配置されます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidLabelStyle.Disabled">
      <summary>ラベルは無効です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartFunnelPyramidOutsideLabelPlacement">
      <summary>じょうごまたはピラミッドを基準とした外側ラベルの配置を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidOutsideLabelPlacement.Right">
      <summary>ラベルは右に配置されます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidOutsideLabelPlacement.Left">
      <summary>ラベルは左に配置されます。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartCustomProperties">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoint" />および
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" />のカスタムプロパティの基本クラス。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartCustomProperties.ChartPropsBase">
      <summary>グラフのデータポイントのカスタムプロパティの基本クラス。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartCustomProperties.ChartPropsBase.Owner">
      <summary>
        このオブジェクトを所有している
        <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomProperties" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoint" />オブジェクトのカスタム属性を表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AssignFrom(C1.C1Rdl.Rdl2008.CustomProperties)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Column">
      <summary>縦棒グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ColumnStacked">
      <summary>積み上げ縦棒グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ColumnPercentStacked">
      <summary>割合積み上げ縦棒グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Line">
      <summary>折れ線グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.LineSmooth">
      <summary>平滑化折れ線グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.LineStepped">
      <summary>階層グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Pie">
      <summary>円グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Doughnut">
      <summary>ドーナツグラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Funnel">
      <summary>じょうごグラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Pyramid">
      <summary>ピラミッドグラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Bar">
      <summary>横棒グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.BarStacked">
      <summary>積み上げ横棒グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.BarPercentStacked">
      <summary>割合積み上げ横棒グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Area">
      <summary>面グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaSmooth">
      <summary>平滑化面グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaStacked">
      <summary>積み上げ面グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaPercentStacked">
      <summary>積み上げ面グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Range">
      <summary>レンジチャートのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeSmooth">
      <summary>レンジ平滑化グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeColumn">
      <summary>レンジ縦棒グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeBar">
      <summary>レンジバーチャートのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeCandlestick">
      <summary>レンジローソク足チャートのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeBoxPlot">
      <summary>レンジ箱ひげ図のデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeErrorBar">
      <summary>レンジ誤差範囲グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeStock">
      <summary>レンジ株価チャートのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Scatter">
      <summary>散布図のデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ScatterBubble">
      <summary>バブルチャートのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Polar">
      <summary>極座標グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.Radar">
      <summary>レーダーチャートのデータポイントのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PropsBase">
      <summary>グラフのデータポイントのカスタムプロパティの基本クラス。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PropsBase.Owner">
      <summary>
        このオブジェクトを所有する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaPropsBase">
      <summary>面グラフのデータポイントの共通プロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaProps">
      <summary>面グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaProps.LabelStyle">
      <summary>データポイントラベルの位置を取得または設定します。 既定値：Auto。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaProps.ShowMarkerLines">
      <summary>マーカー線が表示されるかどうかを決定します。 既定値：false。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaSmoothProps">
      <summary>平滑化面グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaStackedProps">
      <summary>積み上げ面グラフのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.AreaPercentStackedProps">
      <summary>割合積み上げ面グラフのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ColumnBarPropsBase">
      <summary>縦棒グラフと横棒グラフのデータポイントの共通プロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ColumnBarPropsBase.DrawingStyle">
      <summary>横棒グラフと縦棒グラフの描画スタイルを取得または設定します。 既定値：Default。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ColumnProps">
      <summary>縦棒グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ColumnProps.LabelStyle">
      <summary>データポイントラベルの位置を取得または設定します。 既定値：Auto。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ColumnStackedProps">
      <summary>積み上げ縦棒グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ColumnPercentStackedProps">
      <summary>割合積み上げ縦棒グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.BarPropsBase">
      <summary>横棒グラフのデータポイントの共通プロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.BarPropsBase.BarLabelStyle">
      <summary>データポイントラベルの配置を取得または設定します。 既定値：Outside。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.BarProps">
      <summary>横棒グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.BarStackedProps">
      <summary>積み上げ横棒グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.BarPercentStackedProps">
      <summary>割合積み上げ横棒グラフのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.LineProps">
      <summary>折れ線グラフの基本プロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.LineProps.LabelStyle">
      <summary>データポイントラベルの位置を取得または設定します。 既定値：Auto。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.LineProps.ShowMarkerLines">
      <summary>マーカー線が表示されるかどうかを決定します。 既定値：false。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.LineSmoothProps">
      <summary>平滑化折れ線グラフのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.LineSteppedProps">
      <summary>階段グラフのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PieProps">
      <summary>円グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PieProps.Exploded">
      <summary>円グラフまたはドーナツグラフのスライスが分割されるかどうかを決定します。 既定値：false。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PieProps.LabelsHorizontalLineSize">
      <summary>水平コールアウト線のサイズを取得または設定します。 この属性は、ラベルがデータポイントの外側に描画される場合のみ適用されます。 既定値：１。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PieProps.LabelsRadialLineSize">
      <summary>放射型コールアウト線のサイズを取得または設定します。 この属性は、ラベルがデータポイントの外側に描画される場合のみ適用されます。 既定値：１。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PieProps.PieLabelStyle">
      <summary>データポイントラベルの位置を取得または設定します。 既定値：Default。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PieProps.PieLineColor">
      <summary>放射型および水平ラベル線の色を取得または設定します。 既定値：Color.Empty（自動設定）。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.DoughnutProps">
      <summary>ドーナツグラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.FunnelPyramidPropsBase">
      <summary>じょうごグラフとピラミッドグラフのデータポイントの共通プロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.FunnelPyramidPropsBase.CalloutLineColor">
      <summary>じょうごグラフまたはピラミッドグラフのデータポイントラベルのコールアウト線の色を取得または設定します。 既定値：Color.Empty（自動設定）。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.FunnelProps">
      <summary>じょうごグラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.FunnelProps.InsideLabelAlignment">
      <summary>じょうごの内側に配置されるデータポイントラベルの垂直配置を取得または設定します。 既定値：Center。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.FunnelProps.LabelStyle">
      <summary>じょうごグラフのデータポイントラベルのスタイルを取得または設定します。 既定値：OutsideInColumn。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.FunnelProps.OutsideLabelPlacement">
      <summary>じょうごを基準とした外側ラベルの配置を取得または設定します。 既定値：Right。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PyramidProps">
      <summary>ピラミッドグラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PyramidProps.InsideLabelAlignment">
      <summary>ピラミッドの内側に配置されるデータポイントラベルの垂直配置を取得または設定します。 既定値：Center。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PyramidProps.LabelStyle">
      <summary>ピラミッドグラフのデータポイントラベルのスタイルを取得または設定します。 既定値：OutsideInColumn。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PyramidProps.OutsideLabelPlacement">
      <summary>ピラミッドを基準とした外側ラベルの配置を取得または設定します。 既定値：Right。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeProps">
      <summary>レンジチャートのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeProps.LabelStyle">
      <summary>データポイントラベルの位置を取得または設定します。 既定値：Auto。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeSmoothProps">
      <summary>平滑化レンジチャートのデータポイントのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeColumnProps">
      <summary>レンジ縦棒グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeColumnProps.DrawingStyle">
      <summary>横棒グラフと縦棒グラフの描画スタイルを取得または設定します。 既定値：Default。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeBarProps">
      <summary>レンジバーチャートのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeBarProps.BarLabelStyle">
      <summary>データポイントラベルの配置を取得または設定します。 既定値：Center。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeStockProps">
      <summary>レンジ株価チャートのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeStockProps.LabelValueType">
      <summary>データラベルとして使用する Y 値を取得または設定します。 既定値：Close。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeStockProps.OpenCloseStyle">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeStockProps.LabelValueType" />が始値または終値の場合のマーカースタイルを取得または設定します。 既定値：Line。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeStockProps.ShowOpenClose">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeStockProps.LabelValueType" />が Open または Close の場合に、 始値マーカーと終値マーカー（線または三角形）が表示されるかどうかを決定します。 既定値：Both。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeCandlestickProps">
      <summary>レンジローソク足チャートのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeCandlestickProps.LabelValueType">
      <summary>データラベルとして使用する Y 値を取得または設定します。 既定値：Close。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeCandlestickProps.PriceDownColor">
      <summary>データポイントの終値が始値より小さい場合のローソクの色を取得または設定します。 既定値：Empty（自動）。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeCandlestickProps.PriceUpColor">
      <summary>データポイントの終値が始値より大きい場合のローソクの色を取得または設定します。 既定値：Empty（自動）。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeErrorBarProps">
      <summary>レンジ誤差範囲グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeErrorBarProps.CenterMarkerStyle">
      <summary>誤差範囲グラフの中心値に表示されるマーカーの外観タイプを取得または設定します。 既定値：Line。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeErrorBarProps.Style">
      <summary>誤差範囲グラフの誤差の上限値と下限値の表示状態を取得または設定します。 既定値：Both。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RangeBoxPlotProps">
      <summary>レンジ箱ひげ図のデータポイントのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ScatterProps">
      <summary>散布図のプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ScatterProps.LabelStyle">
      <summary>データポイントラベルの位置を取得または設定します。 既定値：Auto。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.ScatterBubbleProps">
      <summary>バブルチャートのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PolarProps">
      <summary>極座標グラフのデータポイントのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.PolarProps.LabelStyle">
      <summary>データポイントラベルの位置を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties.RadarProps">
      <summary>レーダーチャートのデータポイントのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPoint">
      <summary>グラフのデータポイントを表します。 単一の値式（横棒グラフや折れ線グラフ）から構成される場合も、 複数の値式（株価チャートやバブルチャート）から 構成される場合もあります。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataPoint.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPointValues" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataPoint.AssignFrom(C1.C1Rdl.Rdl2008.ChartDataPoint)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoint" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoints" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.Values">
      <summary>
        ポイントのデータ値を定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPointValues" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.Label">
      <summary>
        データラベルを定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataLabel" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.AxisLabel">
      <summary>データポイントの軸で使用するラベルを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.ToolTip">
      <summary>データポイントに表示するツールチップを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.ActionInfo">
      <summary>
        このデータポイントに関連付けるアクションを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartDataPoint.ActionInfo" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.Style">
      <summary>
        データポイントのスタイルプロパティを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartDataPoint.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.Marker">
      <summary>
        データポイントマーカーの外観を定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartMarker" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.DataElementName">
      <summary>このメンバのデータ要素に使用する名前を取得または設定します。 CLS 準拠の識別子にする必要があります。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.DataElementOutput">
      <summary>データを描画する際にメンバが表示されるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.ItemInLegend">
      <summary>
        データポイントを凡例（Series.Type = Shape のとき）に表示するときにどのように表示するかを定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartItemInLegend" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoint.CustomProperties">
      <summary>
        データポイントのカスタムプロパティを定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPointCustomProperties" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDataPoints">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoint" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataPoints.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoints" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDataPoints.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoint" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoints.Owner">
      <summary>
        このコレクションを所有している
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDataPoints.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoint" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesType">
      <summary>系列の視覚表現タイプを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesType.Column">
      <summary>縦棒グラフ。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesType.Bar">
      <summary>横棒グラフ。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesType.Line">
      <summary>折れ線グラフ。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesType.Shape">
      <summary>特定形状グラフ。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesType.Scatter">
      <summary>分散図。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesType.Area">
      <summary>面グラフ。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesType.Range">
      <summary>レンジチャート。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesType.Polar">
      <summary>極座標グラフ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesSubtype">
      <summary>
        系列の視覚表現サブタイプを示します。 使用可能なサブタイプ（およびデフォルトサブタイプ）は
        <see cref="P:C1.C1Rdl.Rdl2008.ChartSeries.Type" />によって異なります。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Plain">
      <summary>Shape を除くすべてのタイプのデフォルト。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Stacked">
      <summary>Column、Bar、Area 用。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.PercentStacked">
      <summary>Column、Bar、Area 用。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Smooth">
      <summary>Line、Area、Range 用。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Stepped">
      <summary>Line 専用。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Pie">
      <summary>Shape のデフォルト。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.ExplodedPie">
      <summary>Shape 専用。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Doughnut">
      <summary>Shape 専用。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.ExplodedDoughnut">
      <summary>Shape 専用。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Funnel">
      <summary>Shape 専用。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Pyramid">
      <summary>Shape 専用。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Bubble">
      <summary>Scatter 専用。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Candlestick">
      <summary>Range 専用。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Stock">
      <summary>Range 専用。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Bar">
      <summary>Range 専用。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Column">
      <summary>Range 専用。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.BoxPlot">
      <summary>Range 専用。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.ErrorBar">
      <summary>Range 専用。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesSubtype.Radar">
      <summary>Polar 専用。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartEmptyPoints">
      <summary>系列内の空のポイントの動作を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartEmptyPoints.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartEmptyPoints" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartEmptyPoints.AssignFrom(C1.C1Rdl.Rdl2008.ChartEmptyPoints)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartEmptyPoints" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.Style">
      <summary>
        データポイントのスタイルプロパティを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.Marker">
      <summary>
        データポイントマーカーの外観を定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartMarker" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.DataLabel">
      <summary>
        データラベルでマークする値を示す
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataLabel" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.AxisLabel">
      <summary>空のデータポイントの軸で使用するラベルを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.ToolTip">
      <summary>データポイントに表示するツールチップを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.ActionInfo">
      <summary>
        このデータポイントに関連付けるアクションを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.ActionInfo" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.CustomProperties">
      <summary>
        データポイントのカスタムプロパティを含む
        <see cref="P:C1.C1Rdl.Rdl2008.ChartEmptyPoints.CustomProperties" />コレクションを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartLabelOutsidePlotAreaStyle">
      <summary>データポイントラベルをプロット領域の外側に描画する方法を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLabelOutsidePlotAreaStyle.Partial">
      <summary>ラベルの一部がプロット領域の外側に出ても構いません。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLabelOutsidePlotAreaStyle.True">
      <summary>ラベル全体をプロット領域の外側に配置できます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLabelOutsidePlotAreaStyle.False">
      <summary>ラベルは完全にプロット領域の内側に配置する必要があります。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartLineAnchor">
      <summary>コールアウト線の端に描画する形状を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLineAnchor.None">
      <summary>なし。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLineAnchor.Arrow">
      <summary>矢印。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLineAnchor.Diamond">
      <summary>ひし形。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLineAnchor.Square">
      <summary>正方形。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLineAnchor.Round">
      <summary>角丸。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartCalloutStyle">
      <summary>コールアウト線の描画に使用するスタイルを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCalloutStyle.Underline">
      <summary>コールアウト線をラベルの下線につなげます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCalloutStyle.Box">
      <summary>コールアウト線をラベル周囲のボックスにつなげます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCalloutStyle.None">
      <summary>コールアウト線に追加のラベルスタイルを使用しません。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartNoMoveDirections">
      <summary>スマートラベルの移動が禁止されている方向を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartNoMoveDirections" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.AssignFrom(C1.C1Rdl.Rdl2008.ChartNoMoveDirections)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartNoMoveDirections" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.Up">
      <summary>スマートラベルを真上に移動することを禁止するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.Left">
      <summary>スマートラベルをまっすぐ左に移動することを禁止するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.Right">
      <summary>スマートラベルをまっすぐ右に移動することを禁止するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.Down">
      <summary>スマートラベルを真下に移動することを禁止するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.UpLeft">
      <summary>スマートラベルを左上に移動することを禁止するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.UpRight">
      <summary>スマートラベルを右上に移動することを禁止するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.DownLeft">
      <summary>スマートラベルを左下に移動することを禁止するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartNoMoveDirections.DownRight">
      <summary>スマートラベルを右下に移動することを禁止するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSmartLabel">
      <summary>スマートラベルの動作を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartSmartLabel.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSmartLabel" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartSmartLabel.AssignFrom(C1.C1Rdl.Rdl2008.ChartSmartLabel)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSmartLabel" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.Disabled">
      <summary>スマートラベルをオフにするかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.AllowOutSidePlotArea">
      <summary>データポイントラベルをプロット領域の外側に描画できるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.CalloutBackColor">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.CalloutStyle" />が Box の場合にポイントラベルテキストを囲むボックスの塗りつぶし色を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.CalloutLineAnchor">
      <summary>コールアウト線の端に描画する形状を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.CalloutLineColor">
      <summary>データポイントラベルをプロット領域の外側に描画できるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.CalloutLineStyle">
      <summary>
        コールアウト線のスタイルを取得または設定します。
        <para>既定値：Solid.。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.CalloutLineWidth">
      <summary>
        コールアウト線の幅を取得または設定します。
        <para>既定値：0.75pt。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.CalloutStyle">
      <summary>
        コールアウト線を描画するときに使用するスタイルを取得または設定します。
        <para>既定値：Underline。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.ShowOverlapped">
      <summary>
        ラベルが重なる問題を解決できなくても ラベルを表示するかどうかを示す値を取得または設定します。
        <para>既定値：false。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.MarkerOverlapping">
      <summary>
        ポイントラベルがポイントマーカーに重なることを許可するかどうかを示す値を取得または設定します。
        <para>既定値：false。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.MaxMovingDistance">
      <summary>
        データポイントラベルが重ならないために動かせる データポイントからの最大距離を取得または設定します。
        <para>既定値：23 pt。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.MinMovingDistance">
      <summary>
        データポイントラベルが重ならないために動かせる データポイントからの最小距離を取得または設定します。
        <para>既定値：23 pt。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSmartLabel.NoMoveDirections">
      <summary>
        ラベルを動かせない方向を示す
        <see cref="T:C1.C1Rdl.Rdl2008.ChartNoMoveDirections" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesDrawingStyle">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" />で使用できる描画スタイルを示します。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesDrawingStyle.Default">
      <summary>デフォルト。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesDrawingStyle.Cylinder">
      <summary>円柱。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesDrawingStyle.Emboss">
      <summary>エンボス。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesDrawingStyle.LightToDark">
      <summary>明から暗。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesDrawingStyle.Wedge">
      <summary>くさび形。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesEmptyPointValue">
      <summary>グラフ系列の空ポイント値を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesEmptyPointValue.Zero">
      <summary>ゼロ。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesEmptyPointValue.Average">
      <summary>平均。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesColumnStyle">
      <summary>グラフ系列の列スタイルを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesColumnStyle.Normal">
      <summary>標準。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesColumnStyle.Paretto">
      <summary>パレート図。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartSeriesColumnStyle.Histogram">
      <summary>ヒストグラム。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartAreaDrawingStyle">
      <summary>レーダーチャートのグラフ領域の形状のタイプを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAreaDrawingStyle.Circle">
      <summary>円形。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartAreaDrawingStyle.Polygon">
      <summary>多角形。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartArrowsType">
      <summary>ラベルをデータポイントにつなげる線の 矢印の先端のタイプを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartArrowsType.None">
      <summary>矢印形なし。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartArrowsType.Triangle">
      <summary>三角形の先端。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartArrowsType.Sharp">
      <summary>鋭い先端。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartArrowsType.Lines">
      <summary>線状の先端。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartBarLabelStyle">
      <summary>横棒グラフとガントチャートのデータポイントラベルの配置を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBarLabelStyle.Outside">
      <summary>ラベルは外側に配置されます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBarLabelStyle.Left">
      <summary>ラベルは左に配置されます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBarLabelStyle.Right">
      <summary>ラベルは右に配置されます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartBarLabelStyle.Center">
      <summary>ラベルは中央に配置されます。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartCollectedStyle">
      <summary>スライスをまとめるスタイルを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCollectedStyle.None">
      <summary>スライスなし。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCollectedStyle.SingleSlice">
      <summary>単一のスライス。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCollectedStyle.CollectedPie">
      <summary>集合円グラフ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartPieDrawingStyle">
      <summary>円グラフとドーナツグラフの描画スタイルを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPieDrawingStyle.Default">
      <summary>デフォルト。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPieDrawingStyle.SoftEdge">
      <summary>ソフトエッジ。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPieDrawingStyle.Concave">
      <summary>凹面。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartPieLabelStyle">
      <summary>円グラフとドーナツグラフのデータポイントラベルの位置を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPieLabelStyle.Inside">
      <summary>ラベルは内側に配置されます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPieLabelStyle.Outside">
      <summary>ラベルは外側に配置されます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPieLabelStyle.Disabled">
      <summary>ラベルは無効です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartFunnelPyramid3DDrawingStyle">
      <summary>3D のじょうごグラフまたはピラミッドグラフの描画スタイルを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramid3DDrawingStyle.CircularBase">
      <summary>円形基本スタイル。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramid3DDrawingStyle.SquareBase">
      <summary>正方形基本スタイル。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartFunnelPyramidStyle">
      <summary>じょうごグラフとピラミッドグラフのスタイルを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidStyle.YIsWidth">
      <summary>Y は幅です。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFunnelPyramidStyle.YIsHeight">
      <summary>Y は高さです。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartPyramidValueType">
      <summary>ピラミッドグラフによって表されるデータのタイプ（線形的な高さか面積か）を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPyramidValueType.Linear">
      <summary>線形的な高さがデータを表します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPyramidValueType.Surface">
      <summary>面積がデータを表します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartLabelValueType">
      <summary>レンジ株価チャートのデータラベルとして使用される Y 値を指定します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLabelValueType.High">
      <summary>高値。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLabelValueType.Low">
      <summary>安値。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLabelValueType.Open">
      <summary>始値。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartLabelValueType.Close">
      <summary>終値。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartOpenCloseStyle">
      <summary>レンジ株価チャートのマーカースタイルを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartOpenCloseStyle.Triangle">
      <summary>三角形。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartOpenCloseStyle.Line">
      <summary>線。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartOpenCloseStyle.Candlestick">
      <summary>ローソク。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartShowOpenClose">
      <summary>レンジ株価チャートのマーカーの表示動作を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartShowOpenClose.Both">
      <summary>両方。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartShowOpenClose.Open">
      <summary>始値。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartShowOpenClose.Close">
      <summary>終値。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle">
      <summary>レンジ誤差範囲グラフの中心値マーカーのスタイルを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.None">
      <summary>なし。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Line">
      <summary>線。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Square">
      <summary>正方形。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Circle">
      <summary>円。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Diamond">
      <summary>ひし形。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Triangle">
      <summary>三角形。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Cross">
      <summary>十字。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Star4">
      <summary>四芒星。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Star5">
      <summary>五芒星。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Star6">
      <summary>六芒星。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarCenterMarkerStyle.Star10">
      <summary>十芒星。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartErrorBarStyle">
      <summary>誤差範囲グラフの誤差の上限値と下限値の表示設定を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarStyle.Both">
      <summary>両方の誤差値が表示されます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarStyle.UpperError">
      <summary>誤差の上限値が表示されます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarStyle.LowerError">
      <summary>誤差の下限値が表示されます。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartErrorBarType">
      <summary>誤差範囲系列の中心値に対する上限値と下限値の計算方法を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarType.FixedValue">
      <summary>固定値。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarType.Percentage">
      <summary>割合。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarType.StandardDeviation">
      <summary>標準偏差。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartErrorBarType.StandardError">
      <summary>標準誤差。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartCircularLabelsStyle">
      <summary>極座標グラフとレーダーチャートのデータラベルの位置を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCircularLabelsStyle.Auto">
      <summary>自動。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCircularLabelsStyle.Circular">
      <summary>円形。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCircularLabelsStyle.Horizontal">
      <summary>水平。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartCircularLabelsStyle.Radial">
      <summary>放射。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartPolarDrawingStyle">
      <summary>極座標グラフの描画スタイルを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPolarDrawingStyle.Line">
      <summary>線。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartPolarDrawingStyle.Marker">
      <summary>マーカー。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartRadarDrawingStyle">
      <summary>レーダーチャートの描画スタイルを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartRadarDrawingStyle.Area">
      <summary>面。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartRadarDrawingStyle.Line">
      <summary>線。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartRadarDrawingStyle.Marker">
      <summary>マーカー。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" />オブジェクトのカスタム属性を表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AssignFrom(C1.C1Rdl.Rdl2008.CustomProperties)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Column">
      <summary>縦棒グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnStacked">
      <summary>積み上げ縦棒グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnPercentStacked">
      <summary>割合積み上げ縦棒グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Line">
      <summary>折れ線グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.LineSmooth">
      <summary>平滑化折れ線グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.LineStepped">
      <summary>階段グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Pie">
      <summary>円グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Doughnut">
      <summary>ドーナツグラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Funnel">
      <summary>じょうごグラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Pyramid">
      <summary>ピラミッドグラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Bar">
      <summary>横棒グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarStacked">
      <summary>積み上げ横棒グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarPercentStacked">
      <summary>割合積み上げ横棒グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Area">
      <summary>面グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaSmooth">
      <summary>平滑化面グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaStacked">
      <summary>積み上げ面グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaPercentStacked">
      <summary>割合積み上げ面グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Range">
      <summary>レンジチャートのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeSmooth">
      <summary>レンジ平滑化グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeColumn">
      <summary>レンジ縦棒グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBar">
      <summary>レンジ横棒グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeCandlestick">
      <summary>レンジローソク足チャートのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBoxPlot">
      <summary>レンジ箱ひげ図のプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeErrorBar">
      <summary>レンジ誤差範囲グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeStock">
      <summary>レンジ株価チャートのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Scatter">
      <summary>散布図のプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterBubble">
      <summary>バブルチャートのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Polar">
      <summary>極座標グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.Radar">
      <summary>レーダーチャートのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PropsBase">
      <summary>指定されたタイプのグラフの抽象基本クラス。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PropsBase.Owner">
      <summary>
        このオブジェクトを所有する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ThreeDPropsBase">
      <summary>Column、Bar、Line、Area の各グラフの共通 3D プロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ThreeDPropsBase.PixelPointDepth">
      <summary>3D 系列の奥行を取得または設定します（ピクセル単位）。 既定値：０。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ThreeDPropsBase.PixelPointGapDepth">
      <summary>3D 系列のギャップを取得または設定します（ピクセル単位）。 既定値：０。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaPropsBase">
      <summary>面グラフの共通プロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaProps">
      <summary>面グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaProps.EmptyPointValue">
      <summary>グラフを描画するときに空ポイントをどのように扱うかを決定します。 Average の値が使用される場合、グラフは Y の平均値を持つポイントが存在するかのように描画されます。 平均は隣接するポイントを使用して算出されます。 Zero が使用される場合、 グラフは値が０のポイントが存在するかのように描画されます。 既定値：Average。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaProps.LabelStyle">
      <summary>データポイントラベルの位置を取得または設定します。 既定値：Auto。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaProps.ShowMarkerLines">
      <summary>マーカー線が表示されるかどうかを決定します。 既定値：false。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaSmoothProps">
      <summary>平滑化面グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaSmoothProps.LineTension">
      <summary>曲線を描画する張力を取得または設定します。 張力がゼロの曲線は直線のようになります。 平滑化グラフにのみ適用されます。 既定値：0.5。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaStackedProps">
      <summary>積み上げ面グラフのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.AreaPercentStackedProps">
      <summary>割合積み上げ面グラフのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnBarPropsBase">
      <summary>縦棒グラフと横棒グラフの共通プロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnBarPropsBase.DrawingStyle">
      <summary>横棒グラフと縦棒グラフの描画スタイルを取得または設定します。 既定値：Default。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnBarPropsBase.MaxPixelPointWidth">
      <summary>データポイントの最大幅（ピクセル）を取得または設定します。 既定値：０。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnBarPropsBase.MinPixelPointWidth">
      <summary>データポイントの最小幅（ピクセル）を取得または設定します。 既定値：０。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnBarPropsBase.PixelPointWidth">
      <summary>データポイントの幅（ピクセル）を取得または設定します。 既定値：０。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnBarPropsBase.PointWidth">
      <summary>データポイントの相対幅を取得または設定します。 既定値：0.8。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps">
      <summary>縦棒グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.DrawSideBySide">
      <summary>同一の X 値を持つ複数のデータポイントを並べて描画するか、 同じ X 値を使用して描画するかを決定します。 Auto の場合、グラフタイプに応じて自動的に true または false が決定されます。 この属性を true に設定して効果があるのは、 グラフ領域の複数の系列の DrawSideBySide が true に設定されている場合だけです。 既定値：Auto。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.EmptyPointValue">
      <summary>グラフを描画するときに空ポイントをどのように扱うかを決定します。 Average の値が使用される場合、グラフは Y の平均値を持つポイントが存在するかのように描画されます。 平均は隣接するポイントを使用して算出されます。 Zero が使用される場合、グラフは値が０のポイントが存在するかのように描画されます。 既定値：Average。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.LabelStyle">
      <summary>データポイントラベルの位置を取得または設定します。 既定値：Auto。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.ShowColumnAs">
      <summary>系列はデータがバインドされた後、 Normal、Histogram、Pareto のいずれかとして描画されます。 系列がグループ化されている場合やカテゴリのグループ化がネストされている場合、 この属性は無視されます。 既定値：Normal。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.HistogramSegmentIntervalNumber">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.ShowColumnAs" />が Histogram の場合、 このプロパティはデータ範囲を何個の区間に分割するかを定義します。 このプロパティは、
        <see cref="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.HistogramSegmentIntervalWidth" />が設定されていない場合のみ有効です。 既定値：20。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.HistogramSegmentIntervalWidth">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.ShowColumnAs" />が Histogram の場合、このプロパティは、ヒストグラムの各区間の幅を定義します。 この値を０に設定すると、 データ範囲に基づいて幅が自動的に計算されます。 既定値：０。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.HistogramShowPercentOnSecondaryYAxis">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnProps.ShowColumnAs" />が Histogram の場合に、 このプロパティは第２の Y 軸を使用して頻度割合を表示するかどうかを示します。 既定値： true。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnStackedProps">
      <summary>積み上げ縦棒グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnStackedProps.StackedGroupName">
      <summary>積み上げ縦棒グループ名を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ColumnPercentStackedProps">
      <summary>割合積み上げ縦棒グラフのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarPropsBase">
      <summary>横棒グラフの共通プロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarPropsBase.BarLabelStyle">
      <summary>データポイントラベルの配置を取得または設定します。 既定値：Outside。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarProps">
      <summary>横棒グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarProps.DrawSideBySide">
      <summary>同一の X 値を持つ複数のデータポイントを並べて描画するか、 同じ X 値を使用して描画するかを決定します。 Auto の場合、グラフタイプに応じて自動的に true または false が決定されます。 この属性を true に設定して効果があるのは、 グラフ領域の複数の系列の DrawSideBySide が true に設定されている場合だけです。 既定値：Auto。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarProps.EmptyPointValue">
      <summary>グラフを描画するときに空ポイントをどのように扱うかを決定します。 Average の値が使用される場合、グラフは Y の平均値を持つポイントが存在するかのように描画されます。 平均は隣接するポイントを使用して算出されます。 Zero が使用される場合、グラフは値が０のポイントが存在するかのように描画されます。 既定値：Average。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarStackedProps">
      <summary>積み上げ横棒グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarStackedProps.StackedGroupName">
      <summary>積み上げ横棒グループ名を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.BarPercentStackedProps">
      <summary>割合積み上げ横棒グラフのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.LineProps">
      <summary>折れ線グラフの基本プロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.LineProps.EmptyPointValue">
      <summary>グラフを描画するときに空ポイントをどのように扱うかを決定します。 Average の値が使用される場合、グラフは Y の平均値を持つポイントが存在するかのように描画されます。 平均は隣接するポイントを使用して算出されます。 Zero が使用される場合、グラフは値が０のポイントが存在するかのように描画されます。 既定値：Average。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.LineProps.LabelStyle">
      <summary>データポイントラベルの位置を取得または設定します。 既定値：Auto。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.LineProps.ShowMarkerLines">
      <summary>マーカー線が表示されるかどうかを決定します。 既定値：false。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.LineSmoothProps">
      <summary>平滑化折れ線グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.LineSmoothProps.LineTension">
      <summary>曲線を描画する張力を取得または設定します。 張力がゼロの曲線は直線のようになります。 既定値：0.5。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.LineSteppedProps">
      <summary>階段グラフのプロパティ。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps">
      <summary>円グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.ThreeDLabelLineSize">
      <summary>3D ラベル線のサイズをデフォルトサイズに対する割合として表した値を取得または設定します。 既定値：100。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedStyle">
      <summary>集合スライスのスタイルを取得または設定します。 既定値：None。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedColor">
      <summary>集合円／ドーナツスライスの色を取得または設定します。 既定値：Color.Empty。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedLabel">
      <summary>集合円スライスのラベルを取得または設定します。 既定値："Other"。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedLegendText">
      <summary>集合円スライスの凡例テキストを取得または設定します。 既定値："Other"。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedSliceExploded">
      <summary>集合円スライスを分割して表示するかどうかを示すブール値を 取得または設定します。 既定値：false。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedThreshold">
      <summary>小さな円スライスをまとめるしきい値を取得または設定します。 既定値：５。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedThresholdUsePercent">
      <summary>
        集合スライスのしきい値（
        <see cref="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedThreshold" />）を割合として設定するかどうかを示す値を 取得または設定します。 既定値：true。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedToolTip">
      <summary>集合スライスのツールチップを取得または設定します。 既定値：true。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedChartShowLabels">
      <summary>集合円グラフのポイントラベルを表示します（スライスをまとめた場合）。 既定値：false。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.CollectedChartShowLegend">
      <summary>集合円グラフの凡例を表示します（スライスをまとめた場合）。 既定値：false。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.LabelsHorizontalLineSize">
      <summary>水平コールアウト線のサイズを取得または設定します。 この属性は、ラベルがデータポイントの外側に描画される場合のみ適用されます。 既定値：１。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.LabelsRadialLineSize">
      <summary>放射型コールアウト線のサイズを取得または設定します。 この属性は、ラベルがデータポイントの外側に描画される場合のみ適用されます。 既定値：１。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.MinimumRelativePieSize">
      <summary>最小円サイズを取得または設定します。 外側ラベルと併用するときに、 このプロパティはグラフ領域のサイズに対する割合として表した許容最小円サイズを制御します。 これにより、 ラベルがグラフ領域の大部分を占めて円が小さくなり過ぎないようにします。 既定値：30。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.PieDrawingStyle">
      <summary>円グラフとドーナツグラフの描画スタイルを取得または設定します。 既定値：Default。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.PieLabelStyle">
      <summary>データポイントラベルの位置を取得または設定します。 既定値：Default。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.PieLineColor">
      <summary>放射型および水平ラベル線の色を取得または設定します。 既定値：Color.Empty（自動設定）。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PieProps.PieStartAngle">
      <summary>最初の円スライスの開始角を決定します（度単位）。 既定値：０。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.DoughnutProps">
      <summary>ドーナツグラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.DoughnutProps.DoughnutRadius">
      <summary>ドーナツのサイズとして使用する半径の割合。 既定値：60。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelPyramidPropsBase">
      <summary>じょうごグラフとピラミッドグラフの共通プロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelPyramidPropsBase.CalloutLineColor">
      <summary>じょうごグラフまたはピラミッドグラフのデータポイントラベルのコールアウト線の色を取得または設定します。 既定値： Color.Empty（自動設定）。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps">
      <summary>じょうごグラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.ThreeDDrawingStyle">
      <summary>じょうご 3D グラフの描画スタイルを取得または設定します。 既定値：CircleBase。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.ThreeDRotationAngle">
      <summary>じょうごの 3D 回転角を取得または設定します。 既定値：５。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.InsideLabelAlignment">
      <summary>じょうごの内側に配置されるデータポイントラベルの垂直配置を取得または設定します。 既定値：Center。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.LabelStyle">
      <summary>じょうごグラフのデータポイントラベルのスタイルを取得または設定します。 既定値：OutsideInColumn。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.MinPointHeight">
      <summary>データポイントの最小高さを相対座標で表した値を取得または設定します。 この属性を使用することで、じょうごグラフの非常に小さなセグメントがつぶれて見えなくならないようにすることができます。 既定値：０。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.NeckHeight">
      <summary>じょうごの首部分の高さを取得または設定します。 定義済みのじょうご形状を使用する場合のみ適用されます。 既定値：５。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.NeckWidth">
      <summary>じょうごの首部分の幅を取得または設定します。 定義済みのじょうご形状を使用する場合のみ適用されます。 既定値：５。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.OutsideLabelPlacement">
      <summary>じょうごを基準とした外側ラベルの配置を取得または設定します。 既定値：Right。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.PointGap">
      <summary>ポイント間のギャップサイズを相対座標で表した値を取得または設定します。 既定値：０。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.FunnelProps.Style">
      <summary>じょうごグラフのスタイルを取得または設定します。 既定値：YIsHeight。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PyramidProps">
      <summary>ピラミッドグラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PyramidProps.ThreeDDrawingStyle">
      <summary>3D ピラミッドグラフの描画スタイルを取得または設定します。 既定値：SquareBase。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PyramidProps.ThreeDRotationAngle">
      <summary>ピラミッドの 3D 回転角を取得または設定します。 既定値：５。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PyramidProps.InsideLabelAlignment">
      <summary>ピラミッドの内側に配置されるデータポイントラベルの垂直配置を取得または設定します。 既定値：Center。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PyramidProps.LabelStyle">
      <summary>ピラミッドグラフのデータポイントラベルのスタイルを取得または設定します。 既定値：OutsideInColumn。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PyramidProps.MinPointHeight">
      <summary>データポイントの最小高さを相対座標で表した値を取得または設定します。 この属性を使用することで、ピラミッドグラフの非常に小さなセグメントがつぶれて見えなくならないようにすることができます。 既定値：０。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PyramidProps.OutsideLabelPlacement">
      <summary>ピラミッドを基準とした外側ラベルの配置を取得または設定します。 既定値：Right。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PyramidProps.PointGap">
      <summary>ポイント間のギャップサイズを相対座標で表した値を取得または設定します。 既定値：０。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PyramidProps.ValueType">
      <summary>データポイント値がセグメントの線形的な高さを表すか面積を表すかを取得または設定します。 既定値：Linear。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeProps">
      <summary>レンジチャートのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeProps.EmptyPointValue">
      <summary>グラフを描画するときに空ポイントをどのように扱うかを決定します。 Average の値が使用される場合、グラフは Y の平均値を持つポイントが存在するかのように描画されます。 平均は隣接するポイントを使用して算出されます。 Zero が使用される場合、グラフは値が０のポイントが存在するかのように描画されます。 既定値：Average。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeProps.LabelStyle">
      <summary>データポイントラベルの位置を取得または設定します。 既定値： 自動。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeSmoothProps">
      <summary>平滑化レンジチャートのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeSmoothProps.LineTension">
      <summary>曲線を描画する張力を取得または設定します。 張力がゼロの曲線は直線のようになります。 既定値：0.5。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangePropsBase">
      <summary>Column、Bar、Stock、Candlestick、ErrorBar、BoxPlot などのレンジチャートの共通プロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangePropsBase.MaxPixelPointWidth">
      <summary>データポイントの最大幅（ピクセル）を取得または設定します。 既定値：０。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangePropsBase.MinPixelPointWidth">
      <summary>データポイントの最小幅（ピクセル）を取得または設定します。 既定値：０。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangePropsBase.PixelPointWidth">
      <summary>データポイントの幅（ピクセル）を取得または設定します。 既定値：０。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangePropsBase.PointWidth">
      <summary>データポイントの相対幅を取得または設定します。 既定値：0.8。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeColumnProps">
      <summary>レンジ縦棒グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeColumnProps.DrawingStyle">
      <summary>横棒グラフと縦棒グラフの描画スタイルを取得または設定します。 既定値：Default。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeColumnProps.DrawSideBySide">
      <summary>同一の X 値を持つ複数のデータポイントを並べて描画するか、 同じ X 値を使用して描画するかを決定します。 Auto の場合、グラフタイプに応じて自動的に true または false が決定されます。 この属性を true に設定して効果があるのは、 グラフ領域の複数の系列の DrawSideBySide が true に設定されている場合だけです。 既定値：Auto。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeColumnProps.EmptyPointValue">
      <summary>グラフを描画するときに空ポイントをどのように扱うかを決定します。 Average の値が使用される場合、グラフは Y の平均値を持つポイントが存在するかのように描画されます。 平均は隣接するポイントを使用して算出されます。 Zero が使用される場合、グラフは値が０のポイントが存在するかのように描画されます。 既定値：Average。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBarProps">
      <summary>レンジ横棒グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBarProps.BarLabelStyle">
      <summary>データポイントラベルの配置を取得または設定します。 既定値：Center。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeStockProps">
      <summary>レンジ株価チャートのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeStockProps.LabelValueType">
      <summary>データラベルとして使用する Y 値を取得または設定します。 既定値：Close。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeStockProps.OpenCloseStyle">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeStockProps.LabelValueType" />が始値または終値の場合のマーカースタイルを取得または設定します。 既定値：Line。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeStockProps.ShowOpenClose">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeStockProps.LabelValueType" />が Open または Close の場合に、 始値マーカーと終値マーカー（線または三角形）が表示されるかどうかを決定します。 既定値：Both。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeCandlestickProps">
      <summary>レンジローソク足チャートのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeCandlestickProps.LabelValueType">
      <summary>データラベルとして使用する Y 値を取得または設定します。 既定値：Close。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeCandlestickProps.PriceDownColor">
      <summary>データポイントの終値が始値より小さい場合のローソクの色を取得または設定します。 既定値：Empty（自動）。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeCandlestickProps.PriceUpColor">
      <summary>データポイントの終値が始値より大きい場合のローソクの色を取得または設定します。 既定値：Empty（自動）。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeErrorBarProps">
      <summary>レンジ誤差範囲グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeErrorBarProps.DrawSideBySide">
      <summary>同一の X 値を持つ複数のデータポイントを並べて描画するか、 同じ X 値を使用して描画するかを決定します。 Auto の場合、グラフタイプに応じて自動的に true または false が決定されます。 この属性を true に設定して効果があるのは、 グラフ領域の複数の系列の DrawSideBySide が true に設定されている場合だけです。 既定値：Auto。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeErrorBarProps.CenterMarkerStyle">
      <summary>誤差範囲グラフの中心値に表示されるマーカーの外観タイプを取得または設定します。 既定値：Line。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeErrorBarProps.Series">
      <summary>誤差範囲計算に使用する系列の名前を取得または設定します。 名前付き系列が存在している必要があります。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeErrorBarProps.Style">
      <summary>誤差範囲グラフの誤差の上限値と下限値の表示状態を取得または設定します。 既定値：Both。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeErrorBarProps.Type">
      <summary>誤差範囲系列の中心値に対して上限値と下限値をどのように計算するかを定義します。 既定値：StandardError。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBoxPlotProps">
      <summary>レンジ箱ひげ図のプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBoxPlotProps.DrawSideBySide">
      <summary>同一の X 値を持つ複数のデータポイントを並べて描画するか、 同じ X 値を使用して描画するかを決定します。 Auto の場合、グラフタイプに応じて自動的に true または false が決定されます。 この属性を true に設定して効果があるのは、 グラフ領域の複数の系列の DrawSideBySide が true に設定されている場合だけです。 既定値：Auto。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBoxPlotProps.Percentile">
      <summary>箱ひげ図の百分位値を取得または設定します。 既定値：25。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBoxPlotProps.Series">
      <summary>箱ひげ図のデータソースとして使用する系列の名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBoxPlotProps.ShowAverage">
      <summary>箱ひげ図の平均値を表示するかどうかを示す値を 取得または設定します。 既定値：true。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBoxPlotProps.ShowMedian">
      <summary>箱ひげ図の中央値を表示するかどうかを示す値を 取得または設定します。 既定値：true。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBoxPlotProps.ShowUnusualValues">
      <summary>箱ひげ図の外れ数を表示するかどうかを示す値を 取得または設定します。 既定値：true。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RangeBoxPlotProps.WhiskerPercentile">
      <summary>箱ひげ図のひげの百分位値を取得または設定します。 適用グラフ：Range:Box。 既定値：true。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterProps">
      <summary>散布図のプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterProps.EmptyPointValue">
      <summary>グラフを描画するときに空ポイントをどのように扱うかを決定します。 Average の値が使用される場合、グラフは Y の平均値を持つポイントが存在するかのように描画されます。 平均は隣接するポイントを使用して算出されます。 Zero が使用される場合、グラフは値が０のポイントが存在するかのように描画されます。 既定値：Average。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterProps.LabelStyle">
      <summary>データポイントラベルの位置を取得または設定します。 既定値：Auto。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterBubbleProps">
      <summary>バブルチャートのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterBubbleProps.MaxSize">
      <summary>バブル半径の最大サイズをグラフ領域サイズに対する割合として示す値を取得または設定します。 既定値：15。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterBubbleProps.MinSize">
      <summary>バブル半径の最小サイズをグラフ領域サイズに対する割合として示す値を取得または設定します。 既定値：３。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterBubbleProps.ScaleMax">
      <summary>
        最大値として使用するバブルサイズを取得または設定します。 この値は
        <see cref="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterBubbleProps.MaxSize" />によって設定されたグラフ領域に対する割合として表されます。 既定値：15。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterBubbleProps.ScaleMin">
      <summary>
        最小値として使用するバブルサイズを取得または設定します。 この値は
        <see cref="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterBubbleProps.MinSize" />によって設定されたグラフ領域に対する割合として表されます。 既定値：３。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.ScatterBubbleProps.UseSizeForLabel">
      <summary>バブルサイズをデータポイントラベルとして使用するかどうかを示す値を 取得または設定します。 既定値：false。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PolarRadarPropsBase">
      <summary>極座標グラフとレーダーチャートの共通プロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PolarRadarPropsBase.EmptyPointValue">
      <summary>グラフを描画するときに空ポイントをどのように扱うかを決定します。 Average の値が使用される場合、グラフは Y の平均値を持つポイントが存在するかのように描画されます。 平均は隣接するポイントを使用して算出されます。 Zero が使用される場合、グラフは値が０のポイントが存在するかのように描画されます。 既定値：Average。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PolarRadarPropsBase.LabelStyle">
      <summary>データポイントラベルの位置を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PolarRadarPropsBase.AreaDrawingStyle">
      <summary>レーダーチャートと極座標グラフのプロット領域の形状を取得または設定します。 既定値：Circle。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PolarRadarPropsBase.CircularLabelsStyle">
      <summary>極座標グラフとレーダーチャートのラベル描画スタイルを取得または設定します。 既定値：Auto。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PolarProps">
      <summary>極座標グラフのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.PolarProps.PolarDrawingStyle">
      <summary>極座標グラフの描画スタイルを取得または設定します。 既定値：Line。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RadarProps">
      <summary>レーダーチャートのプロパティ。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties.RadarProps.RadarDrawingStyle">
      <summary>レーダーチャートの描画スタイルを取得または設定します。 既定値：Area。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeries">
      <summary>１系列のデータポイントのリストを定義します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartSeries.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartSeries.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.Hidden">
      <summary>系列を非表示にするかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.DataPoints">
      <summary>
        系列内のデータポイントを含む
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataPoints" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.Type">
      <summary>系列の視覚表現タイプを取得または設定します。 既定値： 列。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.Subtype">
      <summary>
        系列の視覚表現サブタイプを取得または設定します。 使用可能なサブタイプ（およびデフォルトサブタイプ）は
        <see cref="P:C1.C1Rdl.Rdl2008.ChartSeries.Type" />によって異なります。 デフォルトでは、このプロパティは null で、現在選択されている
        <see cref="P:C1.C1Rdl.Rdl2008.ChartSeries.Type" />のデフォルトサブタイプが使用されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.EmptyPoints">
      <summary>
        系列内の空ポイントの動作を定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartEmptyPoints" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.Style">
      <summary>
        系列のスタイルプロパティを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ChartSeries.Style" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.DataLabel">
      <summary>
        データラベルでマークする値を示す
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDataLabel" />オブジェクトを取得します。 DerivedSeries 内でのみ適用されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.Marker">
      <summary>
        データポイントマーカーの外観を定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartMarker" />オブジェクトを取得します。 DerivedSeries 内でのみ適用されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.CustomProperties">
      <summary>
        系列のカスタムプロパティを定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSeriesCustomProperties" />コレクションを取得します。 系列のすべてのカスタムグラフ属性が含まれます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.ItemInLegend">
      <summary>
        系列を凡例に表示する方法を定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartItemInLegend" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.LegendName">
      <summary>この系列を表示する凡例の名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.ChartAreaName">
      <summary>この系列をプロットするグラフ領域の名前を取得または設定します。 デフォルト（null または空）の場合、グラフ内の最初のグラフ領域が使用されます。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.ValueAxisName">
      <summary>この系列をプロットする値軸の名前を取得または設定します。 null または空の場合、系列は最初の値軸に対してプロットされます。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.CategoryAxisName">
      <summary>この系列をプロットするカテゴリ軸の名前を取得または設定します。 null または空の場合、系列は最初のカテゴリ軸に対してプロットされます。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeries.SmartLabel">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSmartLabel" />スマートラベルプロパティを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartSeriesCollection">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartSeriesCollection.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSeriesCollection" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartSeriesCollection.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartSeriesCollection.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartFormulaParameter">
      <summary>派生系列の数式のパラメータを定義します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartFormulaParameter.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartFormulaParameter" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartFormulaParameter.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartFormulaParameter" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartFormulaParameter.Value">
      <summary>値が実際のデータポイントに依存しない場合の パラメータの値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartFormulaParameter.Source">
      <summary>このパラメータの値として使用する ChartDataPointValue プロパティの名前を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartFormulaParameters">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartFormulaParameter" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartFormulaParameters.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartFormulaParameters" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartFormulaParameters.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartFormulaParameter" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartFormulaParameters.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartFormulaParameter" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartFormula">
      <summary>１つまたは複数のグラフ系列に適用する数式を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.BollingerBands">
      <summary>ボリンジャーバンド指標は、 単純移動平均から標準偏差レベルの上下にプロットされます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.MovingAverage">
      <summary>単純移動平均は、特定の期間に対して算出されたデータの平均です。 移動平均線はテクニカル分析で最もよく使われる価格指標です。 高値、安値、始値、終値など任意の価格で使用でき、 他の指標に適用することもできます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.ExponentialMovingAverage">
      <summary>指数移動平均は、特定の期間のデータに対して 直近のデータほど重みをかけて算出したデータの平均です。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.TriangularMovingAverage">
      <summary>三角移動平均は、 特定の期間のデータに対して中央のデータほど重みをかけて算出したデータの平均です。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.WeightedMovingAverage">
      <summary>加重移動平均は、 特定の期間に対して、直近のデータほど重みをかけて算出されたデータの平均です。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.MACD">
      <summary>MACD（移動平均収束拡散）指標は、 価格の２本の移動平均線を比較し、 ９日指数移動平均線を購入および売却シグナルとして使用します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.DetrendedPriceOscillator">
      <summary>DPO（Detrended Price Oscillator）は価格からトレンドを除去することを試みます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.Envelopes">
      <summary>エンベロープは、移動平均の上下に指定割合だけずらしてプロットされます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.Performance">
      <summary>パフォーマンス指標は、 現在の終値（またはその他の値）を１つ目の時間枠の最初の終値と比較します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.RateOfChange">
      <summary>変化率指標は、 指定した終値と現在の価格を比較します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.RelativeStrengthIndex">
      <summary>RSI（相対力指数）は、 終値の上昇と下降の値動きを比較し、 結果を 0～100 の値で表すモメンタムオシレータです。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.StandardDeviation">
      <summary>標準偏差は、 ボラティリティの指標として用いられ、値の差異、たとえば、終値とその移動平均の差異を測定します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.TRIX">
      <summary>三重指数移動平均は、 終値の三重の移動平均に基づいています。 その目的は、短期のサイクルを除去することです。 この指標は、指定期間未満のトレンド内の終値を維持します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.Mean">
      <summary>平均価格は日々の価格の平均値です。 トレンド指標のフィルタとして使用できます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ChartFormula.Median">
      <summary>中央値は日々の価格の中心の値です。 トレンド指標のフィルタとして使用できます。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDerivedSeries">
      <summary>別の系列に適用された数式から計算される 派生系列を定義します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDerivedSeries.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDerivedSeries" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDerivedSeries.AssignFrom(C1.C1Rdl.Rdl2008.ChartDerivedSeries)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDerivedSeries" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDerivedSeries.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDerivedSeriesCollection" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDerivedSeries.Series">
      <summary>
        派生系列の系列プロパティを定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDerivedSeries.SourceSeriesName">
      <summary>派生元の系列の名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDerivedSeries.FormulaParameters">
      <summary>
        数式のパラメータを含む
        <see cref="T:C1.C1Rdl.Rdl2008.ChartFormulaParameters" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDerivedSeries.Formula">
      <summary>ソース系列のデータ値に適用する数式を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartDerivedSeriesCollection">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDerivedSeries" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDerivedSeriesCollection.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDerivedSeriesCollection" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartDerivedSeriesCollection.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDerivedSeries" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartDerivedSeriesCollection.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDerivedSeries" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartData">
      <summary>グラフデータを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartData.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSeries" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartData.AssignFrom(C1.C1Rdl.Rdl2008.ChartData)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartData" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartData.Series">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartSeriesCollection" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartData.DerivedSeries">
      <summary>
        他の系列に適用された数式から計算される派生系列を含む
        <see cref="T:C1.C1Rdl.Rdl2008.ChartDerivedSeriesCollection" />コレクションを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />オブジェクトのカスタムパレットに使用するカスタムカラーを定義します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.#ctor(C1.C1Rdl.RdlColor)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="color">
        <see cref="P:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.Color" />プロパティの値。
      </param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.AssignFrom(C1.C1Rdl.Rdl2008.ChartCustomPaletteColor)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.op_Implicit(C1.C1Rdl.RdlColor)~C1.C1Rdl.Rdl2008.ChartCustomPaletteColor">
      <summary>
        <see cref="T:C1.C1Rdl.RdlColor" />を
        <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor" />に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Rdl.RdlColor" />。
      </param>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.op_Implicit(C1.C1Rdl.Rdl2008.ChartCustomPaletteColor)~C1.C1Rdl.RdlColor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor" />を
        <see cref="T:C1.C1Rdl.RdlColor" />に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor" />。
      </param>
      <returns>
        <see cref="T:C1.C1Rdl.RdlColor" />。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.Color">
      <summary>
        このオブジェクトの値を表す
        <see cref="T:C1.C1Rdl.RdlColor" />オブジェクト。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.TypeConverter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="str"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="o"></param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColors">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />オブジェクトのカスタムパレットに使用するカラーを定義します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColors.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColors" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColors.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColor" />タイプ。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColors.Add(C1.C1Rdl.RdlColor)">
      <summary>現在のコレクションに色を追加します。</summary>
      <param name="value">追加する色。</param>
      <returns>現在のコレクションの色が追加された位置のインデックス。</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ChartCustomPaletteColors.Add(C1.C1Rdl.Rdl2008.ChartCustomPaletteColor)">
      <summary>現在のコレクションに値を追加します。</summary>
      <param name="value">追加する値。</param>
      <returns>現在のコレクションの値が追加された位置のインデックス。</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ChartCustomPaletteColors.Item(System.Int32)">
      <summary>指定したインデックスの要素を取得します。</summary>
      <param name="index">コレクション内のインデックス。</param>
      <returns>指定されたインデックスの要素。</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Chart">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />オブジェクトは、単一のデータ視覚表現データ領域として描画すべきグラフ領域のセットを定義します。
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />の定義は
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />とほとんど同じですが、
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />には、Columns、Rows、Cells の代わりに Categories、Series、DataPoints があります。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DataRegion">
      <summary>データがリンクされたすべてのレポート項目の抽象基本クラス。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataRegion.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.DataRegion" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataRegion.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ReportElement" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataRegion.NoRowsMessage">
      <summary>
        使用可能なデータ行がない場合に、 （領域レイアウトではなく）
        <see cref="T:C1.C1Rdl.Rdl2008.DataRegion" />に表示するメッセージを取得または設定します。 注意： このテキストには、データ領域のスタイル情報が適用されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataRegion.DataSetName">
      <summary>
        この
        <see cref="T:C1.C1Rdl.Rdl2008.DataRegion" />に使用する
        <see cref="T:C1.C1Rdl.Rdl2008.DataSet" />の名前を取得または設定します。 最上位データ領域（他の
        <b>DataRegion</b>に格納されていないもの）の場合は、 レポート内に存在するデータセットが厳密に１つの場合を除いて必須です。 レポート内のデータセットが厳密に１つの場合、データ領域はそのデータセットを使用します。
        <para>注意： レポートにデータセットが存在しない場合、 使用できる有効な DataSetName がないため、データ領域を使用することはできません。</para>最上位でないデータ領域の場合は無視されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataRegion.PageBreak">
      <summary>
        現在のデータ領域の改ページ動作を定義する
        <see cref="P:C1.C1Rdl.Rdl2008.DataRegion.PageBreak" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataRegion.Filters">
      <summary>
        現在のデータ領域内のデータの各行に適用するフィルタを含む
        <see cref="P:C1.C1Rdl.Rdl2008.DataRegion.Filters" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataRegion.SortExpressions">
      <summary>
        現在のデータ領域内のデータ行のソートに使用する式を含む
        <see cref="P:C1.C1Rdl.Rdl2008.DataRegion.SortExpressions" />コレクションを取得します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Chart.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Chart.ScriptHostOwnerSetHost(C1.C1Rdl.Rdl2008.Scripting.ExpressionHostBase)">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Chart.ScriptHostOwnerGetChildren(System.Collections.Generic.List{C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner})">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Chart.AssignFrom(C1.C1Rdl.Rdl2008.Chart)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.ScriptContextHostType">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.SeriesHierarchy">
      <summary>
        グラフの系列メンバの階層を表す
        <see cref="T:C1.C1Rdl.Rdl2008.ChartHierarchy" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.CategoryHierarchy">
      <summary>
        グラフのカテゴリメンバの階層を表す
        <see cref="T:C1.C1Rdl.Rdl2008.ChartHierarchy" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.ChartData">
      <summary>
        グラフのデータ値を定義する
        <see cref="P:C1.C1Rdl.Rdl2008.Chart.ChartData" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.Areas">
      <summary>
        グラフのグラフ領域のセットを含む
        <see cref="T:C1.C1Rdl.Rdl2008.ChartAreas" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.Legends">
      <summary>
        グラフの凡例のセットを含む
        <see cref="T:C1.C1Rdl.Rdl2008.ChartLegends" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.Titles">
      <summary>
        グラフのタイトルのセットを含む
        <see cref="T:C1.C1Rdl.Rdl2008.ChartTitles" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.Palette">
      <summary>グラフ項目のカラーパレットを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.PaletteHatchBehavior">
      <summary>グラフ内のデータポイントにハッチングを自動的に適用するかどうかを示す値を 取得または設定します。 既定値： Default（None として扱われます）。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.DynamicHeight">
      <summary>グラフを拡張／縮小する高さを取得または設定します。 高さはサイズ変更による相対レイアウト変更の 初期高さとして使用されます。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.DynamicWidth">
      <summary>グラフを拡張／縮小する幅を取得または設定します。 幅はサイズ変更による相対レイアウト変更の 初期幅として使用されます。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.BorderSkin">
      <summary>
        グラフの枠線スキンを定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartBorderSkin" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.NoDataMessage">
      <summary>
        グラフに含まれるデータがない場合に表示するタイトルを定義する
        <see cref="T:C1.C1Rdl.Rdl2008.ChartNoDataMessage" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Chart.CustomPaletteColors">
      <summary>
        カスタムパレットカラーを含む
        <see cref="T:C1.C1Rdl.Rdl2008.ChartCustomPaletteColors" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ImageSizing">
      <summary>画像のサイズ調整のタイプを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ImageSizing.AutoSize">
      <summary>画像に合わせてオブジェクトを拡大／縮小します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ImageSizing.Fit">
      <summary>画像要素の高さと幅に完全に一致するようにオブジェクトのサイズを調整します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ImageSizing.FitProportional">
      <summary>アスペクト比を維持したままオブジェクトのサイズを調整します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ImageSizing.Clip">
      <summary>オブジェクトの余分な部分を切り取ります。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Image">
      <summary>レポート内の画像を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Image.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Image" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Image.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ReportElement" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Image.Source">
      <summary>画像のソースを取得または設定します。</summary>
      <remarks>
        <list type="bullet">
          <item>
            <term>
              <see cref="F:C1.C1Rdl.Rdl2008.ImageSource.External" />
            </term>
            <description>
              <see cref="P:C1.C1Rdl.Rdl2008.Image.Value" />には、画像の場所として評価される定数または式が含まれています。 これは完全なフォルダパス（例：/images/logo.gif）でも、相対パス（例：logo.gif）でも、あるいは URL（例：http://reportserver/images/logo.gif）でも構いません。 相対パスの基準はレポートと同じフォルダです。
            </description>
          </item>
          <item>
            <term>
              <see cref="F:C1.C1Rdl.Rdl2008.ImageSource.Embedded" />
            </term>
            <description>
              <see cref="P:C1.C1Rdl.Rdl2008.Image.Value" />には、レポート内の
              <see cref="T:C1.C1Rdl.Rdl2008.EmbeddedImage" />の名前として評価される定数または式が含まれています。
            </description>
          </item>
          <item>
            <term>
              <see cref="F:C1.C1Rdl.Rdl2008.ImageSource.Database" />
            </term>
            <description>
              <see cref="P:C1.C1Rdl.Rdl2008.Image.Value" />には、画像のバイナリデータとして評価される式（データベース内のフィールド）が含まれています。
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Image.Value">
      <summary>
        画像を定義する値を取得または設定します。 その値の解釈は、
        <see cref="P:C1.C1Rdl.Rdl2008.Image.Source" />によって変わります。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Image.MIMEType">
      <summary>
        画像の MIMEType を取得または設定します。
        <see cref="P:C1.C1Rdl.Rdl2008.Image.Source" />が
        <see cref="F:C1.C1Rdl.Rdl2008.ImageSource.Database" />の場合は必須です。 そうでない場合は無視されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Image.Sizing">
      <summary>画像が指定されたサイズに合わない場合の動作を定義する値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Line">
      <summary>
        レポートの線を表します。 Line クラスには、
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />から継承したプロパティの他に追加のプロパティはありません。 線に負の高さ／幅を指定すると、原点から上および左に引かれます。 負の Height と Width を使用できますが、 Top+Height と Left+Width は非負の有効なサイズになる必要があります。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Line.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Line" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Rectangle">
      <summary>
        子
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />オブジェクトを格納できる枠線付きの矩形領域を表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Rectangle.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Rectangle" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Rectangle.ScriptHostOwnerGetChildren(System.Collections.Generic.List{C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner})">
      <summary>これは内部使用専用です。</summary>
      <param name="children"></param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Rectangle.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.Rectangle" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Rectangle.ReportItems">
      <summary>子レポート項目のコレクションを取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Rectangle.PageBreak">
      <summary>
        現在の矩形の改ページ動作を定義する
        <see cref="P:C1.C1Rdl.Rdl2008.Rectangle.PageBreak" />オブジェクトを取得します。
        <para>null（デフォルト）は改ページなしを意味します。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Rectangle.KeepTogether">
      <summary>矩形のすべての内容をできるだけ１ページに 収めるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Rectangle.OmitBorderOnPageBreak">
      <summary>矩形が複数のページにまたがる場所で 枠線の表示を禁止するかどうかを示す値を取得または設定します。 また、反復背景画像も改行の後ろから再開するのではなく 連続するようになります。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Rectangle.LinkToChild">
      <summary>ドキュメントマップラベルが存在する場合に、 そのターゲット位置であるこの矩形に直接含まれるレポート項目の名前を取得または設定します。 DocumentMapLabel が存在しない場合は無視されます。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Subreport">
      <summary>サブレポートを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Subreport.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Subreport" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Subreport.ScriptHostOwnerGetChildren(System.Collections.Generic.List{C1.C1Rdl.Rdl2008.Scripting.IScriptHostOwner})">
      <summary>これは内部使用専用です。</summary>
      <param name="children"></param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Subreport.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ReportElement" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Subreport.ReportName">
      <summary>同じサーバー上のサブレポートへの完全なフォルダパス （例：/salesreports/orderdetails）または相対パス（例：orderdetails）を取得または設定します。 相対パスの基準は現在のレポートと同じフォルダです。 空の文字列を使用することはできません（ホワイトスペースは無視されます）。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Subreport.Parameters">
      <summary>
        サブレポートのパラメータを含む
        <see cref="P:C1.C1Rdl.Rdl2008.Subreport.Parameters" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Subreport.NoRowsMessage">
      <summary>
        サブレポートの本文で使用されているどのデータセットにも利用可能なデータ行がない場合に、 （領域レイアウトの代わりに）サブレポートに表示するメッセージを取得または設定します。
        <para>注意： このテキストには、サブレポートのスタイル情報が適用されます。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Subreport.MergeTransactions">
      <summary>データソースが同一の接続を使用している場合に、 サブレポートのトランザクションを親レポートのトランザクションとマージする （レポート全体の単一のトランザクションを作成）かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Subreport.KeepTogether">
      <summary>サブレポートをできるだけ１ページに収めるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Subreport.OmitBorderOnPageBreak">
      <summary>サブレポートが複数のページにまたがる場所で枠線の表示を禁止するかどうかを示す値を取得または設定します。 また、反復背景画像も改行の後ろから再開するのではなく連続するようになります。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.CellContents">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.CellContents.Tablix" />の本文、ヘッダー、またはコーナーセルに含まれるレポート項目を表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.CellContents.AssignFrom(C1.C1Rdl.Rdl2008.CellContents)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.CellContents" />のプロパティを現在のオブジェクトにコピーします。
        <see cref="P:C1.C1Rdl.Rdl2008.CellContents.ReportItem" />プロパティの値は値によってコピーされます。 つまり、
        <see cref="P:C1.C1Rdl.Rdl2008.CellContents.ReportItem" />のコピーが作成され、 現在のオブジェクトの同プロパティに割り当てられます。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.CellContents.Tablix">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.CellContents.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.CellContents.ColSpan">
      <summary>
        このセルスパンの列数を取得または設定します。
        <para>既定値：1。</para><para>
          すべての列グループがスパンセル間で一定で、これらのセルの先祖が共通でない限り、
          <see cref="T:C1.C1Rdl.Rdl2008.TablixCell" />の内側の
          <see cref="T:C1.C1Rdl.Rdl2008.CellContents" />の場合は１である必要があります。
        </para><see cref="T:C1.C1Rdl.Rdl2008.TablixHeader" />の内側の
        <see cref="T:C1.C1Rdl.Rdl2008.CellContents" />の場合は無視されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.CellContents.RowSpan">
      <summary>
        このセルスパンの行数を取得または設定します。
        <para>既定値：1。</para><para>
          <see cref="T:C1.C1Rdl.Rdl2008.TablixCell" />の内側の
          <see cref="T:C1.C1Rdl.Rdl2008.CellContents" />の場合は１である必要があります。
        </para><see cref="T:C1.C1Rdl.Rdl2008.TablixHeader" />の内側の
        <see cref="T:C1.C1Rdl.Rdl2008.CellContents" />の場合は無視されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.CellContents.ReportItem">
      <summary>
        現在のセル内の
        <see cref="P:C1.C1Rdl.Rdl2008.CellContents.ReportItem" />オブジェクトを取得または設定します。 この
        <see cref="P:C1.C1Rdl.Rdl2008.CellContents.ReportItem" />の Top、Left、Height、Width は無視されます。 位置は 0, 0、サイズは 100%、100% に取られます。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixCornerCell">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.TablixCornerCell.Tablix" />内のコーナーセルの内容を表します。 各列の幅は対応する行
        <see cref="T:C1.C1Rdl.Rdl2008.TablixHeader" />の幅と同じになります。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCornerCell.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerCell" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCornerCell.AssignFrom(C1.C1Rdl.Rdl2008.TablixCornerCell)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerCell" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerCell.Tablix">
      <summary>
        このオブジェクトを含む
        <see cref="P:C1.C1Rdl.Rdl2008.TablixCornerCell.Tablix" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerCell.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerCell.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerRow" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerCell.CellContents">
      <summary>
        セルの内容を含む
        <see cref="P:C1.C1Rdl.Rdl2008.TablixCornerCell.CellContents" />オブジェクトを取得します。
      </summary>
      <remarks>
        この
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />内の改ページは無視されます。 コーナー内の位置が別のセルからのスパンでカバーされる場合は省略する必要があります。 そうでない場合は必須です。
      </remarks>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixCornerRow">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.TablixCornerRow.Tablix" />のコーナーセクションの行内のセルのリストを表示します。 行の高さは対応する列
        <see cref="T:C1.C1Rdl.Rdl2008.TablixHeader" />の高さと同じになります。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCornerRow.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerRow" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCornerRow.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerCell" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerRow.Tablix">
      <summary>
        このオブジェクトを含む
        <see cref="P:C1.C1Rdl.Rdl2008.TablixCornerRow.Tablix" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerRow.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerRow.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerRows" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerRow.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerCell" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixCornerRows">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerRow" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCornerRows.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerRows" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCornerRows.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerRow" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerRows.Tablix">
      <summary>
        このオブジェクトを含む
        <see cref="P:C1.C1Rdl.Rdl2008.TablixCornerRows.Tablix" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerRows.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerRows.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCorner" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCornerRows.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerRow" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixCorner">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />のコーナー領域のレイアウトと構造を表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCorner.AssignFrom(C1.C1Rdl.Rdl2008.TablixCorner)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCorner" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCorner.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCorner.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCorner.Rows">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />のコーナーセクションの行のリストを定義する
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerRows" />コレクションを取得します。 Tablix 列階層内の
        <see cref="T:C1.C1Rdl.Rdl2008.TablixMembers" />の一意の高さの合計（メンバおよびすべての先祖メンバの Tablix ヘッダーサイズの合計）と同じ数だけ
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCornerRow" />要素が必要です。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixColumn">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />の本文セクションの列を表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixColumn.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixColumn" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixColumn.AssignFrom(C1.C1Rdl.Rdl2008.TablixColumn)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.TablixColumn" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixColumn.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.TablixColumns" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixColumn.Width">
      <summary>この列の各セルの幅を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixColumns">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />の本文セクションの列のセットを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixColumns.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixColumns" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixColumns.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixColumn" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixColumns.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.TablixBody" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixColumns.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.TablixColumn" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixRow">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.TablixRow.Tablix" />の本文セクションの行を表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixRow.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixRow" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixRow.AssignFrom(C1.C1Rdl.Rdl2008.TablixRow)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.TablixRow" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixRow.Tablix">
      <summary>
        このオブジェクトを含む
        <see cref="P:C1.C1Rdl.Rdl2008.TablixRow.Tablix" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixRow.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixRow.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.TablixRows" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixRow.Height">
      <summary>この行の各セルの高さを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixRow.Cells">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.TablixRow.Tablix" />の詳細セクションの行内のセルのリストを定義する
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCells" />コレクションを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixRows">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.TablixRows.Tablix" />の本文セクションの行のセットを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixRows.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixRows" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixRows.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixRow" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixRows.Tablix">
      <summary>
        このオブジェクトを含む
        <see cref="P:C1.C1Rdl.Rdl2008.TablixRows.Tablix" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixRows.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixRows.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.TablixBody" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixRows.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.TablixRow" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixCell">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.TablixCell.Tablix" />の本文セクションのセルの内容を表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCell.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCell" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCell.AssignFrom(C1.C1Rdl.Rdl2008.TablixCell)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCell" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCell.Tablix">
      <summary>
        このオブジェクトを含む
        <see cref="P:C1.C1Rdl.Rdl2008.TablixCell.Tablix" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCell.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCell.Row">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.TablixRow" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCell.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCells" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCell.CellContents">
      <summary>
        セルの内容を表す
        <see cref="P:C1.C1Rdl.Rdl2008.TablixCell.CellContents" />オブジェクトを取得します。
      </summary>
      <remarks>
        <see cref="P:C1.C1Rdl.Rdl2008.TablixCell.Tablix" />に行ヘッダー、何らかの動的列グループ、または複数の列がある場合、
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />は無視されます。 本文内の位置が別のセルからのスパンでカバーされる場合は省略する必要があります。 そうでない場合は必須です。
      </remarks>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCell.DataElementName">
      <summary>セル要素に使用する名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCell.DataElementOutput">
      <summary>データを描画する際にセル内容が 表示されるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixCells">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.TablixCells.Tablix" />の本文セクションの行内のセルのリストを表示します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCells.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCells" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixCells.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCell" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCells.Tablix">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCells.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCells.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.TablixRow" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixCells.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCell" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixBody">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />の本文のレイアウトと構造を表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixBody.AssignFrom(C1.C1Rdl.Rdl2008.TablixBody)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.TablixBody" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixBody.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixBody.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixBody.Columns">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />の本文セクションの列のリストを定義する
        <see cref="T:C1.C1Rdl.Rdl2008.TablixColumns" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixBody.Rows">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />の本文セクションの行のリストを定義する
        <see cref="T:C1.C1Rdl.Rdl2008.TablixRows" />コレクションを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixHeader">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.TablixHeader.Tablix" />のヘッダーを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixHeader.AssignFrom(C1.C1Rdl.Rdl2008.TablixHeader)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.TablixHeader" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixHeader.Tablix">
      <summary>
        このオブジェクトを含む
        <see cref="P:C1.C1Rdl.Rdl2008.TablixHeader.Tablix" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixHeader.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixHeader.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixHeader.Size">
      <summary>グループヘッダーの高さ （列メンバの場合）または幅（行メンバの場合）を取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixHeader.CellContents">
      <summary>
        グループヘッダーの内容を表す
        <see cref="P:C1.C1Rdl.Rdl2008.TablixHeader.CellContents" />オブジェクトを取得します。
        <para>
          この
          <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />内の改ページは無視されます。
        </para>
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.KeepWithGroup">
      <summary>Tablix メンバを他のメンバと一緒に保持するルールを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.KeepWithGroup.None">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" />を他のメンバと合わせて保持しません。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.KeepWithGroup.Before">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" />を前の動的メンバと合わせて保持します。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.KeepWithGroup.After">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" />を次の動的メンバと合わせて保持します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixMember">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.Tablix" />階層のメンバを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixMember.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixMember.AssignFrom(C1.C1Rdl.Rdl2008.TablixMember)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.Parent">
      <summary>
        親
        <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" />オブジェクトまたは null を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.Owner">
      <summary>
        このオブジェクトを所有している
        <see cref="T:C1.C1Rdl.Rdl2008.TablixMembers" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.Hierarchy">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.TablixHierarchy" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.Tablix">
      <summary>
        このオブジェクトを含む
        <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.Tablix" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.Group">
      <summary>
        データのグループ化を定義する
        <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.Group" />オブジェクトを取得します。 このプロパティが null の場合、 現在の Tablix メンバは静的メンバになります。そうでない場合は動的メンバです。
        <para>先祖グループが詳細グループの場合、グループ化は許可されません。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.SortExpressions">
      <summary>
        グループインスタンスをソートする式を含む
        <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.SortExpressions" />コレクションを取得します。
        <para>
          <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.Group" />が null の場合は使用されません。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.TablixHeader">
      <summary>
        メンバのヘッダーセルを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.TablixHeader" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.Members">
      <summary>
        このメンバのサブメンバを含む
        <see cref="T:C1.C1Rdl.Rdl2008.TablixMembers" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.CustomProperties">
      <summary>
        このメンバのカスタムプロパティを含む
        <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.CustomProperties" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.FixedData">
      <summary>
        ユーザーがスクロールして
        <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.Tablix" />の一部がページ外に出たときにも、Tablix メンバ全体（本文セルを含む）をページに表示するかどうかを示す値を取得または設定します。
        <para>
          <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.Tablix" />の階層の最も外側のメンバ（行または列）でのみ true にできます。
        </para><para>FixedData=True のメンバは、階層の その他すべての FixedData メンバと隣接している必要があります。</para><para>
          <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.Tablix" />の反対側の階層にヘッダー（FixedRowHeaders または FixedColumnHeaders）がある場合は true にすることはできません。
        </para><para>GroupsBeforeRowHeaders が設定されている場合は、左端の列メンバで true にすることができません。</para><para>最初の行メンバに設定しない限り、行メンバで true に設定することはできません。</para><para>対応する本文セルがスパンの一部で、スパン領域の他のセルに対応する同レベルの TablixMember の FixedData が false の場合は true にすることはできません。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.Visibility">
      <summary>現在の Tablix メンバの表示状態を取得します。 特定のメンバインスタンスのすべてのサブメンバのすべてのインスタンスが非表示の場合、 そのメンバインスタンスは自動的に非表示になります。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.HideIfNoRows">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.Tablix" />にデータ行が含まれていない場合、この静的メンバを非表示にするかどうかを示す値を取得または設定します。 動的メンバの場合は無視されます。 この方法でメンバ非表示にされたメンバは表示状態のプロパティ（ToggleItemを含む）を無視します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.KeepWithGroup">
      <summary>
        この静的メンバを前後の兄弟関係の動的メンバの直近の表示インスタンスと （できるだけ）同じページに維持するかどうかを示す値を取得または設定します。
        <para>このメンバとターゲットの動的メンバの間の各兄弟メンバは、 KeepWithGroup にこのメンバと同じ値が設定されている必要があります。 列メンバ、あるいは動的な子孫を持つ動的メンバまたはメンバの場合は None にする必要があります。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.RepeatOnNewPage">
      <summary>
        KeepWithGroup から参照される完全なインスタンスが少なくとも１つ含まれる各ページ、またはそのメンバの子孫の１つ（KeepWithGroup が None でない子孫を除く）が含まれる各ページで、 この静的メンバを繰り返すかどうかを示す値を取得または設定します。
        <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.KeepWithGroup" />が None の場合は無視されます。 このメンバとターゲットの動的メンバの間の同レベルの各メンバは、 RepeatOnNewPage にこのメンバと同じ値が設定されている必要があります。 列メンバの場合は false である必要があります。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.DataElementName">
      <summary>このメンバのデータ要素に使用する名前を取得または設定します。 CLS 準拠の識別子にする必要があります。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.DataElementOutput">
      <summary>データを描画する際に現在のメンバが表示されるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMember.KeepTogether">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.TablixMember.Tablix" />メンバをできるだけ１ページに 収めるかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixMembers">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixMembers.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixMembers" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixMembers.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMembers.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMembers.Hierarchy">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.TablixHierarchy" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixMembers.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.TablixMember" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixHierarchy">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />のメンバの階層を表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TablixHierarchy.AssignFrom(C1.C1Rdl.Rdl2008.TablixHierarchy)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.TablixHierarchy" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixHierarchy.Owner">
      <summary>
        このオブジェクトを所有している
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixHierarchy.Report">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TablixHierarchy.Members">
      <summary>
        Tablix 階層のメンバの番号付きリストを含む
        <see cref="T:C1.C1Rdl.Rdl2008.TablixMembers" />コレクションを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TablixLayoutDirection">
      <summary>Tablix レイアウトの全体的な方向を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TablixLayoutDirection.LTR">
      <summary>動的 Tablix 列は左から右に拡大します（ヘッダーは左）。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TablixLayoutDirection.RTL">
      <summary>動的 Tablix 列は右から左に拡大し（ヘッダーは右）、同レベルのグループの順序が反転します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Tablix">
      <summary>反復する列グループと行グループが ネストされた柔軟なレイアウトグリッドを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Tablix.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Tablix.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ReportElement" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.Corner">
      <summary>
        Tablix の左上コーナーエリアの要素を含む領域を定義する
        <see cref="T:C1.C1Rdl.Rdl2008.TablixCorner" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.Body">
      <summary>
        Tablix のデータ要素を含む右下の領域を定義する
        <see cref="T:C1.C1Rdl.Rdl2008.TablixBody" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.ColumnHierarchy">
      <summary>
        Tablix の列メンバの階層を定義する
        <see cref="T:C1.C1Rdl.Rdl2008.TablixHierarchy" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.RowHierarchy">
      <summary>
        Tablix の行メンバの階層を定義する
        <see cref="T:C1.C1Rdl.Rdl2008.TablixHierarchy" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.LayoutDirection">
      <summary>Tablix レイアウトの全体的な方向を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.GroupsBeforeRowHeaders">
      <summary>
        行ヘッダーの左（RTL Tablixの行ヘッダーの右）に表示する 左端の外側列メンバのインスタンスの数取得または設定します。 左端の外側列メンバが静的メンバの場合は無視されます。
        <para>既定値０、最小値：０、最大値：2147483647。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.RepeatColumnHeaders">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />の一部が表示される各ページで 列ヘッダーを繰り返し表示するかどうかを示す値を取得または設定します。 appears.
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.RepeatRowHeaders">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />の一部が表示される各ページで 行ヘッダーを繰り返し表示するかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.FixedColumnHeaders">
      <summary>
        ユーザーがスクロールして
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />の一部がページ外に出たときにも 列ヘッダーをページに表示するかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.FixedRowHeaders">
      <summary>
        ユーザーがスクロールして
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />の一部がページ外に出たときにも 行ヘッダーをページに表示するかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.OmitBorderOnPageBreak">
      <summary>Tablix が複数のページにまたがる場所で枠線の表示を禁止するかどうかを示す値を取得または設定します。 また、反復背景画像も改行の後ろから再開するのではなく 連続するようになります。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Tablix.KeepTogether">
      <summary>Tablix 全体（反復されるセクションすべて）を できるだけ１ページに収めるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ToggleImage">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Textbox" />の一部として表示されるトグル画像のプロパティを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ToggleImage.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ToggleImage" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ToggleImage.AssignFrom(C1.C1Rdl.Rdl2008.ToggleImage)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ToggleImage" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ToggleImage.InitialState">
      <summary>トグル画像の初期状態を決定する値を取得または設定します。 true は拡張（マイナス記号）を意味します。 false は縮小（プラス記号）を意味します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.UserSort">
      <summary>UI のテキストボックスの一部として表示されるエンドユーザーソートコントロールのプロパティを表します。 ユーザーはコントロールを使用してソート方向（昇順、降順、なし）を選択できます。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.UserSort.AssignFrom(C1.C1Rdl.Rdl2008.UserSort)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.UserSort" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.UserSort.SortExpression">
      <summary>
        ソートに使用する式を取得または設定します。 グループフィルタの式と同じ制約があります。
        <b>SortExpression</b>で使用する集計では、
        <see cref="P:C1.C1Rdl.Rdl2008.UserSort.SortExpressionScope" />と等しいか、それを中に含むスコープのみ使用できます。
        <see cref="P:C1.C1Rdl.Rdl2008.UserSort.SortExpressionScope" />が指定されていない場合、
        <b>SortExpression</b>で明示的なスコープなしに集計を行うことはできません。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.UserSort.SortExpressionScope">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.UserSort.SortExpression" />の評価対象のスコープ（データ領域またはグループ）の名前を取得または設定します。 省略した場合、式が評価され、ソートは
        <see cref="P:C1.C1Rdl.Rdl2008.UserSort.SortTarget" />内の各詳細スコープに対して個別に実行されます。 現在のスコープと等しいか、その中に含まれるスコープである必要があります。
        <see cref="T:C1.C1Rdl.Rdl2008.Textbox" />に現在のスコープがない場合（どのデータ領域にも含まれていない場合）、
        <b>SortExpressionScope</b>は
        <see cref="P:C1.C1Rdl.Rdl2008.UserSort.SortTarget" />に等しいか、その中に含まれている必要があります。 詳細スコープ（グループ式のないグループ）を使用することはできません。
        <b>SortExpressionScope</b>のデータセットは、
        <see cref="P:C1.C1Rdl.Rdl2008.UserSort.SortTarget" />のデータセットと同一である必要があります。 ソートは
        <b>SortExpressionScope</b>を含むグループの中で実行されます。 たとえば、次のようになります。
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />には、 国グループと市グループがあり、その各ヘッダーに
        <see cref="T:C1.C1Rdl.Rdl2008.UserSort" />と、対応するグループの
        <see cref="P:C1.C1Rdl.Rdl2008.UserSort.SortExpressionScope" />があります。 国をソートする場合は Tablix 内の国グループがソートされ、 市をソートする場合は（国グループを並べ直すことなく）各国グループ内の市グループがソートされます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.UserSort.SortTarget">
      <summary>ソートの適用対象のデータ領域、グループ、またはデータセットの名前を取得または設定します。 省略した場合、ソートは現在のスコープのインスタンスに適用されます。 現在のスコープ、先祖スコープ、または同レベルのデータ領域であるスコープである必要があります。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.EvaluationMode">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Value" />の処理モードを示します。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.EvaluationMode.Auto">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Value" />先頭が = の場合は式として評価されます。 そうでない場合は
        <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Value" />は定数として扱われます。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.EvaluationMode.Expression">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Value" />は式として評価されます。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.EvaluationMode.Constant">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Value" />は定数として扱われます。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.MarkupType">
      <summary>マークアップの処理方法を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.MarkupType.None">
      <summary>マークアップは処理されません。 マークアップはすべてリテラルであると見なされます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.MarkupType.HTML">
      <summary>テキストに含まれる HTML マークアップを HTML 対応のレンダリング拡張で処理して表示します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TextRun">
      <summary>テキストの連続スパンの値と書式を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TextRun.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TextRun" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TextRun.AssignFrom(C1.C1Rdl.Rdl2008.TextRun)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.TextRun" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRun.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.TextRuns" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRun.Paragraph">
      <summary>
        このオブジェクトを含む
        <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Paragraph" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRun.Textbox">
      <summary>
        このオブジェクトを含む
        <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Textbox" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRun.Label">
      <summary>
        この
        <b>TextRun</b>のプレースホルダのラベルを取得または設定します。 この名前はデザイナツールの UI で表示プレースホルダとして表示されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRun.Value">
      <summary>
        実行時に
        <see cref="T:C1.C1Rdl.Rdl2008.TextRun" />に表示される定数または式を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRun.Style">
      <summary>
        この
        <see cref="T:C1.C1Rdl.Rdl2008.TextRun" />のスタイルプロパティを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRun.ActionInfo">
      <summary>
        この
        <see cref="T:C1.C1Rdl.Rdl2008.TextRun" />のアクションを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.TextRun.ActionInfo" />オブジェクトを取得します。 親
        <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Textbox" />にアクションが定義されている場合、
        <see cref="T:C1.C1Rdl.Rdl2008.TextRuns" />の
        <see cref="T:C1.C1Rdl.Rdl2008.Actions" />は無視されます（
        <see cref="P:C1.C1Rdl.Rdl2008.TextRun.Textbox" />アクションを評価した結果が null であっても）。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRun.ToolTip">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TextRun" />のテキストツールチップラベルを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRun.MarkupType">
      <summary>テキストに含まれるマークアップの処理方法を示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TextRuns">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TextRun" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TextRuns.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.TextRuns" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.TextRuns.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.TextRun" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRuns.Owner">
      <summary>
        このコレクションを所有している
        <see cref="T:C1.C1Rdl.Rdl2008.Paragraph" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.TextRuns.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.TextRun" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ListStyle">
      <summary>段落リストスタイルを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ListStyle.None">
      <summary>これがリスト段落ではなく、 この段落の行頭に黒丸や番号が付かないことを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ListStyle.Numbered">
      <summary>これが行頭に番号を付けるリスト段落であることを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ListStyle.Bulleted">
      <summary>これが行頭に黒丸を付けるリスト段落であることを示します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Paragraph">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.Paragraph.Textbox" />内のテキストの段落を表します。
        <see cref="T:C1.C1Rdl.Rdl2008.TextRun" />要素のコレクションが含まれています。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Paragraph.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Paragraph" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Paragraph.AssignFrom(C1.C1Rdl.Rdl2008.Paragraph)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.Paragraph" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.Paragraphs" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.Textbox">
      <summary>
        このオブジェクトを含む
        <see cref="P:C1.C1Rdl.Rdl2008.Paragraph.Textbox" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.TextRuns">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.Paragraph.TextRuns" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.LeftIndent">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.Paragraph.Textbox" />の左端からのインデント（左余白は含みません）を取得または設定します。
        <para>既定値：０tw。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.RightIndent">
      <summary>
        <see cref="P:C1.C1Rdl.Rdl2008.Paragraph.Textbox" />の右端からのインデント（右余白は含みません）を取得または設定します。
        <para>既定値：０tw。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.HangingIndent">
      <summary>
        左インデントを基準とした、 段落の最初の行のインデントまたはぶら下げインデントを取得または設定します。 このプロパティは負の値を取ることができます。 正の場合、最初の行だけをインデントします（段落字下げ）。 負の場合、最初の行を除くすべての行をインデントします（ぶら下げインデント）。
        <para>既定値：０tw。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.Style">
      <summary>
        段落のスタイルプロパティを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.Paragraph.Style" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.ListStyle">
      <summary>この段落がリストの一部であり、 番号付けタイプを識別するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.ListLevel">
      <summary>
        番号付けスタイルとインデントレベルを取得または設定します。 ０より大きく９以下である必要があります。
        <see cref="P:C1.C1Rdl.Rdl2008.Paragraph.ListStyle" />が None の段落の場合、 このプロパティを使用して段落がインデントされます。
        <see cref="P:C1.C1Rdl.Rdl2008.Paragraph.ListStyle" />が Bulleted または Numbered の場合、 インデントレベルと黒丸／番号のスタイルとして利用されます。
        <para>既定値：0。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.SpaceBefore">
      <summary>
        段落の前のスペースを取得または設定します。 負の値を取れます。
        <para>既定値：０tw。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraph.SpaceAfter">
      <summary>
        段落の後のスペースを取得または設定します。 負の値を取れます。
        <para>既定値：０tw。</para>
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Paragraphs">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Paragraph" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Paragraphs.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Paragraphs" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Paragraphs.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.Paragraph" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraphs.Owner">
      <summary>
        このコレクションを所有している
        <see cref="T:C1.C1Rdl.Rdl2008.Textbox" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Paragraphs.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.Paragraph" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Textbox">
      <summary>書式付きテキストを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Textbox.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Textbox" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Textbox.AssignFrom(C1.C1Rdl.Rdl2008.ReportElement)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.Textbox" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Textbox.CanGrow">
      <summary>内容に合わせてテキストボックスの高さを大きくできるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Textbox.CanShrink">
      <summary>内容に合わせてテキストボックスの高さを小さくできるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Textbox.HideDuplicates">
      <summary>
        レポート項目に関連付けられている式の値が前の表示インスタンスと同じだった場合に、 テキストの表示を禁止するかどうかを制御する値を取得または設定します。
        <para>このプロパティの値は、非表示を適用する（現在のグループ以外の）コンテナグループまたはデータセットの名前になります。 そのグループの新しいインスタンスが出現するたびに、 このレポートの最初の表示インスタンスが非表示ではなくなります。 重複を非表示にする目的では、前のページの行は無視されます。</para>現在のテキストボックスが
        <see cref="T:C1.C1Rdl.Rdl2008.Tablix" />セルにある場合、 テキストのみが省略されます。 テキストボックスは引き続きセルの背景と枠線を提供します。 Tablix セルの外側では、 背景と枠線も同様に省略されます。 テキストボックスに
        <see cref="T:C1.C1Rdl.Rdl2008.TextRun" />が１つだけ含まれる場合を除いて無視されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Textbox.ToggleImage">
      <summary>
        トグル画像を現在のテキストボックスの一部として表示する場合の初期状態を含む
        <see cref="P:C1.C1Rdl.Rdl2008.Textbox.ToggleImage" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Textbox.UserSort">
      <summary>
        UI のこのテキストボックスの一部として表示するエンドユーザーソートコントロールのプロパティを含む
        <see cref="T:C1.C1Rdl.Rdl2008.UserSort" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Textbox.DataElementStyle">
      <summary>
        現在のテキストボックス値のすべての
        <see cref="T:C1.C1Rdl.Rdl2008.TextRun" />値を要素として描画するか属性として描画するかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Textbox.KeepTogether">
      <summary>現在のテキストボックスのすべての内容をできるだけ１ページに 収めるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Textbox.Paragraphs">
      <summary>
        現在のテキストボックスの内容を表す
        <see cref="P:C1.C1Rdl.Rdl2008.Textbox.Paragraphs" />コレクションを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DataSetReference">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />の値またはデフォルト値のリストを取得するパラメータを定義します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DataSetReference.AssignFrom(C1.C1Rdl.Rdl2008.DataSetReference)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.DataSetReference" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSetReference.Defined">
      <summary>DataSetReference オブジェクトが正しく初期化されたかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSetReference.DataSetName">
      <summary>
        使用する
        <see cref="T:C1.C1Rdl.Rdl2008.DataSet" />の名前を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSetReference.ValueField">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />の 値／デフォルト値に使用するフィールドの名前を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DataSetReference.LabelField">
      <summary>
        ユーザーに選択肢として表示する値に使用するフィールドの名前を取得または設定します。 指定されなかった場合や戻り値が null だった場合、
        <see cref="P:C1.C1Rdl.Rdl2008.DataSetReference.ValueField" />の値が使用されます。
        <see cref="P:C1.C1Rdl.Rdl2008.ReportParameter.DefaultValue" />には使用されません。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.DefaultValue">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />のデフォルト値を表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DefaultValue.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.DefaultValue" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.DefaultValue.AssignFrom(C1.C1Rdl.Rdl2008.DefaultValue)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.DefaultValue" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DefaultValue.DataSetReference">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />のデフォルト値を取得するために実行するクエリーを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.DefaultValue.DataSetReference" />オブジェクトを取得します。 値が１つのパラメータの場合、デフォルトは
        <see cref="P:C1.C1Rdl.Rdl2008.DataSetReference.ValueField" />の最初の値です。 多値パラメータの場合、デフォルトは
        <see cref="P:C1.C1Rdl.Rdl2008.DataSetReference.ValueField" />のすべての値です。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.DefaultValue.Values">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />のデフォルト値を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ParameterValue">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />が取り得る値を定義します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ParameterValue.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ParameterValue" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ParameterValue.#ctor(C1.C1Rdl.RdlObject,C1.C1Rdl.RdlString)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ParameterValue" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="value">
        <see cref="P:C1.C1Rdl.Rdl2008.ParameterValue.Value" />プロパティの値。
      </param>
      <param name="label">
        <see cref="P:C1.C1Rdl.Rdl2008.ParameterValue.Label" />プロパティの値。
      </param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ParameterValue.AssignFrom(C1.C1Rdl.Rdl2008.ParameterValue)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ParameterValue" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ParameterValue.Value">
      <summary>パラメータの取り得る値を取得または設定します。 Boolean 型のパラメータの場合、true または false を使用します。 DateTime 型のパラメータの場合、ISO 8601 を使用します。 Float 型のパラメータの場合、オプションの小数点として “.” を使用します。 Value 式が配列を返す場合、配列内の各項目は単一の値として扱われます。 配列の項目を配列にすることはできません。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ParameterValue.Label">
      <summary>
        UI に表示される値のラベルを取得または設定します。 無指定の場合、
        <see cref="P:C1.C1Rdl.Rdl2008.ParameterValue.Value" />がラベルとして使用されます（
        <see cref="P:C1.C1Rdl.Rdl2008.ParameterValue.Value" />も無指定の場合、Label は空の文字列になります）。 Value 式が配列を返す場合、 Label 式は項目数が同じ配列を返す必要があります。 Value 式が配列を返さない場合、Label 式にも配列を返す式は使えません。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ParameterValues">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ParameterValue" />オブジェクトのコレクション。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ParameterValues.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ParameterValues" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ParameterValues.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.ParameterValue" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ParameterValues.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.ParameterValue" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ValidValues">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />が取り得る値を表します。 ユーザーがパラメータ値を選択するための UI の選択肢リストとして使用します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ValidValues.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ValidValues" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ValidValues.AssignFrom(C1.C1Rdl.Rdl2008.ValidValues)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ValidValues" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ValidValues.Defined">
      <summary>このオブジェクトが空でないかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ValidValues.DataSetReference">
      <summary>
        パラメータが取り得る値のリストを取得するために実行するクエリーを定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ValidValues.DataSetReference" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ValidValues.ParameterValues">
      <summary>
        パラメータのハードコード値を定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ValidValues.ParameterValues" />コレクションを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ReportParameter">
      <summary>クエリーの一部としてデータソースに渡される パラメータに関する情報が含まれます。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportParameter.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportParameter.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.Report">
      <summary>
        このパラメータを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameters" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.DataType">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />のデータ型を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.Nullable">
      <summary>このパラメータが null を取り得ることを示す値を取得または設定します。 多値パラメータである場合は true にできません。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.DefaultValue">
      <summary>
        この
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />のデフォルト値を定義する
        <see cref="P:C1.C1Rdl.Rdl2008.ReportParameter.DefaultValue" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.AllowBlank">
      <summary>
        このパラメータに空の文字列を使用できるかどうかを示す値を取得または設定します。
        <see cref="P:C1.C1Rdl.Rdl2008.ReportParameter.DataType" />が String でない場合は無視されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.Prompt">
      <summary>パラメータ値を尋ねるときに表示する ユーザープロンプトを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.Hidden">
      <summary>パラメータのユーザーへの表示を 禁止するかどうかを示す値を取得または設定します （ただし、サブレポート、 ドリルスルーレポートなどでのプログラム的な使用は可能です）。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.ValidValues">
      <summary>
        （エンドユーザー UI の）パラメータの取り得る値を決定する
        <see cref="P:C1.C1Rdl.Rdl2008.ReportParameter.ValidValues" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.MultiValue">
      <summary>これが多値パラメータ（値のセットを取れるパラメータ）であることを示す値を 取得または設定します。 多値パラメータは、 Value プロパティと Label プロパティでゼロ基準の配列として式からアクセスします （例：Parameters!Cities.Value(0) and Parameters!Cities.Label(0)）。 ブール型のパラメータの場合は無視されます。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameter.UsedInQuery">
      <summary>レポート内のクエリーでパラメータを 使用するかどうかを示す値を取得または設定します。 これはパラメータが変化したときにクエリーを 再実行するかどうかを決定するために必要です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ReportParameters">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportParameters.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameters" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportParameters.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />タイプ。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.ReportParameters.FindByName(System.String)">
      <summary>指定された名前のパラメータを検索します。</summary>
      <param name="name">検索するパラメータの名前。</param>
      <returns>
        指定された名前の
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameters.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.ReportParameters.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.Sum">
      <summary>合計。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.Avg">
      <summary>平均。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.Max">
      <summary>最大値。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.Min">
      <summary>最小値。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.Count">
      <summary>カウント。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.CountDistinct">
      <summary>個別のカウント。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.StDev">
      <summary>標準偏差。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.StDevP">
      <summary>母集団全体の標準偏差。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.Var">
      <summary>分散。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.VarP">
      <summary>母集団全体の分散。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.First">
      <summary>先頭。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.RunningValueFunctionEnum.Last">
      <summary>最後。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.AggregateRecursive">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.AggregateRecursive.Simple">
      <summary>簡易。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Scripting.AggregateRecursive.Recursive">
      <summary>再帰。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.AggregateHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ScriptHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ExpressionAggregateHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.DataAggregateHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.SumHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.AvgHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.MaxHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.MinHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.CountHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.CountDistinctHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.StDevHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.StDevPHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.VarHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.VarPHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.CountRowsHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.FirstHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.LastHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.PreviousHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.RunningValueHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.RowNumberHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.CustomAggregateHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.CodeHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.CustomCodeHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Scripting.CodeHostBase.#ctor">
      <summary></summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.FieldsImplBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.FieldsBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ReportItemBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ReportItemsBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ActionHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ExpressionHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.BackgroundImageHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.BorderHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartAlignTypeHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartAreaHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartAxisHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartAxisScaleBreakHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartAxisTitleHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartBorderSkinHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartCustomPaletteColorHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartDataLabelHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartDataPointCustomPropertiesHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartDataPointHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartDataPointValuesHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartElementPositionHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartEmptyPointsHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartFormulaParameterHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartGridLinesHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartItemInLegendHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartLegendHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartLegendTitleHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartMarkerHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartMemberHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartNoMoveDirectionsHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartSeriesCustomPropertiesHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartSeriesHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartSmartLabelHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartStripLineHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartThreeDPropertiesHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartTickMarksHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ChartTitleHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.DataRegionHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.DrillthroughHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.FieldHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.FilterHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.GroupHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ImageHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ParagraphHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ParameterHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ParameterValueHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.QueryParameterHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ReportItemHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ReportParameterHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Scripting.ReportParameterHostBase.Prompt">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.SortExpressionHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.StyleHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.TextRunHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.UserDefinedPropertyHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ValueHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.VariableHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.VisibilityHostBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.PropertyInaccessible">
      <summary>ユーザースクリプトが現在のコンテキストではアクセスできないプロパティに アクセスしようとしたときに発生する例外を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Scripting.PropertyInaccessible.#ctor(System.String)">
      <summary>
        <b>PropertyInaccessible</b>クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="propName">エラー発生の原因のプロパティの名前。</param>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ReportRuntimeBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.GlobalsBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.UserBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.FieldImplBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.FieldBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ParametersBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.ParameterBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.DataSourcesBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.DataSourceBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.DataSetsBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.DataSetBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Scripting.VariablesBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.SortDirection">
      <summary>ソート順序を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.SortDirection.Ascending">
      <summary>昇順ソート。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.SortDirection.Descending">
      <summary>降順ソート。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.SortExpression">
      <summary>グループのソートに使用する式を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.SortExpression.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.SortExpression" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.SortExpression.AssignFrom(C1.C1Rdl.Rdl2008.SortExpression)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.SortExpression" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.SortExpression.Direction">
      <summary>ソート方向を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.SortExpression.Value">
      <summary>
        ソート基準の値を取得または設定します。
        <para>
          RunningValue 関数と RowNumber 関数は、
          <see cref="T:C1.C1Rdl.Rdl2008.SortExpression" />では使用できません。
        </para><para>
          <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />オブジェクトを参照することはできません。
        </para>
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.SortExpressions">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.SortExpression" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.SortExpressions.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.SortExpressions" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.SortExpressions.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.SortExpression" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.SortExpressions.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.SortExpression" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.BorderStyle">
      <summary>枠線のスタイルを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BorderStyle.Default">
      <summary>
        デフォルト。
        <see cref="T:C1.C1Rdl.Rdl2008.Line" />内では
        <see cref="F:C1.C1Rdl.Rdl2008.BorderStyle.Solid" />として、その他の場所では
        <see cref="F:C1.C1Rdl.Rdl2008.BorderStyle.None" />として扱われます。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BorderStyle.None">
      <summary>枠線を描画しない。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BorderStyle.Dotted">
      <summary>点線。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BorderStyle.Dashed">
      <summary>破線。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BorderStyle.Solid">
      <summary>実線。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BorderStyle.Double">
      <summary>二重実線。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BorderStyle.DashDot">
      <summary>
        一点鎖線。
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />内でのみ使用できます。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BorderStyle.DashDotDot">
      <summary>
        二点鎖線。
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />内でのみ使用できます。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.BackgroundGradient">
      <summary>背景グラデーションのタイプを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundGradient.Default">
      <summary>
        デフォルト。
        <see cref="F:C1.C1Rdl.Rdl2008.BackgroundGradient.None" />として扱われます。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundGradient.None">
      <summary>グラデーションなし。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundGradient.LeftRight">
      <summary>水平グラデーション。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundGradient.TopBottom">
      <summary>垂直グラデーション。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundGradient.Center">
      <summary>円形グラデーション。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundGradient.DiagonalLeft">
      <summary>左から右への斜めのグラデーション。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundGradient.DiagonalRight">
      <summary>右から左への斜めのグラデーション。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundGradient.HorizontalCenter">
      <summary>中心から外への水平グラデーション。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundGradient.VerticalCenter">
      <summary>中心から外への垂直グラデーション。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.ImageSource">
      <summary>画像のソースを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ImageSource.External">
      <summary>画像のソースはファイルまたは URL です。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ImageSource.Embedded">
      <summary>画像のソースは埋め込み画像です。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.ImageSource.Database">
      <summary>画像のソースはデータベースフィールドです。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.BackgroundRepeatType">
      <summary>背景画像がスペースをどのように埋めるかを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Default">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />内では
        <see cref="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Fit" />として、その他の場所では
        <see cref="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Repeat" />として扱われます。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Repeat">
      <summary>スペースに合わせて画像を縦横に並べます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.RepeatX">
      <summary>
        スペースに合わせて画像を横に並べます。
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />内では使用できません。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.RepeatY">
      <summary>
        スペースに合わせて画像を横に並べます。
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />内では使用できません。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Fit">
      <summary>
        スペースに合わせて画像を引き伸ばします。
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />内でのみ使用できます。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Clip">
      <summary>スペースに合わせて画像の余分な部分を切り取ります。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Border">
      <summary>オブジェクトの枠線を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Border.AssignFrom(C1.C1Rdl.Rdl2008.Border)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.Border" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Border.Clear">
      <summary>現在のオブジェクトをクリアし、すべてのプロパティをデフォルト値に設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Border.Color">
      <summary>
        枠線の色を取得または設定します。
        <para>既定値：Black。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Border.Style">
      <summary>
        枠線のスタイルを取得または設定します。
        <para>
          既定値：
          <see cref="F:C1.C1Rdl.Rdl2008.BorderStyle.Default" />。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Border.Width">
      <summary>
        枠線の幅を取得または設定します。
        <para>既定値：１pt。</para>
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.BackgroundImagePosition">
      <summary>背景画像の位置を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.Default">
      <summary>
        デフォルト。
        <see cref="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.Center" />として扱われます。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.Top">
      <summary>上部中央に画像を描画します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.TopLeft">
      <summary>上部左に画像を描画します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.TopRight">
      <summary>上部右に画像を描画します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.Left">
      <summary>左中段に画像を描画します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.Center">
      <summary>中心に画像を描画します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.Right">
      <summary>右中段に画像を描画します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.BottomRight">
      <summary>下部右に画像を描画します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.Bottom">
      <summary>下部中央に画像を描画します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundImagePosition.BottomLeft">
      <summary>下部左に画像を描画します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.BackgroundImage">
      <summary>背景画像を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.BackgroundImage.AssignFrom(C1.C1Rdl.Rdl2008.BackgroundImage)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.BackgroundImage" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.BackgroundImage.Clear">
      <summary>現在のオブジェクトをクリアし、すべてのプロパティをデフォルト値に設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.BackgroundImage.Source">
      <summary>画像ソースを取得または設定します。</summary>
      <remarks>
        <list type="bullet">
          <item>
            <term>外部</term>
            <description>
              <see cref="P:C1.C1Rdl.Rdl2008.BackgroundImage.Value" />プロパティには画像の場所として評価される定数または式が含まれています。 これは完全なフォルダパス（例：/images/logo.gif）でも、相対パス（例：logo.gif）でも、あるいは URL（例：http://reportserver/images/logo.gif）でも構いません。 相対パスの基準はレポートと同じフォルダです。
            </description>
          </item>
          <item>
            <term>埋め込み</term>
            <description>
              <see cref="P:C1.C1Rdl.Rdl2008.BackgroundImage.Value" />プロパティには、レポート内の
              <see cref="T:C1.C1Rdl.Rdl2008.EmbeddedImage" />の名前として評価される定数または式が含まれています。
            </description>
          </item>
          <item>
            <term>データベース</term>
            <description>
              <see cref="P:C1.C1Rdl.Rdl2008.BackgroundImage.Value" />プロパティには、画像のバイナリデータとして評価される式（データベース内のフィールド）が含まれています。
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.BackgroundImage.Value">
      <summary>
        画像を示す値を取得または設定します。 この値は
        <see cref="P:C1.C1Rdl.Rdl2008.BackgroundImage.Source" />プロパティに応じて異なった解釈をされます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.BackgroundImage.MIMEType">
      <summary>
        画像の MIMEType を取得または設定します。 このプロパティは、
        <see cref="P:C1.C1Rdl.Rdl2008.BackgroundImage.Source" />が
        <see cref="F:C1.C1Rdl.Rdl2008.ImageSource.Database" />の場合に必要になります。 そうでない場合、このプロパティは無視されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.BackgroundImage.BackgroundRepeat">
      <summary>
        背景画像が空きスペースをどのように埋めるのかを示す値を取得または設定します。
        <see cref="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Default" />は、
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />内では
        <see cref="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Fit" />として、 他の場所では
        <see cref="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Repeat" />として扱われます （このオブジェクトを格納する要素の定義で別のデフォルト動作が指定されている場合を除く）。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.BackgroundImage.TransparentColor">
      <summary>
        背景画像で透明として扱う色を取得または設定します。
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />内の背景画像に対してのみ使用されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.BackgroundImage.Position">
      <summary>
        <see cref="F:C1.C1Rdl.Rdl2008.BackgroundRepeatType.Clip" />に設定された
        <see cref="P:C1.C1Rdl.Rdl2008.BackgroundImage.BackgroundRepeat" />で背景画像の位置を取得または設定します。
        <see cref="T:C1.C1Rdl.Rdl2008.Chart" />内の背景画像に対してのみ使用されます。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.FontStyle">
      <summary>フォントスタイルを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontStyle.Default">
      <summary>
        デフォルト。
        <see cref="F:C1.C1Rdl.Rdl2008.FontStyle.Normal" />として扱われます。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontStyle.Normal">
      <summary>非斜体フォント。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontStyle.Italic">
      <summary>斜体フォント。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.FontWeight">
      <summary>フォントの太さを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.Default">
      <summary>
        デフォルト。
        <see cref="F:C1.C1Rdl.Rdl2008.FontWeight.Normal" />として扱われます。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.Thin">
      <summary>CSS フォントウェイト 100 に相当します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.ExtraLight">
      <summary>CSS フォントウェイト 200 に相当します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.Light">
      <summary>CSS フォントウェイト 300 に相当します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.Normal">
      <summary>CSS フォントウェイト 400 に相当します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.Medium">
      <summary>CSS フォントウェイト 500 に相当します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.SemiBold">
      <summary>CSS フォントウェイト 600 に相当します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.Bold">
      <summary>CSS フォントウェイト 700 に相当します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.ExtraBold">
      <summary>CSS フォントウェイト 800 に相当します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.FontWeight.Heavy">
      <summary>CSS フォントウェイト 900 に相当します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TextDecoration">
      <summary>特殊テキスト書式を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextDecoration.Default">
      <summary>
        デフォルト。
        <see cref="F:C1.C1Rdl.Rdl2008.TextDecoration.None" />として扱われます。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextDecoration.None">
      <summary>テキスト装飾なし。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextDecoration.Underline">
      <summary>テキストに下線を引きます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextDecoration.Overline">
      <summary>テキストに上線を引きます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextDecoration.LineThrough">
      <summary>テキストに取り消し線を引きます。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TextAlign">
      <summary>テキストの水平配置を指定します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextAlign.Default">
      <summary>
        デフォルト。
        <see cref="F:C1.C1Rdl.Rdl2008.TextAlign.General" />として扱われます。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextAlign.General">
      <summary>テキスト配置は、データタイプと Direction に基づいて自動的に設定されます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextAlign.Left">
      <summary>左揃えテキスト。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextAlign.Center">
      <summary>中央揃えテキスト。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextAlign.Right">
      <summary>右揃えテキスト。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.VerticalAlign">
      <summary>テキストの垂直配置を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.VerticalAlign.Default">
      <summary>
        デフォルト。
        <see cref="F:C1.C1Rdl.Rdl2008.VerticalAlign.Top" />として扱われます。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.VerticalAlign.Top">
      <summary>上揃えテキスト。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.VerticalAlign.Middle">
      <summary>縦の中央揃えテキスト。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.VerticalAlign.Bottom">
      <summary>下揃えテキスト。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TextDirection">
      <summary>テキストの向きを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextDirection.Default">
      <summary>
        デフォルト。
        <see cref="F:C1.C1Rdl.Rdl2008.TextDirection.LTR" />として扱われます。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextDirection.LTR">
      <summary>左から右のテキスト。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextDirection.RTL">
      <summary>右から左のテキスト。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.WritingMode">
      <summary>テキストの横書きまたは縦書きを示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.WritingMode.Default">
      <summary>
        デフォルト。
        <see cref="F:C1.C1Rdl.Rdl2008.WritingMode.Horizontal" />として扱われます。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.WritingMode.Horizontal">
      <summary>水平テキスト。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.WritingMode.Vertical">
      <summary>縦書きテキスト - 東アジア言語では文字は回転しません。 その他の言語ではテキスト全体が 90°回転します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Calendar">
      <summary>日付の書式設定に使用するカレンダーを表します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.Default">
      <summary>デフォルト。 レポート項目の言語の .NET Framework のデフォルトのカレンダーを使用します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.Gregorian">
      <summary>グレゴリオ暦。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.GregorianArabic">
      <summary>グレゴリオ暦（アラビア語）。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.GregorianMiddleEastFrench">
      <summary>グレゴリオ暦（中東フランス語）。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.GregorianTransliteratedEnglish">
      <summary>グレゴリオ暦（英語音訳）。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.GregorianTransliteratedFrench">
      <summary>グレゴリオ暦（フランス語音訳）。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.GregorianUSEnglish">
      <summary>グレゴリオ暦（米語）。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.Hebrew">
      <summary>ユダヤ暦。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.Hijri">
      <summary>ヒジュラ暦。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.Japanese">
      <summary>日本暦。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.Korean">
      <summary>韓国暦。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.Taiwan">
      <summary>台湾暦。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.Calendar.ThaiBuddhist">
      <summary>タイ仏暦。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.TextEffect">
      <summary>テキストに適用する効果を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextEffect.Default">
      <summary>
        デフォルト。
        <see cref="F:C1.C1Rdl.Rdl2008.TextEffect.None" />として扱われます。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextEffect.None">
      <summary>特殊効果を適用しません。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextEffect.Shadow">
      <summary>テキストに影を付けます。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextEffect.Emboss">
      <summary>テキストにエンボス効果を適用します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextEffect.Embed">
      <summary>テキストに埋め込み効果を適用します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.TextEffect.Frame">
      <summary>テキストの周囲に枠を追加します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.BackgroundHatchType">
      <summary>背景ハッチングタイプ。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Default">
      <summary>
        デフォルト。
        <see cref="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.None" />として扱われます。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.None">
      <summary>背景ハッチングなし。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.BackwardDiagonal">
      <summary>右上がりの斜めのハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Cross">
      <summary>クロスハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DarkDownwardDiagonal">
      <summary>濃い右下がりの斜めのハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DarkHorizontal">
      <summary>濃い水平ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DarkUpwardDiagonal">
      <summary>濃い右上がりの斜めのハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DarkVertical">
      <summary>濃い垂直ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DashedDownwardDiagonal">
      <summary>破線の右下がりのハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DashedHorizontal">
      <summary>破線の水平ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DashedUpwardDiagonal">
      <summary>破線の右上がりの斜めのハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DashedVertical">
      <summary>破線の垂直ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DiagonalBrick">
      <summary>斜めのレンガ状ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DiagonalCross">
      <summary>斜めのクロスハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Divot">
      <summary>ディボットハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DottedDiamond">
      <summary>点線のひし形ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.DottedGrid">
      <summary>点線の格子ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.ForwardDiagonal">
      <summary>右下がりの斜めのハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Horizontal">
      <summary>水平ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.HorizontalBrick">
      <summary>水平レンガ状ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.LargeCheckerBoard">
      <summary>市松模様ハッチング（大）。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.LargeConfetti">
      <summary>金米糖ハッチング（大）。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.LargeGrid">
      <summary>格子ハッチング（大）。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.LightDownwardDiagonal">
      <summary>薄い右下がりの斜めのハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.LightHorizontal">
      <summary>薄い水平ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.LightUpwardDiagonal">
      <summary>薄い右上がりの斜めのハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.LightVertical">
      <summary>薄い垂直ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.NarrowHorizontal">
      <summary>間隔の狭い水平ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.NarrowVertical">
      <summary>間隔の狭い垂直ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.OutlinedDiamond">
      <summary>枠線のひし形ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent05">
      <summary>５パーセントハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent10">
      <summary>10 パーセントハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent20">
      <summary>20 パーセントハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent25">
      <summary>25 パーセントハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent30">
      <summary>30 パーセントハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent40">
      <summary>40 パーセントハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent50">
      <summary>50 パーセントハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent60">
      <summary>60 パーセントハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent70">
      <summary>70 パーセントハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent75">
      <summary>75 パーセントハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent80">
      <summary>80 パーセントハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Percent90">
      <summary>90 パーセントハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Plaid">
      <summary>プレード縞ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Shingle">
      <summary>屋根板ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.SmallCheckerBoard">
      <summary>市松模様ハッチング（小）。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.SmallConfetti">
      <summary>金米糖ハッチング（小）。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.SmallGrid">
      <summary>格子ハッチング（小）。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.SolidDiamond">
      <summary>塗りつぶしたひし形ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Sphere">
      <summary>球ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Trellis">
      <summary>トレリス縞ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Vertical">
      <summary>垂直ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Wave">
      <summary>波縞ハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.Weave">
      <summary>織物状のハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.WideDownwardDiagonal">
      <summary>幅広の右下がりの斜めのハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.WideUpwardDiagonal">
      <summary>幅広の右上がりの斜めのハッチング。</summary>
    </member>
    <member name="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.ZigZag">
      <summary>ジグザグハッチング。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Style">
      <summary>レポート項目のスタイルを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Style.#ctor(C1.C1Rdl.Rdl2008.IStyleOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Style" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">現在のスタイルのオーナー。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Style.AssignFrom(C1.C1Rdl.Rdl2008.Style)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.Style" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Style.Clear">
      <summary>現在のオブジェクトをクリアし、すべてのプロパティをデフォルト値に設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.Owner">
      <summary>現在のスタイルのオーナーを取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.Border">
      <summary>
        デフォルト枠線プロパティを示す
        <see cref="P:C1.C1Rdl.Rdl2008.Style.Border" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.LeftBorder">
      <summary>
        左の枠線プロパティを示す
        <see cref="P:C1.C1Rdl.Rdl2008.Style.Border" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.TopBorder">
      <summary>
        上の枠線プロパティを示す
        <see cref="P:C1.C1Rdl.Rdl2008.Style.Border" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.RightBorder">
      <summary>
        右の枠線プロパティを示す
        <see cref="P:C1.C1Rdl.Rdl2008.Style.Border" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.BottomBorder">
      <summary>
        下の枠線プロパティを示す
        <see cref="P:C1.C1Rdl.Rdl2008.Style.Border" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.BackgroundColor">
      <summary>
        背景色を取得または設定します。
        <para>既定値：Transparent。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.BackgroundGradientType">
      <summary>
        背景のグラデーションのタイプを取得または設定します。
        <para>既定値：Default。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.BackgroundGradientEndColor">
      <summary>背景のグラデーションの最後の色を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.BackgroundImage">
      <summary>背景画像を取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.FontStyle">
      <summary>フォントスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.FontFamily">
      <summary>フォントファミリを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.FontSize">
      <summary>フォントサイズを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.FontWeight">
      <summary>フォントの太さを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.Format">
      <summary>TextBox などのオブジェクトの値の書式設定に使用される文字列を取得または設定します。 Format は .NET Framework の書式設定文字列を表します。</summary>
      <remarks>
        <para>
          注意： ロケール依存の通貨書式設定（フォーマットコード C）は、
          <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />の言語設定に基づいています。
        </para>
        <para>
          ロケール依存の日付書式設定は、
          <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />の
          <see cref="P:C1.C1Rdl.Rdl2008.Style.Language" />プロパティでサポートされ、 このプロパティに基づいている必要があります。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.TextDecoration">
      <summary>特殊テキスト書式を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.TextAlign">
      <summary>テキストの水平配置を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.VerticalAlign">
      <summary>テキストの垂直配置を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.Color">
      <summary>
        前景色を取得または設定します。
        <para>既定値：Black。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.PaddingLeft">
      <summary>
        オブジェクトの左端とその内容の間の余白を取得または設定します。
        <para>既定値：０pt。 最大値：1000pt。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.PaddingTop">
      <summary>
        オブジェクトの上端とその内容の間の余白を取得または設定します。
        <para>既定値：０pt。 最大値：1000pt。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.PaddingRight">
      <summary>
        オブジェクトの右端とその内容の間の余白を取得または設定します。
        <para>既定値：０pt。 最大値：1000pt。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.PaddingBottom">
      <summary>
        オブジェクトの下端とその内容の間の余白を取得または設定します。
        <para>既定値：０pt。 最大値：1000pt。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.LineHeight">
      <summary>
        テキストの行の高さを取得または設定します。
        <para>既定値： null。レンダラはフォントサイズに基づいて行の高さを決定します。</para>最小値：１pt。 最大値：1000pt。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.Direction">
      <summary>
        テキストを左から右に書くか右から左に書くかを示す値を取得または設定します。
        <see cref="F:C1.C1Rdl.Rdl2008.TextAlign.General" />配置が使用されない限り、テキスト配置には影響しません。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.WritingMode">
      <summary>テキストを縦に書くか横に書くかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.Language">
      <summary>
        テキストの主要言語を取得または設定します。
        <para>
          デフォルトは null です。その場合、
          <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />の
          <see cref="P:C1.C1Rdl.Rdl2008.Style.Language" />プロパティが使用されます。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.Calendar">
      <summary>日付の書式設定に使用するカレンダーを取得または設定します。 .NET Framework の言語設定と一致している必要があります。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.NumeralLanguage">
      <summary>
        主要言語で使用する数字書式を取得または設定します。 任意の言語が有効です。
        <para>
          デフォルトは null です。
          <see cref="P:C1.C1Rdl.Rdl2008.Style.Language" />プロパティが使用されます。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.NumeralVariant">
      <summary>使用する数字書式の変種を取得または設定します。 有効な値は１（デフォルト）から７です。 詳細については備考を参照してください。</summary>
      <remarks>
        <list type="bullet">
          <item>
            <term>1</term>
            <description>デフォルト。Unicode コンテキストルールに従います。</description>
          </item>
          <item>
            <term>2</term>
            <description>0123456789</description>
          </item>
          <item>
            <term>3</term>
            <description>GDI+ で定義されている、スクリプトの従来の数字。 現在、ar | bn | bo | fa | gu | hi | kn | kok | lo | mr | ms | or | pa | sa | ta | te | th | ur およびその変種でサポートされています。</description>
          </item>
          <item>
            <term>4</term>
            <description>ko、ja、zh-CHS、zh-CHT のみ。</description>
          </item>
          <item>
            <term>5</term>
            <description>ko、ja、zh-CHS、zh-CHT のみ。</description>
          </item>
          <item>
            <term>6</term>
            <description>ko、ja、zh-CHS、zh-CHT のみ（通常の数字のワイドバージョン）。</description>
          </item>
          <item>
            <term>7</term>
            <description>ko のみ。</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.TextEffect">
      <summary>テキストに適用する効果を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.BackgroundHatchType">
      <summary>
        ハッチングのタイプを取得または設定します。 このプロパティが
        <see cref="F:C1.C1Rdl.Rdl2008.BackgroundHatchType.None" />以外の値に設定された場合、
        <see cref="P:C1.C1Rdl.Rdl2008.Style.BackgroundGradientType" />プロパティは無視されます。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.ShadowColor">
      <summary>
        項目の影の色を取得または設定します。
        <para>既定値：#0000007F。</para>
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Style.ShadowOffset">
      <summary>
        項目の影のサイズを取得または設定します。
        <para>既定値：０。</para>
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Variable">
      <summary>グループまたはレポート内で評価される名前付きの式を定義します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Variable.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.Variable" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Variable.Value">
      <summary>レポートまたは各グループインスタンスに対して グローバルに評価される式を取得または設定します。 式がレポートの視覚要素内で評価される場合を除き、 この式の各インスタンスは、 レポートの実行時に１回だけ計算され、その後の描画で再計算されることはありません。 これは時間依存の計算の場合に必要です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Variables">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Variable" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Variables.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Variables" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Variables.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.Variable" />タイプ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Variables.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.Variable" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Visibility">
      <summary>
        描画されたレポートにいつ
        <see cref="T:C1.C1Rdl.Rdl2008.ReportItem" />を表示するかを定義します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Visibility.AssignFrom(C1.C1Rdl.Rdl2008.Visibility)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.Visibility" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Visibility.Hidden">
      <summary>最初に項目を非表示にするかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Visibility.ToggleItem">
      <summary>このレポート項目の非表示／表示に使用するテキストボックスの名前を取得または設定します。 ToggleItem のインスタンスをクリックすると、 この項目に対応するすべてのインスタンスの非表示状態がトグルされます。 ToggleItem が非表示になると（項目または先祖項目がトグルされたか、条件に従って非表示になったため）、この項目は非表示になります。 この項目と同じグループスコープまたはコンテナ（先祖）グループスコープ内のテキストボックスである必要があります。 省略した場合、 この項目の非表示状態をトグルする項目がなくなります。 ページヘッダーまたはフッターに含まれるレポート項目では使用できず、 それらを参照することもできません。 現在のグループスコープに Parent がない限り、 現在のレポート項目に含まれるレポート項目を参照することはできません。</summary>
    </member>
    <member name="T:C1.C1Rdl.RdlFormatVersion">
      <summary>サポートされている RDL バージョンを定義します。</summary>
    </member>
    <member name="F:C1.C1Rdl.RdlFormatVersion.Unknown">
      <summary>RDL 形式が不明です。</summary>
    </member>
    <member name="F:C1.C1Rdl.RdlFormatVersion.RDL2008">
      <summary>RDL 2008 形式。</summary>
    </member>
    <member name="F:C1.C1Rdl.RdlFormatVersion.RDL2010">
      <summary>RDL 2010 形式。</summary>
    </member>
    <member name="T:C1.C1Rdl.ReportSizeType">
      <summary>
        <see cref="T:C1.C1Rdl.ReportSize" />および関連するタイプによって使用される、
        <see cref="T:C1.C1Rdl.C1RdlReportBase" />で使用する測定単位を列挙します。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.ReportSizeType.Cm">
      <summary>センチメートルを測定単位として指定します。</summary>
    </member>
    <member name="F:C1.C1Rdl.ReportSizeType.Mm">
      <summary>ミリメートルを測定単位として指定します。</summary>
    </member>
    <member name="F:C1.C1Rdl.ReportSizeType.Inch">
      <summary>インチを測定単位として指定します。</summary>
    </member>
    <member name="F:C1.C1Rdl.ReportSizeType.Point">
      <summary>プリンタのポイント（1/72 インチ）を測定単位として指定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.ReportSize">
      <summary>レポート項目または部分の線形的なサイズを表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.#ctor(System.String)">
      <summary>
        <see cref="T:C1.C1Rdl.ReportSize" />タイプの新しいインスタンスを初期化します。
      </summary>
      <param name="s">サイズの文字列表現。</param>
      <remarks>
        <paramref name="s" />が有効なサイズを表していない場合は例外がスローされます。
      </remarks>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.#ctor(C1.C1Rdl.ReportSizeType,System.Double)">
      <summary>
        <see cref="T:C1.C1Rdl.ReportSize" />タイプの新しいインスタンスを初期化します。
      </summary>
      <param name="reportSizeType">
        <paramref name="value" />で使用されるサイズ単位。
      </param>
      <param name="value">
        <paramref name="reportSizeType" />単位のサイズ値。
      </param>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.GetHashCode">
      <summary>現在のオブジェクトのハッシュコードを値に基づいて取得します。</summary>
      <returns>ハッシュコード。</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.Equals(System.Object)">
      <summary>現在のサイズを別のオブジェクトと比較します。 このメソッドは値による比較を実行します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>
        ２つのオブジェクトが同じサイズを表している場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ToString">
      <summary>
        現在のオブジェクトを文字列に変換します。 返された文字列は現在の長さオブジェクトに再変換できます （たとえば、
        <see cref="T:C1.C1Rdl.ReportSize" />を同じ値に初期化する場合に使用できます）。
      </summary>
      <returns>現在の長さ値を表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ToCentimeters">
      <summary>現在のサイズをセンチメートル単位に変換します。</summary>
      <returns>センチメートル単位で表した現在のサイズ。</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ToInches">
      <summary>現在のサイズをインチ単位に変換します。</summary>
      <returns>インチ単位で表した現在のサイズ。</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ToMillimeters">
      <summary>現在のサイズをミリメートル単位に変換します。</summary>
      <returns>ミリメートル単位で表した現在のサイズ。</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ToPoints">
      <summary>現在のサイズをポイント単位に変換します。</summary>
      <returns>ポイント単位で表した現在のサイズ。</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ToDoc">
      <summary>現在のサイズを doc 単位（１インチの1/300）に変換します。</summary>
      <returns>doc 単位で表した現在のサイズ。</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ToUnit">
      <summary>
        現在のサイズを
        <see cref="T:C1.C1Preview.Unit" />に変換します。
      </summary>
      <returns>変換された値。</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ToPixels(System.Single)">
      <summary>現在のサイズをピクセル単位に変換します。</summary>
      <param name="dpi">ターゲット解像度（ppi）。</param>
      <returns>ピクセル単位で表した現在のサイズ。</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.Convert(C1.C1Preview.UnitTypeEnum)">
      <summary>現在のサイズを指定された単位に変換します。</summary>
      <param name="toUnits">ターゲット単位。</param>
      <returns>
        <paramref name="toUnits" />単位に変換された値。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.Convert(C1.C1Rdl.ReportSizeType)">
      <summary>現在のサイズを指定された単位に変換します。</summary>
      <param name="toUnits">ターゲット単位。</param>
      <returns>
        <paramref name="toUnits" />単位に変換された値。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.IsNullOrEmpty(C1.C1Rdl.ReportSize)">
      <summary>サイズが null または空かどうかをテストします。</summary>
      <param name="size">テストするサイズ。</param>
      <returns>
        <paramref name="size" />が
        <c>null</c>または空の場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.Compare(C1.C1Rdl.ReportSize,C1.C1Rdl.ReportSize)">
      <summary>２つのサイズを比較します。</summary>
      <param name="s1">比較する第１のサイズ。</param>
      <param name="s2">比較する第２のサイズ。</param>
      <returns>
        <paramref name="s1" />が
        <paramref name="s2" />より小さい場合は、
        <c>-1</c>、
        <paramref name="s1" />が
        <paramref name="s2" />より大きい場合は
        <c>１</c>、 ２つのサイズが等しい場合は
        <c>０</c>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ReportSizeTypeToString(C1.C1Rdl.ReportSizeType)">
      <summary>
        <see cref="T:C1.C1Rdl.ReportSizeType" />値を下表のような 文字列表現に変換します。
        <list type="bullet">
          <item>
            <description>
              <term>インチ</term>"in"
            </description>
          </item>
          <item>
            <description>
              <term>ミリメートル</term>"mm"
            </description>
          </item>
          <item>
            <description>
              <term>ポイント</term>"pt"
            </description>
          </item>
          <item>
            <description>
              <term>センチメートル</term>"cm"
            </description>
          </item>
        </list>
      </summary>
      <param name="units">
        変換する
        <see cref="T:C1.C1Preview.UnitTypeEnum" />。
      </param>
      <returns>
        <paramref name="units" />を表す文字列。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.StringToReportSizeType(System.String,C1.C1Rdl.ReportSizeType@)">
      <summary>
        文字列を
        <see cref="T:C1.C1Rdl.ReportSizeType" />値に変換します。 文字列は、"in"、"mm"、"cm"、"pt" のいずれかを取れます。 このメソッドは大文字と小文字を区別しません。
      </summary>
      <param name="s">変換する文字列。</param>
      <param name="units">
        OUT: 終了時に
        <see cref="T:C1.C1Rdl.ReportSizeType" />値が含まれています。
      </param>
      <returns>
        エラーが発生しなかった場合は
        <b>true</b>。そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.ReportSizeTypeToUnit(C1.C1Rdl.ReportSizeType)">
      <summary>
        <see cref="T:C1.C1Rdl.ReportSizeType" />値を対応する
        <see cref="T:C1.C1Preview.UnitTypeEnum" />値に変更します。
      </summary>
      <param name="reportSizeType">
        変換する
        <see cref="T:C1.C1Rdl.ReportSizeType" />値。
      </param>
      <returns>
        対応する
        <see cref="T:C1.C1Preview.UnitTypeEnum" />値。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.TryParse(System.String,C1.C1Rdl.ReportSizeType@,System.Double@)">
      <summary>
        文字列を対応する
        <see cref="T:C1.C1Rdl.ReportSizeType" />値に変換します。 戻り値は、変換が成功したか失敗したかを示します。
      </summary>
      <param name="s">変換する文字列。</param>
      <param name="reportSizeType">
        OUT: 解析されたサイズの単位を示す
        <see cref="T:C1.C1Rdl.ReportSizeType" />値。
      </param>
      <param name="value">
        OUT: 解析されたサイズを
        <paramref name="reportSizeType" />単位で表した倍精度値。
      </param>
      <returns>
        <paramref name="s" />が正常に変換された場合は true、そうでない場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.Parse(System.String)">
      <summary>
        文字列を対応する
        <see cref="T:C1.C1Rdl.ReportSizeType" />値に変換します。
      </summary>
      <param name="s">変換する文字列。</param>
      <returns>
        <paramref name="s" />によって指定されたサイズを表す
        <see cref="T:C1.C1Rdl.ReportSize" />。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.op_Equality(C1.C1Rdl.ReportSize,C1.C1Rdl.ReportSize)">
      <summary>
        ２つの
        <see cref="T:C1.C1Rdl.ReportSize" />値が等しいかどうかをテストします。
      </summary>
      <param name="s1">第１のサイズ。</param>
      <param name="s2">第２のサイズ。</param>
      <returns>
        ２つのサイズが等しい場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.op_Inequality(C1.C1Rdl.ReportSize,C1.C1Rdl.ReportSize)">
      <summary>
        ２つの
        <see cref="T:C1.C1Rdl.ReportSize" />値が異なるかどうかをテストします。
      </summary>
      <param name="s1">第１のサイズ。</param>
      <param name="s2">第２のサイズ。</param>
      <returns>
        ２つのサイズが等しくない場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.op_Implicit(C1.C1Rdl.ReportSize)~System.String">
      <summary>サイズを文字列表現に変換します。</summary>
      <param name="value">変換するサイズ。</param>
      <returns>サイズを表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.op_Implicit(System.String)~C1.C1Rdl.ReportSize">
      <summary>
        文字列を対応する
        <see cref="T:C1.C1Rdl.ReportSize" />値に変換します。
      </summary>
      <param name="value">変換する文字列。</param>
      <returns>
        対応する
        <see cref="T:C1.C1Rdl.ReportSize" />。
      </returns>
      <seealso cref="M:C1.C1Rdl.ReportSize.#ctor(System.String)" />
    </member>
    <member name="M:C1.C1Rdl.ReportSize.op_Implicit(C1.C1Preview.Unit)~C1.C1Rdl.ReportSize">
      <summary>
        <see cref="T:C1.C1Preview.Unit" />を
        <see cref="T:C1.C1Rdl.ReportSize" />に変換します。 変換される単位は絶対値です。ピクセル単位で表すことはできません。 そうでない場合は、例外が生成されます。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Preview.Unit" />。
      </param>
      <returns>
        <paramref name="value" />を表す
        <see cref="T:C1.C1Rdl.ReportSize" />。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.op_Implicit(C1.C1Rdl.ReportSize)~C1.C1Preview.Unit">
      <summary>
        サイズを
        <see cref="T:C1.C1Preview.Unit" />構造体に変換します。
      </summary>
      <param name="value">変換するサイズ。</param>
      <returns>
        サイズを表す
        <see cref="T:C1.C1Preview.Unit" />。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.op_Implicit(C1.C1Rdl.ReportSize)~C1.C1Preview.LengthAbs">
      <summary>
        サイズを
        <see cref="T:C1.C1Preview.LengthAbs" />構造体に変換します。
      </summary>
      <param name="value">変換するサイズ。</param>
      <returns>
        サイズを表す
        <see cref="T:C1.C1Preview.LengthAbs" />。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.op_Addition(C1.C1Rdl.ReportSize,C1.C1Rdl.ReportSize)">
      <summary>２つのサイズを加算します。</summary>
      <param name="s1">加算する第１のサイズ。</param>
      <param name="s2">加算する第２のサイズ。</param>
      <returns>
        <paramref name="s1" />と
        <paramref name="s2" />の和を表すサイズ。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.op_Subtraction(C1.C1Rdl.ReportSize,C1.C1Rdl.ReportSize)">
      <summary>１つのサイズをもう１つのサイズから減算します。</summary>
      <param name="s1">引かれる側のサイズ。</param>
      <param name="s2">引く側のサイズ。</param>
      <returns>
        <paramref name="s1" />と
        <paramref name="s2" />の差を表すサイズ。
      </returns>
    </member>
    <member name="P:C1.C1Rdl.ReportSize.Units">
      <summary>現在のサイズで使用されている測定単位を取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.ReportSize.Value">
      <summary>
        現在のサイズの絶対値（
        <see cref="P:C1.C1Rdl.ReportSize.Units" />単位）を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.ReportSize.IsNeg">
      <summary>現在のサイズが負かどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.ReportSize.Abs">
      <summary>現在のサイズを絶対値に変更します。</summary>
      <returns>現在のサイズの絶対値。</returns>
    </member>
    <member name="P:C1.C1Rdl.ReportSize.Empty">
      <summary>空のサイズを表します。</summary>
    </member>
    <member name="T:C1.C1Rdl.ReportSize.TypeConverter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="str"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Rdl.ReportSize.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="o"></param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Rdl.DataType">
      <summary>
        値のタイプ（例：
        <see cref="T:C1.C1Rdl.Rdl2008.ReportParameter" />のタイプ）を示します。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.DataType.Boolean">
      <summary>値は Boolean 型です。</summary>
    </member>
    <member name="F:C1.C1Rdl.DataType.DateTime">
      <summary>値は DateTime 型です。</summary>
    </member>
    <member name="F:C1.C1Rdl.DataType.Integer">
      <summary>値は Integer 型です。</summary>
    </member>
    <member name="F:C1.C1Rdl.DataType.Float">
      <summary>値は Float 型です。</summary>
    </member>
    <member name="F:C1.C1Rdl.DataType.String">
      <summary>値は String 型です。</summary>
    </member>
    <member name="T:C1.C1Rdl.TriState">
      <summary>この値はブール値の true/false、 または現在のコンテキストに応じて自動的に決定された値になります。</summary>
    </member>
    <member name="F:C1.C1Rdl.TriState.Auto">
      <summary>値は現在のコンテキストに応じて自動的に決定されます。</summary>
    </member>
    <member name="F:C1.C1Rdl.TriState.True">
      <summary>値はブール値の true と等価です。</summary>
    </member>
    <member name="F:C1.C1Rdl.TriState.False">
      <summary>値はブール値の false と等価です。</summary>
    </member>
    <member name="T:C1.C1Rdl.Operator">
      <summary>フィルタなどのデータの比較に使用する演算子を示します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.Equal">
      <summary>比較対象と等価。</summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.Like">
      <summary>Like 比較。 Visual Basic の LIKE 演算子と同じ特殊文字（１文字を表す ?、 任意の字の並びを表す * など）を使用します。</summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.NotEqual">
      <summary>比較対象と等しくない。</summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.GreaterThan">
      <summary>比較対象より大きい。</summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.GreaterThanOrEqual">
      <summary>比較対象以上。</summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.LessThan">
      <summary>比較対象より小さい。</summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.LessThanOrEqual">
      <summary>比較対象以下。</summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.TopN">
      <summary>値が上位 N 個の値に入るかどうかをチェックします。</summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.BottomN">
      <summary>値が下位 N 個の値に入るかどうかをチェックします。</summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.TopPercent">
      <summary>値が上位 N パーセントの値に入るかどうかをチェックします。</summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.BottomPercent">
      <summary>値が下位 N パーセントの値に入るかどうかをチェックします。</summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.In">
      <summary>値がいずれかの値と等しいかどうかをチェックします。</summary>
    </member>
    <member name="F:C1.C1Rdl.Operator.Between">
      <summary>値が２つの値の中間かどうかをチェックします。</summary>
    </member>
    <member name="T:C1.C1Rdl.RdlProp">
      <summary>
        <see cref="T:C1.C1Rdl.RdlInt" />、
        <see cref="T:C1.C1Rdl.RdlBool" />、
        <see cref="T:C1.C1Rdl.RdlFloat" />、
        <see cref="T:C1.C1Rdl.RdlObject" />、
        <see cref="T:C1.C1Rdl.RdlString" />、 その他のリテラルまたは式として値を指定できるタイプの抽象基本クラス。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.RdlProp.m_IsExpression">
      <summary>値が式であることを示すフラグ。</summary>
    </member>
    <member name="F:C1.C1Rdl.RdlProp.m_Expression">
      <summary>式。</summary>
    </member>
    <member name="M:C1.C1Rdl.RdlProp.Equals(System.Object)">
      <summary>
        現在の
        <see cref="T:C1.C1Rdl.RdlProp" />を別のオブジェクトと比較します。 このメソッドは値による比較を実行します。
      </summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>
        ２つのオブジェクトが同じ値を表している場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlProp.GetHashCode">
      <summary>
        現在の
        <see cref="T:C1.C1Rdl.RdlProp" />のハッシュコードを取得します。 ハッシュ値は、現在のオブジェクトの値に基づいて計算されます。
      </summary>
      <returns>ハッシュコード。</returns>
    </member>
    <member name="P:C1.C1Rdl.RdlProp.IsExpression">
      <summary>
        現在の
        <see cref="T:C1.C1Rdl.RdlProp" />が式として指定されているかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.RdlProp.Expression">
      <summary>
        現在の
        <see cref="T:C1.C1Rdl.RdlProp" />に関連付けられている式を取得します。 現在のオブジェクトに定数が含まれている場合（
        <see cref="P:C1.C1Rdl.RdlProp.IsExpression" />が
        <b>false</b>になる場合）、 このプロパティは例外をスローします。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.RdlColor">
      <summary>
        <c>System.Drawing.Color</c>リテラルまたは式として 指定できる色の値を表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.#ctor(System.Drawing.Color)">
      <summary>
        <see cref="T:C1.C1Rdl.RdlColor" />クラスの新しいインスタンスをリテラル色値で初期化します。
      </summary>
      <param name="value">
        <c>System.Drawing.Color</c>
        <c>System.Drawing.Color</c>値。
      </param>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.#ctor(System.String)">
      <summary>
        <see cref="T:C1.C1Rdl.RdlColor" />クラスの新しいインスタンスをリテラル色値で初期化します。
      </summary>
      <param name="s">
        新しいインスタンスの初期化に使用する文字列。
        <para>
          この文字列の先頭が等号（
          <c>=</c>）だった場合、式として解釈されます。
        </para><para>
          そうでない場合、この文字列は
          <c>System.Drawing.Color</c>値に変換されます（変換に失敗した場合は例外がスローされます）。
        </para>
      </param>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.TryParse(System.String,System.Boolean@,System.Drawing.Color@,System.String@)">
      <summary>
        文字列を解析して
        <see cref="T:C1.C1Rdl.RdlColor" />タイプのプロパティとして解釈します。
      </summary>
      <param name="s">解析する文字列。</param>
      <param name="isExpression">
        OUT:
        <paramref name="s" />が式を表す場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </param>
      <param name="value">
        OUT:
        <paramref name="isExpression" />が
        <b>false</b>の場合は
        <see cref="T:System.Drawing.Color" />。
      </param>
      <param name="expression">
        OUT:
        <paramref name="isExpression" />が
        <b>true</b>の場合は式。
      </param>
      <returns>
        が有効な
        <see cref="T:C1.C1Rdl.RdlColor" />インスタンスである場合は
        <b>true</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.op_Implicit(C1.C1Rdl.RdlColor)~System.String">
      <summary>
        <see cref="T:C1.C1Rdl.RdlColor" />を文字列に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Rdl.RdlColor" />。
      </param>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.op_Implicit(System.String)~C1.C1Rdl.RdlColor">
      <summary>
        文字列を
        <see cref="T:C1.C1Rdl.RdlColor" />に変換します（
        <see cref="M:C1.C1Rdl.RdlColor.#ctor(System.String)" />を参照）。
      </summary>
      <param name="value">変換する文字列。</param>
      <returns>
        <see cref="T:C1.C1Rdl.RdlColor" />。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.op_Implicit(C1.C1Rdl.RdlColor)~System.Drawing.Color">
      <summary>
        <see cref="T:C1.C1Rdl.RdlColor" />を
        <see cref="T:System.Drawing.Color" />に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Rdl.RdlColor" />。
      </param>
      <returns>
        RdlColor に色定数が含まれる場合は
        <see cref="T:System.Drawing.Color" />。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.op_Implicit(System.Drawing.Color)~C1.C1Rdl.RdlColor">
      <summary>
        <see cref="T:System.Drawing.Color" />を
        <see cref="T:C1.C1Rdl.RdlColor" />に変換します（
        <see cref="M:C1.C1Rdl.RdlColor.#ctor(System.Drawing.Color)" />を参照）。
      </summary>
      <param name="value">
        変換する
        <see cref="T:System.Drawing.Color" />。
      </param>
      <returns>
        <see cref="T:C1.C1Rdl.RdlColor" />。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.op_Equality(C1.C1Rdl.RdlColor,C1.C1Rdl.RdlColor)">
      <summary>
        ２つの
        <see cref="T:C1.C1Rdl.RdlColor" />オブジェクトが等しいかどうかをテストします。
      </summary>
      <param name="o1">第１のオブジェクト。</param>
      <param name="o2">第２のオブジェクト。</param>
      <returns>
        ２つのオブジェクトが等しい場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.op_Inequality(C1.C1Rdl.RdlColor,C1.C1Rdl.RdlColor)">
      <summary>
        ２つの
        <see cref="T:C1.C1Rdl.RdlColor" />オブジェクトが異なるかどうかをテストします。
      </summary>
      <param name="o1">第１のオブジェクト。</param>
      <param name="o2">第２のオブジェクト。</param>
      <returns>
        ２つのオブジェクトが等しくない場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.ToString">
      <summary>現在のオブジェクトを文字列に変換します。</summary>
      <returns>現在の値を表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.Equals(System.Object)">
      <summary>現在の長さを別のオブジェクトと比較します。 このメソッドは値による比較を実行します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>
        ２つのオブジェクトが同じ長さを表している場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.GetHashCode">
      <summary>長さ値に基づいて、 現在のオブジェクトのハッシュコードを取得します。</summary>
      <returns>ハッシュコード。</returns>
    </member>
    <member name="P:C1.C1Rdl.RdlColor.Value">
      <summary>
        現在のオブジェクトにリテラルが含まれる場合は、それによって表される
        <b>System.Drawing.Color</b>値を取得します。 現在のオブジェクトに式が含まれる場合は例外がスローされます。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.RdlColor.Predefined">
      <summary>
        いくつかの定義済みの
        <see cref="T:C1.C1Rdl.RdlColor" />値を保持する静的クラス。
      </summary>
    </member>
    <member name="F:C1.C1Rdl.RdlColor.Predefined.Empty">
      <summary>空のリテラルカラー。</summary>
    </member>
    <member name="F:C1.C1Rdl.RdlColor.Predefined.Transparent">
      <summary>透明のリテラルカラー。</summary>
    </member>
    <member name="F:C1.C1Rdl.RdlColor.Predefined.Black">
      <summary>黒のリテラルカラー。</summary>
    </member>
    <member name="F:C1.C1Rdl.RdlColor.Predefined.White">
      <summary>透明のリテラルカラー。</summary>
    </member>
    <member name="T:C1.C1Rdl.RdlColor.TypeConverter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="str"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Rdl.RdlColor.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="o"></param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Rdl.RdlEnum`1">
      <summary>リテラルまたは式として指定できる列挙値を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.#ctor(`0)">
      <summary>
        <see cref="T:C1.C1Rdl.RdlEnum`1" />クラスの新しいインスタンスを定数値で初期化します。
      </summary>
      <param name="value">定数値。</param>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.#ctor(System.String)">
      <summary>
        <see cref="T:C1.C1Rdl.RdlEnum`1" />クラスの新しいインスタンスを式または定数で初期化します。
      </summary>
      <param name="s">
        新しいインスタンスの初期化に使用する文字列。
        <para>
          この文字列の先頭が等号（
          <c>=</c>）だった場合、式として解釈されます。
        </para><para>
          そうでない場合、この文字列は
          <b>T</b>タイプに変換されます
        </para>
      </param>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.TryParse(System.String,System.Boolean@,`0@,System.String@)">
      <summary>
        文字列を解析して
        <see cref="T:C1.C1Rdl.RdlEnum`1" />タイプのプロパティとして解釈します。
      </summary>
      <param name="s">解析する文字列。</param>
      <param name="isExpression">
        OUT:
        <paramref name="s" />が式を表す場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </param>
      <param name="value">
        OUT:
        <paramref name="isExpression" />が
        <b>false</b>の場合は列挙値。
      </param>
      <param name="expression">
        OUT:
        <paramref name="isExpression" />が
        <b>true</b>の場合は式。
      </param>
      <returns>
        が有効な
        <see cref="T:C1.C1Rdl.RdlEnum`1" />インスタンスである場合は
        <b>true</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.op_Implicit(C1.C1Rdl.RdlEnum{`0})~System.String">
      <summary>
        <see cref="T:C1.C1Rdl.RdlEnum`1" />値を文字列に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Rdl.RdlEnum`1" />値。
      </param>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.op_Implicit(System.String)~C1.C1Rdl.RdlEnum{`0}">
      <summary>
        文字列を
        <see cref="T:C1.C1Rdl.RdlEnum`1" />値に変換します。
      </summary>
      <param name="value">変換する文字列。</param>
      <returns>
        <see cref="T:C1.C1Rdl.RdlEnum`1" />インスタンス。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.op_Implicit(C1.C1Rdl.RdlEnum{`0})~`0">
      <summary>
        <see cref="T:C1.C1Rdl.RdlEnum`1" />値を対応する列挙値に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Rdl.RdlEnum`1" />値。
      </param>
      <returns>変換後の列挙値。</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.op_Implicit(`0)~C1.C1Rdl.RdlEnum{`0}">
      <summary>
        列挙値を
        <see cref="T:C1.C1Rdl.RdlEnum`1" />表現に変換します。
      </summary>
      <param name="value">変換する列挙値。</param>
      <returns>
        <see cref="T:C1.C1Rdl.RdlEnum`1" />インスタンス。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.op_Equality(C1.C1Rdl.RdlEnum{`0},C1.C1Rdl.RdlEnum{`0})">
      <summary>
        ２つの
        <see cref="T:C1.C1Rdl.RdlEnum`1" />オブジェクトが等しいかどうかをテストします。
      </summary>
      <param name="o1">第１のオブジェクト。</param>
      <param name="o2">第２のオブジェクト。</param>
      <returns>
        ２つのオブジェクトが等しい場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.op_Inequality(C1.C1Rdl.RdlEnum{`0},C1.C1Rdl.RdlEnum{`0})">
      <summary>
        ２つの
        <see cref="T:C1.C1Rdl.RdlEnum`1" />オブジェクトが異なるかどうかをテストします。
      </summary>
      <param name="o1">第１のオブジェクト。</param>
      <param name="o2">第２のオブジェクト。</param>
      <returns>
        ２つのオブジェクトが等しくない場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.ToString">
      <summary>現在のオブジェクトを文字列に変換します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.Equals(System.Object)">
      <summary>現在のオブジェクトを別のオブジェクトと比較します。 このメソッドは値による比較を実行します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>
        ２つのオブジェクトが同じ値を表している場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.GetHashCode">
      <summary>現在のオブジェクトのハッシュコードを値に基づいて取得します。</summary>
      <returns>ハッシュコード。</returns>
    </member>
    <member name="P:C1.C1Rdl.RdlEnum`1.Value">
      <summary>このオブジェクトに定数が含まれている場合は列挙値を取得します。 式が含まれていた場合は例外をスローします。</summary>
    </member>
    <member name="T:C1.C1Rdl.RdlEnum`1.TypeConverter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="str"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Rdl.RdlEnum`1.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="o"></param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Rdl.RdlSize">
      <summary>
        定数または式として指定できる
        <see cref="T:C1.C1Rdl.ReportSize" />を表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.#ctor(C1.C1Rdl.ReportSizeType,System.Double)">
      <summary>
        <see cref="T:C1.C1Rdl.RdlSize" />クラスの新しいインスタンスを定数値で初期化します。
      </summary>
      <param name="unit">
        <paramref name="value" />で使用される測定単位。
      </param>
      <param name="value">
        <paramref name="unit" />単位で示された値。
      </param>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.#ctor(C1.C1Rdl.ReportSize)">
      <summary>
        <see cref="T:C1.C1Rdl.RdlSize" />クラスの新しいインスタンスを
        <see cref="T:C1.C1Rdl.ReportSize" />値で初期化します。
      </summary>
      <param name="value">
        <see cref="T:C1.C1Rdl.ReportSize" />定数。
      </param>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.#ctor(System.String)">
      <summary>
        <see cref="T:C1.C1Rdl.RdlSize" />クラスの新しいインスタンスを文字列として指定された定数または式で初期化します。
      </summary>
      <param name="s">この文字列の先頭が = の場合は式として解釈されます。 そうでない場合は文字列は定数値に変換されます。</param>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.TryParse(System.String,System.Boolean@,C1.C1Rdl.ReportSize@,System.String@)">
      <summary>
        文字列を解析して
        <see cref="T:C1.C1Rdl.RdlSize" />タイプのプロパティとして解釈します。
      </summary>
      <param name="s">解析する文字列。</param>
      <param name="isExpression">
        OUT:
        <paramref name="s" />に式が含まれる場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </param>
      <param name="value">
        OUT:
        <paramref name="isExpression" />が
        <b>false</b>の場合は
        <see cref="T:C1.C1Rdl.ReportSize" />のインスタンス、そうでない場合は
        <b>null</b>。
      </param>
      <param name="expression">
        OUT:
        <see paramref="isExpression" />が
        <b>true</b>の場合は式の文字列、そうでない場合は
        <b>null</b>。
      </param>
      <returns>
        <paramref name="s" />が有効な
        <see cref="T:C1.C1Rdl.RdlSize" />を表す場合は
        <b>true</b>を返します。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.op_Implicit(C1.C1Rdl.RdlSize)~System.String">
      <summary>
        <see cref="T:C1.C1Rdl.RdlSize" />値を文字列に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Rdl.RdlSize" />。
      </param>
      <returns>指定された値を表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.op_Implicit(System.String)~C1.C1Rdl.RdlSize">
      <summary>
        文字列を
        <see cref="T:C1.C1Rdl.RdlSize" />インスタンスに変換します。
      </summary>
      <param name="value">変換する文字列。</param>
      <returns>
        変換後の値を表す
        <see cref="T:C1.C1Rdl.RdlSize" />インスタンス。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.op_Implicit(C1.C1Rdl.RdlSize)~C1.C1Rdl.ReportSize">
      <summary>
        <see cref="T:C1.C1Rdl.RdlSize" />を
        <see cref="T:C1.C1Rdl.ReportSize" />に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Rdl.RdlSize" />。
      </param>
      <returns>
        <see cref="T:C1.C1Rdl.RdlSize" />に定数が含まれる場合は
        <see cref="T:C1.C1Rdl.ReportSize" />、そうでない場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.op_Implicit(C1.C1Rdl.ReportSize)~C1.C1Rdl.RdlSize">
      <summary>
        <see cref="T:C1.C1Rdl.ReportSize" />を
        <see cref="T:C1.C1Rdl.RdlSize" />に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Rdl.ReportSize" />。
      </param>
      <returns>
        変換後の値を表す
        <see cref="T:C1.C1Rdl.RdlSize" />。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.op_Equality(C1.C1Rdl.RdlSize,C1.C1Rdl.RdlSize)">
      <summary>
        ２つの
        <see cref="T:C1.C1Rdl.RdlSize" />オブジェクトが等しいかどうかをテストします。
      </summary>
      <param name="o1">第１のオブジェクト。</param>
      <param name="o2">第２のオブジェクト。</param>
      <returns>
        ２つのオブジェクトが等しい場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.op_Inequality(C1.C1Rdl.RdlSize,C1.C1Rdl.RdlSize)">
      <summary>
        ２つの
        <see cref="T:C1.C1Rdl.RdlSize" />オブジェクトが異なるかどうかをテストします。
      </summary>
      <param name="o1">第１のオブジェクト。</param>
      <param name="o2">第２のオブジェクト。</param>
      <returns>
        ２つのオブジェクトが等しくない場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.ToString">
      <summary>現在のオブジェクトを文字列に変換します。</summary>
      <returns>現在の値を表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.Equals(System.Object)">
      <summary>現在のオブジェクトを別のオブジェクトと比較します。 このメソッドは値による比較を実行します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>
        ２つのオブジェクトが同じ値を表している場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.GetHashCode">
      <summary>現在のオブジェクトのハッシュコードを値に基づいて取得します。</summary>
      <returns>ハッシュコード。</returns>
    </member>
    <member name="P:C1.C1Rdl.RdlSize.Value">
      <summary>
        このオブジェクトに定数が含まれている場合は
        <see cref="T:C1.C1Rdl.ReportSize" />値を取得します。
        <para>このオブジェクトに式が含まれていた場合は例外がスローされます。</para>
      </summary>
    </member>
    <member name="T:C1.C1Rdl.RdlSize.TypeConverter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="str"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Rdl.RdlSize.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="o"></param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Rdl.RdlString">
      <summary>定数または式として指定できる文字列を表します。</summary>
    </member>
    <member name="F:C1.C1Rdl.RdlString.Empty">
      <summary>
        空の
        <see cref="T:C1.C1Rdl.RdlString" />オブジェクトを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlString.#ctor(System.String,System.Boolean)">
      <summary>
        <see cref="T:C1.C1Rdl.RdlString" />クラスの新しいインスタンスを初期化します。 このオーバロードは、文字列が定数か式かを明示的に指定します。
      </summary>
      <param name="value">文字列。</param>
      <param name="isExpression">
        <paramref name="value" />を式として解釈すべきかどうかを示すフラグ。
      </param>
    </member>
    <member name="M:C1.C1Rdl.RdlString.#ctor(System.String)">
      <summary>
        <see cref="T:C1.C1Rdl.RdlString" />クラスの新しいインスタンスを初期化します。 このオーバロードは、文字列を解析し、それが定数であるか式であるかを判別します。
      </summary>
      <param name="s">この文字列の先頭が = の場合は式として解釈されます。 そうでない場合は定数として解釈されます。</param>
    </member>
    <member name="M:C1.C1Rdl.RdlString.IsNullOrEmpty(C1.C1Rdl.RdlString)">
      <summary>
        指定された
        <see cref="T:C1.C1Rdl.RdlString" />インスタンスが null または空であるかどうかを示します。
      </summary>
      <param name="s">
        チェックする
        <see cref="T:C1.C1Rdl.RdlString" />オブジェクト。
      </param>
      <returns>
        <paramref name="s" />が null または
        <see cref="F:C1.C1Rdl.RdlString.Empty" />値を表す場合は
        <b>true</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlString.TryParse(System.String,System.Boolean@,System.String@)">
      <summary>
        文字列を解析して
        <see cref="T:C1.C1Rdl.RdlString" />クラスのプロパティとして解釈します。
      </summary>
      <param name="s">解析する文字列。</param>
      <param name="isExpression">
        OUT:
        <paramref name="s" />が式を表す場合は
        <b>true</b>。
      </param>
      <param name="value">OUT: 文字列値。</param>
    </member>
    <member name="M:C1.C1Rdl.RdlString.op_Implicit(C1.C1Rdl.RdlString)~System.String">
      <summary>
        <see cref="T:C1.C1Rdl.RdlString" />を文字列に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Rdl.RdlString" />。
      </param>
      <returns>変換後のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlString.op_Implicit(System.String)~C1.C1Rdl.RdlString">
      <summary>
        文字列を
        <see cref="T:C1.C1Rdl.RdlString" />に変換します。
      </summary>
      <param name="value">変換する文字列。</param>
      <returns>
        変換後のオブジェクトを表す
        <see cref="T:C1.C1Rdl.RdlString" />。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlString.op_Equality(C1.C1Rdl.RdlString,C1.C1Rdl.RdlString)">
      <summary>
        ２つの
        <see cref="T:C1.C1Rdl.RdlString" />オブジェクトが等しいかどうかをテストします。
      </summary>
      <param name="o1">第１のオブジェクト。</param>
      <param name="o2">第２のオブジェクト。</param>
      <returns>
        ２つのオブジェクトが等しい場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlString.op_Inequality(C1.C1Rdl.RdlString,C1.C1Rdl.RdlString)">
      <summary>
        ２つの
        <see cref="T:C1.C1Rdl.RdlString" />オブジェクトが異なるかどうかをテストします。
      </summary>
      <param name="o1">第１のオブジェクト。</param>
      <param name="o2">第２のオブジェクト。</param>
      <returns>
        ２つのオブジェクトが等しくない場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlString.ToString">
      <summary>現在のオブジェクトを文字列に変換します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlString.Equals(System.Object)">
      <summary>現在のオブジェクトを別のオブジェクトと比較します。 このメソッドは値による比較を実行します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>
        ２つのオブジェクトが同じ値を表している場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlString.GetHashCode">
      <summary>現在のオブジェクトのハッシュコードを値に基づいて取得します。</summary>
      <returns>ハッシュコード。</returns>
    </member>
    <member name="P:C1.C1Rdl.RdlString.Value">
      <summary>現在のオブジェクトによって表される定数値を取得します。 現在のオブジェクトに式が含まれていた場合は例外をスローします。</summary>
    </member>
    <member name="T:C1.C1Rdl.RdlString.TypeConverter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Rdl.RdlString.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="str"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Rdl.RdlString.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="o"></param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Rdl.RdlInt">
      <summary>定数または式として指定できる整数を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.#ctor(System.Int32)">
      <summary>
        <see cref="T:C1.C1Rdl.RdlInt" />クラスの新しいインスタンスを定数値で初期化します。
      </summary>
      <param name="value">整数値。</param>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.#ctor(System.String)">
      <summary>
        <see cref="T:C1.C1Rdl.RdlInt" />クラスの新しいインスタンスを初期化します。
        <paramref name="s" />文字列は、定数を表すか式を表すかを特定するために解析されます。
      </summary>
      <param name="s">
        <paramref name="s" />の先頭が = の場合は式として解釈されます。 そうでない場合は整数値に変換されます。
      </param>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.TryParse(System.String,System.Boolean@,System.Int32@,System.String@)">
      <summary>
        文字列を解析して
        <see cref="T:C1.C1Rdl.RdlInt" />クラスのプロパティとして解釈します。
      </summary>
      <param name="s">解析する文字列。</param>
      <param name="isExpression">
        OUT:
        <paramref name="s" />に式が含まれる場合は
        <b>true</b>。
      </param>
      <param name="value">
        OUT:
        <paramref name="isExpression" />が
        <b>false</b>の場合は定数値。
      </param>
      <param name="expression">
        OUT:
        <paramref name="isExpression" />が
        <b>true</b>の場合は式。
      </param>
      <returns>
        <paramref name="s" />が有効な
        <see cref="T:C1.C1Rdl.RdlInt" />である場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.op_Implicit(C1.C1Rdl.RdlInt)~System.String">
      <summary>
        <see cref="T:C1.C1Rdl.RdlInt" />を文字列に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Rdl.RdlInt" />。
      </param>
      <returns>変換後のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.op_Implicit(System.String)~C1.C1Rdl.RdlInt">
      <summary>
        文字列を
        <see cref="T:C1.C1Rdl.RdlInt" />オブジェクトに変換します。
      </summary>
      <param name="value">変換する文字列。</param>
      <returns>
        変換後の文字列を表す
        <see cref="T:C1.C1Rdl.RdlInt" />。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.op_Implicit(C1.C1Rdl.RdlInt)~System.Int32">
      <summary>
        <see cref="T:C1.C1Rdl.RdlInt" />を整数に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Rdl.RdlInt" />。
      </param>
      <returns>
        <paramref name="value" />に定数が含まれる場合は整数値、そうでない場合は
        <b>0</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.op_Implicit(System.Int32)~C1.C1Rdl.RdlInt">
      <summary>
        整数を
        <see cref="T:C1.C1Rdl.RdlInt" />オブジェクトに変換します。
      </summary>
      <param name="value">変換する integer。</param>
      <returns>
        変換後の値を表す
        <see cref="T:C1.C1Rdl.RdlInt" />。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.op_Equality(C1.C1Rdl.RdlInt,C1.C1Rdl.RdlInt)">
      <summary>
        ２つの
        <see cref="T:C1.C1Rdl.RdlInt" />オブジェクトが等しいかどうかをテストします。
      </summary>
      <param name="o1">第１のオブジェクト。</param>
      <param name="o2">第２のオブジェクト。</param>
      <returns>
        ２つのオブジェクトが等しい場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.op_Inequality(C1.C1Rdl.RdlInt,C1.C1Rdl.RdlInt)">
      <summary>
        ２つの
        <see cref="T:C1.C1Rdl.RdlInt" />オブジェクトが異なるかどうかをテストします。
      </summary>
      <param name="o1">第１のオブジェクト。</param>
      <param name="o2">第２のオブジェクト。</param>
      <returns>
        ２つのオブジェクトが等しくない場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.ToString">
      <summary>現在のオブジェクトを文字列に変換します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.Equals(System.Object)">
      <summary>現在のオブジェクトを別のオブジェクトと比較します。 このメソッドは値による比較を実行します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>
        ２つのオブジェクトが同じ値を表している場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.GetHashCode">
      <summary>現在のオブジェクトのハッシュコードを値に基づいて取得します。</summary>
      <returns>ハッシュコード。</returns>
    </member>
    <member name="P:C1.C1Rdl.RdlInt.Value">
      <summary>現在のオブジェクトに定数が含まれている場合は現在のオブジェクトの整数値を取得します。 式が含まれていた場合は例外をスローします。</summary>
    </member>
    <member name="P:C1.C1Rdl.RdlInt.Zero">
      <summary>
        ゼロ（
        <b>０</b>）値を表す
        <see cref="T:C1.C1Rdl.RdlInt" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.RdlInt.TypeConverter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="str"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Rdl.RdlInt.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="o"></param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Rdl.RdlBool">
      <summary>定数または式として指定されたブール値を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.#ctor(System.Boolean)">
      <summary>
        <see cref="T:C1.C1Rdl.RdlBool" />クラスの新しいインスタンスを定数値で初期化します。
      </summary>
      <param name="value">定数の Boolean 値。</param>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.#ctor(System.String)">
      <summary>
        <see cref="T:C1.C1Rdl.RdlBool" />クラスの新しいインスタンスを初期化します。
        <paramref name="s" />文字列は、定数を表すか式を表すかを特定するために解析されます。
      </summary>
      <param name="s">
        <paramref name="s" />の先頭が = の場合は式として解釈されます。 そうでない場合はブール値に変換されます。
      </param>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.TryParse(System.String,System.Boolean@,System.Boolean@,System.String@)">
      <summary>
        文字列を解析して
        <see cref="T:C1.C1Rdl.RdlBool" />クラスのプロパティとして解釈します。
      </summary>
      <param name="s">解析する文字列。</param>
      <param name="isExpression">
        OUT:
        <paramref name="s" />に式が含まれる場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </param>
      <param name="value">
        OUT:
        <paramref name="isExpression" />が
        <b>false</b>の場合はブール値。
      </param>
      <param name="expression">
        OUT:
        <paramref name="isExpression" />が
        <b>true</b>の場合は式。
      </param>
      <returns>
        <paramref name="s" />が有効な
        <see cref="T:C1.C1Rdl.RdlBool" />である場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.op_Implicit(C1.C1Rdl.RdlBool)~System.String">
      <summary>
        <see cref="T:C1.C1Rdl.RdlBool" />を文字列に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Rdl.RdlBool" />。
      </param>
      <returns>変換後のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.op_Implicit(System.String)~C1.C1Rdl.RdlBool">
      <summary>
        文字列を
        <see cref="T:C1.C1Rdl.RdlBool" />インスタンスに変換します。
      </summary>
      <param name="value">変換する文字列。</param>
      <returns>
        変換後の値を表す
        <see cref="T:C1.C1Rdl.RdlBool" />。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.op_Implicit(C1.C1Rdl.RdlBool)~System.Boolean">
      <summary>
        <see cref="T:C1.C1Rdl.RdlBool" />を
        <b>bool</b>値に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Rdl.RdlBool" />。
      </param>
      <returns>
        <paramref name="value" />に定数が含まれる場合は Boolean 値、式である場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.op_Implicit(System.Boolean)~C1.C1Rdl.RdlBool">
      <summary>
        Boolean 値を
        <see cref="T:C1.C1Rdl.RdlBool" />に変換します。
      </summary>
      <param name="value">変換する Boolean 値。</param>
      <returns>
        変換後の値を表す
        <see cref="T:C1.C1Rdl.RdlBool" />。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.op_Equality(C1.C1Rdl.RdlBool,C1.C1Rdl.RdlBool)">
      <summary>
        ２つの
        <see cref="T:C1.C1Rdl.RdlBool" />オブジェクトが等しいかどうかをテストします。
      </summary>
      <param name="o1">第１のオブジェクト。</param>
      <param name="o2">第２のオブジェクト。</param>
      <returns>
        ２つのオブジェクトが等しい場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.op_Inequality(C1.C1Rdl.RdlBool,C1.C1Rdl.RdlBool)">
      <summary>
        ２つの
        <see cref="T:C1.C1Rdl.RdlBool" />オブジェクトが異なるかどうかをテストします。
      </summary>
      <param name="o1">第１のオブジェクト。</param>
      <param name="o2">第２のオブジェクト。</param>
      <returns>
        ２つのオブジェクトが等しくない場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.ToString">
      <summary>現在のオブジェクトを文字列に変換します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.Equals(System.Object)">
      <summary>現在のオブジェクトを別のオブジェクトと比較します。 このメソッドは値による比較を実行します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>
        ２つのオブジェクトが同じ値を表している場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.GetHashCode">
      <summary>現在のオブジェクトのハッシュコードを値に基づいて取得します。</summary>
      <returns>ハッシュコード。</returns>
    </member>
    <member name="P:C1.C1Rdl.RdlBool.Value">
      <summary>現在のオブジェクトに定数が含まれている場合はブール値を取得します。 式が含まれていた場合は例外をスローします。</summary>
    </member>
    <member name="P:C1.C1Rdl.RdlBool.False">
      <summary>
        定数の
        <b>false</b>値を表す
        <see cref="T:C1.C1Rdl.RdlBool" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.RdlBool.True">
      <summary>
        定数の
        <b>true</b>値を表す
        <see cref="T:C1.C1Rdl.RdlBool" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.RdlBool.TypeConverter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="str"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Rdl.RdlBool.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="o"></param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Rdl.RdlObject">
      <summary>定数または式として 指定できるオブジェクトを表します。</summary>
    </member>
    <member name="F:C1.C1Rdl.RdlObject.Empty">
      <summary>
        空の
        <see cref="T:C1.C1Rdl.RdlObject" />オブジェクトを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.#ctor(System.Object)">
      <summary>
        <see cref="T:C1.C1Rdl.RdlObject" />クラスの新しいインスタンスを定数で初期化します。
      </summary>
      <param name="value">オブジェクト定数。</param>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.#ctor(System.String)">
      <summary>
        <see cref="T:C1.C1Rdl.RdlObject" />クラスの新しいインスタンスを初期化します。
        <paramref name="s" />文字列は、定数を表すか式を表すかを特定するために解析されます。
      </summary>
      <param name="s">
        <paramref name="s" />の先頭が = の場合は式として解釈されます。 そうでない場合は定数文字列として解釈されます。
      </param>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.IsNullOrEmpty(C1.C1Rdl.RdlObject)">
      <summary>
        <see cref="T:C1.C1Rdl.RdlObject" />が null または空かどうかをテストします。
      </summary>
      <param name="v">テストするオブジェクト。</param>
      <returns>
        <paramref name="v" />が null または空の場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.TryParse(System.String,System.Boolean@,System.Object@,System.String@)">
      <summary>
        文字列を解析して
        <see cref="T:C1.C1Rdl.RdlObject" />クラスのプロパティとして解釈します。
      </summary>
      <param name="s">解析する文字列。</param>
      <param name="isExpression">
        OUT: 文字列が式を表す場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </param>
      <param name="value">
        OUT:
        <paramref name="isExpression" />が
        <b>false</b>の場合はオブジェクト（文字列）。
      </param>
      <param name="expression">
        OUT:
        <paramref name="isExpression" />が
        <b>true</b>の場合は式。
      </param>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.op_Implicit(C1.C1Rdl.RdlObject)~System.String">
      <summary>
        <see cref="T:C1.C1Rdl.RdlObject" />を文字列に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Rdl.RdlObject" />。
      </param>
      <returns>変換後のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.op_Implicit(System.String)~C1.C1Rdl.RdlObject">
      <summary>
        文字列を
        <see cref="T:C1.C1Rdl.RdlObject" />に変換します。
      </summary>
      <param name="value">変換する文字列。</param>
      <returns>
        変換後の
        <see cref="T:C1.C1Rdl.RdlObject" />。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.op_Equality(C1.C1Rdl.RdlObject,C1.C1Rdl.RdlObject)">
      <summary>
        ２つの
        <see cref="T:C1.C1Rdl.RdlObject" />オブジェクトが等しいかどうかをテストします。
      </summary>
      <param name="o1">第１のオブジェクト。</param>
      <param name="o2">第２のオブジェクト。</param>
      <returns>
        ２つのオブジェクトが等しい場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.op_Inequality(C1.C1Rdl.RdlObject,C1.C1Rdl.RdlObject)">
      <summary>
        ２つの
        <see cref="T:C1.C1Rdl.RdlObject" />オブジェクトが異なるかどうかをテストします。
      </summary>
      <param name="o1">第１のオブジェクト。</param>
      <param name="o2">第２のオブジェクト。</param>
      <returns>
        ２つのオブジェクトが等しくない場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.ToString">
      <summary>現在のオブジェクトを文字列に変換します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.Equals(System.Object)">
      <summary>現在のオブジェクトを別のオブジェクトと比較します。 このメソッドは値による比較を実行します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>
        ２つのオブジェクトが同じ値を表している場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.GetHashCode">
      <summary>現在のオブジェクトのハッシュコードを値に基づいて取得します。</summary>
      <returns>ハッシュコード。</returns>
    </member>
    <member name="P:C1.C1Rdl.RdlObject.IsNull">
      <summary>
        オブジェクトに null 値が含まれる場合は
        <b>true</b>を返します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.RdlObject.Value">
      <summary>現在のオブジェクトに定数が含まれている場合はオブジェクト値を取得します。 現在のオブジェクトに式が含まれていた場合は例外をスローします。</summary>
    </member>
    <member name="T:C1.C1Rdl.RdlObject.TypeConverter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="str"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Rdl.RdlObject.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="o"></param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Rdl.RdlFloat">
      <summary>定数または式として 指定できる浮動小数点値を表します。</summary>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.#ctor(System.Double)">
      <summary>
        <see cref="T:C1.C1Rdl.RdlFloat" />クラスの新しいインスタンスを定数値で初期化します。
      </summary>
      <param name="value">倍精度定数。</param>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.#ctor(System.String)">
      <summary>
        <see cref="T:C1.C1Rdl.RdlFloat" />クラスの新しいインスタンスを初期化します。
        <paramref name="s" />文字列は、定数を表すか式を表すかを特定するために解析されます。
      </summary>
      <param name="s">
        <paramref name="s" />の先頭が = の場合は式として解釈されます。 そうでない場合は倍精度値に変換されます。
      </param>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.TryParse(System.String,System.Boolean@,System.Double@,System.String@)">
      <summary>
        文字列を解析して
        <see cref="T:C1.C1Rdl.RdlFloat" />クラスのプロパティとして解釈します。
      </summary>
      <param name="s">解析する文字列。</param>
      <param name="isExpression">
        OUT:
        <paramref name="s" />に式が含まれる場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </param>
      <param name="value">
        OUT:
        <paramref name="isExpression" />が
        <b>false</b>の場合は倍精度値。
      </param>
      <param name="expression">
        OUT:
        <paramref name="isExpression" />が
        <b>true</b>の場合は式。
      </param>
      <returns>
        <paramref name="s" />が有効な
        <see cref="T:C1.C1Rdl.RdlFloat" />である場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.op_Implicit(C1.C1Rdl.RdlFloat)~System.String">
      <summary>
        <see cref="T:C1.C1Rdl.RdlFloat" />を文字列に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Rdl.RdlFloat" />。
      </param>
      <returns>変換後のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.op_Implicit(System.String)~C1.C1Rdl.RdlFloat">
      <summary>
        文字列を
        <see cref="T:C1.C1Rdl.RdlFloat" />に変換します。
      </summary>
      <param name="value">変換する文字列。</param>
      <returns>
        変換後の文字列を表す
        <see cref="T:C1.C1Rdl.RdlFloat" />。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.op_Implicit(C1.C1Rdl.RdlFloat)~System.Double">
      <summary>
        <see cref="T:C1.C1Rdl.RdlFloat" />を double 値に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Rdl.RdlFloat" />。
      </param>
      <returns>
        <paramref name="value" />に定数が含まれる場合は double 値、そうでない場合は
        <b>0</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.op_Implicit(System.Int32)~C1.C1Rdl.RdlFloat">
      <summary>
        double 値を
        <see cref="T:C1.C1Rdl.RdlFloat" />に変換します。
      </summary>
      <param name="value">変換する double 値。</param>
      <returns>
        変換後の値を表す
        <see cref="T:C1.C1Rdl.RdlFloat" />。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.op_Equality(C1.C1Rdl.RdlFloat,C1.C1Rdl.RdlFloat)">
      <summary>
        ２つの
        <see cref="T:C1.C1Rdl.RdlFloat" />オブジェクトが等しいかどうかをテストします。
      </summary>
      <param name="o1">第１のオブジェクト。</param>
      <param name="o2">第２のオブジェクト。</param>
      <returns>
        ２つのオブジェクトが等しい場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.op_Inequality(C1.C1Rdl.RdlFloat,C1.C1Rdl.RdlFloat)">
      <summary>
        ２つの
        <see cref="T:C1.C1Rdl.RdlFloat" />オブジェクトが異なるかどうかをテストします。
      </summary>
      <param name="o1">第１のオブジェクト。</param>
      <param name="o2">第２のオブジェクト。</param>
      <returns>
        ２つのオブジェクトが等しくない場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.ToString">
      <summary>現在のオブジェクトを文字列に変換します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.Equals(System.Object)">
      <summary>現在のオブジェクトを別のオブジェクトと比較します。 このメソッドは値による比較を実行します。</summary>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
      <returns>
        ２つのオブジェクトが同じ値を表している場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.GetHashCode">
      <summary>現在のオブジェクトのハッシュコードを値に基づいて取得します。</summary>
      <returns>ハッシュコード。</returns>
    </member>
    <member name="P:C1.C1Rdl.RdlFloat.Value">
      <summary>現在のオブジェクトに定数が含まれている場合は倍精度値を取得します。 式が含まれていた場合は例外をスローします。</summary>
    </member>
    <member name="P:C1.C1Rdl.RdlFloat.Zero">
      <summary>
        ゼロ値を表す
        <see cref="T:C1.C1Rdl.RdlFloat" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.RdlFloat.NaN">
      <summary>
        <b>double.NaN</b>値を表す
        <see cref="T:C1.C1Rdl.RdlFloat" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.RdlFloat.TypeConverter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="str"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Rdl.RdlFloat.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="o"></param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Value">
      <summary>式または定数として表せる値を定義します。</summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Value.#ctor">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Value" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Value.#ctor(C1.C1Rdl.RdlObject)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Value" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="v">
        <see cref="T:C1.C1Rdl.Rdl2008.Value" />プロパティの値。
      </param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Value.AssignFrom(C1.C1Rdl.Rdl2008.Value)">
      <summary>
        別の
        <see cref="T:C1.C1Rdl.Rdl2008.Value" />のプロパティを現在のオブジェクトにコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Value.Owner">
      <summary>
        このオブジェクトを含む
        <see cref="T:C1.C1Rdl.Rdl2008.Values" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Value.V">
      <summary>このオブジェクトの値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Value.TypeConverter">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Value" />と別のタイプ間で双方向変換します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Value.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
        文字列を
        <see cref="T:C1.C1Rdl.Rdl2008.Value" />に変換します。
      </summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="str">変換する文字列。</param>
      <returns>
        <paramref name="str" />を表す
        <see cref="T:C1.C1Rdl.Rdl2008.Value" />。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Value.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>オブジェクトを文字列に変換します。</summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="o">変換するオブジェクト。</param>
      <returns>変換された文字列。</returns>
    </member>
    <member name="T:C1.C1Rdl.Rdl2008.Values">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Value" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Values.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Rdl.Rdl2008.Values" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Values.GetItemType">
      <summary>コレクション要素のタイプを取得します。</summary>
      <returns>
        <see cref="T:C1.C1Rdl.Rdl2008.Value" />タイプ。
      </returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Values.Add(C1.C1Rdl.Rdl2008.Value)">
      <summary>
        指定された
        <see cref="T:C1.C1Rdl.Rdl2008.Value" />を現在のコレクションに追加します。
      </summary>
      <param name="item">追加するオブジェクト。</param>
      <returns>現在のコレクションに新しく追加されたオブジェクトのインデックス。</returns>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Values.Insert(System.Int32,C1.C1Rdl.Rdl2008.Value)">
      <summary>
        指定した
        <see cref="T:C1.C1Rdl.Rdl2008.Value" />を現在のコレクションに挿入します。
      </summary>
      <param name="index">オブジェクトの挿入先のインデックス。</param>
      <param name="item">挿入するオブジェクト。</param>
    </member>
    <member name="M:C1.C1Rdl.Rdl2008.Values.Add(C1.C1Rdl.RdlObject)">
      <summary>
        指定された
        <see cref="T:C1.C1Rdl.RdlObject" />を現在のコレクションに追加します。
      </summary>
      <param name="value">追加するオブジェクト。</param>
      <returns>現在のコレクションに新しく追加されたオブジェクトのインデックス。</returns>
    </member>
    <member name="P:C1.C1Rdl.Rdl2008.Values.Item(System.Int32)">
      <summary>
        指定されたインデックス位置の
        <see cref="T:C1.C1Rdl.Rdl2008.Value" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Rdl.Warning">
      <summary>
        <see cref="T:C1.C1Rdl.C1RdlReportBase" />の生成中に発生した エラーに関する情報を表します。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.Warning.#ctor(System.String,System.Object)">
      <summary>
        <see cref="T:C1.C1Rdl.Warning" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="description">人間に判読可能な問題の記述。</param>
      <param name="source">問題を発生させたオブジェクト。</param>
    </member>
    <member name="P:C1.C1Rdl.Warning.Description">
      <summary>問題の詳細な説明を取得します。</summary>
    </member>
    <member name="P:C1.C1Rdl.Warning.Source">
      <summary>エラーの原因となったオブジェクトを取得します。</summary>
    </member>
    <member name="T:C1.C1Rdl.WarningCollection">
      <summary>
        <see cref="T:C1.C1Rdl.Warning" />オブジェクトのコレクションを表します。 これは
        <see cref="T:C1.C1Rdl.C1RdlReportBase" />の
        <see cref="P:C1.C1Rdl.C1RdlReportBase.Warnings" />プロパティのタイプです。
      </summary>
    </member>
    <member name="M:C1.C1Rdl.WarningCollection.Add(C1.C1Rdl.Warning)">
      <summary>
        <see cref="T:C1.C1Rdl.Warning" />オブジェクトを現在のコレクションに追加します。
      </summary>
      <param name="item">追加する警告。</param>
      <returns>現在コレクション内の追加されたオブジェクトのインデックス。</returns>
    </member>
    <member name="P:C1.C1Rdl.WarningCollection.Item(System.Int32)">
      <summary>指定されたインデックスの要素を取得または設定します。</summary>
      <param name="index">現在のコレクション内のインデックス。</param>
      <returns>指定されたインデックスの要素。</returns>
    </member>
    <member name="T:C1.C1Preview.BarDirectionEnum">
      <summary>バーコードの方向を指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.BarDirectionEnum.Normal">
      <summary>バーコードは水平方向にレンダリングされます。</summary>
    </member>
    <member name="F:C1.C1Preview.BarDirectionEnum.Up">
      <summary>バーコードは下から上にレンダリングされます。</summary>
    </member>
    <member name="F:C1.C1Preview.BarDirectionEnum.Down">
      <summary>バーコードは上から下にレンダリングされます。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderBarCode">
      <summary>バーコードオブジェクトを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderBarCode.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderBarCode" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderBarCode.#ctor(C1.C1Report.BarCodeEnum)">
      <summary>
        <see cref="T:C1.C1Preview.RenderBarCode" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="codeType">バーコードエンコードタイプ。</param>
    </member>
    <member name="M:C1.C1Preview.RenderBarCode.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderBarCode" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderBarCode" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderBarCode.InternalResolveCalculatedValues">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderBarCode.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderBarCode" />の場合は、
        <see cref="T:C1.C1Preview.RenderBarCode" />固有のプロパティもコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderBarCode.BarCodeType">
      <summary>バーコードの生成時に使用するエンコーディングのタイプを取得または設定します。</summary>
      <remarks>
        <para>BarCodeType.None は、このプロパティの有効な値ではありません。</para>
        <para>
          選択されたエンコーディングが
          <see cref="P:C1.C1Preview.RenderBarCode.Text" />プロパティに保存された値に適用され、オブジェクトに表示されるバーコード画像が生成されます。
        </para>
      </remarks>
      <example>
        次のサンプルは、BarCodeType プロパティを使用して、値「123456」を Code39 エンコーディングバーコードにエンコードします。
        <code>
          <![CDATA[
          RenderBarCode rbc = new RenderBarCode();
          rbc.BarCodeType = BarCodeType.Code39;
          rbc.Text = "123456";
          doc.Body.Children.Add(rbc);
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.C1Preview.RenderBarCode.ShowText">
      <summary>
        <see cref="P:C1.C1Preview.RenderBarCode.Text" />プロパティを表す文字列をバーコード画像に並べて表示するかどうかを取得または設定します。
      </summary>
      <remarks>
        <para>
          デフォルトでは、オブジェクトはバーコード画像だけを表示します。
          <see cref="P:C1.C1Preview.RenderBarCode.Text" />プロパティの値のテキスト表現を含めるには、このプロパティを true に設定します。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderBarCode.Text">
      <summary>バーコード画像としてエンコードされる値を取得または設定します。</summary>
      <remarks>
        <para>
          一部のエンコーディングは任意の長さの英数字値をサポートします。その他のエンコーディングは数値または特定の文字セットに限定されます。詳細については、
          <see cref="P:C1.C1Preview.RenderBarCode.BarCodeType" />列挙型を参照してください。
        </para>
        <para>現在のエンコーディングに対して無効な文字を使用すると、オブジェクトには空白の画像が表示されます。</para>
      </remarks>
      <example>
        次のサンプルは、Text プロパティを使用して、値「123456」を Code39 エンコーディングバーコードにエンコードします。
        <code>
          <![CDATA[
          RenderBarCode rbc = new RenderBarCode();
          rbc.BarCodeType = BarCodeType.Code39;
          rbc.Text = "123456";
          doc.Body.Children.Add(rbc);
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.C1Preview.RenderBarCode.BarDirection">
      <summary>バーコードの方向を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderBarCodeFragment">
      <summary>RenderBarCode オブジェクトのフラグメントを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeFragment.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="P:C1.C1Preview.RenderBarCodeFragment.RenderObject" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderBarCodeFragment" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderBarCodeFragment" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeFragment.GetContentAutoWidth(System.Double,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="height"></param>
      <param name="width"></param>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeFragment.GetContentAutoHeight(System.Double,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeFragment.GetContentAutoSize(System.Double@,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeFragment.GetDrawingFlags(System.Boolean)">
      <summary>これは内部使用専用です。</summary>
      <param name="renderInputControls"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeFragment.InternalDraw(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="graphics"></param>
      <param name="drawParams"></param>
    </member>
    <member name="P:C1.C1Preview.RenderBarCodeFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderBarCode" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderVerticalTextFragment">
      <summary>
        解決された
        <see cref="T:C1.C1Preview.C1PrintDocument" />内の
        <see cref="T:C1.C1Preview.RenderVerticalText" />のフラグメントを表します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderTextFragment">
      <summary>
        解決された
        <see cref="T:C1.C1Preview.C1PrintDocument" />内の
        <see cref="T:C1.C1Preview.RenderText" />のフラグメントを表します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderTextFragmentBase">
      <summary>RenderTextFragment と RenderParagraphFragment の抽象基本クラス。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragmentBase.GetCharRect(System.Int32)">
      <summary>指定されたインデックス位置にある文字の領域を取得します。</summary>
      <param name="charIndex">このテキストのフラグメントの最初の文字のインデックス。</param>
      <returns>文字の境界を記述する RectangleD 構造体をオブジェクトのコンテンツ領域に対する相対位置で返します（間隔、境界線、パディングを含まない）。テキストが回転されている場合は、RectangleD.Empty になる可能性があります。この場合は、GetCharPoints メソッドを使用します。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragmentBase.GetCharPoints(System.Int32)">
      <summary>文字領域の平行四辺形を定義する PointD の配列を取得します。</summary>
      <param name="charIndex">このテキストのフラグメントの最初の文字のインデックス。</param>
      <returns>４つの PointD 構造体の配列を返します。</returns>
      <remarks>
        <see cref="M:C1.C1Preview.RenderTextFragmentBase.GetCharRect(System.Int32)" />メソッドと異なり、このメソッドは回転したテキストにも機能します。
      </remarks>
      <seealso cref="M:C1.C1Preview.RenderTextFragmentBase.GetCharRect(System.Int32)" />
    </member>
    <member name="M:C1.C1Preview.RenderTextFragmentBase.GetCharRangeRects(System.Int32,System.Int32)">
      <summary>文字範囲の四角形の配列を取得します。</summary>
      <param name="startCharIndex">このテキストのフラグメントの最初の文字のインデックス。</param>
      <param name="length">文字の数。</param>
      <returns>Rectangle 構造体の配列。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragmentBase.GetCharRangeRegion(System.Int32,System.Int32)">
      <summary>文字範囲の領域を取得します。</summary>
      <param name="startCharIndex">このテキストのフラグメントの最初の文字のインデックス。</param>
      <param name="length">文字の数。</param>
      <returns>文字範囲の領域を定義する Region オブジェクト。文字範囲が無効な場合は null。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragmentBase.AssignFrom(C1.C1Preview.RenderFragment)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderFragment" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragmentBase.GetAnchorRect(C1.C1Preview.C1Anchor,C1.C1Preview.RectangleD@,System.Boolean@)">
      <summary>
        現在のフラグメントの
        <see cref="T:C1.C1Preview.C1Anchor" />に対応する矩形を取得します。
      </summary>
      <param name="anchor">テストするアンカー。</param>
      <param name="anchorRect">
        出力：
        <paramref name="RectangleD" />に関連付けられた 現在のフラグメント内の領域を定義する
        <see cref="T:C1.C1Preview.RectangleD" />構造体。
      </param>
      <param name="anchorVisible">
        出力：
        <paramref name="anchor" />が現在のフラグメントに表示される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragmentBase.GetHyperlinks(C1.C1Preview.C1HyperlinkInfoCollection)">
      <summary>
        現在のフラグメントに表示されるすべてのハイパーリンクに関する情報を
        <see cref="T:C1.C1Preview.C1HyperlinkInfoCollection" />に追加します。
      </summary>
      <param name="hyperlinks">
        現在のフラグメント内のハイパーリンクに関するデータの追加先となる
        <see cref="T:C1.C1Preview.C1HyperlinkInfo" />オブジェクトのコレクション。
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderTextFragmentBase.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderTextBase" />を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragment.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="P:C1.C1Preview.RenderTextFragment.RenderObject" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderTextFragment" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderTextFragment" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragment.GetHyperlinks(C1.C1Preview.C1HyperlinkInfoCollection)">
      <summary>
        現在のフラグメントに表示されるすべてのハイパーリンクに関する情報を
        <see cref="T:C1.C1Preview.C1HyperlinkInfoCollection" />に追加します。
      </summary>
      <param name="hyperlinks">
        現在のフラグメント内のハイパーリンクに関するデータの追加先となる
        <see cref="T:C1.C1Preview.C1HyperlinkInfo" />オブジェクトのコレクション。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderTextFragment.FindHyperlink(C1.C1Preview.PointD)">
      <summary>
        現在のフラグメント内の指定した位置の
        <see cref="T:C1.C1Preview.C1Hyperlink" />オブジェクトを検索します。
      </summary>
      <param name="pt">フラグメントの左上隅に相対的な現在のフラグメント内のポイントを指定します。</param>
      <returns>
        見つかった
        <see cref="T:C1.C1Preview.C1Hyperlink" />を記述する
        <see cref="T:C1.C1Preview.C1HyperlinkInfo" />オブジェクト。何も見つからなかった場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="P:C1.C1Preview.RenderTextFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderText" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderVerticalTextFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderVerticalText" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderVerticalParagraphFragment">
      <summary>
        解決された
        <see cref="T:C1.C1Preview.C1PrintDocument" />内の
        <see cref="T:C1.C1Preview.RenderParagraph" />のフラグメントを表します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderParagraphFragment">
      <summary>
        解決された
        <see cref="T:C1.C1Preview.C1PrintDocument" />内の
        <see cref="T:C1.C1Preview.RenderParagraph" />のフラグメントを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderParagraphFragment.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="P:C1.C1Preview.RenderParagraphFragment.RenderObject" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderParagraphFragment" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderParagraphFragment" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderParagraphFragment.GetHyperlinks(C1.C1Preview.C1HyperlinkInfoCollection)">
      <summary>
        現在のフラグメントに表示されるすべてのハイパーリンクに関する情報を
        <see cref="T:C1.C1Preview.C1HyperlinkInfoCollection" />に追加します。
      </summary>
      <param name="hyperlinks">
        現在のフラグメント内のハイパーリンクに関するデータの追加先となる
        <see cref="T:C1.C1Preview.C1HyperlinkInfo" />オブジェクトのコレクション。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderParagraphFragment.FindHyperlink(C1.C1Preview.PointD)">
      <summary>
        現在のフラグメント内の指定した位置の
        <see cref="T:C1.C1Preview.C1Hyperlink" />オブジェクトを検索します。
      </summary>
      <param name="pt">フラグメントの左上隅に相対的な現在のフラグメント内のポイントを指定します。</param>
      <returns>
        見つかった
        <see cref="T:C1.C1Preview.C1Hyperlink" />を記述する
        <see cref="T:C1.C1Preview.C1HyperlinkInfo" />オブジェクト。何も見つからなかった場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="P:C1.C1Preview.RenderParagraphFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderParagraph" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderVerticalParagraphFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderVerticalParagraph" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.AnchorEnum">
      <summary>
        セクションが拡大または縮小した場合に、
        <see cref="T:C1.C1Preview.RenderField" />がセクションに対してどのように配置されるかを指定します。
      </summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Preview.RenderField" />クラスの
        <see cref="P:C1.C1Preview.RenderField.Anchor" />プロパティの値を設定します。
      </remarks>
      <seealso cref="P:C1.C1Preview.RenderSection.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderSection.CanShrink" />
      <seealso cref="M:C1.C1Preview.C1PrintDocument.ImportC1Report(System.String,System.String)" />
    </member>
    <member name="F:C1.C1Preview.AnchorEnum.Top">
      <summary>フィールドは移動しません。フィールドの上端とセクションの上端の間のスペースは変わりません。</summary>
    </member>
    <member name="F:C1.C1Preview.AnchorEnum.Bottom">
      <summary>フィールドは垂直方向に移動します。フィールドの下端とセクションの下端の間のスペースは変わりません。</summary>
    </member>
    <member name="F:C1.C1Preview.AnchorEnum.TopAndBottom">
      <summary>フィールドは拡大または縮小します。フィールドとセクションの間のスペースは上下とも変わりません。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderField">
      <summary>
        <b>C1Report</b>の
        <b>Field</b>オブジェクトと類似する描画オブジェクトを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderField.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderField" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderField.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderField" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderField" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderField.InternalResolvingFinished">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderField.GetDefaultWidth">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderField.InternalResetLayoutDimensions(C1.C1Preview.RefDim)">
      <summary>これは内部使用専用です。</summary>
      <param name="dimensions"></param>
    </member>
    <member name="M:C1.C1Preview.RenderField.GetApproximateCountOfFragmentsToProcess">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderField.InternalClearTemporaryInfo">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderField.InternalResolveCalculatedValues">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderField.CreateDataBindingCopy(C1.C1Preview.OutlineNode)">
      <summary>これは内部使用専用です。</summary>
      <param name="parentOutline"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderField.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderField" />の場合は、
        <see cref="T:C1.C1Preview.RenderField" />固有のプロパティもコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderField.Original">
      <summary>
        データバインディング中に現在のオブジェクトを生成した元の
        <see cref="T:C1.C1Preview.RenderField" />オブジェクトを取得します。 このオブジェクトが存在しない場合は
        <b>null</b>です。
      </summary>
      <seealso cref="P:C1.C1Preview.RenderObject.Original" />
    </member>
    <member name="P:C1.C1Preview.RenderField.TabPositions">
      <summary>テキスト内のタブのコレクションを取得します。</summary>
      <remarks>
        このプロパティは常に非
        <b>null</b>の
        <see cref="T:C1.C1Preview.TabPositionCollection" />コレクションを、まだ初期化されていない場合は初期化して返します。
        <see cref="P:C1.C1Preview.RenderField.HasTabPositions" />を使って、
        <see cref="P:C1.C1Preview.RenderField.TabPositions" />を初期化せずに 定義されたタブ位置が存在するかどうかをテストします。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.HasTabPositions">
      <summary>
        <see cref="P:C1.C1Preview.RenderField.TabPositions" />コレクションが空でないかどうかを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.Text">
      <summary>フィールドのテキストを取得または設定します。</summary>
      <remarks>
        <para>このプロパティには、レポートにレンダリングされるテキストが含まれます。</para>
        <para>
          この値は、
          <see cref="P:C1.C1Preview.RenderField.Calculated" />プロパティの設定に基づき、変換せずにそのままレンダリングされるか、スクリプト式として評価されます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.Picture">
      <summary>フィールドに表示する画像を取得または設定します。</summary>
      <remarks>
        <para>このプロパティは、次の３種類のオブジェクトに設定できます。</para>
        <list type="number">
          <item>
            <term></term>
            <description>
              通常の .NET
              <see cref="T:System.Drawing.Image" />オブジェクト。
            </description>
          </item>
          <item>
            <term></term>
            <description>画像のファイル名または URL を含む文字列。</description>
          </item>
          <item>
            <term></term>
            <description>データソース内の画像フィールドの名前を含む文字列。</description>
          </item>
        </list>
        <para>１と２は、ロゴなどの非連結画像を作成するために使用されます。これらの画像は、レポートデータに依存しません。</para>
        <para>３は、製品や従業員の写真などの連結画像を作成するために使用されます。これらは、ドキュメントデータと一緒に格納される画像です。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.DetectUrls">
      <summary>
        このプロパティは、フィールドの
        <see cref="P:C1.C1Preview.RenderField.RTF" />プロパティが true の場合に、文字列中の URL が自動的に書式設定されるかどうかを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.Calculated">
      <summary>
        <see cref="P:C1.C1Preview.RenderField.Text" />プロパティをリテラル値と計算式のどちらとして解釈するかを指定します。
      </summary>
      <remarks>
        <para>
          このプロパティが false に設定されている場合、
          <see cref="P:C1.C1Preview.RenderField.Text" />プロパティの値は、何も処理されずにレポートにレンダリングされます。
        </para>
        <para>
          true に設定されている場合、
          <see cref="P:C1.C1Preview.RenderField.Text" />プロパティの値はスクリプト式として評価され、その式の結果がレポートにレンダリングされます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.HideDuplicates">
      <summary>連続するレコードで、重複する値を非表示にするかどうかを指定します。</summary>
      <remarks>
        <para>このプロパティを使用すると、フィールドの値が前のレコードの値と同じ場合に、そのフィールドを非表示にできます。</para>
        <para>たとえば、納入業者と製品をリストするレポートでは、すべての製品に業者名を表示するのではなく、同じ製品のグループに業者の名前を一度だけ表示できます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.Format">
      <summary>フィールド値の書式設定に使用される文字列を取得または設定します。</summary>
      <remarks>
        <para>このプロパティを使用して、数値、日付、時刻、およびテキストが表示および印刷される方法をカスタマイズできます。</para>
        <para>
          たとえば、
          <b>Price</b>フィールドを作成した場合に、その
          <see cref="P:C1.C1Preview.RenderField.Format" />プロパティを「Currency」に設定できます。これで、フィールド値が「432168」の場合は、「\432,168」とレンダリングされます。
        </para>
        <para>このプロパティを使用して、数値（通貨とパーセント値を含む）、日付、ブール値、および文字列を書式設定できます。</para>
        <para>
          この書式設定の構文は、.NET の
          <see cref="M:System.String.Format(System.String,System.Object)" />メソッドで使用される構文と同じです。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.LineSlant">
      <summary>フィールドを横切る線（フィールドを囲むボックスではなく）がレンダリングされるかどうかを指定します。</summary>
      <seealso cref="T:C1.C1Report.LineSlantEnum" />
      <remarks>
        線の色、スタイル、および太さは、
        <see cref="P:C1.C1Preview.Style.ShapeLine" />プロパティによって決定されます。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.CheckBox">
      <summary>フィールドがチェックボックスとして表示されるかどうかを指定します。</summary>
      <remarks>このプロパティを使用すると、ブール値をプレーンテキストではなくグラフィカルに表示できます。</remarks>
    </member>
    <member name="P:C1.C1Preview.RenderField.RTF">
      <summary>
        フィールドの
        <see cref="P:C1.C1Preview.RenderField.Text" />を RTF としてレンダリングするかどうかを指定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.BarCodeType">
      <summary>フィールドを指定したバーコード形式でレンダリングします。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.GeneralTextAlignment">
      <summary>フィールドのデータ種別に応じてテキスト配置方法を決定するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.HidePicture">
      <summary>
        画像が表示されないかどうかを示す値を取得または設定します。
        <see cref="F:C1.C1Report.PictureScaleEnum.Hide" />と同様の働きをします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.SubReport">
      <summary>
        フィールド内にレンダリングされる
        <see cref="T:C1.C1Preview.RenderReport" />オブジェクトへの参照を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderField.CanGrow">
      <summary>フィールドの高さがフィールドのコンテンツに合わせて自動的に大きくなるかどうかを指定します。</summary>
      <seealso cref="P:C1.C1Preview.RenderField.CanShrink" />
      <seealso cref="P:C1.C1Preview.RenderSection.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderSection.CanShrink" />
    </member>
    <member name="P:C1.C1Preview.RenderField.CanShrink">
      <summary>フィールドの高さがフィールドのコンテンツに合わせて自動的に小さくなるかどうかを指定します。</summary>
      <seealso cref="P:C1.C1Preview.RenderField.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderSection.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderSection.CanShrink" />
    </member>
    <member name="P:C1.C1Preview.RenderField.Anchor">
      <summary>
        このフィールドを含む
        <see cref="T:C1.C1Preview.RenderSection" />に相対的なフィールドの垂直位置を取得または設定します。
      </summary>
      <remarks>
        <para>通常、フィールドは、セクションが拡大または縮小されても移動しません。ただし、必要に応じて、セクションと一緒にフィールドを拡大したり、セクションの下端から同じ位置にフィールドを留めておくことができます。</para>
        <para>特に、垂直線をセクションの高さ全体に伸ばすために作成されるフィールドではよく使用する機能です。</para>
      </remarks>
    </member>
    <member name="T:C1.C1Preview.RenderFieldFragment">
      <summary>RenderField オブジェクトのフラグメント。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="P:C1.C1Preview.RenderFieldFragment.RenderObject" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderFieldFragment" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderFieldFragment" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.CreateSplitParams">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.GetContentAutoHeight(System.Double,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.GetContentAutoWidth(System.Double,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="height"></param>
      <param name="width"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.GetContentAutoSize(System.Double@,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.CalcLength(C1.C1Preview.RefDim)">
      <summary>これは内部使用専用です。</summary>
      <param name="dim"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.ResolveChildrenLayout(C1.C1Preview.LengthBase,C1.C1Preview.LengthBase)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.GetDrawingFlags(System.Boolean)">
      <summary>これは内部使用専用です。</summary>
      <param name="renderInputControls"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.InternalDraw(C1.C1Preview.GraphicsUtils.GdiDc,C1.C1Preview.DrawParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="dc"></param>
      <param name="drawParams"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.InternalDraw(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="graphics"></param>
      <param name="dp"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.GetVertSplits(System.Collections.Generic.List{System.Double})">
      <summary>これは内部使用専用です。</summary>
      <param name="splits"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.FindVertSplitPosContent(C1.C1Preview.SplitParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="p"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.FindHorzSplitPosContent(C1.C1Preview.SplitParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="p"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.SplitHorzContent(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="newFragment"></param>
      <param name="p"></param>
    </member>
    <member name="M:C1.C1Preview.RenderFieldFragment.SplitVertContent(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="newFragment"></param>
      <param name="p"></param>
    </member>
    <member name="P:C1.C1Preview.RenderFieldFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderField" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.FieldResolvedInfo">
      <summary>
        ドキュメントの解決中に使用された一時情報を表します。 このクラスのインスタンスは解決を実行する
        <see cref="T:C1.C1Preview.RenderField" />ごとに作成されます。
      </summary>
    </member>
    <member name="T:C1.C1Preview.FragmentResolvedInfo">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.#ctor(C1.C1Preview.IResolvedInfoOwner)">
      <summary>これは内部使用専用です。</summary>
      <param name="owner"></param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.GetFlag(System.Int64)">
      <summary>これは内部使用専用です。</summary>
      <param name="flagMask"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.SetFlag(System.Int64,System.Boolean)">
      <summary>これは内部使用専用です。</summary>
      <param name="flagMask"></param>
      <param name="value"></param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.GetRightBottom(C1.C1Preview.PageAreaBase@,System.Double@,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="rightBottomPageArea"></param>
      <param name="right"></param>
      <param name="bottom"></param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.GetLeftTop(C1.C1Preview.PageAreaBase@,System.Double@,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="leftTopPageArea"></param>
      <param name="left"></param>
      <param name="top"></param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.GetDim(C1.C1Preview.RefDim)">
      <summary>これは内部使用専用です。</summary>
      <param name="dim"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.SetDim(C1.C1Preview.RefDim,System.Double)">
      <summary>これは内部使用専用です。</summary>
      <param name="dim"></param>
      <param name="value"></param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.GetDim(C1.C1Preview.RefDim,C1.C1Preview.PageAreaBase@,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="dim"></param>
      <param name="pageArea"></param>
      <param name="value"></param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.SetDim(C1.C1Preview.RefDim,C1.C1Preview.PageAreaBase,System.Double)">
      <summary>これは内部使用専用です。</summary>
      <param name="dim"></param>
      <param name="pageArea"></param>
      <param name="value"></param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.HasDim(C1.C1Preview.RefDim)">
      <summary>これは内部使用専用です。</summary>
      <param name="dim"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.SetLeftTop(C1.C1Preview.PageAreaBase,System.Double,System.Double)">
      <summary>これは内部使用専用です。</summary>
      <param name="pageArea"></param>
      <param name="left"></param>
      <param name="top"></param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.SetRightBottom(C1.C1Preview.PageAreaBase,System.Double,System.Double)">
      <summary>これは内部使用専用です。</summary>
      <param name="pageArea"></param>
      <param name="right"></param>
      <param name="bottom"></param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.ResetDim(C1.C1Preview.RefDim)">
      <summary>これは内部使用専用です。</summary>
      <param name="dimensions"></param>
    </member>
    <member name="M:C1.C1Preview.FragmentResolvedInfo.GetOffset(C1.C1Preview.RefDim,C1.C1Preview.RefDim,C1.C1Preview.RefDim)">
      <summary>これは内部使用専用です。</summary>
      <param name="spacingDim"></param>
      <param name="borderDim"></param>
      <param name="paddingDim"></param>
      <returns></returns>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.LeftTopPageArea">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.RightBottomPageArea">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.Left">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.Top">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.RelLeft">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.RelTop">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.Width">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.Height">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.RelRight">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.RelBottom">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.ChildWidth">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.ChildHeight">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.LeftOffset">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.RightOffset">
      <summary>Padding.Right、Spacing.Right、Borders.Right の合計を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.TopOffset">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.BottomOffset">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.IsAutoLeft">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.IsAutoTop">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.IsAutoPos">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.AvailWidth">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.AvailHeight">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.NeedFullReresolving">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.PageActionsBeforeProcessed">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.IsAutoWidthResolving">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FragmentResolvedInfo.IsAutoHeightResolving">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.FieldResolvedInfo.#ctor(C1.C1Preview.IResolvedInfoOwner)">
      <summary>これは内部使用専用です。</summary>
      <param name="owner"></param>
    </member>
    <member name="P:C1.C1Preview.FieldResolvedInfo.IsTabPositionsResolved">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FieldResolvedInfo.IsTextIndentResolved">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FieldResolvedInfo.IsLinesDirectionResolved">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FieldResolvedInfo.IsChildrenProcessing">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FieldResolvedInfo.AutoSizeRequested">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FieldResolvedInfo.AutoHeightResolved">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.FieldResolvedInfo.AutoWidthResolved">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.FieldSplitParams">
      <summary>
        これは内部使用専用です。
        <see cref="T:C1.C1Preview.RenderField" />の分割パラメータを表します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.SplitParams">
      <summary>
        <para>これは内部使用専用です。</para>オブジェクトが分割されるときに使用される分割パラメータの基本クラス。
      </summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ChildrenSplitParams">
      <summary>出力（FindSplitPos）： 子からの SplitParams オブジェクトのコレクション。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.SplitPos">
      <summary>入力： 要求された分割位置を指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.SpacingMin">
      <summary>入力： 左／上のスペース。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.SpacingMax">
      <summary>入力： 右／下のスペース。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.PaddingMin">
      <summary>入力： 左／上の埋め込み。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.PaddingMax">
      <summary>入力： 右／下の埋め込み。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.BorderMin">
      <summary>入力： 左／上の枠線。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.BorderMax">
      <summary>入力： 右／下境界線。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.SplitDimensionSize">
      <summary>入力： 分割ディメンションのサイズ。垂直分割 - 高さ。水平分割 - 幅。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.NonSplitDimensionContentSize">
      <summary>入力： 非分割ディメンションのコンテンツサイズ。 垂直分割では Width - Inner.Left - Inner.Right。 水平分割では Height - Inner.Top - Inner.Bottom。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.BordersSplitMode">
      <summary>入力： RepeatBordersVert または RepeatBordersHorz。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.SplitVert">
      <summary>入力： 分割のタイプ（垂直または水平）を示します。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ChildrenAlwaysCanSplit">
      <summary>入力： ChildrenAlwaysCanSplitVert または ChildrenAlwaysCanSplitHorz。 分割のタイプ（垂直または水平）に応じて決まります。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.SplitContext">
      <summary>入力： 分割の一部のグローバルオプションを含む SplitContext オブジェクトを取得します。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.TopParentHardBreak">
      <summary>入力： 最上位親オブジェクトがハード区切りを処理することを示します。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.NewFragmentSize">
      <summary>出力（FindSplitPos）： 分割時に作成される新しいフラグメントのサイズ。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ContentSplitOffset">
      <summary>出力（FindSplitPos）： コンテンツ領域内の分割位置のオフセット。 コンテンツ領域は RealSplitPos - ContentSplitOffset の位置で分割されます。 ContentSplitOffset は埋め込み／スペース／枠線／RepeatBorders に基づいて 計算されます。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ContentRealSplitPos">
      <summary>出力（FindSplitPos）： コンテンツ領域内の実際の分割位置。 FindVertSplitPosContent／FindHorzSplitPosContent で計算されます。 ContentRealSplitPos = RealSplitPos - ContentSplitOffset。ReprintedFooterSize への コメントも参照してください。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ChildrenSplitPosOffset">
      <summary>出力（FindSplitPos）： ContentSplitPos からの子の分割位置のオフセット。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ReprintFooterSize">
      <summary>出力（FindSplitPos）： オブジェクト下部に再印刷されたフッターのサイズ。 FindXXXContent メソッド内に入力されます。 このメソッドを呼び出した後、ContentRealSplitPos はこのサイズを含まず、 実際の RealSplitPos は、 ContentRealSplitPos + ContentSplitOffset + ReprintFooterSize となります。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.ReprintHeaderSize">
      <summary>出力（FindSplitPos）： 分割されたオブジェクトの上部に再印刷されたヘッダーのサイズ。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.NeedReresolving">
      <summary>出力（Split）： 分割後に分割されたフラグメントが再解決されることを示します。 このフィールドは、RenderFragment.Split メソッドの後に入力されます。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitParams.AllChildrenSplitInSamePlace">
      <summary>出力： すべての子が１つの線で分割されることを示します。</summary>
    </member>
    <member name="M:C1.C1Preview.SplitParams.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.SplitParams" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.SplitParams.Clone">
      <summary>
        現在のオブジェクトのコピーを作成します。
        <see cref="F:C1.C1Preview.SplitParams.ChildrenSplitParams" />プロパティは参照によってコピーされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.SplitParams.AssignFrom(C1.C1Preview.SplitParams)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.SplitParams" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
        <see cref="F:C1.C1Preview.SplitParams.ChildrenSplitParams" />プロパティは参照によってコピーされます。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.SplitParams.InnerMin">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.SplitParams.InnerMax">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.SplitParams.ExistSplittedChildren">
      <summary>オブジェクトが分割された子オブジェクトを持つことを示します。</summary>
    </member>
    <member name="F:C1.C1Preview.FieldSplitParams.AllCharsFitted">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.FieldSplitParams.IsNewParagraph">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.FieldSplitParams.FittedCharCount">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.FieldSplitParams.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.FieldSplitParams" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.FieldSplitParams.AssignFrom(C1.C1Preview.SplitParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="source"></param>
    </member>
    <member name="T:C1.C1Preview.GrowShrinkModeEnum">
      <summary>CanGrow/CanShrink フィールドを処理するためのロジックを指定します。</summary>
      <remarks>
        この列挙型のメンバを使用して、
        <see cref="T:C1.C1Preview.RenderReport" />クラスの
        <see cref="P:C1.C1Preview.RenderReport.GrowShrinkMode" />プロパティの値を設定します。
      </remarks>
      <seealso cref="M:C1.C1Preview.C1PrintDocument.ImportC1Report(System.String,System.String)" />
    </member>
    <member name="F:C1.C1Preview.GrowShrinkModeEnum.C1Report">
      <summary>標準の C1Report モードを使用します。このモードでは、フィールドが拡大または縮小すると、その真下にあるフィールドにだけ影響します。</summary>
    </member>
    <member name="F:C1.C1Preview.GrowShrinkModeEnum.Access">
      <summary>Microsoft Access と同じモードを使用します。このモードでは、フィールドが拡大または縮小すると、そのフィールドの下にあるすべてのフィールド（水平方向に重なっていないフィールドを含む）に影響します。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderReport">
      <summary>
        <see cref="T:C1.C1Preview.RenderField" />オブジェクトにネストされたサブレポートや、
        <see cref="P:C1.C1Preview.RenderField.SubReport" />プロパティで指定された C1Report オブジェクトを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderReport.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.TagStringInputParams" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderReport.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderReport" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderReport" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderReport.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderArea.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderReport" />の場合は、
        <see cref="T:C1.C1Preview.RenderReport" />固有のプロパティもコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderReport.ExposeScriptObjects">
      <summary>スクリプトオブジェクトがネストされたオブジェクトに公開されるかどうかを指定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderReport.DataProcessingStartingScript">
      <summary>オブジェクトのデータ処理が開始するときに実行されるスクリプトを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderReport.DataProcessingFinishedScript">
      <summary>オブジェクトのデータ処理が完了したときに実行されるスクリプトを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderReport.GrowShrinkMode">
      <summary>
        <see cref="P:C1.C1Preview.RenderField.CanGrow" />や
        <see cref="P:C1.C1Preview.RenderField.CanShrink" />プロパティが処理される方法を取得または設定します。
      </summary>
      <remarks>
        <para>
          このプロパティが
          <see cref="F:C1.C1Preview.GrowShrinkModeEnum.C1Report" />に設定されている場合は、
          <see cref="P:C1.C1Preview.RenderField.CanGrow" />または
          <see cref="P:C1.C1Preview.RenderField.CanShrink" />プロパティが true に設定されているフィールドが拡大または縮小すると、その真下にあるフィールドが移動します。下にあっても水平方向に重なっていないフィールドは移動しません。
        </para>
        <para>
          このプロパティが
          <see cref="F:C1.C1Preview.GrowShrinkModeEnum.Access" />に設定されている場合、フィールドが拡大または縮小すると、
          <b>CanGrow</b>/
          <b>CanShrink</b>の結果として変更されたフィールドの真下にないフィールドでも、その下にあるすべてのフィールドに影響します。これは、Microsoft Access の動作と同じです。
        </para>
        <para>
          たとえば、フィールドがグリッドレイアウトで配置され、
          <see cref="P:C1.C1Preview.RenderReport.GrowShrinkMode" />が
          <see cref="F:C1.C1Preview.GrowShrinkModeEnum.Access" />に設定されている場合、上部のフィールドが拡大または縮小しても、その下にある各行内のフィールドは垂直方向に整列したままになります。
        </para>
        <para>
          <see cref="P:C1.C1Preview.RenderReport.GrowShrinkMode" />が
          <see cref="F:C1.C1Preview.GrowShrinkModeEnum.C1Report" />に設定されている場合、各列内のフィールドは他の列内のフィールドとは無関係に移動し、各行内のフィールドは垂直方向に整列しなくなります。
        </para>
      </remarks>
    </member>
    <member name="T:C1.C1Preview.RenderSection">
      <summary>
        <b>C1Report</b>の
        <b>Section</b>オブジェクトに類似する描画オブジェクトを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderSection.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderSection" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderSection.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderSection" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderSection" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderSection.GetDefaultSplitHorzBehavior">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderSection.OnChildAdd(C1.C1Preview.RenderObject)">
      <summary>これは内部使用専用です。</summary>
      <param name="child"></param>
    </member>
    <member name="M:C1.C1Preview.RenderSection.GetDefaultFlags">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderSection.CreateDataBindingCopy(C1.C1Preview.OutlineNode)">
      <summary>これは内部使用専用です。</summary>
      <param name="parentOutline"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderSection.InternalClearTemporaryInfo">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderSection.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderArea.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderSection" />の場合は、
        <see cref="T:C1.C1Preview.RenderSection" />固有のプロパティもコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderSection.CanGrow">
      <summary>セクションの高さが、そのコンテンツに合わせて自動的に大きくなるかどうかを指定します。</summary>
      <seealso cref="P:C1.C1Preview.RenderSection.CanShrink" />
      <seealso cref="P:C1.C1Preview.RenderField.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderField.CanShrink" />
    </member>
    <member name="P:C1.C1Preview.RenderSection.CanShrink">
      <summary>セクションの高さが、フィールドのコンテンツに合わせて自動的に縮小されるかどうかを指定します。</summary>
      <seealso cref="P:C1.C1Preview.RenderSection.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderField.CanGrow" />
      <seealso cref="P:C1.C1Preview.RenderField.CanShrink" />
    </member>
    <member name="P:C1.C1Preview.RenderSection.OnFormatScript">
      <summary>セクションが書式設定される前に実行されるスクリプトコードを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderSection.OnPrintScript">
      <summary>セクションが印刷される前（書式設定された後）に実行されるスクリプトコードを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderSectionFragment">
      <summary>
        <see cref="T:C1.C1Preview.RenderSection" />オブジェクトのフラグメントを表します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderAreaFragment">
      <summary>
        生成されたドキュメント内の
        <see cref="T:C1.C1Preview.RenderArea" />のフラグメントを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderAreaFragment.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="P:C1.C1Preview.RenderAreaFragment.RenderObject" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderAreaFragment" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderAreaFragment" />オブジェクト。
      </returns>
    </member>
    <member name="P:C1.C1Preview.RenderAreaFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderArea" />を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderSectionFragment.ResolveChildrenLayout(C1.C1Preview.LengthBase,C1.C1Preview.LengthBase)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.RenderSectionFragment.ResolvingFinished">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderSectionFragment.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>これは内部使用専用です。</summary>
      <param name="graphics"></param>
      <param name="backgroundRect"></param>
    </member>
    <member name="P:C1.C1Preview.RenderSectionFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderSection" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.IScalableControl">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.IScalableControl.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>これは内部使用専用です。</summary>
      <param name="x"></param>
      <param name="y"></param>
      <param name="width"></param>
      <param name="height"></param>
      <param name="zoomFactor"></param>
    </member>
    <member name="P:C1.C1Preview.IScalableControl.FormsStyle">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DocumentExpression">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.ExpressionBase`1">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1">
      <summary>これは内部使用専用です。</summary>
      <typeparam name="TContext"></typeparam>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.CreateCodeProvider(`0)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Recursive">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Simple">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.#ctor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Sum(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Sum(System.String,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Sum(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <param name="calculateMode"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Avg(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Avg(System.String,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Avg(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <param name="calculateMode"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Max(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Max(System.String,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Max(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <param name="calculateMode"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Min(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Min(System.String,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Min(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <param name="calculateMode"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Count(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Count(System.String,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Count(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <param name="calculateMode"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.CountDistinct(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.CountDistinct(System.String,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.CountDistinct(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <param name="calculateMode"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.CountRows(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.CountRows(System.String,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.CountRows(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <param name="calculateMode"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.StDev(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.StDev(System.String,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.StDev(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <param name="calculateMode"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.StDevP(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.StDevP(System.String,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.StDevP(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <param name="calculateMode"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Var(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Var(System.String,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Var(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <param name="calculateMode"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.VarP(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.VarP(System.String,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.VarP(System.String,System.String,C1.C1Preview.DataBinding.AggregateCalculateModeEnum)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <param name="calculateMode"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.First(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.First(System.String,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Last(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Last(System.String,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="scope"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Previous(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Previous(System.String,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="previousScope"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.RunningValue(System.String,C1.C1Preview.DataBinding.AggregateFuncEnum,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="expression"></param>
      <param name="func"></param>
      <param name="scope"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.RowNumber(System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="scope"></param>
      <returns></returns>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.MultiDocument">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Document">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Tags">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Page">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.UsageInfo">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.Globals">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.ScriptManagerBase`1.ScriptObjectBase.User">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ExpressionBase`1.BuildScriptObject(System.CodeDom.CodeTypeDeclaration,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="ctd"></param>
      <param name="script"></param>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.ExpressionBase`1.ScriptObjectBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ExpressionBase`1.ScriptObjectBase.GetExpressionValue">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.DocumentExpression.GetScriptObjectType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DocumentExpression.ScriptObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DocumentScript">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.ScriptBase`1">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptBase`1.BuildScriptObject(System.CodeDom.CodeTypeDeclaration,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="ctd"></param>
      <param name="script"></param>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.ScriptBase`1.ScriptObjectBase">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.ScriptBase`1.ScriptObjectBase.InternalExecute">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.DocumentScript.GetScriptObjectType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DocumentScript.ScriptObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.RenderFragmentScript">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.RenderFragmentScript.GetScriptObjectType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.RenderFragmentScript.ScriptObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderFragmentScript.ScriptObject.RenderFragment">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderFragmentScript.ScriptObject.RenderObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.RenderObjectScript">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.RenderObjectScript.GetScriptObjectType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.RenderObjectScript.ScriptObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectScript.ScriptObject.RenderObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.TableCellExpression">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1">
      <summary>これは内部使用専用です。</summary>
      <typeparam name="TContext"></typeparam>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject.RenderObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject.RenderFragment">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject.PageNo">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject.PageCount">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject.PageX">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject.PageY">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject.PageXCount">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DocObjectExpression`1.ScriptObject.PageYCount">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.TableCellExpression.GetScriptObjectType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.RowNumber">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.RenderObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.RenderFragment">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.Aggregates">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.DataBinding">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.Fields">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.RowDataBinding">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.RowFields">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.ColDataBinding">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableCellExpression.ScriptObject.ColFields">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.TableVectorExpression">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.TableVectorExpression.GetScriptObjectType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.TableVectorExpression.ScriptObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.TableVectorExpression.ScriptObject.RowNumber">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorExpression.ScriptObject.RenderObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorExpression.ScriptObject.RenderFragment">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorExpression.ScriptObject.Aggregates">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorExpression.ScriptObject.DataBinding">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorExpression.ScriptObject.Fields">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.TableVectorGroupExpression">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.TableVectorGroupExpression.GetScriptObjectType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.TableVectorGroupExpression.ScriptObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.TableVectorGroupExpression.ScriptObject.RowNumber">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorGroupExpression.ScriptObject.RenderObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorGroupExpression.ScriptObject.RenderFragment">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorGroupExpression.ScriptObject.Aggregates">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorGroupExpression.ScriptObject.DataBinding">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.TableVectorGroupExpression.ScriptObject.Fields">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.UserCellGroupExpression">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.UserCellGroupExpression.GetScriptObjectType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.UserCellGroupExpression.ScriptObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.UserCellGroupExpression.ScriptObject.RowNumber">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.UserCellGroupExpression.ScriptObject.RenderObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.UserCellGroupExpression.ScriptObject.RenderFragment">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.UserCellGroupExpression.ScriptObject.Aggregates">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.UserCellGroupExpression.ScriptObject.DataBinding">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.UserCellGroupExpression.ScriptObject.Fields">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.AggregateFuncEnum">
      <summary>サポートされる集計関数のセットを定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Sum">
      <summary>範囲内にある式の値の合計を返します。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Average">
      <summary>範囲内にある式の値の平均を返します。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Count">
      <summary>範囲内にある式の値の数を返します。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Min">
      <summary>範囲内にある式の値の最小値を返します。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Max">
      <summary>範囲内にある式の値の最大値を返します。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.CountDistinct">
      <summary>範囲内にある式の個別値の数を返します。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.First">
      <summary>範囲内にある式の最初の値を返します（範囲全体にすべてのソートが適用された後）。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Last">
      <summary>範囲内にある式の最後の値を返します（範囲全体にすべてのソートが適用された後）。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Var">
      <summary>範囲内にある式の値の分散を返します。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.VarP">
      <summary>範囲内にある式の値の母分散を返します。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.StDev">
      <summary>範囲内にある式の値の標準偏差を返します。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateFuncEnum.StDevP">
      <summary>範囲内にある式の値の母標準偏差を返します。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.RunningEnum">
      <summary>集計の範囲を定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.RunningEnum.Document">
      <summary>範囲はドキュメント全体です。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.RunningEnum.Group">
      <summary>範囲は現在のグループです。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.Aggregate">
      <summary>ドキュメント生成時に計算された集計値を表します。</summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Aggregate.#ctor(System.String)">
      <summary>
        集計の名前を割り当てて、
        <see cref="T:C1.C1Preview.DataBinding.Aggregate" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="name">
        この集計の
        <see cref="P:C1.C1Preview.NamedCollectionItem.Name" />に割り当てられた文字列。
      </param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Aggregate.#ctor(System.String,System.String,C1.C1Preview.DataBinding.C1DataBinding,C1.C1Preview.DataBinding.RunningEnum,C1.C1Preview.DataBinding.AggregateFuncEnum)">
      <summary>
        集計の名前、式、データバインディング、スコープ、および関数を指定して、
        <see cref="T:C1.C1Preview.DataBinding.Aggregate" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="name">
        この集計の
        <see cref="P:C1.C1Preview.NamedCollectionItem.Name" />プロパティに割り当てられた文字列。
      </param>
      <param name="expressionText">
        この集計の
        <see cref="P:C1.C1Preview.DataBinding.Aggregate.ExpressionText" />プロパティに割り当てられた文字列。
      </param>
      <param name="dataBinding">
        この集計の
        <see cref="P:C1.C1Preview.DataBinding.Aggregate.DataBinding" />プロパティに割り当てられた
        <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />。
      </param>
      <param name="running">
        この集計の
        <see cref="P:C1.C1Preview.DataBinding.Aggregate.Running" />プロパティに割り当てられた値。
      </param>
      <param name="func">
        この集計の
        <see cref="P:C1.C1Preview.DataBinding.Aggregate.Func" />プロパティに割り当てられた値。
      </param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Aggregate.SetName(System.String)">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.DataBinding.Aggregate" />の名前を設定します。
      </summary>
      <param name="newName">集計の新しい名前。</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Aggregate.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.Owner">
      <summary>このオブジェクトを含む AggregateCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.Func">
      <summary>計算する集計関数を取得または設定します。</summary>
      <remarks>
        このプロパティのデフォルト値は
        <see cref="F:C1.C1Preview.DataBinding.AggregateFuncEnum.Sum" />です。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.IgnoreNullValues">
      <summary>集計の計算時に null 値を無視するかどうかを指定する値を取得または設定します。</summary>
      <remarks>
        このプロパティのデフォルト値は
        <b>true</b>です。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.Expression">
      <summary>集計値を計算するために使用される式を取得します。</summary>
      <remarks>
        <see cref="P:C1.C1Preview.DataBinding.Aggregate.ExpressionText" />プロパティを使って、式を設定します。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.ExpressionText">
      <summary>集計値を計算するために使用される式のテキストを取得します。</summary>
      <remarks>
        <see cref="P:C1.C1Preview.DataBinding.Aggregate.Expression" />プロパティを使って、
        <see cref="T:C1.C1Preview.DataBinding.Expression" />オブジェクトを取得できます。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.DataBinding">
      <summary>算術関数が計算されるデータ連結を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.Running">
      <summary>すべてのレコードに対して集計を実行するか、グループごとに集計を実行するかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Aggregate.Value">
      <summary>フィールドの値を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.AggregateCollection">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.Aggregate" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.AggregateCollection.#ctor(C1.C1Preview.DataBinding.C1DataSchema)">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.AggregateCollection" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">
        このコレクションのオーナーである
        <see cref="T:C1.C1Preview.DataBinding.C1DataSchema" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.AggregateCollection.Add(C1.C1Preview.DataBinding.Aggregate)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="aggregate">追加するオブジェクト。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.AggregateCollection.Owner">
      <summary>このオブジェクトを含む C1DataSchema オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.AggregateCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>指定した位置の Aggregate オブジェクトを返します。</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.AggregateCollection.Item(System.String)">
      <summary>コレクション内の指定した名前のオブジェクトを取得します。</summary>
      <param name="name">オブジェクトの名前。</param>
      <returns>
        指定した
        <see cref="P:C1.C1Preview.NamedCollectionItem.Name" />を持つ
        <see cref="T:C1.C1Preview.DataBinding.Aggregate" />オブジェクト。 指定した名前が見つからなかった場合は空の集計。
      </returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.AggregateCalculateModeEnum">
      <summary>集計計算モードを示します。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateCalculateModeEnum.Simple">
      <summary>集計を指定されたデータソースに対してのみ行います。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.AggregateCalculateModeEnum.Recursive">
      <summary>集計を再帰的に計算するかどうかを示します。 指定された範囲の現在のインスタンスのすべてのデータについて計算した後、 現在のインスタンスのすべての派生インスタンスについても計算します。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.C1DataBinding">
      <summary>C1PrintDocument 内のオブジェクトのデータ連結の設定内容を定義します。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.IFieldCollectionOwner">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.Field" />の値の取り出しを可能にするメソッドを定義します。 このインタフェースは、
        <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />によって実装されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IFieldCollectionOwner.GetFieldValue(C1.C1Preview.DataBinding.Field)">
      <summary>
        指定した
        <see cref="T:C1.C1Preview.DataBinding.Field" />オブジェクトの値を返します。
      </summary>
      <param name="field">
        返される値の
        <see cref="T:C1.C1Preview.DataBinding.Field" />。
      </param>
      <returns>
        <paramref name="field" />の値。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.C1DataBinding.ShouldSerializeFields">
      <summary>
        <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Fields" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns>このプロパティをシリアル化する必要がある場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.C1DataBinding.ShouldSerializeSorting">
      <summary>
        <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Sorting" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns>このプロパティをシリアル化する必要がある場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.C1DataBinding.ShouldSerializeGrouping">
      <summary>
        <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Grouping" />プロパティをシリアル化する必要があるかどうかをテストします。
      </summary>
      <returns>このプロパティをシリアル化する必要がある場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.C1DataBinding.IsParentFor(C1.C1Preview.DataBinding.C1DataBinding)">
      <summary>現在のデータバインディングオブジェクトが別オブジェクトの親 （もしくは祖父または祖先レベルの親）かどうかをテストします。</summary>
      <param name="dataBinding">
        現在のオブジェクトの子であるかどうかをテストする
        <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />オブジェクト。
      </param>
      <returns>
        現在のオブジェクトが渡されたオブジェクトの親である場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.C1DataBinding.AssignFrom(C1.C1Preview.DataBinding.C1DataBinding)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Name">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />の名前を取得または設定します。 この名前は、aggregate 関数で使用でき、 aggregate が参照するデータバインディングを示します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.OutlineText">
      <summary>
        現在のデータバインディングによって生成されたオブジェクトのアウトラインキャプションの生成に使用される
        <see cref="T:C1.C1Preview.DataBinding.Expression" />を定義する文字列を取得または設定します。
        <para>
          たとえば、描画オブジェクトが「CustomerName」フィールドを含むデータソースにデータバインドされる場合、 このプロパティを
          <c>「Customer: [Fields!CustomerName.Value]」</c>に設定すると、 描画オブジェクトの生成されたインスタンスごとに
          <c>「Customer: John Doe」</c>に似た アウトラインノードが生成されます。
        </para>
      </summary>
      <seealso cref="P:C1.C1Preview.DataBinding.C1DataBinding.ParentOutline" />
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.ParentOutline">
      <summary>親のアウトラインノードを取得または設定します。</summary>
      <seealso cref="P:C1.C1Preview.DataBinding.C1DataBinding.OutlineText" />
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Parent">
      <summary>親の C1DataBinding オブジェクトを取得します。</summary>
      <remarks>
        <para>親は、オブジェクトの所有権階層に基づいて取得されるため、たとえば、RenderText が RenderArea 内にある場合、RenderText の DataBinding.Parent は、そのテキストを保持する領域の DataBinding を返します。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Mode">
      <summary>データ連結モードを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Defined">
      <summary>この C1DataBinding オブジェクトが空でなく、何らかのデータにリンクされていることを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.DataSource">
      <summary>
        現在のデータバインディングに関連付けられたデータソースを取得または設定します。
        <para>現在、以下のタイプのオブジェクトをこのプロパティに関連付けることができます。</para><list type="bullet">
          <item>
            <see cref="T:System.Collections.IEnumerable" />
          </item>
          <item>
            <see cref="T:C1.C1Preview.DataBinding.DataSet" />
          </item>
          <item>
            <see cref="T:C1.C1Preview.DataBinding.Expression" />
          </item>
        </list>データソースが
        <see cref="T:C1.C1Preview.DataBinding.Expression" />の場合、 この式は
        <see cref="T:System.Collections.IEnumerable" />または
        <see cref="T:C1.C1Preview.DataBinding.DataSet" />のインスタンスに評価する必要があります。
      </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Grouping">
      <summary>データのグループ化方法を定義する Grouping オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Sorting">
      <summary>データのソート方法を定義する Sorting オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Fields">
      <summary>データフィールドのコレクションを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Filters">
      <summary>リンクされたデータに適用されるフィルタを含む式のコレクションを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.Document">
      <summary>この C1DataBinding オブジェクトを含む C1PrintDocument オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataBinding.RowNumber">
      <summary>現在の行またはグループインスタンスの行番号を取得します。</summary>
      <remarks>
        <para>このプロパティは、ドキュメント生成時にのみ使用できます。ドキュメントが生成状態ではない場合、またはこの C1DataBinding オブジェクトの RenderObject の処理が開始されていない場合は、０を返します。データが列挙されている場合は行の番号を返し、データの列挙が終了した場合は最後の行の番号を返します。</para>
      </remarks>
    </member>
    <member name="T:C1.C1Preview.DataBinding.C1DataSchema">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />のデータスキーマを表します。
      </summary>
      <remarks>
        このクラスには以下が含まれます。
        <list type="bullet">
          <item>ドキュメントに関連付けられたデータソースのリスト。</item>
          <item>
            <term>
              <see cref="P:C1.C1Preview.DataBinding.C1DataSchema.DataSources" />
            </term>
            <description>現在のドキュメントに関連付けられたデータソースのコレクション。 このコレクションの各要素は、外部データソースに接続する方法を決定します（接続文字列など）。</description>
          </item>
          <item>
            <term>
              <see cref="P:C1.C1Preview.DataBinding.C1DataSchema.DataSets" />
            </term>
            <description>使用可能なデータセットのコレクション（テーブル、SQL クエリー）。</description>
          </item>
          <item>
            <term>
              <see cref="P:C1.C1Preview.DataBinding.C1DataSchema.Aggregates" />
            </term>
            <description>データに定義された集計のコレクション。</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:C1.C1Preview.DataBinding.C1DataSchema.Clear">
      <summary>C1DataSchema オブジェクトをクリアし、定義されているすべての DataSets、DataSources、および Aggregates を削除します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataSchema.Owner">
      <summary>このオブジェクトを含む C1PrintDocument オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataSchema.DataSources">
      <summary>さまざまな DataSet のデータのソースへの接続方法に関する情報を含む DataSourceCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataSchema.DataSets">
      <summary>ドキュメントの一部として取得されるデータセットに関する情報を含む DataSetCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.C1DataSchema.Aggregates">
      <summary>ドキュメント生成時に計算される集計値に関する情報を含む AggregateCollection オブジェクトを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataProviderEnum">
      <summary>データソースの型です。これは、ConnectionProperties.ConnectString および Query.CommandText の構文を決定します。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.SQL">
      <summary>Microsoft SQL Server。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.OLEDB">
      <summary>Microsoft OLE DB Provider。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.ODBC">
      <summary>Microsoft Open Database Connectivity Driver。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.XmlFile">
      <summary>データソースとして指定された XML ファイル。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.SqlServerCe3_5">
      <summary>Microsoft SQL Server Compact Edition ドライババージョン 3.5。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.DataProviderEnum.SqlServerCe4_0">
      <summary>Microsoft SQL Server Compact Edition ドライババージョン 4.0。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.ConnectionProperties">
      <summary>データソースへの接続方法に関する情報を含みます。</summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.ConnectionProperties.AssignFrom(C1.C1Preview.DataBinding.ConnectionProperties)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.ConnectionProperties.DataProvider">
      <summary>データソースの型を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.ConnectionProperties.ConnectString">
      <summary>データソースの接続文字列を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.ConnectionProperties.IntegratedSecurity">
      <summary>このデータソースへの接続で統合セキュリティを使用するかどうかを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.IDBDataHandler">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.IDBDataHandler.GetFieldValue(System.String)">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.IDBDataHandler.DataSet">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataSet">
      <summary>ドキュメントの一部として取得されたデータセットに関する情報を含みます。</summary>
      <seealso cref="P:C1.C1Preview.DataBinding.C1DataSchema.DataSets" />
      <seealso cref="T:C1.C1Preview.DataBinding.DataSet" />
      <seealso cref="P:C1.C1Preview.RenderObject.DataBinding" />
      <seealso cref="P:C1.C1Preview.TableVectorGroup.DataBinding" />
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSet.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.DataSet" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSet.#ctor(C1.C1Preview.DataBinding.DataSource,System.String)">
      <summary>
        データソースと SQL クエリーを指定して、
        <see cref="T:C1.C1Preview.DataBinding.DataSet" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="ds">
        このデータセットのデータソースを指定する
        <see cref="T:C1.C1Preview.DataBinding.DataSource" />オブジェクト。
      </param>
      <param name="sql">データを取り出すために実行される SQL クエリーのテキスト。</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSet.AssignFrom(C1.C1Preview.DataBinding.DataSet)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.Name">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.DataBinding.DataSet" />の名前を取得または設定します。 この名前は、aggregate 関数で使用でき、 aggregate が参照するデータセットを示します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.Owner">
      <summary>このオブジェクトを含む DataSetCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.Query">
      <summary>データソースからデータを取得するために必要な接続情報、クエリーなどのデータソースに関する情報を定義する Query オブジェクトを取得します。</summary>
      <seealso cref="P:C1.C1Preview.DataBinding.DataSet.Fields" />
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.Fields">
      <summary>データセット内のフィールドを含む DataSetFieldCollection オブジェクトを取得します。</summary>
      <seealso cref="P:C1.C1Preview.DataBinding.DataSet.Query" />
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.Filters">
      <summary>データセットのレコードに適用されたフィルタを含む ExpressionCollection コレクションを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.RowFilter">
      <summary>ドキュメントに含めるデータ行をフィルタするために使用される式を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSet.MaxRecords">
      <summary>データセットから取得されるレコードの最大数を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataSetCollection">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.DataSet" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetCollection.#ctor(C1.C1Preview.DataBinding.C1DataSchema)">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.DataSetCollection" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="dataSchema">
        この
        <see cref="T:C1.C1Preview.DataBinding.DataSetCollection" />オブジェクトを含む
        <see cref="T:C1.C1Preview.DataBinding.C1DataSchema" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetCollection.Add(C1.C1Preview.DataBinding.DataSet)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="item">
        追加する
        <see cref="T:C1.C1Preview.DataBinding.DataSet" />オブジェクト。
      </param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetCollection.IndexByName(System.String)">
      <summary>コレクション内で指定した名前を持つオブジェクトのインデックスを検索します。</summary>
      <param name="name">検索する名前。</param>
      <returns>見つかったオブジェクトのインデックス。</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetCollection.FindByName(System.String)">
      <summary>現在のコレクションから指定された名前のデータセットを検索します。</summary>
      <param name="name">検索する名前。</param>
      <returns>指定された名前のデータセット。データセットが見つからなかった場合は null。</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetCollection.Owner">
      <summary>
        現在のデータセットコレクションを含む
        <see cref="T:C1.C1Preview.DataBinding.C1DataSchema" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得または設定します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>
        指定されたインデックスの
        <see cref="T:C1.C1Preview.DataBinding.DataSet" />。
      </returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetCollection.Item(System.String)">
      <summary>
        指定した名前を持つ
        <see cref="T:C1.C1Preview.DataBinding.DataSet" />を取得します。
      </summary>
      <param name="name">
        <see cref="T:C1.C1Preview.DataBinding.DataSet" />の名前。
      </param>
      <returns>
        指定された名前の
        <see cref="T:C1.C1Preview.DataBinding.DataSet" />、 データセットが見つからなかった場合は
        <c>null</c>。
      </returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataSetField">
      <summary>データモデル内のフィールドを表します。</summary>
      <seealso cref="T:C1.C1Preview.DataBinding.DataSetFieldCollection" />
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetField.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.DataSetField" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetField.#ctor(System.String)">
      <summary>
        このフィールドの
        <see cref="P:C1.C1Preview.NamedCollectionItem.Name" />を割り当てて、
        <see cref="T:C1.C1Preview.DataBinding.DataSetField" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="name">
        このフィールドの識別に使用される名前に割り当てられた文字列。 現在のフィールドが
        <see cref="T:C1.C1Preview.DataBinding.DataSetFieldCollection" />に追加された場合、 この名前はそのコレクション内で一意である必要があります。
      </param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetField.#ctor(System.String,System.String)">
      <summary>
        <see cref="P:C1.C1Preview.NamedCollectionItem.Name" />および関連付けられた DB フィールドを割り当てて、
        <see cref="T:C1.C1Preview.DataBinding.DataSetField" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="name">
        このフィールドの識別に使用される名前に割り当てられた文字列。 現在のフィールドが
        <see cref="T:C1.C1Preview.DataBinding.DataSetFieldCollection" />に追加された場合、 この名前はそのコレクション内で一意である必要があります。
      </param>
      <param name="dataField">このフィールドのネイティブ DB 名。</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetField.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetField.Expression">
      <summary>このフィールドの値を計算するために使用される式を定義する Expression オブジェクトを取得します。</summary>
      <remarks>
        <para>DataSetField では、Expression または DataField のいずれか（両方ではない）を定義する必要があります。両方とも定義した場合は、DataFiled が使用されます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetField.DataField">
      <summary>クエリーのフィールドの名前を取得または設定します。</summary>
      <remarks>
        <para>DataField 名は一意でなくてもかまいません。複数のフィールドから同じデータフィールドを参照できます。DataField が指定されない場合は、フィールドの値を決定するために Expression が使用されます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetField.ExpressionText">
      <summary>式のテキストを取得または設定します。</summary>
      <seealso cref="P:C1.C1Preview.DataBinding.DataSetField.DataField" />
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataSetFieldCollection">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.DataSetField" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetFieldCollection.#ctor(C1.C1Preview.DataBinding.DataSet)">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.DataSetFieldCollection" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">
        この
        <see cref="T:C1.C1Preview.DataBinding.DataSetFieldCollection" />を含む
        <see cref="T:C1.C1Preview.DataBinding.DataSet" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSetFieldCollection.Add(C1.C1Preview.DataBinding.DataSetField)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="field">追加するオブジェクト。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetFieldCollection.Owner">
      <summary>このオブジェクトを含む DataSet オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetFieldCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>指定したインデックスの要素。</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSetFieldCollection.Item(System.String)">
      <summary>コレクション内の指定した名前のオブジェクトを取得します。</summary>
      <param name="name">オブジェクトの名前。</param>
      <returns>
        指定した
        <see cref="P:C1.C1Preview.NamedCollectionItem.Name" />を持つ
        <see cref="T:C1.C1Preview.DataBinding.DataSetField" />オブジェクト。指定した名前を持つフィールドが見つからなかった場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataSource">
      <summary>データソースに関する情報を含みます。</summary>
      <seealso cref="P:C1.C1Preview.DataBinding.C1DataSchema.DataSources" />
      <seealso cref="P:C1.C1Preview.DataBinding.Query.DataSource" />
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSource.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.DataSource" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSource.#ctor(C1.C1Preview.DataBinding.DataProviderEnum,System.String)">
      <summary>
        データソースタイプと接続文字列を割り当てて、
        <see cref="T:C1.C1Preview.DataBinding.DataSource" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="dataProvider">
        このデータソースのタイプを指定する
        <see cref="T:C1.C1Preview.DataBinding.DataProviderEnum" />。
      </param>
      <param name="connectString">データソース接続文字列。</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSource.AssignFrom(C1.C1Preview.DataBinding.DataSource)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSource.Owner">
      <summary>このオブジェクトを含む DataSourceCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSource.DataSchema">
      <summary>この DataSource オブジェクトを含む C1DataSchema オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSource.ConnectionProperties">
      <summary>ConnectString、データプロバイダなどのデータソースへの接続方法に関する情報を含みます。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSource.Transaction">
      <summary>このデータソースを使用するデータセットを１つのトランザクションで実行する必要があることを示します。</summary>
      <remarks>
        このプロパティのデフォルト値は
        <b>false</b>です。
      </remarks>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DataSourceCollection">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.DataSource" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSourceCollection.#ctor(C1.C1Preview.DataBinding.C1DataSchema)">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.DataSourceCollection" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="dataSchema">
        この
        <see cref="T:C1.C1Preview.DataBinding.DataSourceCollection" />を含む
        <see cref="T:C1.C1Preview.DataBinding.C1DataSchema" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.DataSourceCollection.Add(C1.C1Preview.DataBinding.DataSource)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="dataSource">
        追加する
        <see cref="T:C1.C1Preview.DataBinding.DataSource" />オブジェクト。
      </param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSourceCollection.Owner">
      <summary>
        現在のコレクションを含む
        <see cref="T:C1.C1Preview.DataBinding.C1DataSchema" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.DataSourceCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得または設定します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>
        指定されたインデックスの
        <see cref="T:C1.C1Preview.DataBinding.DataSource" />。
      </returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.DatabindingUtils">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.Expression">
      <summary>グループ化、ソートなどで使用できる式を表します。</summary>
      <remarks>
        以下の各クラスは式を使用します。
        <list type="bullet">
          <item>
            <term>
              <see cref="T:C1.C1Preview.DataBinding.DataSet" />
            </term>
            <description>
              <see cref="P:C1.C1Preview.DataBinding.DataSet.Filters" />
            </description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.DataBinding.DataSetField" />
            </term>
            <description>
              <see cref="P:C1.C1Preview.DataBinding.DataSetField.Expression" />
            </description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />
            </term>
            <description>
              <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Filters" />
            </description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.DataBinding.Grouping" />
            </term>
            <description>
              <see cref="P:C1.C1Preview.DataBinding.Grouping.Expressions" />
            </description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.DataBinding.Grouping" />
            </term>
            <description>
              <see cref="P:C1.C1Preview.DataBinding.Grouping.OutlineExpression" />
            </description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.DataBinding.SortExpression" />
            </term>
            <description>
              <see cref="P:C1.C1Preview.DataBinding.SortExpression.Expression" />
            </description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.DataBinding.SortExpression" />
            </term>
            <description>
              <see cref="P:C1.C1Preview.DataBinding.SortExpression.Expression" />
            </description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.DataBinding.Aggregate" />
            </term>
            <description>
              <see cref="P:C1.C1Preview.DataBinding.Aggregate.Expression" />
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Expression.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.Expression" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Expression.#ctor(System.String)">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.Expression" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="expression">
        <see cref="P:C1.C1Preview.DataBinding.Expression.Text" />プロパティに割り当てる文字列。
      </param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Expression.AssignFrom(C1.C1Preview.DataBinding.Expression)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Expression.Clone">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.DataBinding.Expression" />オブジェクトのコピーを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.DataBinding.Expression" />オブジェクト。
      </returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Expression.Text">
      <summary>式のテキストを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.ExpressionCollection">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.Expression" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.ExpressionCollection.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.ExpressionCollection" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">現在のコレクションのオーナー。</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.ExpressionCollection.Add(System.String)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="expression">式のテキスト。</param>
      <returns>コレクションに追加されたオブジェクトを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.ExpressionCollection.Add(C1.C1Preview.DataBinding.Expression)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="expression">追加するオブジェクト。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.ExpressionCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得または設定します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>指定したインデックスの要素。</returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.Field">
      <summary>データフィールドを表します。</summary>
      <remarks>
        <para>
          現在のフィールドを含む
          <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />の
          <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.DataSource" />が
          <see cref="T:System.Collections.IEnumerable" />の場合、
          <see cref="T:C1.C1Preview.DataBinding.Field" />は列挙されたコレクションのオブジェクトのタイプに使用可能なプロパティを表します。
        </para>
        <para>
          <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.DataSource" />が
          <see cref="T:C1.C1Preview.DataBinding.DataSet" />の場合、
          <see cref="T:C1.C1Preview.DataBinding.Field" />はそのデータセットの
          <see cref="T:C1.C1Preview.DataBinding.DataSetField" />を表します。
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Field.#ctor(System.String)">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.Field" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="name">フィールドの一意の名前。</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Field.SetName(System.String)">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.DataBinding.Field" />の名前を設定します。
      </summary>
      <param name="newName">フィールドの新しい名前。</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Field.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.DataBinding.Field" />オブジェクトからプロパティをコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Field.Owner">
      <summary>このオブジェクトを含む FieldCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Field.Value">
      <summary>フィールドの値を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.FieldCollection">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.Field" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.FieldCollection.#ctor(C1.C1Preview.DataBinding.IFieldCollectionOwner)">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.FieldCollection" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">
        現在の
        <see cref="T:C1.C1Preview.DataBinding.FieldCollection" />のオーナー。
      </param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.FieldCollection.OnClearComplete">
      <summary>
        コレクションがクリアされた後に呼び出されます。
        <see cref="P:C1.C1Preview.DataBinding.FieldCollection.AutoGenerated" />プロパティを false に設定します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.FieldCollection.OnRemoveComplete(System.Int32,System.Object)">
      <summary>
        項目が削除された後に呼び出されます。
        <see cref="P:C1.C1Preview.DataBinding.FieldCollection.AutoGenerated" />プロパティを false に設定します。
      </summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.FieldCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
      <summary>
        項目が設定された後に呼び出されます。
        <see cref="P:C1.C1Preview.DataBinding.FieldCollection.AutoGenerated" />プロパティを false に設定します。
      </summary>
      <param name="index">項目のインデックス。</param>
      <param name="oldValue">古い項目。</param>
      <param name="newValue">新しい項目。</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.FieldCollection.OnInsertComplete(System.Int32,System.Object)">
      <summary>
        項目が挿入された後に呼び出されます。
        <see cref="P:C1.C1Preview.DataBinding.FieldCollection.AutoGenerated" />プロパティを false に設定します。
      </summary>
      <param name="index">項目のインデックス。</param>
      <param name="value">項目。</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.FieldCollection.AssignFrom(C1.C1Preview.OwnedCollectionBase)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.DataBinding.FieldCollection" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.FieldCollection.Add(C1.C1Preview.DataBinding.Field)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="field">追加するオブジェクト。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.FieldCollection.Owner">
      <summary>このオブジェクトを含む所有者オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.FieldCollection.AutoGenerated">
      <summary>コレクションが自動的に作成され、ユーザーによって変更されなかったことを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.FieldCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>指定したインデックスの要素。</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.FieldCollection.Item(System.String)">
      <summary>コレクション内の指定した名前のオブジェクトを取得します。</summary>
      <param name="name">オブジェクトの名前。</param>
      <returns>
        指定した
        <see cref="P:C1.C1Preview.NamedCollectionItem.Name" />を持つ
        <see cref="T:C1.C1Preview.DataBinding.Field" />オブジェクト。 指定した名前を持つフィールドが見つからなかった場合は空のフィールド。
      </returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.Grouping">
      <summary>Grouping クラスは、データをグループ化するための式を定義します。</summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Grouping.AssignFrom(C1.C1Preview.DataBinding.Grouping)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Grouping.Defined">
      <summary>グループ化が定義されているかどうかを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Grouping.Owner">
      <summary>このオブジェクトを含む C1DataBinding オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Grouping.Expressions">
      <summary>データをグループ化するための式を含む ExpressionCollection を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.CommandTypeEnum">
      <summary>許可されるクエリータイプを記述します。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.CommandTypeEnum.Text">
      <summary>CommandText には、SQL クエリーのテキストが含まれます。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.CommandTypeEnum.StoredProcedure">
      <summary>CommandText には、データを取得するために実行する必要があるストアドプロシージャの名前が含まれます。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.CommandTypeEnum.TableDirect">
      <summary>CommandText には、データテーブルの名前が含まれます。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.Query">
      <summary>ドキュメントのデータを取得するために実行するクエリーの説明を含みます。</summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Query.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.Query" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Query.AssignFrom(C1.C1Preview.DataBinding.Query)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Query.DataSource">
      <summary>クエリーを実行する対象の DataSource オブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Query.CommandType">
      <summary>CommandText に含まれるクエリーの種類を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Query.CommandText">
      <summary>ドキュメントのデータを取得するために実行するクエリーを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Query.Timeout">
      <summary>クエリーがタイムアウトするまでの秒数を取得または設定します。</summary>
      <remarks>
        <para>負でない値にする必要があります。省略したり０を指定した場合、クエリーはタイムアウトしません。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Query.Parameters">
      <summary>クエリーの一部としてデータソースに渡されるパラメータを含む QueryParameterCollection オブジェクトを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.QueryParameter">
      <summary>クエリーの一部としてデータソースに渡されるパラメータに関する情報を含みます。</summary>
      <seealso cref="P:C1.C1Preview.DataBinding.Query.Parameters" />
    </member>
    <member name="M:C1.C1Preview.DataBinding.QueryParameter.#ctor(System.String)">
      <summary>
        パラメータの名前を割り当てて、
        <see cref="T:C1.C1Preview.DataBinding.QueryParameter" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="name">このパラメータの一意の名前。</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.QueryParameter.#ctor(System.String,System.Object)">
      <summary>
        パラメータの名前と値を割り当てて、
        <see cref="T:C1.C1Preview.DataBinding.QueryParameter" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="name">このパラメータの一意の名前。</param>
      <param name="value">このパラメータの値。</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.QueryParameter.SetName(System.String)">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.DataBinding.QueryParameter" />の名前を設定します。
      </summary>
      <param name="newName">パラメータの新しい名前。</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.QueryParameter.AssignFrom(C1.C1Preview.NamedCollectionItem)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.QueryParameter.Owner">
      <summary>このオブジェクトを含む QueryParameterCollection オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.QueryParameter.Value">
      <summary>パラメータの値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.QueryParameterCollection">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.QueryParameter" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.QueryParameterCollection.#ctor(C1.C1Preview.DataBinding.Query)">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.QueryParameterCollection" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">
        現在のコレクションのオーナーである
        <see cref="T:C1.C1Preview.DataBinding.Query" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.QueryParameterCollection.Add(C1.C1Preview.DataBinding.QueryParameter)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="parameter">追加するオブジェクト。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.QueryParameterCollection.Owner">
      <summary>このオブジェクトを含む Query オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.QueryParameterCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>指定したインデックスの要素。</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.QueryParameterCollection.Item(System.String)">
      <summary>コレクション内の指定した名前のオブジェクトを取得します。</summary>
      <param name="name">オブジェクトの名前。</param>
      <returns>
        指定した
        <see cref="P:C1.C1Preview.NamedCollectionItem.Name" />を持つ
        <see cref="T:C1.C1Preview.DataBinding.QueryParameter" />オブジェクト。 指定した名前を持つパラメータが見つからなかった場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="T:C1.C1Preview.DataBinding.Sorting">
      <summary>Sorting クラスは、データをソートするための式を定義します。</summary>
      <remarks>
        これは、
        <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />クラスの
        <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Sorting" />プロパティのタイプです。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.DataBinding.Sorting.AssignFrom(C1.C1Preview.DataBinding.Sorting)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Sorting.Defined">
      <summary>ソートが定義されていることを示す値を取得します。</summary>
      <remarks>
        このプロパティは、
        <see cref="P:C1.C1Preview.DataBinding.Sorting.Expressions" />コレクションが空でない場合は
        <b>true</b>、 その他の場合は
        <b>false</b>を返します。
      </remarks>
    </member>
    <member name="P:C1.C1Preview.DataBinding.Sorting.Expressions">
      <summary>ソート式のコレクションを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.SortDirectionEnum">
      <summary>ソートの種類を定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.SortDirectionEnum.Ascending">
      <summary>昇順にソートします。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBinding.SortDirectionEnum.Descending">
      <summary>降順にソートします。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.SortExpression">
      <summary>ソート式を表します。</summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.SortExpression.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.SortExpression" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.SortExpression.#ctor(System.String,C1.C1Preview.DataBinding.SortDirectionEnum)">
      <summary>
        ソート式と方向を指定して、
        <see cref="T:C1.C1Preview.DataBinding.SortExpression" />クラスの 新しいインスタンスを初期化します。
      </summary>
      <param name="expression">ソート式。</param>
      <param name="direction">ソート方向。</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.SortExpression.AssignFrom(C1.C1Preview.DataBinding.SortExpression)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.SortExpression.Clone">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.DataBinding.SortExpression" />オブジェクトを作成します （
        <see cref="P:C1.C1Preview.IOwnedCollectionItem.Owner" />プロパティはクローンされません）。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.DataBinding.SortExpression" />オブジェクト。
      </returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.SortExpression.Expression">
      <summary>式を定義する Expression オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.SortExpression.Direction">
      <summary>ソートの方向を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.DataBinding.SortExpression.ExpressionText">
      <summary>ソート式のテキストを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBinding.SortExpressionCollection">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.SortExpression" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DataBinding.SortExpressionCollection.#ctor(C1.C1Preview.ICollectionOwner)">
      <summary>
        <see cref="T:C1.C1Preview.DataBinding.SortExpressionCollection" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="owner">現在のコレクションのオーナー。</param>
    </member>
    <member name="M:C1.C1Preview.DataBinding.SortExpressionCollection.Add(System.String)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="expression">ソート式のテキスト。</param>
      <returns>コレクションに追加されたオブジェクトを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.SortExpressionCollection.Add(System.String,C1.C1Preview.DataBinding.SortDirectionEnum)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="expression">ソート式のテキスト。</param>
      <param name="sortDirection">ソートの方向。</param>
      <returns>コレクションに追加されたオブジェクトを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.DataBinding.SortExpressionCollection.Add(C1.C1Preview.DataBinding.SortExpression)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="expression">追加するオブジェクト。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="P:C1.C1Preview.DataBinding.SortExpressionCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得または設定します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>指定したインデックスの要素。</returns>
    </member>
    <member name="T:C1.C1Preview.Export.C1dxExportProvider">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />のネイティブ C1DX 形式
        <see cref="T:C1.C1Preview.Export.ExportProvider" />を表します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.C1dExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.C1dxExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.C1dxExportProvider.CanExportObject(System.Object)">
      <summary>
        指定したオブジェクトが
        <see cref="T:C1.C1Preview.Export.C1dxExporter" />によって エクスポートできるドキュメントを表すかどうかをテストします。
      </summary>
      <param name="obj">テストするオブジェクト（ドキュメント）。</param>
      <returns>
        <paramref name="obj" />が
        <see cref="T:C1.C1Preview.C1PrintDocument" />または
        <see cref="T:C1.C1Report.C1Report" />のインスタンスである場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1dxExportProvider.CanExportType(System.Type)">
      <summary>
        指定されたタイプのドキュメントを
        <see cref="T:C1.C1Preview.Export.C1dxExporter" />で エクスポートできるかどうかをテストします。
      </summary>
      <param name="documentType">テストするタイプ。</param>
      <returns>
        <paramref name="documentType" />が
        <see cref="T:C1.C1Preview.C1PrintDocument" />または
        <see cref="T:C1.C1Report.C1Report" />である場合は
        <b>true</b>、 そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.C1dxExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.C1Preview.Export.C1dxExporter" />の新しいインスタンスを作成します。
      </summary>
      <returns>新しく作成されたインスタンス。</returns>
    </member>
    <member name="P:C1.C1Preview.Export.C1dxExportProvider.PreferredOrdinal">
      <summary>「保存...」および類似のダイアログにおけるエクスポート形式の優先序数を指定します。 この実装は 1 を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dxExportProvider.FormatName">
      <summary>C1DX エクスポート形式の簡単な記述を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dxExportProvider.DefaultExtension">
      <summary>現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。 この実装は「c1dx」を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dxExportProvider.CanExportToStream">
      <summary>
        ストリームへのエクスポートが現在の形式によってサポートされているかどうかを示す値を取得します。 この実装は
        <b>true</b>を返します（ストリームへのエクスポートがサポートされます）。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dxExportProvider.DefaultOptionsFormClass">
      <summary>デフォルトでエクスポートオプションの編集に使用されるフォームのタイプを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dxExportProvider.SupportedDocumentInfoFields">
      <summary>
        現在のエクスポート形式によってサポートされる
        <see cref="T:C1.C1Preview.DocumentInfo" />クラスの フィールドを示すフラグの組み合わせを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dxExportProvider.ShouldEnsureGeneratedDocument">
      <summary>false を返します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.C1dxExporter">
      <summary>C1DX 形式のエクスポータを表します。</summary>
      <seealso cref="T:C1.C1Preview.Export.C1dxExportProvider" />
    </member>
    <member name="M:C1.C1Preview.Export.C1dxExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>現在のエクスポータのプロパティを指定したエクスポートオプションフォームの対応する ユーザー編集可能なオプションにコピーします。</summary>
      <param name="f">
        プロパティのコピー先の
        <see cref="T:C1.C1Preview.Export.C1dOptionsForm" />オブジェクト。
      </param>
    </member>
    <member name="P:C1.C1Preview.Export.C1dxExporter.C1DocumentFormat">
      <summary>
        オーバーライドされます。 ドキュメントの保存に使用される形式を決定する
        <see cref="T:C1.C1Preview.C1DocumentFormatEnum" />値を取得します。 この実装は
        <see cref="F:C1.C1Preview.C1DocumentFormatEnum.C1dx" />を返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.C1dxExporter.ExportProvider">
      <summary>
        <see cref="P:C1.C1Preview.Export.ExportProviders.C1dxExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.HtmlOptionsForm">
      <summary>
        <see cref="T:C1.C1Preview.Export.HtmlExporter" />によって使用されるエクスポートオプションを編集するためのフォームを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlOptionsForm.HasOutlines">
      <summary>関連付けられたドキュメントがアウトラインエントリを含むかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlOptionsForm.ImageFolder">
      <summary>画像ファイルの保存に使用されるフォルダを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlOptionsForm.Scaling">
      <summary>スケール係数を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlOptionsForm.PagePerFile">
      <summary>ソースドキュメントの各ページに個別の HTML ページが生成されるかどうかを示す値を 取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlOptionsForm.GeneratePageSeparators">
      <summary>ページ区切り線を生成するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlOptionsForm.GenerateOutline">
      <summary>アウトラインを生成するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlOptionsForm.GeneratePageLinks">
      <summary>個別ページへのハイパーリンクを生成するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlOptionsForm.LinksLocation">
      <summary>生成されたハイパーリンクの位置を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.ImagesOptionsForm">
      <summary>
        <see cref="T:C1.C1Preview.Export.ImageExporter" />によって使用されるエクスポートオプションを編集するためのフォームを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ImagesOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="T:C1.C1Preview.Forms.ProgressForm">
      <summary>印刷またはエクスポートの進行状況の表示に使用できるフォームを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.Forms.ProgressForm.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Forms.ProgressForm" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.ProgressForm.DoExport(C1.C1Preview.Export.Exporter,System.String)">
      <summary>
        操作の進行状況を表示する
        <see cref="T:C1.C1Preview.Forms.ProgressForm" />の新しいインスタンスを使って、ディスクファイルへのエクスポートを実行します。
      </summary>
      <param name="exporter">使用するエクスポータ。</param>
      <param name="fileName">出力ファイル名。</param>
    </member>
    <member name="M:C1.C1Preview.Forms.ProgressForm.DoExport(C1.C1Preview.Export.Exporter,System.IO.Stream)">
      <summary>
        操作の進行状況を表示する
        <see cref="T:C1.C1Preview.Forms.ProgressForm" />の新しいインスタンスを使って、ストリームへのエクスポートを実行します。
      </summary>
      <param name="exporter">使用するエクスポータ。</param>
      <param name="stream">出力ストリーム。</param>
    </member>
    <member name="M:C1.C1Preview.Forms.ProgressForm.DoPrint(C1.C1Preview.C1PrintManager,System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings)">
      <summary>
        操作の進行状況を表示する
        <see cref="T:C1.C1Preview.Forms.ProgressForm" />の新しいインスタンスを使って、ドキュメントを印刷します。
      </summary>
      <param name="printManager">使用するプリントマネージャ。</param>
      <param name="printerSettings">プリンタ設定。</param>
      <param name="defaultPageSettings">デフォルトページ設定。</param>
    </member>
    <member name="M:C1.C1Preview.Forms.ProgressForm.Export(C1.C1Preview.Export.Exporter,System.String)">
      <summary>
        操作の進行状況を表示する現在の
        <see cref="T:C1.C1Preview.Forms.ProgressForm" />を使って、ディスクへのエクスポートを実行します。
      </summary>
      <param name="exporter">使用するエクスポータ。</param>
      <param name="fileName">出力ファイル名。</param>
    </member>
    <member name="M:C1.C1Preview.Forms.ProgressForm.Export(C1.C1Preview.Export.Exporter,System.IO.Stream)">
      <summary>
        操作の進行状況を表示する現在の
        <see cref="T:C1.C1Preview.Forms.ProgressForm" />を使って、ストリームへのエクスポートを実行します。
      </summary>
      <param name="exporter">使用するエクスポータ。</param>
      <param name="stream">出力ストリーム。</param>
    </member>
    <member name="M:C1.C1Preview.Forms.ProgressForm.Print(C1.C1Preview.C1PrintManager,System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings)">
      <summary>
        操作の進行状況を表示する現在の
        <see cref="T:C1.C1Preview.Forms.ProgressForm" />を使って、ドキュメントを印刷します。
      </summary>
      <param name="printManager">使用するプリントマネージャ。</param>
      <param name="printerSettings">プリンタ設定。</param>
      <param name="defaultPageSettings">デフォルトページ設定。</param>
    </member>
    <member name="M:C1.C1Preview.Forms.ProgressForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="T:C1.C1Preview.EmfOutlineHeader">
      <summary>C1Report または互換（「%PDFHdr|」プレフィックスを使用）によって作成された メタファイルコメントレコードから取り出されるアウトラインエントリを記述するデータを含みます。</summary>
    </member>
    <member name="M:C1.C1Preview.EmfOutlineHeader.#ctor(System.Int32,System.Int32,System.String,System.Drawing.RectangleF)">
      <summary>EmfOutlineHeader クラスの新しいインスタンスを作成します。</summary>
      <param name="pageIdx">０から始まるページインデックス。</param>
      <param name="level">アウトラインレベル。</param>
      <param name="text">エントリテキスト。</param>
      <param name="rect">エントリの矩形。</param>
    </member>
    <member name="P:C1.C1Preview.EmfOutlineHeader.PageIdx">
      <summary>０から始まるページインデックスを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.EmfOutlineHeader.Level">
      <summary>エントリアウトラインレベルを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.EmfOutlineHeader.Text">
      <summary>エントリテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.EmfOutlineHeader.Rectangle">
      <summary>エントリ矩形を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.C1PrintController">
      <summary>.NET の PreviewPrintController は gdi+ コマンドでメタファイルを作成します。 これはユーザーにとって良くありません。 このような拡張メタファイル（EMF）レコードの形式はドキュメント化されておらず、 テキストの検索などを実行できないためです。 しかし、.NETの PrintController のみを使用した場合は、ページ生成処理が２倍以上遅くなります。 これを避ける唯一の方法は、PreviewPrintController から継承しながら、 拡張メタファイルのみのメタファイルに基づいて、独自のグラフィックスを提供することです。 もう１つの注意点は、ベースメソッドのどれを呼び出して、どれを呼び出さないかです。 base.OnStartPrint／base.OnEndPrint を呼び出すことが必要です。 これを呼び出さないと、パフォーマンスが通常の PrintController と同じになる（すなわち悪い）ためです。 一方で、base.OnStartPage／base.OnEndPage を呼び出すのは、時間の浪費となる可能性があり （いずれにしても提供されたグラフィックスを使用できないため）、さらには、 大きいドキュメントの場合はある時点でリソースを使い果たしてメタファイルの作成が失敗する可能性があります。 そのため、以下が機能する唯一の組み合わせとなる可能性があります。 それでもやはり、.NET の印刷に関する内容全体が混乱しています。--dima。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.ComplexExportProvider">
      <summary>ドキュメントのページを表すメタファイルのリストの反復処理でエクスポートを実行する エクスポート形式を記述する抽象基本クラス。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.ComplexExportProvider.CanExportObject(System.Object)">
      <summary>
        指定したオブジェクトが関連付けられた
        <see cref="T:C1.C1Preview.Export.Exporter" />によって エクスポートできるドキュメントを表すかどうかをテストします。
      </summary>
      <param name="obj">テストするオブジェクト（ドキュメント）。</param>
      <returns>
        <paramref name="obj" />が
        <see cref="T:C1.C1Preview.C1PrintDocument" />、
        <see cref="T:C1.C1Report.C1Report" />、
        <see cref="T:System.Drawing.Printing.PrintDocument" />のインスタンス、 または
        <see cref="T:System.Drawing.Imaging.Metafile" />オブジェクトのコレクションの場合は
        <b>true</b>、 その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.ComplexExportProvider.CanExportType(System.Type)">
      <summary>
        指定したタイプのドキュメントを現在のエクスポートプロバイダでエクスポートできるかどうかをテストします。 タイプが配列の場合、メタファイルの配列を関連エクスポータでエクスポートすることが可能であっても、このメソッドは
        <b>false</b>を返します。 確実な値を取得するには、
        <see cref="M:C1.C1Preview.Export.ComplexExportProvider.CanExportObject(System.Object)" />を使用します。
      </summary>
      <param name="documentType">テストするタイプ。</param>
      <returns>
        <paramref name="documentType" />が
        <see cref="T:C1.C1Preview.C1PrintDocument" />または
        <see cref="T:C1.C1Report.C1Report" />である場合は
        <b>true</b>、 そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="T:C1.C1Preview.Export.ComplexExporter">
      <summary>複雑なドキュメントを操作するエクスポータの抽象基本クラス。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.ComplexExporter.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.ComplexExporter" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ComplexExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>現在のエクスポータのプロパティを指定したエクスポートオプションフォームの 対応するユーザー編集可能なオプションにコピーします。</summary>
      <param name="f">
        プロパティのコピー先の
        <see cref="T:C1.C1Preview.Export.ComplexExporterOptionsForm" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.ComplexExporter.CopyPropertiesFromOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>指定したエクスポートオプションフォームからのオプションを 現在のエクスポータ上の対応するプロパティにコピーします。</summary>
      <param name="f">
        オプションのコピー元の
        <see cref="T:C1.C1Preview.Export.ComplexExporterOptionsForm" />オブジェクト。
      </param>
    </member>
    <member name="P:C1.C1Preview.Export.ComplexExporter.OpenXmlDocument">
      <summary>Open XML 文書形式でドキュメントを保存するかどうかを取得または設定します。</summary>
      <value>
        ドキュメントが Office12 形式にエクスポートされる場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </value>
    </member>
    <member name="P:C1.C1Preview.Export.ComplexExporter.Paginated">
      <summary>改ページを維持するかどうかを取得または設定します。</summary>
      <value>
        改ページが保持される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </value>
    </member>
    <member name="P:C1.C1Preview.Export.ComplexExporter.FixedPositioning">
      <summary>ドキュメントのレイアウトを正確に出力するかどうかを取得または設定します。</summary>
      <value>
        正確な外観が保持される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </value>
    </member>
    <member name="T:C1.C1Preview.Export.EmfOptionsForm">
      <summary>
        <see cref="T:C1.C1Preview.Export.EmfExporter" />によって使用されるエクスポートオプションを編集するためのフォームを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.EmfOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="P:C1.C1Preview.Export.EmfOptionsForm.EmfPlusToEmfOnly">
      <summary>
        <b>EmfPlus</b>メタファイルが
        <b>EmfOnly</b>に変換されるかどうかを示す値を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.PdfOptionsForm">
      <summary>
        <see cref="T:C1.C1Preview.Export.PdfExporter" />によって使用されるエクスポートオプションを編集するためのフォームを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.PdfOptionsForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.UseCompression">
      <summary>この圧縮を使用するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.EmbedTrueTypeFonts">
      <summary>ドキュメントで使用される埋め込み可能なフォントを埋め込むかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.SecurityOwnerPassword">
      <summary>オーナーのパスワードを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.SecurityUserPassword">
      <summary>ユーザーパスワードを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.Encryption">
      <summary>パスワード保護された PDF ドキュメントに使用する暗号化のタイプを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.SecurityAllowPrint">
      <summary>結果のドキュメントを印刷できるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.SecurityAllowCopyContent">
      <summary>結果のドキュメントのコンテンツをコピーできるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.SecurityAllowEditContent">
      <summary>結果のドキュメントのコンテンツを編集できるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.SecurityAllowEditAnnotations">
      <summary>結果のドキュメントの注釈を編集できるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.FormFields">
      <summary>元のドキュメントの入力フィールドが Acrobat フォームフィールドとして エクスポートされるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.ViewerPreferences">
      <summary>ビューアの設定を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.Exporter">
      <summary>関連付けられたエクスポータを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.HtmlExportProvider">
      <summary>HTML へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.C1Preview.Export.HtmlExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExportProvider.CanExportObject(System.Object)">
      <summary>
        指定したオブジェクトが
        <see cref="T:C1.C1Preview.Export.HtmlExporter" />によって エクスポートできるドキュメントを表すかどうかをテストします。
      </summary>
      <param name="obj">テストするオブジェクト（ドキュメント）。</param>
      <returns>
        <paramref name="obj" />が
        <see cref="T:C1.C1Preview.C1PrintDocument" />または
        <see cref="T:C1.C1Report.C1Report" />のインスタンスである場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExportProvider.CanExportType(System.Type)">
      <summary>指定したタイプのドキュメントを現在のエクスポートプロバイダでエクスポートできるかどうかをテストします。</summary>
      <param name="documentType">テストするタイプ。</param>
      <returns>
        <paramref name="documentType" />が
        <see cref="T:C1.C1Preview.C1PrintDocument" />または
        <see cref="T:C1.C1Report.C1Report" />である場合は
        <b>true</b>、 そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.C1Preview.Export.HtmlExporter" />の新しいインスタンスを作成します。
      </summary>
      <returns>新しく作成されたインスタンス。</returns>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExportProvider.CanExportRange(C1.C1Preview.OutputRangeTypeEnum)">
      <summary>
        <see cref="T:C1.C1Preview.Export.HtmlExporter" />が指定したタイプの ドキュメントのページ範囲を処理できるかどうかをテストします。 この実装は
        <b>true</b>を返します。
      </summary>
      <param name="range">テストする範囲のタイプ。</param>
      <returns>
        <b>true</b>。
      </returns>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExportProvider.PreferredOrdinal">
      <summary>「保存...」および類似のダイアログにおけるエクスポート形式の優先序数を指定します。 この実装は 40 を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExportProvider.FormatName">
      <summary>HTML エクスポート形式の簡単な記述を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExportProvider.DefaultExtension">
      <summary>現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。 この実装は「htm」を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExportProvider.CanExportToStream">
      <summary>
        ストリームへのエクスポートが現在の形式によってサポートされているかどうかを示す値を取得します。 この実装は
        <b>false</b>を返します（ストリームへのエクスポートはサポートされていません）。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExportProvider.CanShowOptions">
      <summary>
        関連付けられた
        <see cref="T:C1.C1Preview.Export.HtmlExporter" />がユーザーにエクスポートオプションの 編集を許可するダイアログを表示できるかどうかを示す値を取得します。 この実装は
        <b>true</b>を返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExportProvider.DefaultOptionsFormClass">
      <summary>
        デフォルトでエクスポートオプションの編集に使用されるフォームのタイプを取得します。 この実装は
        <see cref="T:C1.C1Preview.Export.HtmlOptionsForm" />タイプを返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExportProvider.ShouldEnsureGeneratedDocument">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />がエクスポートされる場合に、 エクスポートする前にドキュメントを生成する必要があるかどうか を示す値を返します。 この実装は
        <b>true</b>を返します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.HtmlExporter">
      <summary>HTML 形式のエクスポータを表します。</summary>
      <seealso cref="T:C1.C1Preview.Export.HtmlExportProvider" />
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExporter.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.HtmlExporter" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>現在のエクスポータのプロパティを指定したエクスポートオプションフォームの 対応するユーザー編集可能なオプションにコピーします。</summary>
      <param name="f">
        プロパティのコピー先の
        <see cref="T:C1.C1Preview.Export.HtmlOptionsForm" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExporter.CopyPropertiesFromOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>指定したエクスポートオプションフォームからのオプションを 現在のエクスポータ上の対応するプロパティにコピーします。</summary>
      <param name="f">
        オプションのコピー元の
        <see cref="T:C1.C1Preview.Export.HtmlOptionsForm" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExporter.ProcessPage(System.Drawing.Imaging.Metafile,C1.C1Preview.C1MetafileInfo,System.Int32,System.Boolean)">
      <summary>このクラスではサポートされていません。</summary>
      <param name="pageImage"></param>
      <param name="metafileInfo"></param>
      <param name="pageNo"></param>
      <param name="firstPage"></param>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExporter.Reset">
      <summary>エクスポータの内部状態をリセットします。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExporter.Clear">
      <summary>エクスポータとそのすべてのパブリックプロパティの内部状態をリセットします。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.HtmlExporter.InternalExport">
      <summary>
        ディスクファイルへのエクスポートを実行します。
        <see cref="P:C1.C1Preview.Export.Exporter.OutputFileName" />が設定されていない場合は、このメソッドは即座に戻ります。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.ImageFolder">
      <summary>画像を出力するフォルダのパスを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.GenerateOutline">
      <summary>ドキュメントのアウトラインとそのリンクを生成するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.PagePerFile">
      <summary>各ページを個別のファイルにエクスポートするかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.GeneratePageLinks">
      <summary>ページ番号とそのリンクを生成するかどうかを取得または設定します。</summary>
      <seealso cref="P:C1.C1Preview.Export.HtmlExporter.ExportNavBar" />
      <seealso cref="!:Paginated" />
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.GeneratePageSeparators">
      <summary>ページ区切りを表す水平線を出力するどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.LinksLocation">
      <summary>アウトラインエントリまたはページ番号を生成する場所を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.Scaling">
      <summary>生成されるドキュメントのすべての要素に適用される拡大率（％単位）を取得または設定します</summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.ExportNavBar">
      <summary>ページ番号付きのナビゲーションバーを作成するための HTML テンプレートを取得または設定します。</summary>
      <seealso cref="!:Paginated" />
      <seealso cref="P:C1.C1Preview.Export.HtmlExporter.GeneratePageLinks" />
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.PreserveExactHeight">
      <summary>すべての要素の高さを正確に維持するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.MaxHorzPageLinks">
      <summary>１行に含まれるページリンクの最大数を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.HtmlExporter.ExportProvider">
      <summary>
        <see cref="P:C1.C1Preview.Export.ExportProviders.HtmlExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum">
      <summary>リンクを生成する場所を定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.None">
      <summary>リンクは生成されません。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.TopPage">
      <summary>リンクはページ上部に配置されます。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.LeftFrame">
      <summary>リンクは左のフレームに配置されます。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.RightFrame">
      <summary>リンクは右のフレームに配置されます。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.TopFrame">
      <summary>リンクは上のフレームに配置されます。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksLocationsEnum.BottomFrame">
      <summary>リンクは下のフレームに配置されます。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.HtmlExporter.LinksModeEnum">
      <summary>ハイパーリンク生成モードを定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksModeEnum.None">
      <summary>ハイパーリンクが生成されません。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksModeEnum.DocumentOutline">
      <summary>生成されたハイパーリンクはドキュメントのアウトラインに基づいています。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.HtmlExporter.LinksModeEnum.PageNumbers">
      <summary>生成されたハイパーリンクは個別ページを指定します。</summary>
    </member>
    <member name="T:C1.C1Preview.Forms.DocumentInfoForm">
      <summary>
        ユーザーがドキュメントに関連付けられた
        <see cref="T:C1.C1Preview.DocumentInfo" />を編集できる
        <see cref="T:System.Windows.Forms.Form" />を表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.DocumentInfoForm.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Forms.DocumentInfoForm" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.DocumentInfoForm.SetDocumentInfo(C1.C1Preview.DocumentInfo)">
      <summary>
        <see cref="T:C1.C1Preview.DocumentInfo" />オブジェクトからのデータを現在の
        <see cref="T:C1.C1Preview.Forms.DocumentInfoForm" />のプロパティにコピーします。
      </summary>
      <param name="documentInfo">
        プロパティのコピー元の
        <see cref="T:C1.C1Preview.DocumentInfo" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.Forms.DocumentInfoForm.BuildDocumentInfo">
      <summary>
        新しい
        <see cref="T:C1.C1Preview.DocumentInfo" />オブジェクトを作成して、 現在の
        <see cref="T:C1.C1Preview.Forms.DocumentInfoForm" />からのデータをそのオブジェクトにコピーします。
      </summary>
      <returns>
        現在のフォームからのデータを含む
        <see cref="T:C1.C1Preview.DocumentInfo" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Forms.DocumentInfoForm.CreateForm(System.Type,System.Type)">
      <summary>
        新しい
        <see cref="T:C1.C1Preview.Forms.DocumentInfoForm" />フォーム、 または
        <see cref="T:C1.C1Preview.Forms.DocumentInfoForm" />から派生したタイプのフォームを作成します。
      </summary>
      <param name="customType">
        カスタムフォームタイプ（
        <see cref="T:C1.C1Preview.Forms.DocumentInfoForm" />またはその派生であること）。
      </param>
      <param name="defaultType">
        デフォルトフォームタイプ（
        <paramref name="customType" />が
        <b>null</b>の場合に使用。
        <see cref="T:C1.C1Preview.Forms.DocumentInfoForm" />または派生であること）。
      </param>
      <returns>新しく作成されたフォーム。</returns>
    </member>
    <member name="M:C1.C1Preview.Forms.DocumentInfoForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="P:C1.C1Preview.Forms.DocumentInfoForm.SupportedFields">
      <summary>
        このフォームによってサポートされた
        <see cref="T:C1.C1Preview.DocumentInfo" />フィールドを識別する
        <see cref="T:C1.C1Preview.DocumentInfoFields" />の組み合わせを取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Forms.OutputRangeForm">
      <summary>ページの範囲の入力に使用できるフォームを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.Forms.OutputRangeForm.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Forms.OutputRangeForm" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.OutputRangeForm.SetOutputRange(C1.C1Preview.OutputRange)">
      <summary>出力範囲を割り当てます。</summary>
      <param name="range">割り当てる範囲。</param>
    </member>
    <member name="M:C1.C1Preview.Forms.OutputRangeForm.BuildOutputRange">
      <summary>入力データに基づいて出力範囲を構築します。</summary>
      <returns>新しい範囲。</returns>
    </member>
    <member name="M:C1.C1Preview.Forms.OutputRangeForm.CreateForm(System.Type,System.Type)">
      <summary>
        <see cref="T:C1.C1Preview.Forms.OutputRangeForm" />または派生タイプのインスタンスを作成します。
      </summary>
      <param name="customType">
        カスタムフォームタイプまたは
        <b>null</b>。
      </param>
      <param name="defaultType">デフォルトフォームタイプ。</param>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.Forms.OutputRangeForm" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Forms.OutputRangeForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
      <param name="disposing">マネージドリソースが破棄される場合は true、その他の場合は false。</param>
    </member>
    <member name="P:C1.C1Preview.Forms.OutputRangeForm.AllowAll">
      <summary>「すべてのページを許可」オプションが使用可能かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Forms.OutputRangeForm.AllowPageRange">
      <summary>「ページ範囲」オプションが使用可能かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Forms.OutputRangeForm.AllowPageList">
      <summary>「ページリスト」オプションが使用可能かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Forms.OutputRangeForm.AllowInverted">
      <summary>「転置リスト」オプションが使用可能かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Forms.OutputRangeForm.MaxPageNumber">
      <summary>最大ページ番号を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.DocumentLocation">
      <summary>生成されたドキュメント内での位置を ページインデックスとページ上の領域の組み合わせで表します。</summary>
    </member>
    <member name="M:C1.C1Preview.DocumentLocation.#ctor(System.Int32)">
      <summary>
        <see cref="T:C1.C1Preview.DocumentLocation" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="pageIndex">０から始まるページインデックス。</param>
    </member>
    <member name="M:C1.C1Preview.DocumentLocation.#ctor(System.Int32,System.Int32,C1.C1Preview.RectangleD,C1.C1Preview.UnitTypeEnum,System.Single)">
      <summary>
        <see cref="T:C1.C1Preview.DocumentLocation" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="pageNo">論理ページ番号。</param>
      <param name="pageIndex">０から始まるページインデックス。</param>
      <param name="bounds">
        ページ上の範囲（
        <paramref name="units" />で指定）。
      </param>
      <param name="units">
        <paramref name="bounds" />の指定に使用する単位。
      </param>
      <param name="dpi">
        <paramref name="units" />がピクセルの場合の解像度。
      </param>
    </member>
    <member name="M:C1.C1Preview.DocumentLocation.#ctor(C1.C1Preview.C1Page,C1.C1Preview.RectangleD)">
      <summary>
        <see cref="T:C1.C1Preview.DocumentLocation" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="page">ターゲットドキュメントページ。</param>
      <param name="bounds">ページ上のターゲット範囲。</param>
    </member>
    <member name="M:C1.C1Preview.DocumentLocation.#ctor(C1.C1Preview.C1Page)">
      <summary>
        <see cref="T:C1.C1Preview.DocumentLocation" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="page">ターゲットドキュメントページ。</param>
    </member>
    <member name="M:C1.C1Preview.DocumentLocation.#ctor(C1.C1Preview.IDocumentLocation)">
      <summary>
        <see cref="T:C1.C1Preview.DocumentLocation" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="documentLocation">ターゲット位置。</param>
    </member>
    <member name="M:C1.C1Preview.DocumentLocation.Clone">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.DocumentLocation" />をクローンします。
      </summary>
      <returns>現在のドキュメント位置のコピー。</returns>
    </member>
    <member name="P:C1.C1Preview.DocumentLocation.PageIndex">
      <summary>０から始まるページインデックスを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentLocation.PageNo">
      <summary>ターゲット論理ページ番号を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentLocation.Bounds">
      <summary>
        ターゲットページの範囲を
        <see cref="P:C1.C1Preview.DocumentLocation.Units" />単位で取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentLocation.Units">
      <summary>
        <see cref="P:C1.C1Preview.DocumentLocation.Bounds" />で使用する単位。
      </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentLocation.Dpi">
      <summary>
        <see cref="P:C1.C1Preview.DocumentLocation.Units" />がピクセル単位だった場合の単位の解像度。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderEmptyFragment">
      <summary>RenderEmpty オブジェクトのフラグメントを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderEmptyFragment.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="P:C1.C1Preview.RenderEmptyFragment.RenderObject" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderEmptyFragment" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderEmptyFragment" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderEmptyFragment.GetDrawingFlags(System.Boolean)">
      <summary>これは内部使用専用です。</summary>
      <param name="renderInputControls"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderEmptyFragment.GetContentAutoWidth(System.Double,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="height"></param>
      <param name="width"></param>
    </member>
    <member name="M:C1.C1Preview.RenderEmptyFragment.GetContentAutoHeight(System.Double,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.RenderEmptyFragment.GetContentAutoSize(System.Double@,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="P:C1.C1Preview.RenderEmptyFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderEmpty" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderC1Printable">
      <summary>IC1Printable インタフェースをサポートするオブジェクトをレンダリングする描画オブジェクトを表します。</summary>
      <remarks>
        このクラスがレンダリングするオブジェクトは、
        <see cref="P:C1.C1Preview.RenderC1Printable.Object" />プロパティの値によって指定されます。 オブジェクトがそのプロパティに割り当て可能であるには、以下の２つのインスタンスメソッドのいずれかを公開する必要があります。
        <list type="bullet">
          <item>
            <term>Image C1PrintableGetImage()</term>
            <description>
              このメソッドは実装される場合、 レンダリングされるオブジェクトを表す
              <see cref="T:System.Drawing.Image" />を返す必要があります。
            </description>
          </item>
          <item>
            <term>Stream C1PrintableGetTree()</term>
            <description>
              このメソッドは実装される場合、 レンダリングされるオブジェクトを表すシリアル化された
              <see cref="T:C1.C1Preview.C1PrintDocument" />を含む
              <see cref="T:System.IO.Stream" />を返す必要があります。 たとえば、そのようなストリームは
              <see cref="M:C1.C1Preview.C1PrintDocument.Save(System.IO.Stream)" />メソッドを使って作成できます。
            </description>
          </item>
        </list>クラスに
        <b>C1PrintableGetTree()</b>メソッドを実装するには、以下の手順に従います。
        <list type="bullet">
          <item>
            <code>
              <![CDATA[
              public Stream C1PrintableGetTree()
              ]]>
            </code>
            メソッドをクラスに追加します。
          </item>
          <item>
            メソッドのボディで、
            <see cref="T:C1.C1Preview.C1PrintDocument" />を作成して、
            <see cref="T:C1.C1Preview.RenderText" />、
            <see cref="T:C1.C1Preview.RenderTable" />などの使用可能な描画オブジェクトを使って 各自のクラスの表現をそのドキュメントの
            <see cref="P:C1.C1Preview.C1PrintDocument.Body" />にレンダリングします。
          </item>
          <item>
            そのメソッドの最後に、新しい
            <see cref="T:System.IO.MemoryStream" />オブジェクトを作成し、
            <see cref="M:C1.C1Preview.C1PrintDocument.Save(System.IO.Stream)" />メソッドを呼び出して、 各自のドキュメントをそのメモリストリームに保存して返します。
          </item>
        </list>その結果、クラスのインスタンスを
        <see cref="T:C1.C1Preview.RenderC1Printable" />オブジェクトの
        <see cref="P:C1.C1Preview.RenderC1Printable.Object" />プロパティに割り当てて、そのオブジェクトを標準の描画オブジェクトが発生できる
        <see cref="T:C1.C1Preview.C1PrintDocument" />内の任意の場所に挿入できるようになります。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderC1Printable" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.#ctor(System.Object)">
      <summary>
        <see cref="T:C1.C1Preview.RenderC1Printable" />クラスの新しいシステムを初期化して、
        <see cref="P:C1.C1Preview.RenderC1Printable.Object" />プロパティを割り当てます。
      </summary>
      <param name="obj">
        <see cref="P:C1.C1Preview.RenderC1Printable.Object" />プロパティに割り当てるオブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.ShouldSerializeChildren">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.Children" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.RenderObject.Children" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.GetDefaultFlags">
      <summary>このタイプのデフォルトフラグを取得します。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.GetDefaultClip">
      <summary>
        <see cref="P:C1.C1Preview.RenderObject.Clip" />プロパティのデフォルト値を取得します。
      </summary>
      <returns>false。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.GetTree">
      <summary>
        「C1PrintableGetTree」メソッドを表す
        <see cref="T:System.Reflection.MethodInfo" />を取得します。
      </summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />または
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.GetImage">
      <summary>
        「C1PrintableGetImage」メソッドを表す
        <see cref="T:System.Reflection.MethodInfo" />を取得します。
      </summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />または
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderObject" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。 ベース
        <see cref="M:C1.C1Preview.RenderArea.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderC1Printable" />の場合は、
        <see cref="T:C1.C1Preview.RenderC1Printable" />固有のプロパティもコピーします。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素がコピーされるかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティがコピーされるかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティがコピーされるかどうかを示します。
      </param>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.GenerateInnerRenderObjects">
      <summary>印刷されるオブジェクト（Object プロパティに割り当て）を表す内部描画オブジェクトを強制的に生成します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.ResetInnerRenderObjects">
      <summary>印刷されるオブジェクトを表す内部描画オブジェクトを削除します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderC1Printable.Object">
      <summary>レンダリングするオブジェクト。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderC1Printable.IgnoreObjectPageLayout">
      <summary>オブジェクトによって定義されたページレイアウトを無視するかどうかを取得または設定します。</summary>
      <seealso cref="P:C1.C1Preview.RenderC1Printable.Object" />
    </member>
    <member name="T:C1.C1Preview.RenderC1PrintableFragment">
      <summary>RenderC1Printable オブジェクトのフラグメントを表します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderC1PrintableFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderC1Printable" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderTocItemFragment">
      <summary>
        解決された
        <see cref="T:C1.C1Preview.C1PrintDocument" />内の
        <see cref="T:C1.C1Preview.RenderTocItem" />のフラグメントを表します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTocItemFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderTocItem" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTocItemFragment.RenderToc">
      <summary>
        現在のフラグメントを含む
        <see cref="P:C1.C1Preview.RenderTocItemFragment.RenderToc" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DataBindingExpression">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.DataBindingExpression.GetScriptObjectType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DataBindingExpression.ScriptObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DataBindingExpression.ScriptObject.DataBinding">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DataBindingExpression.ScriptObject.Fields">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DataBindingExpression.ScriptObject.Parent">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DataSetFieldExpression">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.DataSetFieldExpression.GetScriptObjectType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.DataSetFieldExpression.FindScriptObject(C1.C1Preview.DataBinding.IDBDataHandler,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="script"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.DataSetFieldExpression.CreateScriptObject(C1.C1Preview.DataBinding.IDBDataHandler,System.String,System.String@)">
      <summary>これは内部使用専用です。</summary>
      <param name="context"></param>
      <param name="expressionText"></param>
      <param name="errorMessage"></param>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.DataSetFieldExpression.ScriptObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.DataSetFieldExpression.ScriptObject.#ctor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.DataSetFieldExpression.ScriptObject.Fields">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.RenderFragmentExpression">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.RenderFragmentExpression.GetScriptObjectType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.RenderFragmentExpression.ScriptObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderFragmentExpression.ScriptObject.RenderObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderFragmentExpression.ScriptObject.RenderFragment">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.RenderObjectExpression">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.GetScriptObjectType">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.RowNumber">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.RenderObject">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.RenderFragment">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.Aggregates">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.DataBinding">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.Fields">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.ColDataBinding">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.ColFields">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.RowDataBinding">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.NetScript.RenderObjectExpression.ScriptObject.RowFields">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.ScriptLanguageEnum">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />スクリプトで使用できる言語を列挙します。
      </summary>
    </member>
    <member name="F:C1.C1Preview.Scripting.ScriptLanguageEnum.VB">
      <summary>VB.NET スクリプト言語が使用されます。</summary>
    </member>
    <member name="F:C1.C1Preview.Scripting.ScriptLanguageEnum.C1Report">
      <summary>C1Report スクリプト言語が使用されます。</summary>
    </member>
    <member name="F:C1.C1Preview.Scripting.ScriptLanguageEnum.CSharp">
      <summary>
        <b>C#</b>はスクリプト言語として使用されます。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Scripting.ScriptingOptions">
      <summary>C1PrintDocument のスクリプトオプションを定義します。</summary>
      <remarks>
        スクリプトと式は、
        <see cref="T:C1.C1Preview.C1PrintDocument" />内のさまざまなコンテキストで使用できます。 スクリプト言語、およびすべてのそれらのスクリプトと式に 使用可能なアセンブリおよび名前空間は、ドキュメントの
        <see cref="P:C1.C1Preview.C1PrintDocument.ScriptingOptions" />の プロパティによって定義されます。スクリプトや式に使用可能な組み込み変数名は、 それが定義されるコンテキストによって決定されます。
        <para>下表は、可能なコンテキスト、およびコンテキスト依存の ドキュメントデータにアクセスするためにスクリプトと式内で 使用できる識別子を示します。</para><list type="bullet">
          <item>
            <term>テキスト式</term>
            <description>
              <see cref="T:C1.C1Preview.RenderText" />、
              <see cref="T:C1.C1Preview.RenderParagraph" />、 または
              <see cref="T:C1.C1Preview.RenderField" />オブジェクトのテキスト内の角カッコ内に指定された式では、 以下のコンテキスト依存の識別子を使用できます。
              <list type="table">
                <listheader>
                  <term>ID（タイプ）</term>
                  <description>意味。</description>
                </listheader>
                <item>
                  <term>
                    <b>Document</b>（
                    <see cref="T:C1.C1Preview.C1PrintDocument" />）
                  </term>
                  <description>現在のドキュメント。</description>
                </item>
                <item>
                  <term>
                    <b>RenderObject</b>（
                    <see cref="T:C1.C1Preview.RenderObject" />）
                  </term>
                  <description>現在の描画オブジェクト。</description>
                </item>
                <item>
                  <term>
                    <b>RenderFragment</b>（
                    <see cref="T:C1.C1Preview.RenderFragment" />）
                  </term>
                  <description>現在の描画フラグメント。</description>
                </item>
                <item>
                  <term>
                    <b>Page</b>（
                    <see cref="T:C1.C1Preview.C1Page" />）
                  </term>
                  <description>現在のページ。</description>
                </item>
                <item>
                  <term>
                    <b>PageNo</b>(
                    <see cref="T:System.Int32" />)
                  </term>
                  <description>現在の１から始まるページ番号。</description>
                </item>
                <item>
                  <term>
                    <b>PageCount</b>（
                    <see cref="T:System.Int32" />）
                  </term>
                  <description>総ページ数。</description>
                </item>
                <item>
                  <term>
                    <b>PageX</b>（
                    <see cref="T:System.Int32" />）
                  </term>
                  <description>現在の１から始まる水平ページ番号。</description>
                </item>
                <item>
                  <term>
                    <b>PageXCount</b>（
                    <see cref="T:System.Int32" />）
                  </term>
                  <description>最大水平ページ数。</description>
                </item>
                <item>
                  <term>
                    <b>PageY</b>（
                    <see cref="T:System.Int32" />）
                  </term>
                  <description>現在の１から始まる垂直（標準）ページ番号。</description>
                </item>
                <item>
                  <term>
                    <b>PageYCount</b>（
                    <see cref="T:System.Int32" />）
                  </term>
                  <description>総垂直ページ数。</description>
                </item>
                <item>
                  <term>
                    <b>Aggregates</b>（
                    <see cref="T:C1.C1Preview.DataBinding.AggregateCollection" />）
                  </term>
                  <description>現在のドキュメント上に定義された集計のリスト。</description>
                </item>
                <item>
                  <term>
                    <b>DataBinding</b>（
                    <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />）
                  </term>
                  <description>
                    アクティブデータバインディング（現在の描画オブジェクトの
                    <see cref="P:C1.C1Preview.RenderObject.DataBinding" />プロパティの値と異なる場合があります。 例：それが定義されずに親のデータバインディングが使用される場合）。
                  </description>
                </item>
                <item>
                  <term>
                    <b>Fields</b>（
                    <see cref="T:C1.C1Preview.DataBinding.FieldCollection" />）
                  </term>
                  <description>
                    アクティブデータバインディング上の
                    <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Fields" />へのショートカット。
                  </description>
                </item>
                <item>
                  <term>
                    <b>RowNumber</b>（
                    <see cref="T:System.Int32" />）
                  </term>
                  <description>
                    アクティブデータバインディング上の
                    <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.RowNumber" />へのショートカット。
                  </description>
                </item>
              </list>（注意：角カッコは、
              <b>C1PrintDocument</b>テキスト内の式をマークするためのデフォルトですが、
              <see cref="P:C1.C1Preview.C1PrintDocument.TagOpenParen" />、および
              <see cref="P:C1.C1Preview.C1PrintDocument.TagCloseParen" />プロパティを介して再定義できます。）
            </description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />式
            </term>
            <description>
              <see cref="P:C1.C1Preview.DataBinding.Grouping.Expressions" />、
              <see cref="P:C1.C1Preview.DataBinding.Sorting.Expressions" />、
              <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Filters" />、
              <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.OutlineText" />の いずれかに使用される式では、 以下のコンテキスト依存の識別子が使用可能です。
              <list type="table">
                <listheader>
                  <term>ID（タイプ）</term>
                  <description>意味。</description>
                </listheader>
                <item>
                  <term>
                    <b>Document</b>（
                    <see cref="T:C1.C1Preview.C1PrintDocument" />）
                  </term>
                  <description>現在のドキュメント。</description>
                </item>
                <item>
                  <term>
                    <b>DataBinding</b>（
                    <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />）
                  </term>
                  <description>現在のデータバインディング。</description>
                </item>
                <item>
                  <term>
                    <b>Fields</b>（
                    <see cref="T:C1.C1Preview.DataBinding.FieldCollection" />）
                  </term>
                  <description>
                    現在のデータバインディングの
                    <see cref="P:C1.C1Preview.DataBinding.C1DataBinding.Fields" />コレクション。
                  </description>
                </item>
                <item>
                  <term>
                    <b>Parent</b>（
                    <see cref="T:C1.C1Preview.DataBinding.C1DataBinding" />）
                  </term>
                  <description>
                    親のデータバインディング。通常、これは現在のデータバインディングを含むオブジェクトの 親に定義された最もネストしたデータバインディングです。
                    <see cref="T:C1.C1Preview.TableVectorGroup" />の場合、別の行／列グループが現在のグループを囲む（すべてのその行／列を含む）場合、 これはそのグループに定義されたデータバインディングを使用可能です。
                  </description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:C1.C1Preview.DataBinding.DataSetField" />式
            </term>
            <description>
              計算されたデータセットフィールドの指定に使用される式 （
              <see cref="P:C1.C1Preview.DataBinding.DataSetField.Expression" />）では、 以下のコンテキスト依存の識別子が使用可能です。
              <list type="table">
                <listheader>
                  <term>ID（タイプ）</term>
                  <description>意味。</description>
                </listheader>
                <item>
                  <term>
                    <b>Document</b>（
                    <see cref="T:C1.C1Preview.C1PrintDocument" />）
                  </term>
                  <description>現在のドキュメント。</description>
                </item>
                <item>
                  <term>
                    <b>Fields</b>（
                    <see cref="T:C1.C1Preview.DataBinding.DataSetFieldCollection" />）
                  </term>
                  <description>
                    現在のデータセットの
                    <see cref="P:C1.C1Preview.DataBinding.DataSet.Fields" />コレクション。
                  </description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>ドキュメントスコープスクリプト</term>
            <description>
              <see cref="P:C1.C1Preview.C1PrintDocument.DocumentStartingScript" />、
              <see cref="P:C1.C1Preview.C1PrintDocument.DocumentEndedScript" />、
              <see cref="P:C1.C1Preview.C1PrintDocument.PageConfigureScript" />、または
              <see cref="P:C1.C1Preview.C1PrintDocument.ErrorScript" />に割り当てられたスクリプトでは、 以下のコンテキスト依存の識別子が使用可能です。
              <list type="table">
                <listheader>
                  <term>ID（タイプ）</term>
                  <description>意味。</description>
                </listheader>
                <item>
                  <term>
                    <b>Document</b>（
                    <see cref="T:C1.C1Preview.C1PrintDocument" />）
                  </term>
                  <description>現在のドキュメント。</description>
                </item>
                <item>
                  <term>
                    <b>Tags</b>（
                    <see cref="T:C1.C1Preview.TagCollection" />）
                  </term>
                  <description>
                    現在のドキュメントの
                    <see cref="P:C1.C1Preview.C1PrintDocument.Tags" />コレクション （これは
                    <b>Document.Tags</b>へのショートカットです）。
                  </description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>描画オブジェクトスコープスクリプト</term>
            <description>
              <see cref="P:C1.C1Preview.RenderObject.ObjectResolvedScript" />に割り当てられたスクリプトでは、 以下のコンテキスト依存の識別子が使用可能です。
              <list type="table">
                <listheader>
                  <term>ID（タイプ）</term>
                  <description>意味。</description>
                </listheader>
                <item>
                  <term>
                    <b>Document</b>（
                    <see cref="T:C1.C1Preview.C1PrintDocument" />）
                  </term>
                  <description>現在のドキュメント。</description>
                </item>
                <item>
                  <term>
                    <b>RenderObject</b>（
                    <see cref="T:C1.C1Preview.RenderObject" />）
                  </term>
                  <description>現在の描画オブジェクト。</description>
                </item>
                <item>
                  <term>
                    <b>Tags</b>（
                    <see cref="T:C1.C1Preview.TagCollection" />）
                  </term>
                  <description>
                    現在のドキュメントの
                    <see cref="P:C1.C1Preview.C1PrintDocument.Tags" />コレクション （これは
                    <b>Document.Tags</b>へのショートカットです）。
                  </description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>描画フラグメントスコープスクリプト</term>
            <description>
              <see cref="P:C1.C1Preview.RenderObject.FragmentResolvedScript" />に割り当てられたスクリプトでは、 以下のコンテキスト依存の識別子が使用可能です。
              <list type="table">
                <listheader>
                  <term>ID（タイプ）</term>
                  <description>意味。</description>
                </listheader>
                <item>
                  <term>
                    <b>Document</b>（
                    <see cref="T:C1.C1Preview.C1PrintDocument" />）
                  </term>
                  <description>現在のドキュメント。</description>
                </item>
                <item>
                  <term>
                    <b>RenderObject</b>（
                    <see cref="T:C1.C1Preview.RenderObject" />）
                  </term>
                  <description>現在の描画オブジェクト。</description>
                </item>
                <item>
                  <term>
                    <b>RenderFragment</b>（
                    <see cref="T:C1.C1Preview.RenderFragment" />）
                  </term>
                  <description>解決したフラグメント。</description>
                </item>
                <item>
                  <term>
                    <b>Tags</b>（
                    <see cref="T:C1.C1Preview.TagCollection" />）
                  </term>
                  <description>
                    現在のドキュメントの
                    <see cref="P:C1.C1Preview.C1PrintDocument.Tags" />コレクション （これは
                    <b>Document.Tags</b>へのショートカットです）。
                  </description>
                </item>
              </list>
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:C1.C1Preview.Scripting.ScriptingOptions.ShouldSerialize">
      <summary>現在のオブジェクトがシリアル化されるかどうかを示します。</summary>
      <returns>
        現在のオブジェクトがシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.ScriptingOptions.ShouldSerializeExternalAssemblies">
      <summary>
        <see cref="P:C1.C1Preview.Scripting.ScriptingOptions.ExternalAssemblies" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.Scripting.ScriptingOptions.ExternalAssemblies" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.ScriptingOptions.ShouldSerializeNamespaces">
      <summary>
        <see cref="P:C1.C1Preview.Scripting.ScriptingOptions.Namespaces" />プロパティがシリアル化されるかどうかを示します。
      </summary>
      <returns>
        <see cref="P:C1.C1Preview.Scripting.ScriptingOptions.Namespaces" />がシリアル化される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Scripting.ScriptingOptions.ResetExternalAssemblies">
      <summary>
        <see cref="P:C1.C1Preview.Scripting.ScriptingOptions.ExternalAssemblies" />プロパティをデフォルト値にリセットします。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.ScriptingOptions.ResetNamespaces">
      <summary>
        <see cref="P:C1.C1Preview.Scripting.ScriptingOptions.Namespaces" />プロパティをデフォルト値にリセットします。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.ScriptingOptions.Reset">
      <summary>この Scripting オブジェクトのプロパティをデフォルト値にリセットします。</summary>
    </member>
    <member name="M:C1.C1Preview.Scripting.ScriptingOptions.AssignFrom(C1.C1Preview.Scripting.ScriptingOptions)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.Scripting.ScriptingOptions.Initialize(System.String[],System.String[])">
      <summary>
        指定した外部アセンブリと名前空間を使って、現在の
        <see cref="T:C1.C1Preview.Scripting.ScriptingOptions" />オブジェクトを初期化します。
      </summary>
      <param name="externalAssemblies">
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.Scripting.ScriptingOptions.ExternalAssemblies" />に追加されるアセンブリ名の配列。
      </param>
      <param name="namespaces">
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.Scripting.ScriptingOptions.Namespaces" />に追加される名前空間の名前の配列。
      </param>
    </member>
    <member name="P:C1.C1Preview.Scripting.ScriptingOptions.ExternalAssemblies">
      <summary>現在のドキュメントのスクリプトで使用できる外部アセンブリの一覧を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.ScriptingOptions.Namespaces">
      <summary>現在のドキュメントのスクリプトで使用できる名前空間の一覧を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.ScriptingOptions.Language">
      <summary>ドキュメントにアタッチされているスクリプトで使用されている言語を示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.SystemTagCollection">
      <summary>
        システムタグ（
        <see cref="T:C1.C1Preview.TagSys" />からの派生オブジェクト）の 読み取り専用のコレクションを表します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.SystemTagCollection.Item(System.Int32)">
      <summary>
        現在のコレクションの
        <see cref="T:C1.C1Preview.TagSys" />をそのインデックスによって取得します。
      </summary>
      <param name="index">
        現在のコレクション内の
        <see cref="T:C1.C1Preview.TagSys" />のインデックス。
      </param>
      <returns>
        指定したインデックスを持つ
        <see cref="T:C1.C1Preview.TagSys" />。
      </returns>
    </member>
    <member name="P:C1.C1Preview.SystemTagCollection.Item(System.String)">
      <summary>
        現在のコレクションの
        <see cref="T:C1.C1Preview.TagSys" />をその
        <see cref="P:C1.C1Preview.NamedCollectionItem.Name" />によって取得します。
      </summary>
      <param name="tagName">
        <see cref="T:C1.C1Preview.TagSys" />の名前。
      </param>
      <returns>
        指定した名前を持つ
        <see cref="T:C1.C1Preview.TagSys" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFont.#ctor(System.Drawing.Font)">
      <summary>EmbeddedFont クラスの新しいインスタンスを初期化します。</summary>
      <param name="font">埋め込むフォント。</param>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFont.AddGlyphs(System.String,System.Boolean)">
      <summary>
        指定した文字列からの一意のグリフまたはグリフ範囲を現在の
        <see cref="T:C1.C1Preview.EmbeddedFont" />に追加します。 このメソッドによって認識される範囲は、
        <see cref="T:C1.C1Preview.UnicodeRangeEnum" />列挙体によって表されます。
      </summary>
      <param name="text">グリフの追加元の文字列。</param>
      <param name="includeUnicodeRanges">
        <b>true</b>の場合は、
        <paramref name="text" />の一意のグリフごとに、グリフを含むユニコード範囲全体 （「基本ラテン文字」または「キリル文字」など）が追加されます。
        <b>false</b>の場合は、そのグリフ自身が追加されます。
      </param>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFont.AddGlyphs(System.String)">
      <summary>
        指定した文字列からの一意のグリフを現在の
        <see cref="T:C1.C1Preview.EmbeddedFont" />に追加します。
      </summary>
      <param name="text">グリフの追加元の文字列。</param>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFont.AddGlyphs(System.Int32,System.Int32)">
      <summary>
        グリフの範囲を現在の
        <see cref="T:C1.C1Preview.EmbeddedFont" />に追加します。
      </summary>
      <param name="first">追加する範囲の最初のグリフ。</param>
      <param name="last">追加する範囲の最後のグリフ。</param>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFont.AddGlyphs(C1.C1Preview.UnicodeRangeEnum)">
      <summary>
        指定した範囲のすべてのグリフを現在の
        <see cref="T:C1.C1Preview.EmbeddedFont" />に追加します。
      </summary>
      <param name="unicodeRange">追加する範囲。</param>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFont.AddGlyphs(C1.Util.CodeRanges)">
      <summary>
        codeRanges 内のすべての
        <see cref="T:C1.Util.CodeRange" />オブジェクトを現在の
        <see cref="T:C1.C1Preview.EmbeddedFont" />に追加します。
      </summary>
      <param name="codeRanges">
        <see cref="T:C1.Util.CodeRange" />追加する。
      </param>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFont.GetFontFamily">
      <summary>この埋め込まれたオブジェクトの FontFamily オブジェクトを取得します。</summary>
      <returns>作成された FontFamily オブジェクトを返します。</returns>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.FontName">
      <summary>埋め込まれたフォントの名前。</summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.CharSet">
      <summary>現在の埋め込みフォントの文字セットを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.Bold">
      <summary>
        現在の埋め込みフォントが
        <b>太字</b>かどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.Italic">
      <summary>
        現在の埋め込みフォントが
        <i>斜体</i>かどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.Style">
      <summary>現在の埋め込みフォントのスタイルを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.CanEmbed">
      <summary>現在のフォントのライセンスが埋め込みを許可するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.MustObfuscate">
      <summary>現在のフォントのライセンスが埋め込み時にフォントの隠蔽を要求するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.CanSubset">
      <summary>現在のフォントのライセンスが埋め込み時にサブセットを許可するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.MustRestrict">
      <summary>現在のフォントライセンスが埋め込みを印刷およびプレビュー使用に制限するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.ShouldObfuscate">
      <summary>現在の埋め込みが埋め込み時に隠蔽されるかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.FontData">
      <summary>埋め込みフォントのデータを含むバイト配列を取得します。 このプロパティは、ドキュメントの生成時にフォントが作成された （すなわち、現在のオブジェクトが、ロードされなかったフォントで現在システム内に存在しているフォントを表す）場合は null を使用できます。</summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.Initialized">
      <summary>このオブジェクトが FontFamily オブジェクトを生成したことを示します。</summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFont.CodeRanges">
      <summary>
        この
        <see cref="T:C1.C1Preview.EmbeddedFont" />オブジェクトによってサポートされた文字コードのセットを定義する
        <see cref="P:C1.C1Preview.EmbeddedFont.CodeRanges" />コレクションを取得します。 このコレクションが空の場合は文字のグリフが埋め込まれます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.Add(C1.C1Preview.EmbeddedFont)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="embeddedFont">追加するオブジェクト。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.Add(System.Drawing.Font)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="font">追加するフォント。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.Remove(C1.C1Preview.EmbeddedFont)">
      <summary>指定したフォントを現在のコレクションから削除します。</summary>
      <param name="embeddedFont">
        削除する
        <see cref="T:C1.C1Preview.EmbeddedFont" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.IndexOf(C1.C1Preview.EmbeddedFont)">
      <summary>コレクション内の指定したフォントのインデックスを返します。</summary>
      <param name="embeddedFont">
        検索する
        <see cref="T:C1.C1Preview.EmbeddedFont" />。
      </param>
      <returns>
        現在のコレクション内の
        <paramref name="embeddedFont" />のインデックス。見つからなかった場合は -1。
      </returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.FindFont(System.String,System.Int32,System.Boolean,System.Boolean)">
      <summary>指定した名前と文字セットを持ち、指定した太字／斜体スタイルに 完全一致するフォントを検索します。</summary>
      <param name="name">検索するフォントの名前。</param>
      <param name="charSet">検索する文字セット。</param>
      <param name="bold">検索する太字スタイル。</param>
      <param name="italic">検索する斜体スタイル。</param>
      <returns>
        一致する
        <see cref="T:C1.C1Preview.EmbeddedFont" />。完全一致が見つからなかった場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.FindFont(System.String,System.Int32,System.Drawing.FontStyle)">
      <summary>指定した名前と文字セットを持ち、 指定した太字／斜体スタイルに完全一致するフォントを検索します。</summary>
      <param name="name">検索するフォントの名前。</param>
      <param name="charSet">検索する文字セット。</param>
      <param name="fontStyle">一致するフォントのスタイル。</param>
      <returns>
        一致する
        <see cref="T:C1.C1Preview.EmbeddedFont" />。完全一致が見つからなかった場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.FindBestMatch(System.String,System.Int32,System.Drawing.FontStyle)">
      <summary>指定した名前と文字セットを持ち、指定した太字／斜体スタイルに 最も一致するフォントを検索します （このメソッドでは完全な太字／斜体一致は保証されません）。</summary>
      <param name="name">検索するフォントの名前。</param>
      <param name="charSet">検索する文字セット。</param>
      <param name="fontStyle">一致するフォントのスタイル。</param>
      <returns>
        一致する
        <see cref="T:C1.C1Preview.EmbeddedFont" />。一致が見つからなかった場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.EmbeddedFontCollection.BuildFont(System.String,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
      <summary>文字列から Font オブジェクトを作成します。</summary>
    </member>
    <member name="P:C1.C1Preview.EmbeddedFontCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>
        指定されたインデックスの
        <see cref="T:C1.C1Preview.EmbeddedFont" />。
      </returns>
    </member>
    <member name="T:C1.C1Preview.Export.PdfExportProvider">
      <summary>Adobe PDF 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.C1Preview.Export.PdfExporter" />
    </member>
    <member name="T:C1.C1Preview.Export.PagesExportProvider">
      <summary>ドキュメントのページを表すメタファイルのリストの反復処理で エクスポートを実行するエクスポートプロバイダの抽象基本クラス。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.PagesExportProvider.CanExportObject(System.Object)">
      <summary>指定したオブジェクトが現在のエクスポートプロバイダによってエクスポートできるドキュメントを表すかどうかをテストします。</summary>
      <param name="obj">テストするオブジェクト（ドキュメント）。</param>
      <returns>オブジェクトが、エクスポートできるドキュメントを表す場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.Export.PagesExportProvider.CanExportType(System.Type)">
      <summary>
        指定したタイプのドキュメントを現在のエクスポートプロバイダでエクスポートできるかどうかをテストします。 タイプが配列の場合、メタファイルの配列を関連エクスポータでエクスポートすることが可能であっても、このメソッドは
        <b>false</b>を返します。 確実な値を取得するには、
        <see cref="M:C1.C1Preview.Export.PagesExportProvider.CanExportObject(System.Object)" />を使用します。
      </summary>
      <param name="documentType">テストするタイプ。</param>
      <returns>
        <paramref name="documentType" />が
        <see cref="T:C1.C1Preview.C1PrintDocument" />、
        <see cref="T:C1.C1Report.C1Report" />、または
        <b>PrintDocument</b>である場合は
        <b>true</b>、 そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.PagesExportProvider.CanExportRange(C1.C1Preview.OutputRangeTypeEnum)">
      <summary>指定したタイプの範囲が現在のエクスポートプロバイダによってエクスポートできるかどうかをテストします。</summary>
      <param name="documentRange">
        テストする
        <see cref="T:C1.C1Preview.OutputRangeTypeEnum" />。
      </param>
      <returns>指定した範囲をエクスポートできる場合は true、その他の場合は false。</returns>
    </member>
    <member name="P:C1.C1Preview.Export.PagesExportProvider.ShouldEnsureGeneratedDocument">
      <summary>ドキュメントが現在のエクスポートプロバイダによってエクスポートされる前に生成されている必要があることを示す値を取得します。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.PdfExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.C1Preview.Export.PdfExporter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.Export.PdfExporter" />。
      </returns>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExportProvider.ShouldEnsureGeneratedDocument">
      <summary>オーバーライドされます。 ドキュメントが現在のエクスポートプロバイダによってエクスポートされる前に生成されている必要があることを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExportProvider.PreferredOrdinal">
      <summary>「保存...」および類似のダイアログにおけるエクスポート形式の優先序数を指定します。 この実装は 10 を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExportProvider.FormatName">
      <summary>PDF エクスポート形式の簡単な記述を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExportProvider.DefaultExtension">
      <summary>現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。 この実装は「pdf」を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExportProvider.CanExportToStream">
      <summary>
        ストリームへのエクスポートが現在の形式によってサポートされているかどうかを示す値を取得します。 この実装は
        <b>true</b>を返します（ストリームへのエクスポートがサポートされます）。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExportProvider.CanShowOptions">
      <summary>
        関連付けられた
        <see cref="T:C1.C1Preview.Export.PdfExporter" />がユーザーに エクスポートオプションの編集を許可するダイアログを表示できるかどうかを示す値を取得します。 この実装は
        <b>true</b>を返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExportProvider.DefaultOptionsFormClass">
      <summary>
        デフォルトでエクスポートオプションの編集に使用されるフォームのタイプを取得します。 この実装は
        <see cref="T:C1.C1Preview.Export.PdfOptionsForm" />タイプを返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExportProvider.SupportedDocumentInfoFields">
      <summary>
        現在のエクスポート形式によってサポートされる
        <see cref="T:C1.C1Preview.DocumentInfo" />クラスの フィールドを示すフラグの組み合わせを取得します。 この実装は、
        <b>Author</b>、
        <b>Creator</b>、
        <b>Producer</b>、
        <b>Title</b>、
        <b>Subject</b>、および
        <b>Keywords</b>の組み合わせを返します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.PdfSecurity">
      <summary>PDF のセキュリティ情報を表します。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.PdfSecurity.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.PdfSecurity" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.PdfSecurity.AssignFrom(C1.C1Preview.Export.PdfSecurity)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.Export.PdfSecurity" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.Encryption">
      <summary>パスワード保護された PDF ドキュメントを生成するときに使用する暗号化のタイプを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.UserPassword">
      <summary>PDF を開くために必要なパスワードを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.OwnerPassword">
      <summary>PDF のアクセス許可を変更するために必要なパスワードを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.AllowPrint">
      <summary>ユーザーが PDF を印刷できるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.AllowCopyContent">
      <summary>ユーザーが PDF からコンテンツをコピーできるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.AllowEditContent">
      <summary>ユーザーが PDF のコンテンツを編集できるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfSecurity.AllowEditAnnotations">
      <summary>ユーザーが PDF の注釈を編集できるかどうかを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.PdfSecurity.EncryptionType">
      <summary>パスワード保護された PDF ドキュメントに使用する暗号化のタイプを示します。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.PdfSecurity.EncryptionType.RC4_40">
      <summary>40 ビット RC4 暗号化。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.PdfSecurity.EncryptionType.RC4_128">
      <summary>128 ビット RC4 暗号化。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.PdfSecurity.EncryptionType.AES_128">
      <summary>128 ビット AES 暗号化。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.PageLayoutEnum">
      <summary>ビューアで PDF を表示するときに使用されるページレイアウトを表します。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageLayoutEnum.ViewerDefault">
      <summary>レイアウトを指定せず、ビューアの現在の設定値で表示します。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageLayoutEnum.SinglePage">
      <summary>単一ページ形式で表示します。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageLayoutEnum.OneColumn">
      <summary>連続ページ形式で表示します。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageLayoutEnum.TwoColumnLeft">
      <summary>見開きページ形式で表示します。奇数番号のページが左側に表示されます。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageLayoutEnum.TwoColumnRight">
      <summary>見開きページ形式で表示します。奇数番号のページが右側に表示されます。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.PageModeEnum">
      <summary>ビューアで PDF を表示するときの表示方法を指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageModeEnum.Automatic">
      <summary>アウトラインがある場合、アウトラインを表示します。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageModeEnum.UseNone">
      <summary>アウトラインとサムネイル画像を表示しません。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageModeEnum.UseOutlines">
      <summary>アウトラインを表示します。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageModeEnum.UseThumbs">
      <summary>サムネイル画像を表示します。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.PageModeEnum.FullScreen">
      <summary>フルスクリーンモードで表示します。メニューバーなどすべてのウィンドウやコントロールは表示されません。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.PdfViewerPreferences">
      <summary>ビューアで PDF を表示する時に使用されるオプションを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.PdfViewerPreferences.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.PdfViewerPreferences" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.PdfViewerPreferences.Clone">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.Export.PdfViewerPreferences" />オブジェクトのコピーを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.Export.PdfViewerPreferences" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.PdfViewerPreferences.AssignFrom(C1.C1Preview.Export.PdfViewerPreferences)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.Export.PdfViewerPreferences" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.Export.PdfViewerPreferences.PageMode">
      <summary>ビューアで PDF を表示するときの表示方法を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfViewerPreferences.PageLayout">
      <summary>ビューアで PDF を表示するときに使用されるページレイアウトを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfViewerPreferences.HideToolBar">
      <summary>ビューアのツールバーを非表示にするかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfViewerPreferences.HideMenuBar">
      <summary>ビューアのメニューバーを非表示にするかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfViewerPreferences.FitWindow">
      <summary>先頭ページのサイズに合わせてビューアのウィンドウサイズを変更するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfViewerPreferences.CenterWindow">
      <summary>ビューアのウィンドウを画面の中央に配置するかどうかを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.PdfExporter">
      <summary>PDF 形式のエクスポータを表します。</summary>
      <seealso cref="T:C1.C1Preview.Export.PdfExportProvider" />
    </member>
    <member name="T:C1.C1Preview.Export.PagesExporter">
      <summary>ページのリストを操作するエクスポータの抽象基本クラス。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.PagesExporter.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.PagesExporter" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.PdfExporter.ProcessPage(System.Drawing.Imaging.Metafile,C1.C1Preview.C1MetafileInfo,System.Int32,System.Boolean)">
      <summary>
        <see cref="T:System.Drawing.Imaging.Metafile" />によって表されるドキュメントの１ページをエクスポートします。
      </summary>
      <param name="pageImage">
        エクスポートするページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />。
      </param>
      <param name="metafileInfo">
        <paramref name="pageImage" />に関する情報を含む
        <see cref="T:C1.C1Preview.C1MetafileInfo" />。
      </param>
      <param name="pageNo">１から始まるページ番号。</param>
      <param name="firstPage">
        <paramref name="pageImage" />がドキュメントの先頭ページを表す場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.PdfExporter.InternalExport">
      <summary>
        ディスクファイルまたはストリームへのエクスポートを実行します。 出力先（ファイルまたはストリーム）は、このメソッドの実行時にプロパティ （
        <see cref="P:C1.C1Preview.Export.Exporter.OutputFileName" />または
        <see cref="P:C1.C1Preview.Export.Exporter.OutputStream" />）の いずれが非
        <b>null</b>かによって決定されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.PdfExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>現在のエクスポータのプロパティを指定したエクスポートオプションフォームの 対応するユーザー編集可能なオプションにコピーします。</summary>
      <param name="f">
        プロパティのコピー先の
        <see cref="T:C1.C1Preview.Export.PdfOptionsForm" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.PdfExporter.CopyPropertiesFromOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>指定したエクスポートオプションフォームからのオプションを 現在のエクスポータ上の対応するプロパティにコピーします。</summary>
      <param name="f">
        オプションのコピー元の
        <see cref="T:C1.C1Preview.Export.PdfOptionsForm" />オブジェクト。
      </param>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.ExportProvider">
      <summary>
        <see cref="P:C1.C1Preview.Export.ExportProviders.PdfExportProvider" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.UseCompression">
      <summary>PDF データを圧縮するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.EmbedTrueTypeFonts">
      <summary>TrueType フォントを PDF に埋め込むかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.FormFields">
      <summary>
        入力フィールドを Acrobat Form フィールドとしてエクスポートするかどうかを示す値を取得または設定します。 デフォルトは
        <b>true</b>です。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.Security">
      <summary>PDF のセキュリティ情報を表す PdfSecurity オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.ViewerPreferences">
      <summary>ビューアで PDF を表示する時に使用されるオプションを表す PdfViewerPreferences オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.PdfViewerPreferencesFormClass">
      <summary>
        エクスポートされる PDF ドキュメントに関連付けられた
        <see cref="P:C1.C1Preview.Export.PdfExporter.ViewerPreferences" />の 編集に使用されるフォームのタイプを取得または設定します。 フォームタイプは
        <see cref="T:C1.C1Preview.Export.PdfViewerPreferencesForm" />であるか、その派生である必要があります。 このフォームは、エクスポートオプションフォームから呼び出されます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.ParseEmfPlus">
      <summary>
        EMF+ メタファイルを EMF-only に変換することなく直接解析するかどうかを示す値を取得または設定します。 デフォルトは
        <b>false</b>です。 EMF+ から EMF への変換で問題が発生する場合は、
        <b>true</b>に設定します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.Xls.XlsBookContentEnum">
      <summary>Excel にエクスポートされたドキュメントのコンテンツのタイプを指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.Xls.XlsBookContentEnum.Auto">
      <summary>コンテンツのタイプは自動的に決定されます。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.Xls.XlsBookContentEnum.Text">
      <summary>ドキュメントの多くはテキストを含みます。</summary>
    </member>
    <member name="F:C1.C1Preview.Export.Xls.XlsBookContentEnum.Table">
      <summary>ドキュメントの多くはテーブルを含みます。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.XlsExportProvider">
      <summary>XLS 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.C1Preview.Export.XlsExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.XlsExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.C1Preview.Export.XlsExporter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.Export.XlsExporter" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.XlsExportProvider.CanExportRange(C1.C1Preview.OutputRangeTypeEnum)">
      <summary>
        関連付けられたエクスポータが指定したタイプのドキュメントページ範囲を 処理できるかどうかを示します。 この実装は
        <b>true</b>を返します（すべてのタイプの範囲がサポートされます）。
      </summary>
      <param name="range">テストする範囲のタイプ。</param>
      <returns>
        関連付けられた
        <see cref="T:C1.C1Preview.Export.Exporter" />が指定した出力範囲を処理できる場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExportProvider.PreferredOrdinal">
      <summary>「保存...」および類似のダイアログにおけるエクスポート形式の優先序数を指定します。 この実装は 21 を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExportProvider.FormatName">
      <summary>XLS エクスポート形式の簡単な記述を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExportProvider.DefaultExtension">
      <summary>現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。 この実装は「xps」を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExportProvider.SupportedDocumentInfoFields">
      <summary>
        現在のエクスポート形式によってサポートされる
        <see cref="T:C1.C1Preview.DocumentInfo" />クラスの フィールドを示すフラグの組み合わせを取得します。 この実装は
        <b>Author</b>を返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExportProvider.CanExportToStream">
      <summary>
        ストリームへのエクスポートが現在の形式によってサポートされているかどうかを示す値を取得します。 この実装は
        <b>true</b>を返します（ストリームへのエクスポートがサポートされます）。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExportProvider.CanShowOptions">
      <summary>
        関連付けられたエクスポータがユーザーにエクスポートオプションの 編集を許可するダイアログを表示できるかどうかを示す値を取得します。 この実装は
        <b>true</b>を返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExportProvider.DefaultOptionsFormClass">
      <summary>
        デフォルトでエクスポートオプションの編集に使用されるフォームのタイプを取得します。 この実装は
        <see cref="T:C1.C1Preview.Export.XlsOptionsForm" />タイプを返します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.XlsxExportProvider">
      <summary>XLSX（Open XML）形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.C1Preview.Export.XlsExporter" />
      <seealso cref="P:C1.C1Preview.Export.ComplexExporter.OpenXmlDocument" />
    </member>
    <member name="M:C1.C1Preview.Export.XlsxExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.C1Preview.Export.XlsExporter" />クラスの新しいインスタンスを作成して、 そのインスタンスの
        <see cref="P:C1.C1Preview.Export.ComplexExporter.OpenXmlDocument" />プロパティを
        <b>true</b>に設定します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.Export.XlsExporter" />。
      </returns>
    </member>
    <member name="P:C1.C1Preview.Export.XlsxExportProvider.PreferredOrdinal">
      <summary>「保存...」および類似のダイアログにおけるエクスポート形式の優先序数を指定します。 この実装は 20 を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsxExportProvider.FormatName">
      <summary>XLSX エクスポート形式の簡単な記述を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsxExportProvider.DefaultExtension">
      <summary>現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。 この実装は「xlsx」を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsxExportProvider.DefaultOptionsFormClass">
      <summary>
        デフォルトでエクスポートオプションの編集に使用されるフォームのタイプを取得します。 この実装は
        <see cref="T:C1.C1Preview.Export.XlsxOptionsForm" />タイプを返します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.XlsExporter">
      <summary>Excel 形式のエクスポータを表します。</summary>
      <seealso cref="T:C1.C1Preview.Export.XlsExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.XlsxExportProvider" />
    </member>
    <member name="M:C1.C1Preview.Export.XlsExporter.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.XlsExporter" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.XlsExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>現在のエクスポータのプロパティを指定したエクスポートオプションフォームの 対応するユーザー編集可能なオプションにコピーします。</summary>
      <param name="f">
        プロパティのコピー先の
        <see cref="T:C1.C1Preview.Export.XlsOptionsForm" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.XlsExporter.CopyPropertiesFromOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>指定したエクスポートオプションフォームからのオプションを 現在のエクスポータ上の対応するプロパティにコピーします。</summary>
      <param name="f">
        オプションのコピー元の
        <see cref="T:C1.C1Preview.Export.XlsOptionsForm" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.XlsExporter.ProcessPage(System.Drawing.Imaging.Metafile,C1.C1Preview.C1MetafileInfo,System.Int32,System.Boolean)">
      <summary>
        <see cref="T:System.Drawing.Imaging.Metafile" />によって表されるドキュメントの１ページをエクスポートします。
      </summary>
      <param name="pageImage">
        エクスポートするページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />。
      </param>
      <param name="metafileInfo">
        <paramref name="pageImage" />に関する情報を含む
        <see cref="T:C1.C1Preview.C1MetafileInfo" />。
      </param>
      <param name="pageNo">１から始まるページ番号。</param>
      <param name="firstPage">
        <paramref name="pageImage" />がドキュメントの先頭ページを表す場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.XlsExporter.Reset">
      <summary>エクスポータの内部状態をリセットします。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.XlsExporter.Clear">
      <summary>エクスポータとそのすべてのパブリックプロパティの内部状態をリセットします。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.FontScaling">
      <summary>フォントサイズを変更する量（ポイント単位）を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.PagePerSheet">
      <summary>各ページを個別のシートに出力するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.BookContent">
      <summary>Excel のコンテンツ種別を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.DetectDataType">
      <summary>セル内のデータ型（数値、日付など）を自動検出するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.Tolerance">
      <summary>テーブル行および列の境界を自動検出する許容値（ポイント単位）を取得または設定します。</summary>
      <value>許容範囲値。</value>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.DataOnly">
      <summary>視覚的属性を無視してデータのみを エクスポートするかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.ParseEmfPlus">
      <summary>
        EMF+ メタファイルを EMF-only に変換することなく直接解析するかどうかを示す値を取得または設定します。 デフォルトは
        <b>false</b>です。 EMF+ から EMF への変換で問題が発生する場合は、
        <b>true</b>に設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.ExportProvider">
      <summary>
        現在のエクスポータの
        <see cref="P:C1.C1Preview.Export.ComplexExporter.OpenXmlDocument" />プロパティの値に応じて、
        <see cref="P:C1.C1Preview.Export.ExportProviders.XlsExportProvider" />または
        <see cref="P:C1.C1Preview.Export.ExportProviders.XlsxExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Forms.WarningForm">
      <summary>警告の表示に使用されるフォームを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.Forms.WarningForm.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.TagStringInputParams" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Forms.WarningForm.ShowWarning(System.String,System.String)">
      <summary>警告を表示します。</summary>
      <param name="warningText">警告テキスト。</param>
      <param name="warningDisableRegistryKey">このタイプの将来の警告の無効化に使用できるレジストリキー。</param>
    </member>
    <member name="M:C1.C1Preview.Forms.WarningForm.IsWarningDisabled(System.String)">
      <summary>特定のタイプの警告が無効かどうかをテストします。</summary>
      <param name="warningDisableRegistryKey">テストするタイプの警告を識別するレジストリキー。</param>
      <returns>
        指定した警告が無効の場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Forms.WarningForm.Dispose(System.Boolean)">
      <summary>使用されているすべてのリソースをクリーンアップします。</summary>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkInfo">
      <summary>
        <see cref="T:C1.C1Preview.C1Hyperlink" />に関する追加情報 （そのハイパーリンクが発生するページと領域のリスト）を含むヘルパークラス。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkInfo.#ctor(C1.C1Preview.C1Hyperlink,C1.C1Preview.C1LinkTarget)">
      <summary>
        <see cref="T:C1.C1Preview.C1HyperlinkInfo" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="hyperlink">現在のオブジェクトが関連付けられたハイパーリンク。</param>
      <param name="linkTarget">
        ハイパーリンクが指している
        <see cref="T:C1.C1Preview.C1LinkTarget" />オブジェクト。
      </param>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.Hyperlink">
      <summary>
        現在のオブジェクトに関連付けられた
        <see cref="T:C1.C1Preview.C1Hyperlink" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.LinkTarget">
      <summary>
        ハイパーリンクが指している
        <see cref="T:C1.C1Preview.C1LinkTarget" />を取得します。 リンクターゲットに計算済みのフィールドが含まれている場合、これは Hyperlink.LinkTarget と一致しない場合があります。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.StatusText">
      <summary>
        <see cref="P:C1.C1Preview.C1Hyperlink.StatusText" />プロパティの値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.State">
      <summary>
        <see cref="P:C1.C1Preview.C1Hyperlink.State" />プロパティの値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.Areas">
      <summary>
        さまざまな
        <see cref="T:C1.C1Preview.RenderFragment" />オブジェクト上の ハイパーリンクによって占められた領域を含む
        <see cref="T:C1.C1Preview.C1HyperlinkInfo.AreaCollection" />を 取得します。通常、このコレクションは１つの要素のみを含みますが、 ハイパーリンクが複数ページに分割される場合は複数の要素を含むことができます。
      </summary>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkInfo.Area">
      <summary>ページ上のハイパーリンクの位置を記述します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkInfo.Area.#ctor(System.Int32,System.Drawing.Region)">
      <summary>
        <see cref="T:C1.C1Preview.C1HyperlinkInfo.Area" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="pageIndex">０から始まるページインデックス。</param>
      <param name="region">ページ上の領域。</param>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkInfo.Area.#ctor(System.Int32,C1.C1Preview.RectangleD)">
      <summary>
        <see cref="T:C1.C1Preview.C1HyperlinkInfo.Area" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="pageIndex">０から始まるページインデックス。</param>
      <param name="rect">ページ上の矩形。</param>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkInfo.Area.#ctor(System.Int32,System.Drawing.Rectangle)">
      <summary>
        <see cref="T:C1.C1Preview.C1HyperlinkInfo.Area" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="pageIndex">０から始まるページインデックス。</param>
      <param name="rect">ページ上の矩形。</param>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkInfo.Area.Finalize">
      <summary>このインスタンスを破壊します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkInfo.Area.Dispose">
      <summary>現在のオブジェクトを破棄します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.Area.Region">
      <summary>現在の領域の選択領域を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.Area.PageIndex">
      <summary>現在の領域のページインデックスを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkInfo.AreaCollection">
      <summary>Area オブジェクトのコレクション。</summary>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkInfo.AreaCollection.Add(C1.C1Preview.C1HyperlinkInfo.Area)">
      <summary>領域を現在のコレクションに追加します。</summary>
      <param name="area">追加する領域。</param>
      <returns>現在のコレクション内の追加された領域のインデックス。</returns>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfo.AreaCollection.Item(System.Int32)">
      <summary>指定したインデックスの要素を取得します。</summary>
      <param name="index">コレクション内のインデックス。</param>
      <returns>指定したインデックスの要素。</returns>
    </member>
    <member name="T:C1.C1Preview.C1AnchorInfo">
      <summary>
        ドキュメント内の
        <see cref="T:C1.C1Preview.C1Anchor" />に関する追加情報を含むヘルパークラス。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1AnchorInfo.#ctor(C1.C1Preview.C1Anchor,C1.C1Preview.DocumentLocation)">
      <summary>
        <see cref="T:C1.C1Preview.C1AnchorInfo" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="anchor">現在のインスタンスに関連付けられているアンカー。</param>
      <param name="documentLocation">
        アンカーの位置を定義する
        <see cref="P:C1.C1Preview.C1AnchorInfo.DocumentLocation" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.C1AnchorInfo.#ctor(C1.C1Preview.C1Anchor,System.Int32,C1.C1Preview.PointD)">
      <summary>
        <see cref="T:C1.C1Preview.C1AnchorInfo" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="anchor">現在のインスタンスに関連付けられたアンカー。</param>
      <param name="pageIndex">０から始まるページインデックス。</param>
      <param name="point">ページ上のポイント。</param>
    </member>
    <member name="M:C1.C1Preview.C1AnchorInfo.#ctor(C1.C1Preview.C1Anchor,C1.C1Preview.C1Page,C1.C1Preview.RectangleD)">
      <summary>
        <see cref="T:C1.C1Preview.C1AnchorInfo" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="anchor">現在のインスタンスに関連付けられているアンカー。</param>
      <param name="page">
        アンカーがある場所の
        <see cref="T:C1.C1Preview.C1Page" />オブジェクト。
      </param>
      <param name="boundsOnPage">ページ上の範囲。</param>
    </member>
    <member name="P:C1.C1Preview.C1AnchorInfo.Anchor">
      <summary>
        現在のオブジェクトに関連付けられた
        <see cref="T:C1.C1Preview.C1Anchor" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1AnchorInfo.PageIndex">
      <summary>アンカーを含むページの０から始まるインデックスを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1AnchorInfo.Point">
      <summary>ページ上のアンカーの位置を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1AnchorInfo.DocumentLocation">
      <summary>
        ドキュメント内のアンカーの位置を定義する
        <see cref="P:C1.C1Preview.C1AnchorInfo.DocumentLocation" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.C1HyperlinkInfoCollection">
      <summary>
        <see cref="T:C1.C1Preview.C1HyperlinkInfo" />オブジェクトのコレクションを記述します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkInfoCollection.FindHyperlink(System.Int32,C1.C1Preview.PointD)">
      <summary>
        指定したページ上の指定した位置の
        <see cref="T:C1.C1Preview.C1Hyperlink" />を検索します。
      </summary>
      <param name="pageIndex">０から始まるページインデックス。</param>
      <param name="pt">ページ上の位置。</param>
      <returns>
        見つかったハイパーリンクに関連付けられた
        <see cref="T:C1.C1Preview.C1HyperlinkInfo" />、または null。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1HyperlinkInfoCollection.Add(C1.C1Preview.C1HyperlinkInfo)">
      <summary>
        <see cref="T:C1.C1Preview.C1HyperlinkInfo" />を現在のコレクションに追加します。
      </summary>
      <param name="hyperlinkInfo">
        追加する
        <see cref="T:C1.C1Preview.C1HyperlinkInfo" />。
      </param>
      <returns>現在のコレクションに新しく追加されたオブジェクトのインデックス。</returns>
    </member>
    <member name="P:C1.C1Preview.C1HyperlinkInfoCollection.Item(System.Int32)">
      <summary>指定したインデックスの要素を取得または設定します。</summary>
      <param name="index">現在のコレクション内のインデックス。</param>
      <returns>指定したインデックスの要素。</returns>
    </member>
    <member name="T:C1.C1Preview.C1AnchorInfoCollection">
      <summary>
        <see cref="T:C1.C1Preview.C1AnchorInfo" />オブジェクトのコレクションを記述します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1AnchorInfoCollection.Add(C1.C1Preview.C1AnchorInfo)">
      <summary>
        <see cref="T:C1.C1Preview.C1AnchorInfo" />を現在のコレクションに追加します。
      </summary>
      <param name="anchorInfo">
        追加する
        <see cref="T:C1.C1Preview.C1AnchorInfo" />。
      </param>
      <returns>現在のコレクションに新しく追加されたオブジェクトのインデックス。</returns>
    </member>
    <member name="M:C1.C1Preview.C1AnchorInfoCollection.FindByName(System.String)">
      <summary>
        アンカーの名前で
        <see cref="T:C1.C1Preview.C1AnchorInfo" />を検索します。
      </summary>
      <param name="name">アンカーの名前。</param>
      <returns>
        <see cref="T:C1.C1Preview.C1AnchorInfo" />オブジェクトまたは null。
      </returns>
    </member>
    <member name="P:C1.C1Preview.C1AnchorInfoCollection.Item(System.Int32)">
      <summary>指定したインデックスの要素を取得または設定します。</summary>
      <param name="index">現在のコレクション内のインデックス。</param>
      <returns>指定したインデックスの要素。</returns>
    </member>
    <member name="T:C1.C1Preview.MetafileHyperlinksHelper">
      <summary>
        <para>これは内部使用専用です。</para>メタファイルからハイパーリンク、アンカー、およびアウトラインを取り出すメソッドを提供します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.MetafileHyperlinksHelper.GetHyperlinksAndAnchors(System.Drawing.Imaging.Metafile,System.Int32,C1.C1Preview.C1HyperlinkInfoCollection,C1.C1Preview.C1AnchorInfoCollection,System.Single,System.Single)">
      <summary>メタファイルからハイパーリンクとアンカーに関する情報を取り出します。</summary>
      <param name="metafile">情報の取り出し先のメタファイル。</param>
      <param name="pageIndex">０から始まるページインデックス。</param>
      <param name="hyperlinks">フィルするハイパーリンクのコレクション。</param>
      <param name="anchors">フィルするアンカーのコレクション。</param>
      <param name="dpiX">水平解像度。</param>
      <param name="dpiY">垂直解像度。</param>
    </member>
    <member name="M:C1.C1Preview.MetafileHyperlinksHelper.GetOutlines(System.Drawing.Imaging.Metafile,System.Int32,System.Single,System.Single)">
      <summary>メタファイルからアウトラインヘッダーのリストを取り出します。</summary>
      <param name="metafile">情報の取り出し先のメタファイル。</param>
      <param name="pageIndex">０から始まるページインデックス。</param>
      <param name="dpiX">水平解像度。</param>
      <param name="dpiY">垂直解像度。</param>
      <returns>
        <see cref="T:C1.C1Preview.EmfOutlineHeader" />レコードの
        <see cref="T:System.Collections.Generic.List`1" />。
      </returns>
    </member>
    <member name="T:C1.C1Preview.C1PrintManager">
      <summary>印刷サービスを提供します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintManager.#ctor">
      <summary>C1PrintManager クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PrintManager.IsSupportedDocument(System.Object)">
      <summary>
        このプリントマネージャで特定のオブジェクトを印刷できるかどうかをテストします。 このメソッドがオブジェクトに対して fase を返した場合、 そのオブジェクトを
        <see cref="P:C1.C1Preview.C1PrintManager.Document" />に割り当てようとすると例外が発生します。 現在サポートされているタイプは次のとおりです。
        <list type="bullet">
          <item>
            <see cref="T:C1.C1Preview.C1PrintDocument" />
          </item>
          <item>
            <see cref="T:C1.C1Report.C1Report" />
          </item>
          <item>
            <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport" />
          </item>
          <item>
            <see cref="T:C1.C1Preview.C1MultiDocument" />
          </item>
          <item>
            <b>PrintDocument</b>
          </item>
          <item>
            <b>IEnumerable</b>（ページ画像のリストと仮定）
          </item>
        </list>
      </summary>
      <param name="document">テストするドキュメント。</param>
      <returns>ドキュメントが印刷可能な場合は true、そうでない場合は false。</returns>
      <seealso cref="P:C1.C1Preview.C1PrintManager.Document" />
    </member>
    <member name="M:C1.C1Preview.C1PrintManager.Print(System.Drawing.Printing.PrinterSettings)">
      <summary>ドキュメントを印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
    </member>
    <member name="M:C1.C1Preview.C1PrintManager.Print(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings)">
      <summary>ドキュメントを印刷します。</summary>
      <param name="printerSettings">使用するプリンタ設定。</param>
      <param name="defaultPageSettings">使用するデフォルトのページ設定。</param>
    </member>
    <member name="P:C1.C1Preview.C1PrintManager.Document">
      <summary>印刷ドキュメントを取得または設定します。</summary>
      <seealso cref="M:C1.C1Preview.C1PrintManager.IsSupportedDocument(System.Object)" />
    </member>
    <member name="P:C1.C1Preview.C1PrintManager.PrintOptions">
      <summary>印刷オプションを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintManager.Range">
      <summary>印刷範囲を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintManager.PrinterName">
      <summary>プリンタ名を取得します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintManager.LongOperation">
      <summary>長い時間の処理を実行中に定期的に発生します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintManager.Error">
      <summary>外部エラーがスローされたときに発生します。</summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintManager.QueryPageSettings">
      <summary>
        現在の印刷マネージャーの
        <see cref="E:System.Drawing.Printing.PrintDocument.QueryPageSettings" />イベントハンドラ内から 発生します。ページ設定を変更できるようにします（PaperSize の変更など）。
      </summary>
    </member>
    <member name="E:C1.C1Preview.C1PrintManager.AdjustPrintPage">
      <summary>
        ページを実際に印刷する前に、現在のプリントマネージャの
        <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" />イベントハンドラ内から発生します。 プリンタのハードマージンを調整（バグが出るプリンタドライバの補償など。
        <see cref="P:C1.C1Preview.AdjustPrintPageEventArgs.PrintableArea" />を参照）したり、 現在のページを印刷（
        <see cref="P:C1.C1Preview.AdjustPrintPageEventArgs.Handled" />を参照）したりできます。
        <see cref="P:C1.C1Preview.C1PrintOptions.PrintAsBitmap" />も参照してください。
      </summary>
    </member>
    <member name="T:C1.C1Preview.AdjustPrintPageEventArgs">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintManager" />の
        <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" />イベントハンドラ内から発生する
        <see cref="E:C1.C1Preview.C1PrintManager.AdjustPrintPage" />イベントの引数を記述します。 これにより、ユーザーはハードプリンタマージンを調整（バグが出るプリンタドライバを補償するためなど）したり、 ユーザーコードによるページを印刷（この場合
        <see cref="P:C1.C1Preview.AdjustPrintPageEventArgs.Handled" />は イベントハンドラによって
        <b>true</b>に設定）したりできます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.AdjustPrintPageEventArgs.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.AdjustPrintPageEventArgs" />の新しいインスタンスを作成します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.AdjustPrintPageEventArgs.#ctor(C1.C1Preview.C1PrintManager,System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.Printing.PrintPageEventArgs)">
      <summary>
        <see cref="T:C1.C1Preview.AdjustPrintPageEventArgs" />の新しいインスタンスを作成します。
      </summary>
      <param name="printManager">ドキュメントを印刷しているプリントマネージャ。</param>
      <param name="pageImage">
        現在のページイメージ（通常は
        <see cref="T:System.Drawing.Imaging.Metafile" />）。
      </param>
      <param name="printableArea">印刷可能領域（1/100 インチ単位）。</param>
      <param name="printPageEventArgs">
        現在の
        <see cref="P:C1.C1Preview.AdjustPrintPageEventArgs.PrintPageEventArgs" />。
      </param>
    </member>
    <member name="P:C1.C1Preview.AdjustPrintPageEventArgs.PrintManager">
      <summary>ドキュメントを印刷するプリントマネージャオブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.AdjustPrintPageEventArgs.PageImage">
      <summary>
        現在のページイメージ（通常は
        <see cref="T:System.Drawing.Imaging.Metafile" />）を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.AdjustPrintPageEventArgs.PrintPageEventArgs">
      <summary>
        プリントマネージャの
        <b>PrintPage</b>イベントハンドラに渡す
        <see cref="P:C1.C1Preview.AdjustPrintPageEventArgs.PrintPageEventArgs" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.AdjustPrintPageEventArgs.PrintableArea">
      <summary>プリンタの物理的な印刷可能領域を 1/100 インチ単位で取得または設定します。 イベントが発生すると、このプロパティは、横向き印刷の場合は回転して プリンタドライバから返されるプリンタの印刷可能領域を含みます。 このプロパティを調整して、たとえば、不正なハードマージンを通知する バグがあるプリンタドライバを補償できます。</summary>
    </member>
    <member name="P:C1.C1Preview.AdjustPrintPageEventArgs.Handled">
      <summary>
        イベントハンドラがページを印刷したかどうか、または呼び出し元（プリントマネージャ）が ページを通常どおりに印刷するかどうかを示す値を取得または設定します。
        <para>
          デフォルトは
          <b>false</b>です。
        </para>
      </summary>
    </member>
    <member name="T:C1.C1Preview.AdjustPrintPageEventHandler">
      <summary>
        <see cref="E:C1.C1Preview.C1PrintManager.AdjustPrintPage" />イベントを処理できるメソッドを表します。
      </summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.C1Preview.AdjustPrintPageEventArgs" />。
      </param>
    </member>
    <member name="T:C1.C1Preview.PrintQueryPageSettingsEventHandler">
      <summary>
        <see cref="E:C1.C1Preview.C1PrintManager.QueryPageSettings" />イベントを処理するためのメソッドを表します。
      </summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">
        イベントデータを含む
        <see cref="T:System.Drawing.Printing.QueryPageSettingsEventArgs" />。
      </param>
    </member>
    <member name="T:C1.C1Preview.C1PrintOptions">
      <summary>ドキュメントコンテンツを印刷（またはプレビュー）する方法を制御するオプションのセットを記述します。</summary>
      <seealso cref="T:C1.C1Preview.C1PrintManager" />
    </member>
    <member name="E:C1.C1Preview.C1PrintOptions.PropertyChanged">
      <summary>プロパティが変更されたときに発生します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.AutoPaperSource">
      <summary>給紙方法が自動的に選択されるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.PageScaling">
      <summary>印刷時にページが拡大縮小される方法を示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.CenterPage">
      <summary>印刷時にページが用紙の中央に配置されるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.AutoRotate">
      <summary>印刷時にページが用紙に収まるように自動的に回転されるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.PrintAsBitmap">
      <summary>
        印刷する前に、ページメタファイルがビットマップに変換されて、 プリンタのハードマージンにクリップされるかどうかを示す値を取得または設定します。
        <para>
          デフォルト値は
          <b>false</b>です。
        </para><para>
          通常、ドキュメントページはメタファイルとしてプリンタに送信されます。 ページがプリンタの印刷可能領域を越えると、ページの印刷時に 一部のドライバに問題が発生する場合があります。 そうした場合は、このプロパティを
          <b>true</b>に設定します。
        </para>
      </summary>
      <seealso cref="E:C1.C1Preview.C1PrintManager.AdjustPrintPage" />
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.DrawPrintableAreaBounds">
      <summary>
        線がページの印刷可能領域の周囲に描画されるかどうかを示す値を取得または設定します。 これは、診断目的に役立てることができます。
        <see cref="P:C1.C1Preview.C1PrintOptions.PrintableAreaBoundsPen" />は線の描画に使用されます。 デフォルトは
        <b>false</b>です。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.PrintableAreaBoundsPen">
      <summary>
        <see cref="P:C1.C1Preview.C1PrintOptions.DrawPrintableAreaBounds" />が
        <b>true</b>の場合に、印刷可能領域の境界の描画に使用されるペンを取得または設定します。 この値が
        <b>null</b>（デフォルト値）の場合は、１ピクセルの黒ペンが使用されます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.AutoPaperSize">
      <summary>
        用紙サイズが自動的に選択されるかどうかを示す値を取得または設定します。
        <para>
          デフォルト値は
          <b>false</b>です。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1PrintOptions.MsPrintDocumentPrintEmfType">
      <summary>
        標準 .NET PrintDocument ドキュメントを印刷するときに使用するメタファイルのタイプを取得または設定します。
        <para>
          デフォルトは is
          <b>EmfType.EmfPlusDual</b>です。
        </para><para>
          プリンタでデータの出力（FAX 番号など、最も適切な例は Tobit Faxware）をスキャンする必要があり、 失敗する場合は、この設定を
          <b>EmfType.EmfOnly</b>に設定してみてください。
        </para><para>このプロパティは、標準 .NET PrintDocument ドキュメントの印刷にのみ影響し、 サポートされている他のドキュメントタイプには関係ありません。</para>
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.EmfExportProvider">
      <summary>
        ドキュメントのページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />オブジェクトへのエクスポートを記述します。
      </summary>
      <seealso cref="T:C1.C1Preview.Export.EmfExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.EmfExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.C1Preview.Export.EmfExporter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.Export.EmfExporter" />。
      </returns>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExportProvider.PreferredOrdinal">
      <summary>「保存...」および類似のダイアログにおけるエクスポート形式の優先序数を指定します。 この実装は 100 を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExportProvider.FormatName">
      <summary>EMF エクスポート形式の簡単な記述を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExportProvider.DefaultExtension">
      <summary>現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。 この実装は「emf」を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExportProvider.CanExportToStream">
      <summary>
        ストリームへのエクスポートが現在の形式によってサポートされているかどうかを示す値を取得します。 この実装は
        <b>true</b>を返します（ストリームへのエクスポートがサポートされます）。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExportProvider.CanShowOptions">
      <summary>
        関連付けられた
        <see cref="T:C1.C1Preview.Export.EmfExporter" />がユーザーに エクスポートオプションの編集を許可するダイアログを表示できるかどうかを示す値を取得します。 この実装は
        <b>true</b>を返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExportProvider.DefaultOptionsFormClass">
      <summary>
        デフォルトでエクスポートオプションの編集に使用されるフォームのタイプを取得します。 この実装は
        <see cref="T:C1.C1Preview.Export.EmfOptionsForm" />タイプを返します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.EmfExporter">
      <summary>EMF 画像形式のエクスポータを表します。</summary>
      <remarks>
        <para>EMF データは各ページごとに生成されます。</para>
        <para>ファイルに出力すると、ページ数分の EMF 画像ファイルを含む ZIP ファイルが生成されます。また、ストリームに出力すると、次の形式でデータが出力されます。</para>
        <list type="bullet">
          <item>
            <term>int</term>
            <description>総ページ数。</description>
          </item>
          <item>
            <term>int</term>
            <description>１ページ目のデータの長さ（バイト）。</description>
          </item>
          <item>
            <term>byte[]</term>
            <description>１ページ目のデータ。</description>
          </item>
          <item>
            <term>int</term>
            <description>２ページ目のデータの長さ（バイト）。</description>
          </item>
          <item>
            <term>byte[]</term>
            <description>２ページ目のデータ。</description>
          </item>
          <item>
            <term>:</term>
            <description>以下同様</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:C1.C1Preview.Export.EmfExporter.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.EmfExporter" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.EmfExporter.ProcessPage(System.Drawing.Imaging.Metafile,C1.C1Preview.C1MetafileInfo,System.Int32,System.Boolean)">
      <summary>
        <see cref="T:System.Drawing.Imaging.Metafile" />によって表されるドキュメントの１ページをエクスポートします。
      </summary>
      <param name="pageImage">
        エクスポートするページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />。
      </param>
      <param name="metafileInfo">
        <paramref name="pageImage" />に関する情報を含む
        <see cref="T:C1.C1Preview.C1MetafileInfo" />。
      </param>
      <param name="pageNo">１から始まるページ番号。</param>
      <param name="firstPage">
        <paramref name="pageImage" />がドキュメントの先頭ページを表す場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.EmfExporter.ConvertEmfPlusToEmfOnly">
      <summary>
        エクスポート前に、
        <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusDual" />および
        <see cref="F:System.Drawing.Imaging.EmfType.EmfPlusOnly" />タイプのページメタファイルが
        <see cref="F:System.Drawing.Imaging.EmfType.EmfOnly" />タイプに変換されるかどうかを示します。 ベース実装は
        <see cref="P:C1.C1Preview.Export.EmfExporter.EmfPlusToEmfOnly" />プロパティの値を返します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.EmfExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>現在のエクスポータのプロパティを指定したエクスポートオプションフォームの 対応するユーザー編集可能なオプションにコピーします。</summary>
      <param name="f">
        プロパティのコピー先の
        <see cref="T:C1.C1Preview.Export.EmfOptionsForm" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.EmfExporter.CopyPropertiesFromOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>指定したエクスポートオプションフォームからのオプションを 現在のエクスポータ上の対応するプロパティにコピーします。</summary>
      <param name="f">
        オプションのコピー元の
        <see cref="T:C1.C1Preview.Export.EmfOptionsForm" />オブジェクト。
      </param>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExporter.ExportProvider">
      <summary>
        <see cref="P:C1.C1Preview.Export.ExportProviders.EmfExportProvider" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.EmfExporter.EmfPlusToEmfOnly">
      <summary>EmfPlus 形式を EmfOnly 形式に変換するかどうかを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.ExportProviders">
      <summary>登録されているエクスポートプロバイダのリストを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.ExportProviders.IndexOf(C1.C1Preview.Export.ExportProvider)">
      <summary>
        現在のコレクション内の指定した
        <see cref="T:C1.C1Preview.Export.ExportProvider" />のインデックスを取得します。
      </summary>
      <param name="exportProvider">検索するエクスポートプロバイダ。</param>
      <returns>現在のコレクション内の指定したエクスポートプロバイダのインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportProviders.Register(C1.C1Preview.Export.ExportProvider)">
      <summary>
        <see cref="T:C1.C1Preview.Export.ExportProvider" />を現在の
        <see cref="T:C1.C1Preview.Export.ExportProviders" />に登録します。
      </summary>
      <param name="exportProvider">登録するエクスポートプロバイダ。</param>
    </member>
    <member name="M:C1.C1Preview.Export.ExportProviders.FindExportProviderByFormatKey(System.String)">
      <summary>
        フォーマットキーによって、
        <see cref="T:C1.C1Preview.Export.ExportProvider" />を検索します。 フォーマットキーは、エクスポート形式を一意に識別する任意の文字列です。 形式ごとに、
        <see cref="P:C1.C1Preview.Export.ExportProvider.FormatKey" />プロパティによって 返されます。
      </summary>
      <param name="formatKey">フォーマットキー文字列。</param>
      <returns>
        <see cref="T:C1.C1Preview.Export.ExportProvider" />。見つからなかった場合は null。
      </returns>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.Item(System.Int32)">
      <summary>
        指定したインデックスの
        <see cref="T:C1.C1Preview.Export.ExportProvider" />を取得します。
      </summary>
      <param name="index">現在のコレクション内のインデックス。</param>
      <returns>指定したインデックスの要素。</returns>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.Item(System.String)">
      <summary>
        指定したデフォルトファイル拡張子（
        <see cref="P:C1.C1Preview.Export.ExportProvider.DefaultExtension" />を参照）を持つ
        <see cref="T:C1.C1Preview.Export.ExportProvider" />を取得します。
      </summary>
      <param name="extension">エクスポート形式に関連付けられたデフォルトファイル拡張子。</param>
      <returns>
        指定したデフォルト拡張子を持つ
        <see cref="T:C1.C1Preview.Export.ExportProvider" />。該当するプロバイダが現在のコレクションに存在しない場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.Count">
      <summary>現在のコレクションに登録されたエクスポートプロバイダの数を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.RegisteredProviders">
      <summary>
        すべての登録された
        <see cref="T:C1.C1Preview.Export.ExportProvider" />オブジェクトの静的コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.XlsExportProvider">
      <summary>Excel エクスポートプロバイダを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.XlsxExportProvider">
      <summary>Open XML Excel エクスポートプロバイダを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.DocxExportProvider">
      <summary>Open XML Word エクスポートプロバイダを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.RtfExportProvider">
      <summary>RTF エクスポートプロバイダを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.PdfExportProvider">
      <summary>PDF エクスポートプロバイダを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.EmfExportProvider">
      <summary>EMF 画像エクスポートプロバイダを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.TiffExportProvider">
      <summary>TIFF 画像エクスポートプロバイダを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.PngExportProvider">
      <summary>PNG 画像エクスポートプロバイダを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.JpegExportProvider">
      <summary>JPEG 画像エクスポートプロバイダを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.GifExportProvider">
      <summary>GIF 画像エクスポートプロバイダを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.BmpExportProvider">
      <summary>BMP 画像エクスポートプロバイダを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.HtmlExportProvider">
      <summary>HTML エクスポートプロバイダを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.C1dExportProvider">
      <summary>C1D エクスポートプロバイダを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.C1dxExportProvider">
      <summary>C1DX エクスポートプロバイダを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.C1dbExportProvider">
      <summary>C1DB エクスポートプロバイダの静的な登録済みインスタンスを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.C1mdxExportProvider">
      <summary>C1MDX エクスポートプロバイダの静的な登録済みインスタンスを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.XpsExportProvider">
      <summary>XPS エクスポートプロバイダの静的登録インスタンスを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportHTMLDrillDownExportProvider">
      <summary>
        <see cref="N:C1.C1Report" />の ドリルダウン HTML エクスポートプロバイダの静的登録インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportHTMLPagedExportProvider">
      <summary>
        <see cref="N:C1.C1Report" />のページ単位の HTML エクスポートプロバイダの静的登録インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportHTMLExportProvider">
      <summary>
        <see cref="N:C1.C1Report" />の HTML エクスポートプロバイダの静的登録インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportRTFExportProvider">
      <summary>
        <see cref="N:C1.C1Report" />の RTF エクスポートプロバイダの静的登録インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportRTFLabelsExportProvider">
      <summary>
        <see cref="N:C1.C1Report" />のフィールド単位の RTF エクスポートプロバイダの静的登録インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportTextExportProvider">
      <summary>
        <see cref="N:C1.C1Report" />のプレーンテキストエクスポートプロバイダの静的登録インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportTextSinglePageExportProvider">
      <summary>
        <see cref="N:C1.C1Report" />の単一ページプレーンテキストエクスポートプロバイダの静的登録インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportMetafileExportProvider">
      <summary>
        <see cref="N:C1.C1Report" />の圧縮メタファイルエクスポートプロバイダの静的登録インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportExcelExportProvider">
      <summary>
        <see cref="N:C1.C1Report" />の Microsoft Excel エクスポートプロバイダの静的登録インスタンスを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ExportProviders.ReportOpenXmlExportProvider">
      <summary>
        <see cref="N:C1.C1Report" />の OpenXml Excel エクスポートプロバイダの静的登録インスタンスを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.ExportUtil">
      <summary>エクスポートと印刷のための静的ユーティリティメソッドを提供します。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.PageExists(System.Int32,System.Collections.IList,System.Object)">
      <summary>指定した番号を持つページがドキュメントに存在するかどうかをテストします。</summary>
      <param name="pageNo">物理ページ番号（1から始まるインデックス）。</param>
      <param name="pages">ページイメージのリストまたは null。</param>
      <param name="document">ドキュメントまたは null。</param>
      <returns>ページが存在する場合は true、その他の場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetPageMetafile(System.Int32,System.Collections.IList,System.Object,C1.C1Preview.PageDrawParams)">
      <summary>エクスポートまたは印刷のページメタファイルを取得します。</summary>
      <param name="pageNo">物理ページ番号（1から始まるインデックス）。</param>
      <param name="pages">
        ページコレクション（
        <c>null</c>を使用可能）。
      </param>
      <param name="document">
        ドキュメント（
        <c>null</c>を使用可能）。
      </param>
      <param name="pdp">描画パラメータを指定します。</param>
      <returns>ページメタファイル。</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetPageMetafile(C1.C1Preview.IC1Document,System.Int32,C1.C1Preview.PageDrawParams)">
      <summary>エクスポートまたは印刷のページメタファイルを取得します。</summary>
      <param name="document">IC1Document をサポートするオブジェクト。</param>
      <param name="pageIdx">０から始まるページインデックス。</param>
      <param name="pdp">描画パラメータを指定します。</param>
      <returns>ページメタファイル。</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetPageMetafile(C1.C1Preview.C1PrintDocument,System.Int32)">
      <summary>エクスポートまたは印刷のページメタファイルを取得します。</summary>
      <param name="document">C1PrintDocument オブジェクト。</param>
      <param name="pageIdx">０から始まるページインデックス。</param>
      <returns>ページメタファイル。</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetPages(System.Object,System.Int32@)">
      <summary>ドキュメントを表すページ画像のリストを取得します。ドキュメントが C1Preview の場合は null になります。</summary>
      <param name="document">エクスポートドキュメント。</param>
      <param name="pageCount">出力：ページ数。</param>
      <returns>ページメタファイルのリストまたは null。</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetMinPageNumber(System.Object)">
      <summary>指定したドキュメントの最小ページ番号を返します。</summary>
      <param name="document">ターゲットドキュメント。</param>
      <returns>このドキュメントに有効な最小ページ番号。</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetMaxPageNumber(System.Object,System.Int32)">
      <summary>指定したドキュメントの最大有効物理ページ番号（１から始まるインデックス）を取得します。</summary>
      <param name="document">ターゲットドキュメント。</param>
      <param name="pageCount">ページ数。</param>
      <returns>このドキュメントに有効な最大ページ番号。</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.GetMaxPageNumber(System.Object)">
      <summary>指定したドキュメントの最大有効物理ページ番号（１から始まるインデックス）を取得します。</summary>
      <param name="document">ターゲットドキュメント。</param>
      <returns>このドキュメントに有効な最大ページ番号。</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.PageIndicesToPageNumbers(System.Int32[],System.Object)">
      <summary>０から始まる物理ページインデックスの配列を１から始まる 論理ページ番号に変換します。</summary>
      <param name="pageIndices">ページインデックスの配列。</param>
      <param name="document">ドキュメント。</param>
      <returns>論理ページ番号の配列。</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ExportUtil.PageIndexToPageNumber(System.Int32,System.Object)">
      <summary>０から始まるページインデックスを１から始まる論理ページ番号に変換します。</summary>
      <param name="pageIndex">０から始まるページインデックス。</param>
      <param name="document">ドキュメントオブジェクト。</param>
      <returns>１から始まる論理ページ番号。</returns>
    </member>
    <member name="T:C1.C1Preview.Export.ImageExportProvider">
      <summary>
        すべての画像エクスポートプロバイダの抽象基本クラス。 派生クラスは、
        <see cref="M:C1.C1Preview.Export.ImageExportProvider.GetImageFormat" />メソッドをオーバーライドする必要があります。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ImageExportProvider.GetImageFormat">
      <summary>現在のエクスポートプロバイダに関連付けられた画像形式を取得します。 指定の画像形式を返すには、派生クラスでオーバーライドする必要があります。</summary>
      <returns>現在のエクスポートプロバイダに関連付けられた画像形式。</returns>
    </member>
    <member name="M:C1.C1Preview.Export.ImageExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.C1Preview.Export.ImageExporter" />の新しいインスタンスを作成し、 このインスタンスの
        <see cref="P:C1.C1Preview.Export.ImageExporter.ImageFormat" />プロパティを
        <see cref="M:C1.C1Preview.Export.ImageExportProvider.GetImageFormat" />で返された画像形式に設定します。
      </summary>
      <returns>新しく作成されたインスタンス。</returns>
    </member>
    <member name="P:C1.C1Preview.Export.ImageExportProvider.CanShowOptions">
      <summary>
        関連付けられた
        <see cref="T:C1.C1Preview.Export.ImageExporter" />がユーザーに エクスポートオプションの編集を許可するダイアログを表示できるかどうかを示す値を取得します。 この実装は
        <b>true</b>を返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ImageExportProvider.DefaultOptionsFormClass">
      <summary>
        デフォルトでエクスポートオプションの編集に使用されるフォームのタイプを取得します。 この実装は
        <see cref="T:C1.C1Preview.Export.ImagesOptionsForm" />タイプを返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ImageExportProvider.ImageFormat">
      <summary>
        現在のエクスポートプロバイダに関連付けられた
        <see cref="P:C1.C1Preview.Export.ImageExportProvider.ImageFormat" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.ImageExportProvider.DefaultExtension">
      <summary>現在の画像エクスポート形式のデフォルトのファイル名拡張子を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.BmpExportProvider">
      <summary>ドキュメントのページを表すビットマップへのエクスポートを記述します。</summary>
      <seealso cref="T:C1.C1Preview.Export.ImageExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.ImageExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.BmpExportProvider.GetImageFormat">
      <summary>
        現在のエクスポートプロバイダに関連付けられた画像形式を取得します。 この実装は
        <see cref="P:System.Drawing.Imaging.ImageFormat.Bmp" />を返します。
      </summary>
      <returns>現在のエクスポートプロバイダに関連付けられた画像形式。</returns>
    </member>
    <member name="P:C1.C1Preview.Export.BmpExportProvider.PreferredOrdinal">
      <summary>「保存...」および類似のダイアログにおけるエクスポート形式の優先序数を指定します。 この実装は 105 を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.BmpExportProvider.FormatName">
      <summary>ビットマップのエクスポート形式の簡単な記述を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.GifExportProvider">
      <summary>ドキュメントのページを表す GIF ファイルへのエクスポートを記述します。</summary>
      <seealso cref="T:C1.C1Preview.Export.ImageExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.ImageExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.GifExportProvider.GetImageFormat">
      <summary>
        現在のエクスポートプロバイダに関連付けられた画像形式を取得します。 この実装は
        <see cref="P:System.Drawing.Imaging.ImageFormat.Gif" />を返します。
      </summary>
      <returns>現在のエクスポートプロバイダに関連付けられた画像形式。</returns>
    </member>
    <member name="P:C1.C1Preview.Export.GifExportProvider.PreferredOrdinal">
      <summary>「保存...」および類似のダイアログにおけるエクスポート形式の優先序数を指定します。 この実装は 104 を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.GifExportProvider.FormatName">
      <summary>GIF エクスポート形式の簡単な記述を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.JpegExportProvider">
      <summary>ドキュメントのページを表す JPEG ファイルへのエクスポートを記述します。</summary>
      <seealso cref="T:C1.C1Preview.Export.ImageExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.ImageExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.JpegExportProvider.GetImageFormat">
      <summary>
        現在のエクスポートプロバイダに関連付けられた画像形式を取得します。 この実装は
        <see cref="P:System.Drawing.Imaging.ImageFormat.Jpeg" />を返します。
      </summary>
      <returns>現在のエクスポートプロバイダに関連付けられた画像形式。</returns>
    </member>
    <member name="P:C1.C1Preview.Export.JpegExportProvider.PreferredOrdinal">
      <summary>「保存...」および類似のダイアログにおけるエクスポート形式の優先序数を指定します。 この実装は 103 を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.JpegExportProvider.FormatName">
      <summary>JPEG エクスポート形式の簡単な記述を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.PngExportProvider">
      <summary>ドキュメントのページを表す PNG ファイルへのエクスポートを記述します。</summary>
      <seealso cref="T:C1.C1Preview.Export.ImageExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.ImageExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.PngExportProvider.GetImageFormat">
      <summary>
        現在のエクスポートプロバイダに関連付けられた画像形式を取得します。 この実装は
        <see cref="P:System.Drawing.Imaging.ImageFormat.Png" />を返します。
      </summary>
      <returns>現在のエクスポートプロバイダに関連付けられた画像形式。</returns>
    </member>
    <member name="P:C1.C1Preview.Export.PngExportProvider.PreferredOrdinal">
      <summary>「保存...」および類似のダイアログにおけるエクスポート形式の優先序数を指定します。 この実装は 102 を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PngExportProvider.FormatName">
      <summary>PNG エクスポート形式の簡単な記述を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.TiffExportProvider">
      <summary>ドキュメントのページを表す TIFF ファイルへのエクスポートを記述します。</summary>
      <seealso cref="T:C1.C1Preview.Export.ImageExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.ImageExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.TiffExportProvider.GetImageFormat">
      <summary>
        現在のエクスポートプロバイダに関連付けられた画像形式を取得します。 この実装は
        <see cref="P:System.Drawing.Imaging.ImageFormat.Tiff" />を返します。
      </summary>
      <returns>現在のエクスポートプロバイダに関連付けられた画像形式。</returns>
    </member>
    <member name="P:C1.C1Preview.Export.TiffExportProvider.PreferredOrdinal">
      <summary>「保存...」および類似のダイアログにおけるエクスポート形式の優先序数を指定します。 この実装は 101 を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.TiffExportProvider.FormatName">
      <summary>TIFF エクスポート形式の簡単な記述を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.ImageExporter">
      <summary>ビットマップ画像形式のエクスポータを表します。</summary>
      <seealso cref="T:C1.C1Preview.Export.ImageExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.TiffExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.PngExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.JpegExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.GifExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.BmpExportProvider" />
    </member>
    <member name="M:C1.C1Preview.Export.ImageExporter.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.ImageExporter" />クラスの新しいインスタンスを初期化します。
        <see cref="P:C1.C1Preview.Export.ImageExporter.ImageFormat" />をデフォルト
        <see cref="P:System.Drawing.Imaging.ImageFormat.Tiff" />値に設定します （後から変更可能）。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.ImageExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>現在のエクスポータのプロパティを指定したエクスポートオプションフォームの 対応するユーザー編集可能なオプションにコピーします。</summary>
      <param name="f">
        プロパティのコピー先の
        <see cref="T:C1.C1Preview.Export.ExportOptionsFormBase" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.ImageExporter.ProcessPage(System.Drawing.Imaging.Metafile,C1.C1Preview.C1MetafileInfo,System.Int32,System.Boolean)">
      <summary>
        <see cref="T:System.Drawing.Imaging.Metafile" />によって表されるドキュメントの１ページをエクスポートします。
      </summary>
      <param name="pageImage">
        エクスポートするページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />。
      </param>
      <param name="metafileInfo">
        <paramref name="pageImage" />に関する情報を含む
        <see cref="T:C1.C1Preview.C1MetafileInfo" />。
      </param>
      <param name="pageNo">１から始まるページ番号。</param>
      <param name="firstPage">
        <paramref name="pageImage" />がドキュメントの先頭ページを表す場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </param>
    </member>
    <member name="P:C1.C1Preview.Export.ImageExporter.ExportProvider">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.Export.ImageExporter" />に関連付けられたエクスポートプロバイダを取得します。
      </summary>
      <remarks>
        現在の
        <see cref="P:C1.C1Preview.Export.ImageExporter.ImageFormat" />に応じて、以下の１つを返します。
        <list type="bullet">
          <item>
            <see cref="P:C1.C1Preview.Export.ExportProviders.TiffExportProvider" />
          </item>
          <item>
            <see cref="P:C1.C1Preview.Export.ExportProviders.PngExportProvider" />
          </item>
          <item>
            <see cref="P:C1.C1Preview.Export.ExportProviders.JpegExportProvider" />
          </item>
          <item>
            <see cref="P:C1.C1Preview.Export.ExportProviders.GifExportProvider" />
          </item>
          <item>
            <see cref="P:C1.C1Preview.Export.ExportProviders.BmpExportProvider" />
          </item>
        </list>
      </remarks>
    </member>
    <member name="P:C1.C1Preview.Export.ImageExporter.ImageFormat">
      <summary>画像の形式を示す ImageFormat オブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.ImageExporter.Resolution">
      <summary>画像の解像度を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.Export.RtfExportProvider">
      <summary>RTF 形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.C1Preview.Export.RtfExporter" />
    </member>
    <member name="M:C1.C1Preview.Export.RtfExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.C1Preview.Export.RtfExporter" />クラスの新しいインスタンスを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.Export.RtfExporter" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.RtfExportProvider.CanExportRange(C1.C1Preview.OutputRangeTypeEnum)">
      <summary>
        関連付けられたエクスポータが指定したタイプのドキュメントページ範囲を 処理できるかどうかを示します。 この実装は
        <b>true</b>を返します（すべてのタイプの範囲がサポートされます）。
      </summary>
      <param name="range">テストする範囲のタイプ。</param>
      <returns>
        関連付けられた
        <see cref="T:C1.C1Preview.Export.Exporter" />が指定した出力範囲を処理できる場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExportProvider.PreferredOrdinal">
      <summary>「保存...」および類似のダイアログにおけるエクスポート形式の優先序数を指定します。 この実装は 30 を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExportProvider.FormatName">
      <summary>RTF エクスポート形式の簡単な記述を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExportProvider.DefaultExtension">
      <summary>現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。 この実装は「rtf」を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExportProvider.SupportedDocumentInfoFields">
      <summary>
        現在のエクスポート形式によってサポートされる
        <see cref="T:C1.C1Preview.DocumentInfo" />クラスの フィールドを示すフラグの組み合わせを取得します。 この実装は、
        <b>Author</b>、
        <b>Creator</b>、
        <b>Title</b>、
        <b>Operator</b>、
        <b>Subject</b>、
        <b>Keywords</b>、
        <b>CreationTime</b>、
        <b>RevisionTime</b>、
        <b>Manager</b>、
        <b>Company</b>、および
        <b>Comment</b>の組み合わせを返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExportProvider.CanExportToStream">
      <summary>
        ストリームへのエクスポートが現在の形式によってサポートされているかどうかを示す値を取得します。 この実装は
        <b>true</b>を返します（ストリームへのエクスポートがサポートされます）。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExportProvider.CanShowOptions">
      <summary>
        関連付けられたエクスポータがユーザーにエクスポートオプションの 編集を許可するダイアログを表示できるかどうかを示す値を取得します。 この実装は
        <b>true</b>を返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExportProvider.DefaultOptionsFormClass">
      <summary>
        デフォルトでエクスポートオプションの編集に使用されるフォームのタイプを取得します。 この実装は
        <see cref="T:C1.C1Preview.Export.RtfOptionsForm" />タイプを返します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExportProvider.ShouldEnsureGeneratedDocument">
      <summary>
        <b>false</b>を返します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.DocxExportProvider">
      <summary>DOCX（Open XML）形式へのエクスポートを記述します。</summary>
      <seealso cref="T:C1.C1Preview.Export.RtfExporter" />
      <seealso cref="P:C1.C1Preview.Export.ComplexExporter.OpenXmlDocument" />
    </member>
    <member name="M:C1.C1Preview.Export.DocxExportProvider.CanExportObject(System.Object)">
      <summary>
        指定したオブジェクトが
        <see cref="T:C1.C1Preview.Export.RtfExporter" />によって エクスポートできるドキュメントを表すかどうかをテストします。
      </summary>
      <param name="obj">テストするオブジェクト（ドキュメント）。</param>
      <returns>
        <paramref name="obj" />が
        <see cref="T:C1.C1Preview.C1PrintDocument" />または
        <see cref="T:C1.C1Report.C1Report" />の インスタンスである場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.DocxExportProvider.CanExportType(System.Type)">
      <summary>指定したタイプのドキュメントを現在のエクスポートプロバイダでエクスポートできるかどうかをテストします。</summary>
      <param name="documentType">テストするタイプ。</param>
      <returns>
        <paramref name="documentType" />が
        <see cref="T:C1.C1Preview.C1PrintDocument" />または
        <see cref="T:C1.C1Report.C1Report" />である場合は
        <b>true</b>、 そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.Export.DocxExportProvider.NewExporter">
      <summary>
        <see cref="T:C1.C1Preview.Export.RtfExporter" />クラスの新しいインスタンスを作成して、 そのインスタンスの
        <see cref="P:C1.C1Preview.Export.ComplexExporter.OpenXmlDocument" />プロパティを
        <b>true</b>に設定します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.Export.RtfExporter" />。
      </returns>
    </member>
    <member name="P:C1.C1Preview.Export.DocxExportProvider.PreferredOrdinal">
      <summary>「保存...」および類似のダイアログにおけるエクスポート形式の優先序数を指定します。 この実装は 31 を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.DocxExportProvider.FormatName">
      <summary>DOCX エクスポート形式の簡単な記述を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.DocxExportProvider.DefaultExtension">
      <summary>現在のエクスポート形式のデフォルトのファイル名拡張子を取得します。 この実装は「docx」を返します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.DocxExportProvider.DefaultOptionsFormClass">
      <summary>
        デフォルトでエクスポートオプションの編集に使用されるフォームのタイプを取得します。 この実装は
        <see cref="T:C1.C1Preview.Export.DocxOptionsForm" />タイプを返します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Export.RtfExporter">
      <summary>RTF 形式のエクスポータを表します。</summary>
      <seealso cref="T:C1.C1Preview.Export.RtfExportProvider" />
      <seealso cref="T:C1.C1Preview.Export.DocxExportProvider" />
    </member>
    <member name="M:C1.C1Preview.Export.RtfExporter.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.Export.RtfExporter" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Export.RtfExporter.CopyPropertiesToOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>現在のエクスポータのプロパティを指定したエクスポートオプションフォームの 対応するユーザー編集可能なオプションにコピーします。</summary>
      <param name="f">
        プロパティのコピー先の
        <see cref="T:C1.C1Preview.Export.RtfOptionsForm" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.RtfExporter.CopyPropertiesFromOptionsForm(C1.C1Preview.Export.ExportOptionsFormBase)">
      <summary>指定したエクスポートオプションフォームからのオプションを 現在のエクスポータ上の対応するプロパティにコピーします。</summary>
      <param name="f">
        オプションのコピー元の
        <see cref="T:C1.C1Preview.Export.RtfOptionsForm" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.RtfExporter.ProcessPage(System.Drawing.Imaging.Metafile,C1.C1Preview.C1MetafileInfo,System.Int32,System.Boolean)">
      <summary>
        <see cref="T:System.Drawing.Imaging.Metafile" />によって表されるドキュメントの１ページをエクスポートします。
      </summary>
      <param name="pageImage">
        エクスポートするページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />。
      </param>
      <param name="metafileInfo">
        <paramref name="pageImage" />に関する情報を含む
        <see cref="T:C1.C1Preview.C1MetafileInfo" />。
      </param>
      <param name="pageNo">１から始まるページ番号。</param>
      <param name="firstPage">
        <paramref name="pageImage" />がドキュメントの先頭ページを表す場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.C1Preview.Export.RtfExporter.Reset">
      <summary>エクスポータの内部状態をリセットします。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.RtfExporter.Clear">
      <summary>エクスポータとそのすべてのパブリックプロパティの内部状態をリセットします。</summary>
    </member>
    <member name="M:C1.C1Preview.Export.RtfExporter.InternalExport">
      <summary>ディスクファイルまたはストリームへのエクスポートを実行します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExporter.UseDrawingCanvas">
      <summary>描画キャンバスを作成するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExporter.ParseEmfPlus">
      <summary>
        EMF+ メタファイルを EMF-only に変換することなく直接解析するかどうかを示す値を取得または設定します。 デフォルトは
        <b>false</b>です。 EMF+ から EMF への変換で問題が発生する場合は、
        <b>true</b>に設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExporter.ShapesWord2007Compatible">
      <summary>DOCX に保存するときに Word 2007 と互換性のある形状形式を使用するかどうかを示す値を取得または設定します。false に設定されている場合は、新しい Word 2010 形状形式が使用されます。この形式では、より多くの機能がサポートされますが、Word 2007 と互換性のないドキュメントが生成される可能性があり、また、MS Word で開く際に非常に時間がかかります。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.RtfExporter.ExportProvider">
      <summary>
        現在のエクスポータの
        <see cref="P:C1.C1Preview.Export.ComplexExporter.OpenXmlDocument" />プロパティの値に応じて、
        <see cref="P:C1.C1Preview.Export.ExportProviders.RtfExportProvider" />または
        <see cref="P:C1.C1Preview.Export.ExportProviders.DocxExportProvider" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.PageEventArgs">
      <summary>
        <see cref="E:C1.C1Preview.C1PrintDocument.PageAdded" />、
        <see cref="E:C1.C1Preview.C1PrintDocument.PageUpdated" />、
        <see cref="E:C1.C1Preview.C1PrintDocument.PageChanged" />、 および
        <see cref="E:C1.C1Preview.C1PrintDocument.PageDeleted" />などのページに関連するイベントのデータを提供します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.PageEventArgs.Page">
      <summary>
        このイベントに関連付けられた
        <see cref="T:C1.C1Preview.C1Page" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.PageEventHandler">
      <summary>
        <see cref="E:C1.C1Preview.C1PrintDocument.PageAdded" />、
        <see cref="E:C1.C1Preview.C1PrintDocument.PageUpdated" />、
        <see cref="E:C1.C1Preview.C1PrintDocument.PageChanged" />、および
        <see cref="E:C1.C1Preview.C1PrintDocument.PageDeleted" />などの ページに関連するイベントを処理できるメソッドを表します。
      </summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.C1Preview.PageEventArgs" />。
      </param>
    </member>
    <member name="T:C1.C1Preview.PageConfigureEventArgs">
      <summary>
        <see cref="E:C1.C1Preview.C1PrintDocument.PageConfigure" />イベントのデータを提供します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.PageConfigureEventArgs.PageLayout">
      <summary>
        このイベントに関連付けられた
        <see cref="P:C1.C1Preview.PageConfigureEventArgs.PageLayout" />を取得または設定します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.PageConfigureEventHandler">
      <summary>
        <see cref="E:C1.C1Preview.C1PrintDocument.PageConfigure" />イベントを処理できるメソッドを表します。
      </summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.C1Preview.PageConfigureEventArgs" />。
      </param>
    </member>
    <member name="T:C1.C1Preview.InputValueChangedEventArgs">
      <summary>
        <see cref="E:C1.C1Preview.C1PrintDocument.InputValueChanged" />イベントのデータを提供します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.InputValueChangedEventArgs.#ctor(C1.C1Preview.RenderInputBase)">
      <summary>
        <see cref="T:C1.C1Preview.InputValueChangedEventArgs" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="renderObject"></param>
    </member>
    <member name="P:C1.C1Preview.InputValueChangedEventArgs.RenderObject">
      <summary>
        値が変更された
        <see cref="T:C1.C1Preview.RenderInputBase" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.InputValueChangedEventHandler">
      <summary>
        <see cref="E:C1.C1Preview.C1PrintDocument.InputValueChanged" />イベントを処理できるメソッドを表します。
      </summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">
        イベントデータを含む
        <see cref="T:C1.C1Preview.InputValueChangedEventArgs" />。
      </param>
    </member>
    <member name="T:C1.C1Preview.EnumeratePagesCallback">
      <summary>これは内部使用専用です。</summary>
      <param name="pageNo"></param>
      <param name="callBackData"></param>
    </member>
    <member name="T:C1.C1Preview.OutputRangeTypeEnum">
      <summary>OutputRange のタイプを指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.OutputRangeTypeEnum.All">
      <summary>ドキュメントのすべてのページが範囲内に置かれます。</summary>
    </member>
    <member name="F:C1.C1Preview.OutputRangeTypeEnum.PageList">
      <summary>範囲内のページがリストとして指定されます。</summary>
    </member>
    <member name="F:C1.C1Preview.OutputRangeTypeEnum.PageRange">
      <summary>ページの１つまたは複数の範囲が指定されます。</summary>
    </member>
    <member name="T:C1.C1Preview.OutputRange">
      <summary>エクスポートまたは印刷されるドキュメントの部分（ページまたはオブジェクト）を記述します。</summary>
    </member>
    <member name="F:C1.C1Preview.OutputRange.Dash">
      <summary>ページのインデックスリストに含まれる場合は、前のページから後のページまでのすべてのページが出力に含まれることを指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.OutputRange.NoPage">
      <summary>この値は、無効なページ番号を示します。</summary>
    </member>
    <member name="M:C1.C1Preview.OutputRange.#ctor">
      <summary>ドキュメント内のすべてのページを含む出力範囲の新しいインスタンスを作成します。</summary>
    </member>
    <member name="M:C1.C1Preview.OutputRange.#ctor(System.Int32)">
      <summary>ドキュメント内のすべてのページを含む出力範囲の新しいインスタンスを作成します。</summary>
      <param name="maxPageNumber">最大のページ番号（無限の列挙を防ぐために使用）。</param>
    </member>
    <member name="M:C1.C1Preview.OutputRange.#ctor(System.Int32,System.Int32)">
      <summary>１つの連続ページ範囲を含む OutputRange のインスタンスを作成します。</summary>
      <param name="fromPage">範囲の最初のページの番号（１から始まる）。</param>
      <param name="toPage">範囲の最後のページの番号（１から始まる）。</param>
    </member>
    <member name="M:C1.C1Preview.OutputRange.#ctor(System.Int32[])">
      <summary>リストで指定された番号のすべてのページを含む OutputRange のインスタンスを作成します。</summary>
      <param name="pageNumbers">含めるページ番号の配列。</param>
    </member>
    <member name="M:C1.C1Preview.OutputRange.#ctor(System.String)">
      <summary>文字列パラメータで指定されたページを含む OutputRange のインスタンスを作成します。</summary>
      <param name="pages">含めるページ。</param>
    </member>
    <member name="M:C1.C1Preview.OutputRange.AssignFrom(C1.C1Preview.OutputRange)">
      <summary>別のオブジェクトからプロパティをコピーします。</summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.OutputRange.Clone">
      <summary>現在の OutputRange を複製します。</summary>
      <returns>新しく作成されたインスタンス。</returns>
    </member>
    <member name="M:C1.C1Preview.OutputRange.ToString">
      <summary>現在の OutputRang を表す文字列を返します。</summary>
      <returns>範囲を表す文字列。</returns>
    </member>
    <member name="M:C1.C1Preview.OutputRange.GetFirstPage">
      <summary>範囲内の最初のページを返します。</summary>
      <returns>最初のページの番号。</returns>
    </member>
    <member name="M:C1.C1Preview.OutputRange.GetNextPage(System.Int32)">
      <summary>指定されたページ番号の次にある範囲内のページ番号を返します。</summary>
      <param name="pageNumber">現在のページ番号。</param>
      <returns>次のページ番号。次のページがない場合は -1。</returns>
    </member>
    <member name="M:C1.C1Preview.OutputRange.GetNextPage(System.Int32,System.Int32@)">
      <summary>指定されたページ番号の次にある範囲内のページ番号を返します。</summary>
      <param name="pageNumber">現在のページ番号。</param>
      <param name="cookie">同じページ番号が複数の範囲にある場合に無限ループを回避するために使用されるクッキーです。このメソッドを最初に呼び出す前に、この値を０に設定します。</param>
      <returns>次のページ番号。次のページがない場合は -1。</returns>
    </member>
    <member name="M:C1.C1Preview.OutputRange.Contains(System.Int32)">
      <summary>指定されたページが範囲内にあるかどうかをテストします。</summary>
      <param name="pageNumber">テストするページ番号。</param>
      <returns>ページが範囲内にある場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.OutputRange.GetEnumerator">
      <summary>範囲内のすべてのページをループできる新しい列挙子を作成して返します。</summary>
      <returns>新しい列挙子。</returns>
    </member>
    <member name="P:C1.C1Preview.OutputRange.Inverted">
      <summary>範囲を逆転するかどうかを取得または設定します。</summary>
      <value>範囲が反転している場合は true、その他の場合は false。</value>
    </member>
    <member name="P:C1.C1Preview.OutputRange.MaxPageNumber">
      <summary>範囲内のページ番号の絶対的な上限を取得または設定します。</summary>
      <value>上限値。</value>
    </member>
    <member name="P:C1.C1Preview.OutputRange.Type">
      <summary>範囲のタイプ（すべてのページ、ページの範囲など）。</summary>
    </member>
    <member name="P:C1.C1Preview.OutputRange.PageNumbers">
      <summary>ページ番号のリストを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.OutputRange.PageCount">
      <summary>範囲内のページの総数を取得します。</summary>
      <value></value>
    </member>
    <member name="P:C1.C1Preview.OutputRange.FromPage">
      <summary>範囲内の最初のページを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.OutputRange.ToPage">
      <summary>範囲内の最後のページを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.OutputRange.All">
      <summary>すべてを含む範囲を表します。</summary>
    </member>
    <member name="T:C1.C1Preview.OutputRange.Enumerator">
      <summary>範囲内のすべてのページを列挙できます。 注意：有効な MaxPageNumber を指定せずに OutputRange が作成された場合に無限ループを 回避する処置を講じるのは、クライアント側です。</summary>
    </member>
    <member name="M:C1.C1Preview.OutputRange.Enumerator.#ctor(C1.C1Preview.OutputRange)">
      <summary>OutputRange 列挙子の新しいインスタンスを作成します。</summary>
      <param name="range"></param>
    </member>
    <member name="M:C1.C1Preview.OutputRange.Enumerator.Reset">
      <summary>列挙子をリセットします。</summary>
    </member>
    <member name="M:C1.C1Preview.OutputRange.Enumerator.MoveNext">
      <summary>範囲内の次のページ番号に移動します。</summary>
      <returns>範囲内にさらにページがある場合は true。</returns>
    </member>
    <member name="P:C1.C1Preview.OutputRange.Enumerator.Current">
      <summary>現在のページ番号を取得します。</summary>
      <value>現在のページ番号。</value>
    </member>
    <member name="T:C1.C1Preview.PageScalingEnum">
      <summary>印刷時のページの拡大縮小方法を指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.PageScalingEnum.None">
      <summary>ページは拡大縮小されません。</summary>
    </member>
    <member name="F:C1.C1Preview.PageScalingEnum.FitToPaper">
      <summary>用紙に合わせる必要がある場合に、ページが拡大または縮小されます。</summary>
    </member>
    <member name="F:C1.C1Preview.PageScalingEnum.ReduceToPaper">
      <summary>用紙に合わせる必要がある場合に、ページが縮小されます。</summary>
    </member>
    <member name="T:C1.C1Preview.PrintingUtil">
      <summary>
        <para>これは内部使用専用です。</para>印刷に関連するユーティリティを提供する静的クラス。
      </summary>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.LayoutPrintPage(System.Drawing.SizeF,System.Drawing.RectangleF,System.Int32,System.Drawing.SizeF,System.Drawing.RectangleF,C1.C1Preview.C1PrintOptions,System.Drawing.PointF@,System.Double@,System.Boolean@)">
      <summary>指定したページスケールモードに従って、ページズーム係数、 およびプリンタ用紙サイズ内のページ位置（上／左）を計算します。 サイズはすべて同じ単位である必要があります。</summary>
      <param name="paperSize">プリンタ用紙サイズ。</param>
      <param name="printableArea">印刷可能領域（プリンタによって決まります）。</param>
      <param name="landscapeAngle">プリンタによってサポートされた横向き角度（90 または 270)。</param>
      <param name="pageSize">ドキュメントのページサイズ。</param>
      <param name="pageContent">ページのコンテンツ矩形（マージンなしのページサイズ）。</param>
      <param name="printOptions">使用する印刷オプション。</param>
      <param name="pageLocation">出力：用紙の左上に相対的なページ位置。</param>
      <param name="pageZoom">出力：ページのズーム係数。</param>
      <param name="rotate">出力：ページが回転される （角度が landscapeAngle の反対）かどうか。</param>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.LayoutPage(C1.C1Preview.ResolvedPage,C1.C1Preview.UnitTypeEnum,System.Single,System.Single,System.Drawing.SizeF@,System.Drawing.RectangleF@)">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />の解決されたページをレイアウトします。
      </summary>
      <param name="rpage">レイアウトするページ。</param>
      <param name="units">ターゲット単位。</param>
      <param name="dpiX">ターゲット X 解像度。</param>
      <param name="dpiY">ターゲット Y 解像度。</param>
      <param name="pageSize">出力：ページサイズ。</param>
      <param name="content">出力：コンテンツ矩形。</param>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.LayoutPage(System.Drawing.Image,System.Drawing.Printing.PageSettings,C1.C1Preview.UnitTypeEnum,System.Single,System.Single,System.Drawing.SizeF@,System.Drawing.RectangleF@)">
      <summary>
        <see cref="T:System.Drawing.Image" />によって表されるページをレイアウトします。
      </summary>
      <param name="page">レイアウトするページの画像。</param>
      <param name="pageSettings">使用するページ設定。</param>
      <param name="units">ターゲット単位。</param>
      <param name="dpiX">ターゲット X 解像度。</param>
      <param name="dpiY">ターゲット Y 解像度。</param>
      <param name="pageSize">出力：ページサイズ。</param>
      <param name="content">出力：コンテンツ矩形。</param>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.ShouldRotate(System.Drawing.SizeF,System.Drawing.SizeF)">
      <summary>ページが用紙に合わせて回転されるかどうかをテストします。</summary>
      <param name="paperSize">用紙サイズ。</param>
      <param name="pageSize">ページサイズ。</param>
      <returns>
        ページが回転される場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.RotatePaper(System.Int32,System.Drawing.SizeF@,System.Drawing.RectangleF@)">
      <summary>用紙サイズとその印刷可能領域を指定した角度で回転します。</summary>
      <param name="angle">
        回転角度、反時計回り（有効な値は
        <b>90</b>と
        <b>270</b>）。
      </param>
      <param name="paperSize">用紙サイズ。</param>
      <param name="printableArea">印刷可能領域。</param>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.PaperRotationAngle(System.Int32)">
      <summary>用紙の回転角度を返します。</summary>
      <param name="pageRotationAngle">ページの回転角度（度単位）。</param>
      <returns>用紙の回転角度（度単位）。</returns>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.AdjustPaperSize(System.Drawing.Printing.PageSettings,System.Drawing.Printing.PrinterSettings)">
      <summary>
        渡されたページ設定の用紙タイプが
        <see cref="F:System.Drawing.Printing.PaperKind.Custom" />の場合、 指定したプリンタで使用可能な用紙サイズをスキャンし、一致が見つかった場合は、 プリンタの用紙サイズをページ設定の１つに設定します。
      </summary>
      <param name="pageSettings">調整するページ設定。</param>
      <param name="printerSettings">ターゲットプリンタ設定。</param>
      <returns>
        調整が行われた場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.GetPhysOffset(System.IntPtr,System.Double@,System.Double@)">
      <summary>印刷されたページの物理オフセットを 1/100 インチ単位で取得します。</summary>
      <param name="hdc">デバイスコンテキストへのハンドル。</param>
      <param name="left">左物理オフセット。</param>
      <param name="top">上物理オフセット。</param>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.GetPhysOffset(System.Drawing.Graphics,System.Double@,System.Double@)">
      <summary>印刷されたページの物理オフセットを 1/100 インチ単位で取得します。</summary>
      <param name="g">
        ページの描画先の
        <see cref="T:System.Drawing.Graphics" />。
      </param>
      <param name="left">出力：左物理オフセット。</param>
      <param name="top">出力：上物理オフセット。</param>
    </member>
    <member name="M:C1.C1Preview.PrintingUtil.LandscapeAngle(System.Drawing.Printing.PrinterSettings)">
      <summary>プリンタの横向き角度を取得します。</summary>
      <param name="printerSettings">
        横向き角度の取得先のプリンタ設定。 このパラメータが
        <b>null</b>または無効の場合、
        <b>270</b>が返されます。
      </param>
      <returns>プリンタの横向き角度。</returns>
    </member>
    <member name="T:C1.C1Preview.AreaResolvedInfo">
      <summary>
        解決された
        <see cref="T:C1.C1Preview.RenderArea" />に関する情報を表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.AreaResolvedInfo.#ctor(C1.C1Preview.IResolvedInfoOwner)">
      <summary>これは内部使用専用です。</summary>
      <param name="owner"></param>
    </member>
    <member name="P:C1.C1Preview.AreaResolvedInfo.IsChildrenProcessing">
      <summary>子の処理が現在進行中であるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.AreaResolvedInfo.AutoSizeRequested">
      <summary>サイズの自動調整が要求されたかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.AreaResolvedInfo.AutoHeightResolved">
      <summary>高さの自動調整が解決されたかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.AreaResolvedInfo.AutoWidthResolved">
      <summary>幅の自動調整が解決されたかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.RenderGraphicsFragment">
      <summary>RenderImage オブジェクトのフラグメントを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderGraphicsFragment.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="P:C1.C1Preview.RenderGraphicsFragment.RenderObject" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderGraphicsFragment" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderGraphicsFragment" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderGraphicsFragment.GetContentAutoWidth(System.Double,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="height"></param>
      <param name="width"></param>
    </member>
    <member name="M:C1.C1Preview.RenderGraphicsFragment.GetContentAutoHeight(System.Double,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.RenderGraphicsFragment.GetContentAutoSize(System.Double@,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.RenderGraphicsFragment.GetDrawingFlags(System.Boolean)">
      <summary>これは内部使用専用です。</summary>
      <param name="renderInputControls"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderGraphicsFragment.InternalDraw(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="graphics"></param>
      <param name="drawParams"></param>
    </member>
    <member name="P:C1.C1Preview.RenderGraphicsFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderGraphics" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderInputFragment">
      <summary>RenderImage オブジェクトのフラグメントを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderInputFragment.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="P:C1.C1Preview.RenderInputFragment.RenderObject" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderInputFragment" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderInputFragment" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputFragment.GetContentAutoWidth(System.Double,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="height"></param>
      <param name="width"></param>
    </member>
    <member name="M:C1.C1Preview.RenderInputFragment.GetContentAutoHeight(System.Double,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.RenderInputFragment.GetContentAutoSize(System.Double@,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.RenderInputFragment.GetDrawingFlags(System.Boolean)">
      <summary>これは内部使用専用です。</summary>
      <param name="renderInputControls"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderInputFragment.InternalDraw(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="graphics"></param>
      <param name="drawParams"></param>
    </member>
    <member name="P:C1.C1Preview.RenderInputFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderInputBase" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderShapeFragment">
      <summary>RenderShape オブジェクトのフラグメントの抽象基本クラス。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderShapeFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderShapeBase" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderShapeFragment.Shape">
      <summary>
        現在のフラグメントの
        <see cref="T:C1.C1Preview.RenderShapeBase" />オブジェクトによって表される 幾何学的な形状を記述する
        <see cref="T:C1.C1Preview.ShapeProps" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderLineFragment">
      <summary>RenderLineBase オブジェクトのフラグメントを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderLineFragment.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="P:C1.C1Preview.RenderLineFragment.RenderObject" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderLineFragment" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderLineFragment" />オブジェクト。
      </returns>
    </member>
    <member name="P:C1.C1Preview.RenderLineFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderLineBase" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderLineFragment.Line">
      <summary>
        現在のフラグメントの
        <see cref="T:C1.C1Preview.RenderLineBase" />オブジェクトによって表される線を記述する
        <see cref="T:C1.C1Preview.LinePropsBase" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderRectangleFragment">
      <summary>RenderRectangle オブジェクトのフラグメントを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderRectangleFragment.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="P:C1.C1Preview.RenderRectangleFragment.RenderObject" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderRectangleFragment" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderRectangleFragment" />オブジェクト。
      </returns>
    </member>
    <member name="P:C1.C1Preview.RenderRectangleFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderRectangle" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderRectangleFragment.Rectangle">
      <summary>
        現在のフラグメントの
        <see cref="T:C1.C1Preview.RenderRectangle" />オブジェクトによって表される線を記述する
        <see cref="T:C1.C1Preview.RectangleProps" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderRoundRectangleFragment">
      <summary>RenderRectangle オブジェクトのフラグメントを表します。</summary>
    </member>
    <member name="P:C1.C1Preview.RenderRoundRectangleFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderRoundRectangleFragment.RoundRectangle">
      <summary>
        現在のフラグメントの
        <see cref="T:C1.C1Preview.RenderRoundRectangle" />オブジェクトによって表される線を記述する
        <see cref="T:C1.C1Preview.RoundRectangleProps" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.ShapeResolvedInfo">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.ShapeResolvedInfo.#ctor(C1.C1Preview.IResolvedInfoOwner)">
      <summary>これは内部使用専用です。</summary>
      <param name="owner"></param>
    </member>
    <member name="T:C1.C1Preview.RenderTableFragment">
      <summary>RenderTable オブジェクトのフラグメントを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderTableFragment.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="P:C1.C1Preview.RenderTableFragment.RenderObject" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderTableFragment" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderTableFragment" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderTableFragment.AssignFrom(C1.C1Preview.RenderFragment)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderFragment" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.RenderTableFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderTable" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RenderTableFragment.ColCount">
      <summary>現在のテーブルフラグメント（現在のページまたは ページ列上）の列数を取得します。</summary>
      <seealso cref="P:C1.C1Preview.RenderTableFragment.RowCount" />
    </member>
    <member name="P:C1.C1Preview.RenderTableFragment.RowCount">
      <summary>現在のテーブルフラグメント（現在のページまたは ページ列上）内の行数を取得します。</summary>
      <seealso cref="P:C1.C1Preview.RenderTableFragment.ColCount" />
    </member>
    <member name="P:C1.C1Preview.RenderTableFragment.TopHeaderRowCount">
      <summary>現在のフラグメント（現在のページまたはページ列上）の上側の テーブルヘッダー内の行数を取得します。</summary>
      <seealso cref="P:C1.C1Preview.RenderTableFragment.BottomFooterRowCount" />
      <seealso cref="P:C1.C1Preview.RenderTableFragment.LeftHeaderColCount" />
      <seealso cref="P:C1.C1Preview.RenderTableFragment.RightFooterColCount" />
    </member>
    <member name="P:C1.C1Preview.RenderTableFragment.BottomFooterRowCount">
      <summary>現在のフラグメント（現在のページまたはページ列上）の下側の テーブルフッター内の行数を取得します。</summary>
      <seealso cref="P:C1.C1Preview.RenderTableFragment.TopHeaderRowCount" />
      <seealso cref="P:C1.C1Preview.RenderTableFragment.LeftHeaderColCount" />
      <seealso cref="P:C1.C1Preview.RenderTableFragment.RightFooterColCount" />
    </member>
    <member name="P:C1.C1Preview.RenderTableFragment.LeftHeaderColCount">
      <summary>現在のフラグメント（現在のページまたはページ列上）の左側の 垂直テーブルヘッダー内の列数を取得します。</summary>
      <seealso cref="P:C1.C1Preview.RenderTableFragment.TopHeaderRowCount" />
      <seealso cref="P:C1.C1Preview.RenderTableFragment.BottomFooterRowCount" />
      <seealso cref="P:C1.C1Preview.RenderTableFragment.RightFooterColCount" />
    </member>
    <member name="P:C1.C1Preview.RenderTableFragment.RightFooterColCount">
      <summary>現在のフラグメント（現在のページまたはページ列上）の右側の 垂直テーブルフッター内の列数を取得します。</summary>
      <seealso cref="P:C1.C1Preview.RenderTableFragment.TopHeaderRowCount" />
      <seealso cref="P:C1.C1Preview.RenderTableFragment.BottomFooterRowCount" />
      <seealso cref="P:C1.C1Preview.RenderTableFragment.LeftHeaderColCount" />
    </member>
    <member name="T:C1.C1Preview.TitleResolvedInfo">
      <summary>これは内部使用専用です。 テーブルのヘッダー／フッターに関する解決された情報を表します。</summary>
    </member>
    <member name="F:C1.C1Preview.TitleResolvedInfo.Group">
      <summary>タイトルを表す TableVectorGroup オブジェクト。</summary>
    </member>
    <member name="F:C1.C1Preview.TitleResolvedInfo.Objects">
      <summary>ヘッダー／フッター内の RenderFragments。</summary>
    </member>
    <member name="F:C1.C1Preview.TitleResolvedInfo.Ordinals">
      <summary>ヘッダー／フッター内のベクターの序数。</summary>
    </member>
    <member name="F:C1.C1Preview.TitleResolvedInfo.Sizes">
      <summary>ヘッダー／フッター内のベクターのサイズ。</summary>
    </member>
    <member name="F:C1.C1Preview.TitleResolvedInfo.IsAtEdge">
      <summary>ヘッダー／フッターがオブジェクトの辺（上／左／右／下）にあるかどうかを示します。</summary>
    </member>
    <member name="F:C1.C1Preview.TitleResolvedInfo.Size">
      <summary>タイトルのサイズ。タイトルがオブジェクトの辺にある場合、 この辺はグリッド線の追加スペースを含んでいません。</summary>
    </member>
    <member name="T:C1.C1Preview.TableResolvedInfo">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.RepeatGridLinesCols">
      <summary>RenderTable.RepeateGridLinesHorz == true の場合、 このリストはグリッド線が繰り返されない列を含みます。 RenderTable.RepeateGridLinesHorz == false の場合、 このリストはグリッド線が繰り返される列を含みます。</summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.RepeatGridLinesRows">
      <summary>RenderTable.RepeateGridLinesVert == true の場合、 このリストはグリッド線が繰り返されない行を含みます。 RenderTable.RepeateGridLinesVert == false の場合、 このリストはグリッド線が繰り返される行を含みます。</summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.VertPageHeader">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.VertPageFooter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.HorzPageHeader">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.HorzPageFooter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.HorzColumnHeader">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.HorzColumnFooter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.StretchedCols">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.StretchedRows">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.TableResolvedInfo.#ctor(C1.C1Preview.IResolvedInfoOwner)">
      <summary>これは内部使用専用です。</summary>
      <param name="owner"></param>
    </member>
    <member name="M:C1.C1Preview.TableResolvedInfo.RowContainsCellsWithRepeatedGridLines(System.Boolean,System.Int32)">
      <summary>これは内部使用専用です。</summary>
      <param name="tableRepeatGridLinesHorz"></param>
      <param name="row"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.TableResolvedInfo.ColContainsCellsWithRepeatedGridLines(System.Boolean,System.Int32)">
      <summary>これは内部使用専用です。</summary>
      <param name="tableRepeatGridLinesVert"></param>
      <param name="col"></param>
      <returns></returns>
    </member>
    <member name="P:C1.C1Preview.TableResolvedInfo.VertHeadersResolved">
      <summary>これは内部使用専用です。 テーブルのヘッダーが解決されて VertPageHeade、VertPageFooter の各プロパティが 有効な値を含んでいることを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableResolvedInfo.HorzHeadersResolved">
      <summary>これは内部使用専用です。 テーブルのヘッダーが解決されて HorzPageHeader、HorzPageFooter プロパティが 有効な値を含んでいることを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.TableResolvedInfo.ColsResolved">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.TableResolvedInfo.RowsResolved">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.TableResolvedInfo.GridLinesResolved">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.TableResolvedInfo.VectorsResolving">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.TableResolvedInfo.StretchedVector">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.StretchedVector.Ordinal">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.StretchedVector.NormalSize">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.StretchedVector.StretchedSize">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableResolvedInfo.StretchedVector.Resizable">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.TableResolvedInfo.StretchedVector.#ctor(System.Int32,System.Double,System.Boolean)">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.TableResolvedInfo.StretchedVectorCollection">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.TableResolvedInfo.StretchedVectorCollection.Find(System.Int32)">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.TableSplitParams">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.ColHasRepeatedGridLines">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.RowHasRepeatedGridLines">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.SplitVectorIndex">
      <summary>_colsOrdinals or _rowsOrdinals 配列内のベクターのインデックス。</summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.SplitPosWithinVector">
      <summary>ベクター内の分割位置。 分割位置がベクター間にある場合はゼロです。</summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.Header">
      <summary>繰り返されるヘッダーの解決された情報。</summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.Footer">
      <summary>繰り返されるフッターの解決された情報。</summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.SplitPosArea">
      <summary>分割の発生する領域を定義します。</summary>
    </member>
    <member name="M:C1.C1Preview.TableSplitParams.#ctor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.TableSplitParams.AssignFrom(C1.C1Preview.SplitParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="source"></param>
    </member>
    <member name="P:C1.C1Preview.TableSplitParams.HeaderSize">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.TableSplitParams.FooterSize">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.TableSplitParams.SplitPosAreaEnum">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.SplitPosAreaEnum.BeforeHeader">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.SplitPosAreaEnum.BetweenHeaderFooter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TableSplitParams.SplitPosAreaEnum.AfterFooter">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.RefreshModeEnum">
      <summary>ドキュメント生成時のデータと式のリフレッシュモードを記述します。</summary>
    </member>
    <member name="F:C1.C1Preview.RefreshModeEnum.NoRefresh">
      <summary>式もデータもリフレッシュされません。ドキュメントがまだ生成されていない場合、このモードは無視されることに注意してください。つまり、データはリフレッシュされ、式は計算されます。</summary>
    </member>
    <member name="F:C1.C1Preview.RefreshModeEnum.RefreshDataBinding">
      <summary>データソースを参照しない式は再計算されますが、データはリフレッシュされません。ドキュメントがまだ生成されていない場合、このモードは無視されることに注意してください。つまり、データはリフレッシュされます。</summary>
    </member>
    <member name="F:C1.C1Preview.RefreshModeEnum.RefreshCalculatedValues">
      <summary>データがリフレッシュされ、すべての式が再計算されます。</summary>
    </member>
    <member name="T:C1.C1Preview.GenerateErrorEnum">
      <summary>ドキュメントの生成時に発生するエラーのコードを表します。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.None">
      <summary>エラーはありません。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.CyclicReference">
      <summary>ドキュメントには、循環参照が含まれます。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.ResolvingDimension">
      <summary>オブジェクトのサイズを解決できません。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.AutoWidthNotSupproted">
      <summary>自動幅がサポートされないオブジェクトがあります。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.AutoHeightNotSupproted">
      <summary>自動高さがサポートされないオブジェクトがあります。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.AutoSizeNotSupported">
      <summary>自動サイズがサポートされないオブジェクトがあります。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.AutoLeftNotSupproted">
      <summary>使用できません。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.AutoTopNotSupproted">
      <summary>使用できません。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.BottomRightNotSupported">
      <summary>使用できません。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.InternalError">
      <summary>使用できません。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.PageSettingsChanged">
      <summary>使用できません。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.LayoutChange">
      <summary>その時点でレイアウトを変更できません。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.GeneratingMode">
      <summary>使用できません。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.InadmissibleAction">
      <summary>使用できません。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.Abort">
      <summary>使用できません。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.DataBinding">
      <summary>データ連結のエラー。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.Scripting">
      <summary>スクリプトエラー。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.ImportC1Report">
      <summary>C1Report インポートエラー。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.ImportRdl">
      <summary>RDL インポートエラー。</summary>
    </member>
    <member name="F:C1.C1Preview.GenerateErrorEnum.Tags">
      <summary>ドキュメントのタグの処理中のエラー。</summary>
    </member>
    <member name="T:C1.C1Preview.OffsetsD">
      <summary>矩形領域の各辺からのオフセットを表す４つの double 型数値セットを格納します。</summary>
    </member>
    <member name="M:C1.C1Preview.OffsetsD.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <see cref="T:C1.C1Preview.OffsetsD" />構造体の新しいインスタンスを初期化します。
      </summary>
      <param name="left">左オフセット。</param>
      <param name="top">上オフセット。</param>
      <param name="right">右オフセット。</param>
      <param name="bottom">下オフセット。</param>
    </member>
    <member name="M:C1.C1Preview.OffsetsD.#ctor(System.Double)">
      <summary>
        <see cref="T:C1.C1Preview.OffsetsD" />構造体の新しいインスタンスを初期化します。
      </summary>
      <param name="offset">すべてのオフセットの同じ値。</param>
    </member>
    <member name="M:C1.C1Preview.OffsetsD.ToString">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.OffsetsD" />を表す文字列を返します。
      </summary>
      <returns>
        現在の
        <see cref="T:C1.C1Preview.OffsetsD" />を表す文字列。
      </returns>
    </member>
    <member name="M:C1.C1Preview.OffsetsD.Parse(System.String,C1.C1Preview.OffsetsD@,System.Boolean)">
      <summary>
        文字列を
        <see cref="T:C1.C1Preview.OffsetsD" />構造体に変換します。
      </summary>
      <param name="s">変換する文字列。</param>
      <param name="result">
        出力：
        <see cref="T:C1.C1Preview.OffsetsD" />構造体。
      </param>
      <param name="throwException">文字列を変換できない場合に例外がスローされるかどうかを示します。</param>
      <returns>
        エラーが発生しなかった場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.OffsetsD.op_Implicit(C1.C1Preview.OffsetsI)~C1.C1Preview.OffsetsD">
      <summary>
        <see cref="T:C1.C1Preview.OffsetsI" />を
        <see cref="T:C1.C1Preview.OffsetsD" />に変換します。
      </summary>
      <param name="value">変換する値。</param>
      <returns>変換後の値。</returns>
    </member>
    <member name="P:C1.C1Preview.OffsetsD.Left">
      <summary>左オフセットを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsD.Top">
      <summary>上オフセットを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsD.Right">
      <summary>右オフセットを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsD.Bottom">
      <summary>下オフセットを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsD.IsEmpty">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.OffsetsD" />が空かどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsD.Empty">
      <summary>
        <see cref="T:C1.C1Preview.OffsetsD" />構造体の空のインスタンスを表します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.OffsetsD.TypeConverter">
      <summary>
        <see cref="T:C1.C1Preview.OffsetsD" />のタイプコンバータを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.OffsetsD.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
        文字列を
        <see cref="T:C1.C1Preview.OffsetsD" />に変換します。
      </summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="str">変換する文字列。</param>
      <returns>変換された値。</returns>
    </member>
    <member name="M:C1.C1Preview.OffsetsD.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>オブジェクトを文字列に変換します。</summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="o">
        変換する
        <see cref="T:C1.C1Preview.OffsetsD" />。
      </param>
      <returns>変換された文字列。</returns>
    </member>
    <member name="T:C1.C1Preview.OffsetsI">
      <summary>矩形領域の各辺からのオフセットを表す ４つの整数値のセットを格納します。</summary>
    </member>
    <member name="M:C1.C1Preview.OffsetsI.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <see cref="T:C1.C1Preview.OffsetsI" />構造体の新しいインスタンスを初期化します。
      </summary>
      <param name="left">左オフセット。</param>
      <param name="top">上オフセット。</param>
      <param name="right">右オフセット。</param>
      <param name="bottom">下オフセット。</param>
    </member>
    <member name="M:C1.C1Preview.OffsetsI.ToString">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.OffsetsI" />を表す文字列を返します。
      </summary>
      <returns>
        現在の
        <see cref="T:C1.C1Preview.OffsetsI" />を表す文字列。
      </returns>
    </member>
    <member name="M:C1.C1Preview.OffsetsI.Ceiling(C1.C1Preview.OffsetsD)">
      <summary>
        <b>OffsetsD</b>の double 値を次に大きい整数値に丸めることによって、指定した
        <see cref="T:C1.C1Preview.OffsetsD" />構造体を
        <see cref="T:C1.C1Preview.OffsetsI" />に変換します。
      </summary>
      <param name="value">
        変換される
        <see cref="T:C1.C1Preview.OffsetsD" />構造体。
      </param>
      <returns>
        変換された
        <see cref="T:C1.C1Preview.OffsetsI" />構造体。
      </returns>
    </member>
    <member name="P:C1.C1Preview.OffsetsI.Left">
      <summary>左オフセットを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsI.Top">
      <summary>上オフセットを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsI.Right">
      <summary>右オフセットを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsI.Bottom">
      <summary>下オフセットを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsI.IsEmpty">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.OffsetsI" />が空かどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.OffsetsI.Empty">
      <summary>
        <see cref="T:C1.C1Preview.OffsetsI" />構造体の空のインスタンスを表します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.PointD">
      <summary>２次元平面のポイントを定義する double 型の x 座標と y 座標を表します。</summary>
    </member>
    <member name="M:C1.C1Preview.PointD.#ctor(System.Double,System.Double)">
      <summary>
        <see cref="T:C1.C1Preview.PointD" />構造体の新しいインスタンスを初期化します。
      </summary>
      <param name="x">ポイントの水平位置。</param>
      <param name="y">ポイントの垂直位置。</param>
    </member>
    <member name="M:C1.C1Preview.PointD.ToString">
      <summary>オーバーライドされます。この PointD を人が読み取ることができる文字列に変換します。</summary>
      <returns>この PointD を表す文字列。</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.Ceiling">
      <summary>PointD オブジェクトの値を次に大きな整数値に丸めることで、この PointD オブジェクトを Point オブジェクトに変換します。</summary>
      <returns>このメソッドによる変換後の Point オブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.Truncate">
      <summary>Point オブジェクトの値を切り捨てることで、この PointD オブジェクトを Point オブジェクトに変換します。</summary>
      <returns>このメソッドによる変換後の Point オブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.Offset(System.Double,System.Double)">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.PointD" />構造体を指定した値によってオフセットします。
      </summary>
      <param name="dx">水平オフセット。</param>
      <param name="dy">垂直オフセット。</param>
    </member>
    <member name="M:C1.C1Preview.PointD.ToPointF">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.PointD" />構造体を
        <see cref="T:System.Drawing.PointF" />に変換します。
      </summary>
      <returns>
        このメソッドの変換先の
        <see cref="T:System.Drawing.PointF" />構造体。
      </returns>
    </member>
    <member name="M:C1.C1Preview.PointD.Parse(System.String,C1.C1Preview.PointD@,System.Boolean)">
      <summary>文字列を PointD 構造体に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <param name="result">PointD 構造体。</param>
      <param name="throwException">文字列を PointD に変換できない場合に例外が生成されることを示します。</param>
      <returns>エラーが発生しなかった場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.PointD.Add(C1.C1Preview.PointD,C1.C1Preview.SizeD)">
      <summary>
        <see cref="T:C1.C1Preview.SizeD" />を
        <see cref="T:C1.C1Preview.PointD" />に加算します。
      </summary>
      <param name="pt">
        加算される
        <see cref="T:C1.C1Preview.PointD" />。
      </param>
      <param name="sz">
        加算される
        <see cref="T:C1.C1Preview.SizeD" />。
      </param>
      <returns>
        加算の結果を表す
        <see cref="T:C1.C1Preview.PointD" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.PointD.Substract(C1.C1Preview.PointD,C1.C1Preview.SizeD)">
      <summary>
        <see cref="T:C1.C1Preview.SizeD" />を
        <see cref="T:C1.C1Preview.PointD" />から減算します。
      </summary>
      <param name="pt">
        減算される
        <see cref="T:C1.C1Preview.PointD" />。
      </param>
      <param name="sz">
        減算される
        <see cref="T:C1.C1Preview.SizeD" />。
      </param>
      <returns>
        減算の結果を表す
        <see cref="T:C1.C1Preview.PointD" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.PointD.op_Implicit(System.Drawing.Point)~C1.C1Preview.PointD">
      <summary>
        <see cref="T:System.Drawing.Point" />を
        <see cref="T:C1.C1Preview.PointD" />に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:System.Drawing.Point" />。
      </param>
      <returns>
        変換後の
        <see cref="T:C1.C1Preview.PointD" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.PointD.op_Implicit(System.Drawing.PointF)~C1.C1Preview.PointD">
      <summary>
        <see cref="T:System.Drawing.PointF" />を
        <see cref="T:C1.C1Preview.PointD" />に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:System.Drawing.PointF" />。
      </param>
      <returns>
        変換後の
        <see cref="T:C1.C1Preview.PointD" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.PointD.op_Explicit(C1.C1Preview.PointD)~C1.C1Preview.SizeD">
      <summary>
        <see cref="T:C1.C1Preview.PointD" />を
        <see cref="T:C1.C1Preview.SizeD" />に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Preview.PointD" />。
      </param>
      <returns>
        変換後の
        <see cref="T:C1.C1Preview.SizeD" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.PointD.op_Addition(C1.C1Preview.PointD,C1.C1Preview.SizeD)">
      <summary>
        <see cref="T:C1.C1Preview.SizeD" />を
        <see cref="T:C1.C1Preview.PointD" />に加算します。
      </summary>
      <param name="pt">
        加算される
        <see cref="T:C1.C1Preview.PointD" />。
      </param>
      <param name="sz">
        加算される
        <see cref="T:C1.C1Preview.SizeD" />。
      </param>
      <returns>
        加算の結果を表す
        <see cref="T:C1.C1Preview.PointD" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.PointD.op_Subtraction(C1.C1Preview.PointD,C1.C1Preview.SizeD)">
      <summary>
        <see cref="T:C1.C1Preview.SizeD" />を
        <see cref="T:C1.C1Preview.PointD" />から減算します。
      </summary>
      <param name="pt">
        減算される
        <see cref="T:C1.C1Preview.PointD" />。
      </param>
      <param name="sz">
        減算される
        <see cref="T:C1.C1Preview.SizeD" />。
      </param>
      <returns>
        減算の結果を表す
        <see cref="T:C1.C1Preview.PointD" />。
      </returns>
    </member>
    <member name="P:C1.C1Preview.PointD.X">
      <summary>この PointD の x 座標を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.PointD.Y">
      <summary>この PointD の y 座標を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.PointD.IsEmpty">
      <summary>この PointD が空かどうかを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.PointD.Empty">
      <summary>メンバデータが初期化されていない PointD クラスの新しいインスタンスを表します。</summary>
    </member>
    <member name="T:C1.C1Preview.PointD.TypeConverter">
      <summary>
        <see cref="T:C1.C1Preview.PointD" />のタイプコンバータを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.PointD.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
        文字列を
        <see cref="T:C1.C1Preview.PointD" />に変換します。
      </summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="str">変換する文字列。</param>
      <returns>
        変換された
        <see cref="T:C1.C1Preview.PointD" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.PointD.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
        <see cref="T:C1.C1Preview.PointD" />を文字列に変換します。
      </summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="o">
        変換する
        <see cref="T:C1.C1Preview.PointD" />。
      </param>
      <returns>
        <see cref="T:C1.C1Preview.PointD" />を表す文字列。
      </returns>
    </member>
    <member name="T:C1.C1Preview.SizeD">
      <summary>double 型の値のペアを格納します。</summary>
    </member>
    <member name="M:C1.C1Preview.SizeD.#ctor(System.Double,System.Double)">
      <summary>
        <see cref="T:C1.C1Preview.SizeD" />構造体の新しいインスタンスを初期化します。
      </summary>
      <param name="width">
        <see cref="T:C1.C1Preview.SizeD" />の水平コンポーネント。
      </param>
      <param name="height">
        <see cref="T:C1.C1Preview.SizeD" />の垂直コンポーネント。
      </param>
    </member>
    <member name="M:C1.C1Preview.SizeD.ToString">
      <summary>オーバーライドされます。この SizeD を表す人が読み取ることができる文字列を作成します。</summary>
      <returns>この SizeD を表す文字列。</returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.Ceiling">
      <summary>SizeD オブジェクトの値を次に大きな整数値に丸めることで、この SizeD オブジェクトを Point オブジェクトに変換します。</summary>
      <returns>このメソッドによる変換後の Size オブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.Truncate">
      <summary>Size オブジェクトの値を切り捨てることで、この SizeD オブジェクトを Size オブジェクトに変換します。</summary>
      <returns>このメソッドによる変換後の Size オブジェクト。</returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.op_Implicit(System.Drawing.Size)~C1.C1Preview.SizeD">
      <summary>
        <see cref="T:System.Drawing.Size" />を
        <see cref="T:C1.C1Preview.SizeD" />に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:System.Drawing.Size" />。
      </param>
      <returns>
        変換後の
        <see cref="T:C1.C1Preview.SizeD" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.op_Implicit(System.Drawing.SizeF)~C1.C1Preview.SizeD">
      <summary>
        <see cref="T:System.Drawing.SizeF" />を
        <see cref="T:C1.C1Preview.SizeD" />に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:System.Drawing.SizeF" />。
      </param>
      <returns>
        変換後の
        <see cref="T:C1.C1Preview.SizeD" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.op_Explicit(C1.C1Preview.SizeD)~C1.C1Preview.PointD">
      <summary>
        <see cref="T:C1.C1Preview.SizeD" />を
        <see cref="T:C1.C1Preview.PointD" />に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:C1.C1Preview.SizeD" />。
      </param>
      <returns>
        変換後の
        <see cref="T:C1.C1Preview.PointD" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.Add(C1.C1Preview.SizeD,C1.C1Preview.SizeD)">
      <summary>
        ２つの
        <see cref="T:C1.C1Preview.SizeD" />構造体を加算します。
      </summary>
      <param name="sz1">
        加算される第１の
        <see cref="T:C1.C1Preview.SizeD" />。
      </param>
      <param name="sz2">
        加算される第２の
        <see cref="T:C1.C1Preview.SizeD" />。
      </param>
      <returns>
        加算の結果を表す
        <see cref="T:C1.C1Preview.SizeD" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.Substract(C1.C1Preview.SizeD,C1.C1Preview.SizeD)">
      <summary>
        １つの
        <see cref="T:C1.C1Preview.SizeD" />構造体をもう１つの構造体から減算します。
      </summary>
      <param name="sz1">
        減算される
        <see cref="T:C1.C1Preview.SizeD" />。
      </param>
      <param name="sz2">
        減算される
        <see cref="T:C1.C1Preview.SizeD" />。
      </param>
      <returns>
        減算の結果を表す
        <see cref="T:C1.C1Preview.SizeD" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.op_Subtraction(C1.C1Preview.SizeD,C1.C1Preview.SizeD)">
      <summary>
        １つの
        <see cref="T:C1.C1Preview.SizeD" />構造体をもう１つの構造体から減算します。
      </summary>
      <param name="sz1">
        減算される
        <see cref="T:C1.C1Preview.SizeD" />。
      </param>
      <param name="sz2">
        減算される
        <see cref="T:C1.C1Preview.SizeD" />。
      </param>
      <returns>
        減算の結果を表す
        <see cref="T:C1.C1Preview.SizeD" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.SizeD.op_Addition(C1.C1Preview.SizeD,C1.C1Preview.SizeD)">
      <summary>
        ２つの
        <see cref="T:C1.C1Preview.SizeD" />構造体を加算します。
      </summary>
      <param name="sz1">
        加算される第１の
        <see cref="T:C1.C1Preview.SizeD" />。
      </param>
      <param name="sz2">
        加算される第２の
        <see cref="T:C1.C1Preview.SizeD" />。
      </param>
      <returns>
        加算の結果を表す
        <see cref="T:C1.C1Preview.SizeD" />。
      </returns>
    </member>
    <member name="P:C1.C1Preview.SizeD.Width">
      <summary>この SizeD の水平要素を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.SizeD.Height">
      <summary>この SizeD の垂直要素を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.SizeD.IsEmpty">
      <summary>この SizeD の幅と高さが０かどうかを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.SizeD.Empty">
      <summary>
        <see cref="T:C1.C1Preview.SizeD" />構造体の空のインスタンスを表します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RectangleD">
      <summary>四角形の位置とサイズを表す４つの double 型の値を格納します。</summary>
    </member>
    <member name="M:C1.C1Preview.RectangleD.#ctor(C1.C1Preview.PointD,C1.C1Preview.SizeD)">
      <summary>
        <see cref="T:C1.C1Preview.RectangleD" />構造体の新しいインスタンスを初期化します。
      </summary>
      <param name="location">矩形の位置（左上隅の座標）。</param>
      <param name="size">矩形のサイズ。</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <see cref="T:C1.C1Preview.RectangleD" />構造体の新しいインスタンスを初期化します。
      </summary>
      <param name="x">矩形の左辺の X 座標。</param>
      <param name="y">矩形の上辺の Y 座標。</param>
      <param name="width">矩形の幅。</param>
      <param name="height">矩形の高さ。</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.ToString">
      <summary>オーバーライドされます。この RectangleD の位置とサイズを人が読み取ることができる文字列に変換します。</summary>
      <returns>この RectangleD 構造体の位置、幅、および高さを含む文字列（たとえば、{X=20, Y=20, Width=100, Height=50}）。</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Contains(C1.C1Preview.PointD)">
      <summary>指定されたポイントがこの RectangleD 構造体に含まれるかどうかを判定します。</summary>
      <param name="pt">テストする PointD。</param>
      <returns>この RectangleD 構造体に pt パラメータで表されるポイントが含まれる場合は true を返します。そうでない場合は false を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Contains(C1.C1Preview.RectangleD)">
      <summary>この RectangleD 構造体に rect で表される四角形領域が完全に含まれるかどうかを判定します。</summary>
      <param name="rc">
        テストする
        <see cref="T:C1.C1Preview.RectangleD" />。
      </param>
      <returns>この RectangleD によって表される四角形領域内に rect で表される四角形領域が完全に含まれる場合は true を返します。そうでない場合は false を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Contains(System.Double,System.Double)">
      <summary>指定されたポイントがこの RectangleD 構造体に含まれるかどうかを判定します。</summary>
      <param name="x">テストするポイントの x 座標。</param>
      <param name="y">テストするポイントの y 座標。</param>
      <returns>この RectangleD 構造体に x と y で定義されるポイントが含まれる場合は true を返します。そうでない場合は false を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Inflate(System.Double,System.Double,System.Double,System.Double)">
      <summary>この RectangleD を指定された量だけ拡大します。</summary>
      <param name="left">この RectangleD 構造体を左に拡大する量。</param>
      <param name="top">この RectangleD 構造体を上に拡大する量。</param>
      <param name="right">この RectangleD 構造体を右に拡大する量。</param>
      <param name="bottom">この RectangleD 構造体を下に拡大する量。</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Inflate(C1.C1Preview.SizeD)">
      <summary>この RectangleD を指定された量だけ拡大します。</summary>
      <param name="size">
        現在の矩形を膨らませる
        <see cref="T:C1.C1Preview.SizeD" />。
      </param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Inflate(System.Double,System.Double)">
      <summary>この RectangleD を指定された量だけ拡大します。</summary>
      <param name="x">
        現在の
        <see cref="T:C1.C1Preview.RectangleD" />の左右に追加する量。
      </param>
      <param name="y">
        現在の
        <see cref="T:C1.C1Preview.RectangleD" />の上下に追加する量。
      </param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Intersect(C1.C1Preview.RectangleD)">
      <summary>この RectangleD 構造体と指定された RectangleD 構造体の共通部分を求め、この RectangleD 構造体をそれに置き換えます。</summary>
      <param name="rect">共通部分を求める四角形。</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.IntersectsWith(C1.C1Preview.RectangleD)">
      <summary>この四角形が rect と重なるかどうかを判定します。</summary>
      <param name="rc">
        テストする
        <see cref="T:C1.C1Preview.RectangleD" />。
      </param>
      <returns>共通部分がある場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Offset(System.Double,System.Double)">
      <summary>この四角形の位置を指定された量だけ調整します。</summary>
      <param name="x">水平方向に位置をオフセットする量。</param>
      <param name="y">垂直方向に位置をオフセットする量。</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Offset(C1.C1Preview.PointD)">
      <summary>この四角形の位置を指定された量だけ調整します。</summary>
      <param name="pt">方向に位置をオフセットする量。</param>
    </member>
    <member name="M:C1.C1Preview.RectangleD.ToRectangleF">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RectangleD" />を
        <see cref="T:System.Drawing.RectangleF" />に変換します。
      </summary>
      <returns>
        変換された
        <see cref="T:System.Drawing.RectangleF" />構造体。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.ToRectangle">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RectangleD" />を
        <see cref="T:System.Drawing.Rectangle" />に変換します。
      </summary>
      <returns>
        変換された
        <see cref="T:System.Drawing.Rectangle" />構造体。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.op_Implicit(System.Drawing.Rectangle)~C1.C1Preview.RectangleD">
      <summary>
        <see cref="T:System.Drawing.Rectangle" />を
        <see cref="T:C1.C1Preview.RectangleD" />に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:System.Drawing.Rectangle" />。
      </param>
      <returns>
        変換後の
        <see cref="T:C1.C1Preview.RectangleD" />構造体。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.op_Implicit(System.Drawing.RectangleF)~C1.C1Preview.RectangleD">
      <summary>
        <see cref="T:System.Drawing.RectangleF" />を
        <see cref="T:C1.C1Preview.RectangleD" />に変換します。
      </summary>
      <param name="value">
        変換する
        <see cref="T:System.Drawing.RectangleF" />。
      </param>
      <returns>
        変換後の
        <see cref="T:C1.C1Preview.RectangleD" />構造体。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Parse(System.String,C1.C1Preview.RectangleD@,System.Boolean)">
      <summary>文字列を RectangleD 構造体に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <param name="result">RectangleD 構造体。</param>
      <param name="throwException">文字列を RectangleD に変換できない場合に例外が生成されることを示します。</param>
      <returns>エラーが発生しなかった場合は true を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
      <summary>指定された位置を左上隅と右下隅にして RectangleD 構造体を作成します。</summary>
      <param name="left">四角形領域の左上隅の x 座標。</param>
      <param name="top">四角形領域の左上隅の y 座標。</param>
      <param name="right">四角形領域の右下隅の x 座標。</param>
      <param name="bottom">四角形領域の右下隅の y 座標。</param>
      <returns>このメソッドが作成する新しい RectangleD。</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Inflate(C1.C1Preview.RectangleD,System.Double,System.Double)">
      <summary>指定された RectangleD 構造体を拡大してコピーを作成し、それを返します。</summary>
      <param name="rc">
        コピーを作成して膨らませる対象の
        <see cref="T:C1.C1Preview.RectangleD" />。
      </param>
      <param name="x">四角形のコピーを水平に拡大する量。</param>
      <param name="y">四角形のコピーを垂直に拡大する量。</param>
      <returns>拡大された RectangleD。</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Intersect(C1.C1Preview.RectangleD,C1.C1Preview.RectangleD)">
      <summary>２つの四角形の共通部分を表す RectangleD 構造体を返します。</summary>
      <param name="a">共通部分を求める四角形。</param>
      <param name="b">共通部分を求める四角形。</param>
      <returns>指定された２つの四角形が重なる領域を表す３番目の RectangleD 構造体。</returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.Union(C1.C1Preview.RectangleD,C1.C1Preview.RectangleD)">
      <summary>１つの結合部分を形成する２つの四角形の両方を含む最小の３番目の四角形を作成します。</summary>
      <param name="a">結合する四角形。</param>
      <param name="b">結合する四角形。</param>
      <returns>結合部分を形成する２つの四角形の両方を含む３番目の RectangleD 構造体。</returns>
    </member>
    <member name="P:C1.C1Preview.RectangleD.X">
      <summary>この RectangleD 構造体の左上隅の x 座標を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Y">
      <summary>この RectangleD 構造体の左上隅の y 座標を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Width">
      <summary>この RectangleD 構造体の幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Height">
      <summary>この RectangleD 構造体の高さを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Left">
      <summary>この RectangleD 構造体の左端の x 座標を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Top">
      <summary>この RectangleD 構造体の上端の y 座標を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Right">
      <summary>この RectangleD 構造体の右端の x 座標を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Bottom">
      <summary>この RectangleD 構造体の下端の y 座標を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Location">
      <summary>この RectangleD 構造体の左上隅の座標を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Size">
      <summary>この RectangleD のサイズを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.IsEmpty">
      <summary>この RectangleD の Width または Height プロパティが０かどうかをテストします。</summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.TopLeft">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RectangleD" />構造体の左上隅の座標を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.TopRight">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RectangleD" />構造体の右上端の座標を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.BottomRight">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RectangleD" />構造体の右下隅の座標を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.BottomLeft">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.RectangleD" />構造体の左下隅の座標を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.RectangleD.Empty">
      <summary>メンバが初期化されていない RectangleD クラスのインスタンスを表します。</summary>
    </member>
    <member name="T:C1.C1Preview.RectangleD.TypeConverter">
      <summary>
        <see cref="T:C1.C1Preview.RectangleD" />のタイプコンバータを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RectangleD.TypeConverter.ObjFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>
        文字列を
        <see cref="T:C1.C1Preview.RectangleD" />に変換します。
      </summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="str">変換する文字列。</param>
      <returns>
        変換された
        <see cref="T:C1.C1Preview.RectangleD" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RectangleD.TypeConverter.StringFromObj(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>
        <see cref="T:C1.C1Preview.RectangleD" />を文字列に変換します。
      </summary>
      <param name="context">
        書式コンテキストを提供する
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。
      </param>
      <param name="o">
        変換する
        <see cref="T:C1.C1Preview.RectangleD" />。
      </param>
      <returns>
        <see cref="T:C1.C1Preview.RectangleD" />を表す文字列。
      </returns>
    </member>
    <member name="T:C1.C1Preview.PageDrawParams">
      <summary>
        <see cref="T:C1.C1Preview.C1Page" />を表すメタファイルの生成に使用されるパラメータを定義します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.PageDrawParams.Whiten">
      <summary>描画する前にページを白色で塗りつぶすかどうかを示します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageDrawParams.RenderInputControls">
      <summary>
        入力コントロールを描画するかどうかを示します（
        <see cref="T:C1.C1Preview.RenderInputBase" />を参照）。
      </summary>
    </member>
    <member name="P:C1.C1Preview.PageDrawParams.UseGdiToDrawLinesWhenPossible">
      <summary>線の描画に GDI 関数を使用するかどうかを示します。 この場合 PDF エクスポートのほうがより効果的です。</summary>
    </member>
    <member name="P:C1.C1Preview.PageDrawParams.WriteMetafileComments">
      <summary>ページの描画時にメタファイルのコメントを使用できるかどうかを示します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageDrawParams.EmfType">
      <summary>メタファイルのタイプを指定します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageDrawParams.SmoothingMode">
      <summary>描画に使用されるスムージングモード。</summary>
    </member>
    <member name="T:C1.C1Preview.C1Page">
      <summary>ドキュメントの生成されたページを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.C1Page.Draw(System.Drawing.Graphics,C1.C1Preview.PageDrawParams)">
      <summary>
        現在のページを
        <see cref="T:System.Drawing.Graphics" />上に描画します。
      </summary>
      <param name="graphics">
        描画先の
        <see cref="T:System.Drawing.Graphics" />。
      </param>
      <param name="pdp">描画パラメータ。</param>
    </member>
    <member name="M:C1.C1Preview.C1Page.Draw(System.Drawing.Graphics,System.Boolean,System.Boolean)">
      <summary>
        現在のページを
        <see cref="T:System.Drawing.Graphics" />上に描画します。
      </summary>
      <param name="graphics">
        描画先の
        <see cref="T:System.Drawing.Graphics" />。
      </param>
      <param name="renderInputControls">
        入力コントロールを描画するかどうかを示します（
        <see cref="T:C1.C1Preview.RenderInputBase" />を参照）。
      </param>
      <param name="writeMetafileComments">アウトラインやハイパーリンクなどのメタファイルコメントを描画するかどうかを示します。</param>
    </member>
    <member name="M:C1.C1Preview.C1Page.Draw(System.Drawing.Graphics,System.Boolean)">
      <summary>ページイメージを Graphics オブジェクトに描画します。</summary>
      <param name="graphics">描画する Graphics オブジェクト。</param>
      <param name="renderInputControls">入力コントロールを描画するかどうか。</param>
    </member>
    <member name="M:C1.C1Preview.C1Page.AsMetafile">
      <summary>ページイメージをメタファイル画像形式で取得します。</summary>
      <returns>メタファイル画像。</returns>
      <seealso cref="M:C1.C1Preview.C1Page.AsMetafile(System.Drawing.Graphics,System.Drawing.Imaging.EmfType,System.Boolean,System.Boolean)" />
    </member>
    <member name="M:C1.C1Preview.C1Page.AsMetafile(System.Boolean)">
      <summary>ページイメージをメタファイル画像形式で取得します。</summary>
      <param name="renderInputControls">入力コントロールを描画するかどうか。</param>
      <returns>メタファイル画像。</returns>
      <seealso cref="M:C1.C1Preview.C1Page.AsMetafile(System.Drawing.Graphics,System.Drawing.Imaging.EmfType,System.Boolean,System.Boolean)" />
    </member>
    <member name="M:C1.C1Preview.C1Page.AsMetafile(System.Drawing.Imaging.EmfType,System.Boolean)">
      <summary>ページイメージをメタファイル画像形式で取得します。</summary>
      <param name="emfType">EMF 形式。</param>
      <param name="whiten">描画する前にページを白色で塗りつぶすかどうかを示します。</param>
      <returns>メタファイル画像。</returns>
    </member>
    <member name="M:C1.C1Preview.C1Page.AsMetafile(System.Drawing.Graphics,System.Drawing.Imaging.EmfType,System.Boolean,System.Boolean)">
      <summary>
        現在のページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />を返します。
      </summary>
      <param name="referenceGraphics">メタファイルの参照グラフィックスを指定します。</param>
      <param name="emfType">メタファイルタイプを指定します。</param>
      <param name="whiten">描画する前にページを白色で塗りつぶすかどうかを示します。</param>
      <param name="renderInputControls">
        入力コントロールを描画するかどうかを示します（
        <see cref="T:C1.C1Preview.RenderInputBase" />を参照）。
      </param>
      <returns>
        現在のページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1Page.AsMetafile(System.Drawing.Graphics,System.Drawing.Imaging.EmfType,System.Boolean,System.Boolean,System.Drawing.Drawing2D.SmoothingMode)">
      <summary>
        現在のページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />を返します。
      </summary>
      <param name="referenceGraphics">メタファイルの参照グラフィックスを指定します。</param>
      <param name="emfType">メタファイルタイプを指定します。</param>
      <param name="whiten">描画する前にページを白色で塗りつぶすかどうかを示します。</param>
      <param name="renderInputControls">
        入力コントロールを描画するかどうかを示します（
        <see cref="T:C1.C1Preview.RenderInputBase" />を参照）。
      </param>
      <param name="smoothingMode">描画に使用されるスムージングモード。</param>
      <returns>
        現在のページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1Page.AsMetafile(System.Drawing.Graphics,C1.C1Preview.PageDrawParams)">
      <summary>
        現在のページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />を返します。
      </summary>
      <param name="referenceGraphics">メタファイルの参照グラフィックス。</param>
      <param name="pdp">メタファイルの描画に使用するパラメータ。</param>
      <returns>
        現在のページを表す
        <see cref="T:System.Drawing.Imaging.Metafile" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1Page.FindHyperlink(C1.C1Preview.PointD)">
      <summary>現在のページ上の指定した位置のハイパーリンクを検索します。</summary>
      <param name="ptPage">
        現在のページ上の位置（
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位）。
      </param>
      <returns>
        リンクに関する情報を含む
        <see cref="T:C1.C1Preview.C1HyperlinkInfo" />オブジェクト。何も見つからなかった場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1Page.FindFragment(C1.C1Preview.PointD)">
      <summary>ページ内の座標を指定して RenderFragment オブジェクトを検索します。</summary>
      <param name="ptPage">
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位で指定されるページ内の座標。
      </param>
      <returns>検索された RenderFragment オブジェクトまたは null を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.C1Page.GetHyperlinks">
      <summary>現在のページ上のすべてのハイパーリンクのコレクションを取得します。</summary>
      <returns>
        ハイパーリンクに関する情報を含む
        <see cref="T:C1.C1Preview.C1HyperlinkInfoCollection" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1Page.GetInputFragments(System.Boolean)">
      <summary>このページ内の RenderInputFragments オブジェクトのリストを取得します。</summary>
      <returns>RenderInputFragment オブジェクトのリストを含む配列を返します。</returns>
    </member>
    <member name="P:C1.C1Preview.C1Page.ID">
      <summary>現在のページに関連付けられている一意の ID を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.Owner">
      <summary>
        現在のページを含む
        <see cref="T:C1.C1Preview.C1PageCollection" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.AcceptButton">
      <summary>
        現在のページの承諾ボタンを表す
        <see cref="T:C1.C1Preview.RenderInputButton" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.X">
      <summary>ドキュメントの現在のページの論理水平座標を取得します。 水平方向のページを含まないドキュメントでは、このプロパティは 0 です。</summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.Y">
      <summary>ドキュメントの現在のページの論理垂直座標を取得します。 水平方向のページを含まないドキュメントでは、このプロパティは ページ番号 ｰ1 に対応します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.ResolvedInfo">
      <summary>
        現在のページに対応する
        <see cref="T:C1.C1Preview.PageResolvedInfo" />オブジェクトを取得します。 現在のページが解決された後、このプロパティはページのジオメトリ、マージン、 および列を記述する絶対値を取り出すことを許可します。
        <para>
          現在のページがまだ解決されていない場合は、このプロパティの値が
          <b>null</b>であるため、ネストしたプロパティにアクセスする前に 常にそれをテストする必要があることに注意してください。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.PageSettings">
      <summary>
        現在のページの
        <see cref="T:C1.C1Preview.C1PageSettings" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.PageNo">
      <summary>ページ番号を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.PageCount">
      <summary>論理ページ数を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.Document">
      <summary>
        現在のページを含む
        <see cref="T:C1.C1Preview.C1PrintDocument" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.HasFragments">
      <summary>
        現在のページの
        <see cref="P:C1.C1Preview.C1Page.Fragments" />コレクションが初期化されて １つまたは複数の要素を含むかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.Fragments">
      <summary>
        現在のページのフラグメントのコレクションを取得します。 このプロパティにアクセスすると常に、
        <b>Fragments</b>コレクションがまだ初期化されていない場合は 初期化されることに注意してください。
        <see cref="P:C1.C1Preview.C1Page.HasFragments" />を使って、
        <b>Fragments</b>コレクションが存在するかどうかをテストします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.Index">
      <summary>コレクション内のページのインデックスを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1Page.IsEmpty">
      <summary>ページが空（document.Body からのフラグメントがない）かどうかを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.C1PageCollection">
      <summary>
        <see cref="T:C1.C1Preview.C1Page" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1PageCollection.Find(System.Int32,System.Int32)">
      <summary>論理座標を指定してページを検索します。</summary>
      <param name="pageX">ページの X 論理座標を示します。</param>
      <param name="pageY">ページの Y 論理座標を示します。</param>
      <returns>検索された Page オブジェクトまたは null を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageCollection.Find(System.Int32)">
      <summary>ページ番号を指定してページを検索します。</summary>
      <param name="pageNo">論理ページ番号を指定します。</param>
      <returns>検索された Page オブジェクトまたは null を返します。</returns>
    </member>
    <member name="M:C1.C1Preview.C1PageCollection.RemoveAt(System.Int32)">
      <summary>指定したインデックスを持つページをコレクションから削除します。</summary>
      <param name="index">削除するページのインデックス。</param>
    </member>
    <member name="P:C1.C1Preview.C1PageCollection.Document">
      <summary>このページのコレクションを含む C1Preview オブジェクト。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得または設定します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>指定されたインデックスの要素。</returns>
    </member>
    <member name="P:C1.C1Preview.C1PageCollection.MinPageNo">
      <summary>ページ番号の最小値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageCollection.MaxPageNo">
      <summary>ページ番号の最大値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageCollection.MaxPageX">
      <summary>現在のコレクションの最大論理水平ページ座標を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageCollection.MaxPageY">
      <summary>現在のコレクションの最大論理垂直ページ座標を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1PageCollection.Count">
      <summary>コレクション内の要素の数を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.DataBindingModeEnum">
      <summary>データ連結モードを定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBindingModeEnum.None">
      <summary>オブジェクトはデータ連結されていません。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBindingModeEnum.List">
      <summary>オブジェクトは、DataBinding プロパティを介して有効なデータソースに連結されていません。</summary>
    </member>
    <member name="F:C1.C1Preview.DataBindingModeEnum.Internal">
      <summary>オブジェクトのいくつかの内部パーツがデータ連結されています。たとえば、RenderTable 内の行のグループがデータ連結されています。</summary>
    </member>
    <member name="T:C1.C1Preview.CalculatedValuesHashtable">
      <summary>
        <para>これは内部使用専用です。</para>計算された（オプションでデータ依存の）値の
        <see cref="T:C1.C1Preview.PropsHashtable`1" />を表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.CalculatedValuesHashtable.ClearDataIndependentValues">
      <summary>
        データ依存でない現在の
        <see cref="T:C1.C1Preview.CalculatedValuesHashtable" />値をクリアします。
      </summary>
    </member>
    <member name="M:C1.C1Preview.CalculatedValuesHashtable.DeletePropValue(System.Int32)">
      <summary>プロパティ値を削除します。</summary>
      <param name="propKey">プロパティキー。</param>
    </member>
    <member name="M:C1.C1Preview.CalculatedValuesHashtable.SetPropValue(System.Int32,System.Object,System.Boolean)">
      <summary>プロパティ値を設定します。</summary>
      <param name="propKey">プロパティキー。</param>
      <param name="value">プロパティ値。</param>
      <param name="dataDependent">
        値がデータ依存の場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </param>
    </member>
    <member name="M:C1.C1Preview.CalculatedValuesHashtable.IsDataDependent(System.Int32)">
      <summary>プロパティがデータ依存かどうかをテストします。</summary>
      <param name="propKey">プロパティキー。</param>
      <returns>
        プロパティがデータ依存の場合は
        <b>true</b>、その他の場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="T:C1.C1Preview.RenderFragmentCollection">
      <summary>
        <see cref="T:C1.C1Preview.RenderFragment" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderFragmentCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>現在のコレクションの要素が設定されようとするときに呼び出されます。</summary>
      <param name="index">要素のインデックス。</param>
      <param name="oldValue">要素の古い値。</param>
      <param name="newValue">要素の新しい値。</param>
    </member>
    <member name="M:C1.C1Preview.RenderFragmentCollection.FindByObject(C1.C1Preview.RenderObject,System.Boolean)">
      <summary>
        指定の
        <see cref="T:C1.C1Preview.RenderObject" />によって生成された現在のコレクション内の
        <see cref="T:C1.C1Preview.RenderFragment" />を検索します。
      </summary>
      <param name="ro">検索する描画オブジェクト。</param>
      <param name="findInChildren">
        true の場合、このコレクションに含まれるオブジェクトの
        <see cref="P:C1.C1Preview.RenderFragment.Children" />コレクションからもフラグメントを検索します。
      </param>
      <returns>
        <paramref name="ro" />によって生成されたフラグメント。見つからなかった場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragmentCollection.IndexOf(C1.C1Preview.RenderFragment)">
      <summary>
        現在のコレクション内の
        <see cref="T:C1.C1Preview.RenderFragment" />のインデックスを取得します。
      </summary>
      <param name="rf">取得するインデックスのフラグメント。</param>
      <returns>指定したフラグメントのインデックス。</returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragmentCollection.FindByObject(C1.C1Preview.RenderObject)">
      <summary>
        指定の
        <see cref="T:C1.C1Preview.RenderObject" />によって生成された現在のコレクション内の
        <see cref="T:C1.C1Preview.RenderFragment" />を検索します。
      </summary>
      <param name="ro">検索する描画オブジェクト。</param>
      <returns>
        <paramref name="ro" />によって生成されたフラグメント。見つからなかった場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragmentCollection.FindByObjectName(System.String)">
      <summary>
        指定した
        <see cref="P:C1.C1Preview.RenderObject.Name" />を持つ
        <see cref="T:C1.C1Preview.RenderObject" />によって生成された 現在のコレクション内の
        <see cref="T:C1.C1Preview.RenderFragment" />を検索します。
      </summary>
      <param name="renderObjectName">検索する名前。</param>
      <returns>
        指定した名前を持つオブジェクトによって生成されたフラグメント。見つからなかった場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragmentCollection.FindByObjectId(System.Int32)">
      <summary>
        指定した
        <see cref="P:C1.C1Preview.RenderObject.Id" />を持つ
        <see cref="T:C1.C1Preview.RenderObject" />によって生成された 現在のコレクション内の
        <see cref="T:C1.C1Preview.RenderFragment" />を検索します。
      </summary>
      <param name="renderObjectId">
        検索する
        <see cref="P:C1.C1Preview.RenderObject.Id" />。
      </param>
      <returns>
        指定した ID を持つオブジェクトによって生成されたフラグメント。見つからなかった場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderFragmentCollection.Insert(System.Int32,C1.C1Preview.RenderFragment)">
      <summary>
        <see cref="T:C1.C1Preview.RenderFragment" />を現在のコレクション内の 指定したインデックスに挿入します。
      </summary>
      <param name="index">フラグメントの挿入先のインデックス。</param>
      <param name="rf">挿入するフラグメント。</param>
    </member>
    <member name="P:C1.C1Preview.RenderFragmentCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>指定したインデックスの要素。</returns>
    </member>
    <member name="T:C1.C1Preview.RenderObjectList">
      <summary>
        <see cref="T:C1.C1Preview.RenderObject" />オブジェクトの単純な
        <see cref="T:System.Collections.Generic.List`1" />を表します。 このリストを使って、データバインディングによって生成されたオブジェクトのコピーを格納します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.DrawingFlagsEnum">
      <summary>
        <para>これは内部使用専用です。</para>描画オブジェクトがその描画方法を管理できるフラグ。
      </summary>
    </member>
    <member name="F:C1.C1Preview.DrawingFlagsEnum.None">
      <summary>フラグなし。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawingFlagsEnum.UseGdiDrawing">
      <summary>
        GDI が描画に使用されます。この場合、オブジェクトはメソッドをオーバーライドする必要があります。
        <code>
          <![CDATA[
          protected virtual void InternalDraw(GraphicsUtils.GdiDc dc,
            RectangleD boundsRect, 
            RectangleD drawingBoundsRect);
          ]]>
        </code>
        このフラグが指定されない場合、GDI+ が代わりに使用され、オブジェクトはメソッドをオーバーライドする必要があります。
        <code>
          <![CDATA[
          protected virtual void InternalDraw(Graphics graphics, 
            RectangleD boundsRect, 
            RectangleD drawingBoundsRect);
          ]]>
        </code>
      </summary>
    </member>
    <member name="F:C1.C1Preview.DrawingFlagsEnum.SetClipping">
      <summary>描画する前にクリッピングを定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawingFlagsEnum.ContentIsEmpty">
      <summary>指定された場合、オブジェクトは描画されません。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawingFlagsEnum.OwnsChildDrawing">
      <summary>子オブジェクトの標準描画が抑制されます。このオブジェクトはその子自身を描画する必要があります。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawingFlagsEnum.BeginHyperlink">
      <summary>フラグメントの前後に、コンテンツがハイパーリンクであることを指定する 特別なコメントフィールドがメタファイルに追加されます。</summary>
    </member>
    <member name="T:C1.C1Preview.SplitPos">
      <summary>
        <para>これは内部使用専用です。</para>分割位置を記述します。
      </summary>
    </member>
    <member name="F:C1.C1Preview.SplitPos.Pos">
      <summary>オブジェクトの上辺または左辺に相対的なオブジェクト内の位置。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitPos.SpaceForHardBreak">
      <summary>
        <see cref="F:C1.C1Preview.SplitPos.HardBreak" />が
        <b>true</b>の場合にオブジェクトに使用可能な
        <see cref="F:C1.C1Preview.SplitPos.Pos" />の
        <b>後</b>スペース。
      </summary>
    </member>
    <member name="F:C1.C1Preview.SplitPos.HardBreak">
      <summary>
        区切りが「ハード」、すなわちオブジェクトを
        <see cref="F:C1.C1Preview.SplitPos.Pos" />上で正確に分割する必要があることを示します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.SplitPos.#ctor(System.Double,System.Boolean,System.Double)">
      <summary>
        <see cref="T:C1.C1Preview.SplitPos" />構造体の新しいインスタンスを初期化します。
      </summary>
      <param name="pos">
        <see cref="F:C1.C1Preview.SplitPos.Pos" />に割り当てる値。
      </param>
      <param name="hardBreak">
        <see cref="F:C1.C1Preview.SplitPos.HardBreak" />に割り当てる値。
      </param>
      <param name="spaceForHardBreak">
        <see cref="F:C1.C1Preview.SplitPos.SpaceForHardBreak" />に割り当てる値。
      </param>
    </member>
    <member name="T:C1.C1Preview.DrawParams">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.DrawingFlags">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.BoundsPx">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.ParentContentBoundsPx">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.InnerPx">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.PaddingPx">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.BordersPx">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.SpacingPx">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.DrawInnerPx">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.BackgroundPx">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.BordersOffsetsPx">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.BorderClip">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.ContentClip">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.ChildrenClip">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.BackgroundClip">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.BorderClipRegion">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.BorderPath">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.DrawParams.PageDrawParams">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.DrawParams.CalcContentClip(System.Boolean,System.Drawing.Rectangle@)">
      <summary>これは内部使用専用です。</summary>
      <param name="applyInnerAreaClip">true は、コンテンツを InnerPx でクリップすることを意味します（RenderObject.Clip が true または画像として分割された断片）。</param>
      <param name="contentClip">クリッピング矩形。</param>
      <returns>コンテンツが可視で描画の必要がある場合は true を返します。</returns>
    </member>
    <member name="P:C1.C1Preview.DrawParams.SplitAsPicture">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.DrawParams.BordersVisible">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.DrawParams.BackgroundVisible">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.DrawParams.ContentVisible">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.DrawParams.ChildrenVisible">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.DrawParams.RenderInputControls">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.DrawParams.RenderChildren">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="P:C1.C1Preview.DrawParams.WriteMetafileComments">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.SplitContext">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitContext.ColumnStarted">
      <summary>この列が分割時に開始することを示します。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitContext.IsPageAreaEmpty">
      <summary>新しいページ領域が分割時に開始され、オブジェクトの最大スペースが現在使用可能です。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitContext.CurPageArea">
      <summary>オブジェクトが配置される現在のページ領域。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitContext.CurLeft">
      <summary>オブジェクトが配置される CurPageArea 上のポイントの X 座標。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitContext.CurTop">
      <summary>オブジェクトが配置される CurPageArea 上のポイントの Y 座標。</summary>
    </member>
    <member name="F:C1.C1Preview.SplitContext.SaveResolvedInfo">
      <summary>オブジェクトの保存済みの解決された情報を含みます。</summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.CountOfSplitNewPage">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.SplitContext.ContainsSplitIfLarge">
      <summary>SplitIfLarge オプションで新しく追加されたオブジェクトが存在する場合は true を返します。</summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.ContainsSplitNewPage">
      <summary>SplitNewPage オプションで新しく追加されたオブジェクトが存在する場合は true を返します。</summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.ResetSplitIfLarge">
      <summary>SplitIfLarge オプションを持つすべてのオブジェクトを処理済みとしてマークします。</summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.ResetSplitNewPage">
      <summary>SplitNewPage オプションを持つすべてのオブジェクトを処理済みとしてマークします。</summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.IsAllSplitIfLargeFitVert(C1.C1Preview.RenderFragment,C1.C1Preview.PageAreaBase,System.Double,C1.C1Preview.Utils.FC)">
      <summary>SplitIfLarge オプションを持つすべての新しく追加されたフラグメントを調べて、 垂直方向に合わせられているかどうかを確認します。 Top は、オブジェクトの上境界を定義して、pageArea.Bounds.Bottom の代わりに使用されます。</summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.IsAllSplitIfLargeFitHorz(C1.C1Preview.RenderFragment,C1.C1Preview.PageAreaBase,System.Double,C1.C1Preview.Utils.FC)">
      <summary>SplitIfLarge オプションを持つすべての新しく追加されたフラグメントを調べて、 それらが水平方向に合わせられているかどうかを確認します。 Left は、オブジェクトの左境界を定義して、pageArea.Bounds.Left の代わりに使用されます。</summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.IsSplitIfLarge(C1.C1Preview.ISplitBehaviorObject)">
      <summary>オブジェクトが新しく追加されて SplitIfLarge オプションを持っている場合は true を返します。</summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.IsSplitNewPage(C1.C1Preview.ISplitBehaviorObject)">
      <summary>オブジェクトが新しく追加されて SplitNewPage オプションを持っている場合は true を返します。</summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.IsProcessed(C1.C1Preview.ISplitBehaviorObject)">
      <summary>オブジェクトが SplitIfLarge オプションを持ち、処理済みとしてマークされた場合は true を返します。</summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.AddAsSplitIfLarge(C1.C1Preview.ISplitBehaviorObject)">
      <summary>これは内部使用専用です。</summary>
      <param name="sbo"></param>
    </member>
    <member name="M:C1.C1Preview.SplitContext.AddAsSplitNewPage(C1.C1Preview.ISplitBehaviorObject)">
      <summary>これは内部使用専用です。</summary>
      <param name="sbo"></param>
    </member>
    <member name="M:C1.C1Preview.SplitContext.AddAsProcessed(C1.C1Preview.ISplitBehaviorObject)">
      <summary>これは内部使用専用です。</summary>
      <param name="sbo"></param>
    </member>
    <member name="M:C1.C1Preview.SplitContext.ResetSplit">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.SplitContext.GetSplitPos(C1.C1Preview.SplitPos@,System.Double,C1.C1Preview.Utils.FC)">
      <summary>これは内部使用専用です。</summary>
      <param name="pos"></param>
      <param name="maxPossibleSplitPos"></param>
      <param name="FC"></param>
    </member>
    <member name="T:C1.C1Preview.TextSplitParams">
      <summary>これは内部使用専用です。 テキストオブジェクト（RenderText、RenderParagraph、および RenderRichText）の分割パラメータを定義します。</summary>
    </member>
    <member name="F:C1.C1Preview.TextSplitParams.AllCharsFitted">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TextSplitParams.IsNewParagraph">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.TextSplitParams.FittedCharCount">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.TextSplitParams.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.TextSplitParams" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.TextSplitParams.AssignFrom(C1.C1Preview.SplitParams)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.SplitParams" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="T:C1.C1Preview.RenderImageFragment">
      <summary>RenderImage オブジェクトのフラグメントを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.RenderImageFragment.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="P:C1.C1Preview.RenderImageFragment.RenderObject" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderImageFragment" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderImageFragment" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderImageFragment.GetContentAutoWidth(System.Double,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="height"></param>
      <param name="width"></param>
    </member>
    <member name="M:C1.C1Preview.RenderImageFragment.GetContentAutoHeight(System.Double,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.RenderImageFragment.GetContentAutoSize(System.Double@,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.RenderImageFragment.GetDrawingFlags(System.Boolean)">
      <summary>これは内部使用専用です。</summary>
      <param name="renderInputControls"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderImageFragment.InternalDraw(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="graphics"></param>
      <param name="drawParams"></param>
    </member>
    <member name="P:C1.C1Preview.RenderImageFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderImage" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.RenderRichTextFragment">
      <summary>
        解決された
        <see cref="T:C1.C1Preview.C1PrintDocument" />内の
        <see cref="T:C1.C1Preview.RenderRichText" />のフラグメントを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="P:C1.C1Preview.RenderRichTextFragment.RenderObject" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderRichTextFragment" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderRichTextFragment" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.GetContentAutoHeight(System.Double,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.GetDrawingFlags(System.Boolean)">
      <summary>これは内部使用専用です。</summary>
      <param name="renderInputControls"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.InternalDraw(C1.C1Preview.GraphicsUtils.GdiDc,C1.C1Preview.DrawParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="dc"></param>
      <param name="drawParams"></param>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.CreateSplitParams">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.FindVertSplitPosContent(C1.C1Preview.SplitParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="p"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.GetVertSplits(System.Collections.Generic.List{System.Double})">
      <summary>これは内部使用専用です。</summary>
      <param name="splits"></param>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.SplitHorzContent(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="newFragment"></param>
      <param name="p"></param>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.SplitVertContent(C1.C1Preview.RenderFragment,C1.C1Preview.SplitParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="newFragment"></param>
      <param name="p"></param>
    </member>
    <member name="M:C1.C1Preview.RenderRichTextFragment.AssignFrom(C1.C1Preview.RenderFragment)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.RenderFragment" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.RenderRichTextFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderRichText" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.TextResolvedInfo">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.TextResolvedInfo.#ctor(C1.C1Preview.IResolvedInfoOwner)">
      <summary>これは内部使用専用です。</summary>
      <param name="owner"></param>
    </member>
    <member name="T:C1.C1Preview.PageResolvedInfo">
      <summary>
        実際の絶対ページサイズ、絶対マージン値など、解決された
        <see cref="T:C1.C1Preview.C1Page" />に関する情報の取り出しを可能にする プロパティを提供します。 このクラスによって提供されたすべてのサイズと長さ値は絶対値で、
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />で表されます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.PageResolvedInfo.Page">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.PageResolvedInfo" />に関連付けられた
        <see cref="T:C1.C1Preview.C1Page" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.PageResolvedInfo.PageSize">
      <summary>
        マージンを含む現在のページの合計サイズ（すなわち「用紙サイズ」）を
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位で取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.PageResolvedInfo.PageBounds">
      <summary>
        ページの左上隅に相対的なマージン内の現在のページの領域を
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位で 取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.PageResolvedInfo.PageMargins">
      <summary>
        現在のページマージンを
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位で取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.PageResolvedInfo.ColumnCount">
      <summary>現在のページの列数を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageResolvedInfo.ColumnBounds">
      <summary>
        現在のページ上の列境界を指定する
        <see cref="T:C1.C1Preview.RectangleD" />値の配列を
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位で 取得します。 列境界は、ページマージン、ページヘッダー／フッター領域、 および列間のギャップを含みません。
      </summary>
    </member>
    <member name="P:C1.C1Preview.PageResolvedInfo.PageHeaderBounds">
      <summary>
        現在のページ上のヘッダー領域の境界を
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位で取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.PageResolvedInfo.PageFooterBounds">
      <summary>
        現在のページ上のフッター領域の境界を
        <see cref="P:C1.C1Preview.C1PrintDocument.ResolvedUnit" />単位で取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.PageAreaBase">
      <summary>ページ領域を表すための抽象基本クラス。</summary>
    </member>
    <member name="P:C1.C1Preview.PageAreaBase.Page">
      <summary>
        これは内部使用専用です。 解決中にこの
        <see cref="T:C1.C1Preview.PageAreaBase" />が生成された
        <see cref="T:C1.C1Preview.C1Page" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.PageAreaBase.Document">
      <summary>このオブジェクトを含む C1Preview オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageAreaBase.Bounds">
      <summary>ページ内のページ領域の境界を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.PageArea">
      <summary>ページ領域を表すための抽象基本クラス。</summary>
    </member>
    <member name="P:C1.C1Preview.PageArea.ColumnCount">
      <summary>ページのこの部分の列の数を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageArea.Item(System.Int32)">
      <summary>インデックスに基づいて列を列挙します。</summary>
      <param name="index">列のインデックス。</param>
      <returns>指定されたインデックスの列を表す PageColumn オブジェクトを返します。</returns>
    </member>
    <member name="T:C1.C1Preview.ChildPageArea">
      <summary>解決されたページ領域の情報を表します。</summary>
    </member>
    <member name="M:C1.C1Preview.ChildPageArea.#ctor(C1.C1Preview.PageArea)">
      <summary>ChildPageArea クラスの新しいインスタンスを初期化します。</summary>
      <param name="parent">親ページ領域。</param>
    </member>
    <member name="P:C1.C1Preview.ChildPageArea.ResolvedPage">
      <summary>このオブジェクトを含む ResolvedPage オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.ChildPageArea.Page">
      <summary>このオブジェクトを含む C1Page オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.ChildPageArea.Parent">
      <summary>このオブジェクトを含む親 PageArea オブジェクトを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.ResolvedPage">
      <summary>ページの解決されたレイアウトを記述します。</summary>
    </member>
    <member name="M:C1.C1Preview.ResolvedPage.#ctor(C1.C1Preview.C1Page)">
      <summary>
        これは内部使用専用です。
        <see cref="T:C1.C1Preview.ResolvedPage" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="page">
        このオブジェクトが生成された解決中の
        <see cref="T:C1.C1Preview.C1Page" />オブジェクト。
      </param>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.Page">
      <summary>このオブジェクトを含む Page オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.Header">
      <summary>ページのヘッダーに関する解決された情報を表す PageAreaHeader オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.Footer">
      <summary>ページのフッターに関する解決された情報を表す PageAreaFooter オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.Body">
      <summary>ページの本体に関する解決された情報を表す PageAreaBody オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.FullWidth">
      <summary>ページの幅全体を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.ResolvedPage.FullHeight">
      <summary>ページの高さ全体を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.PageAreaBody">
      <summary>解決されたページ本体の情報を表します。</summary>
    </member>
    <member name="M:C1.C1Preview.PageAreaBody.#ctor(C1.C1Preview.PageArea)">
      <summary>
        <see cref="T:C1.C1Preview.PageAreaBody" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="parent">
        親の
        <see cref="T:C1.C1Preview.PageArea" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.PageAreaBody.IndexOfColumn(C1.C1Preview.PageColumn)">
      <summary>
        これは内部使用専用です。 指定した
        <see cref="T:C1.C1Preview.PageColumn" />オブジェクトのインデックスを返します。
      </summary>
      <param name="column">
        <see cref="T:C1.C1Preview.PageColumn" />オブジェクト。
      </param>
      <returns>
        <see cref="T:C1.C1Preview.PageColumn" />オブジェクトのインデックスを返します。
      </returns>
    </member>
    <member name="P:C1.C1Preview.PageAreaBody.ColumnCount">
      <summary>ページのこの部分の列の数を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageAreaBody.Item(System.Int32)">
      <summary>インデックスに基づいて列を列挙します。</summary>
      <param name="index">列のインデックス。</param>
      <returns>指定されたインデックスの列を表す PageColumn オブジェクトを返します。</returns>
    </member>
    <member name="T:C1.C1Preview.PageColumn">
      <summary>解決されたページ列の情報を表します。</summary>
    </member>
    <member name="M:C1.C1Preview.PageColumn.#ctor(C1.C1Preview.PageArea)">
      <summary>
        <see cref="T:C1.C1Preview.PageColumn" />オブジェクトの新しいインスタンスを初期化します。
      </summary>
      <param name="parent">
        親の
        <see cref="T:C1.C1Preview.PageArea" />オブジェクト。
      </param>
    </member>
    <member name="P:C1.C1Preview.PageColumn.Index">
      <summary>ページ部分の列のインデックス。</summary>
    </member>
    <member name="P:C1.C1Preview.PageColumn.Parent">
      <summary>
        これは内部使用専用です。 このオブジェクトを含む
        <see cref="T:C1.C1Preview.PageAreaBody" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.PageColumn.IsLast">
      <summary>現在の列が PageArea 内の最後の列であることを示します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageColumn.IsFirst">
      <summary>現在の列が PageArea 内の最初の列であることを示します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageColumn.Next">
      <summary>この列の後にある列を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.PageColumn.Prev">
      <summary>この列の前にある列を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.RefDim">
      <summary>
        内部。オブジェクトのディメンションを記述します。
        <para>Left、Top、Right、Bottom - ページ上の絶対座標。</para><para>RelLeft、RelTop、RelRight、RelBottom - 親内の相対座標。</para><para>ChildLeft、ChildTop、ChildRight、ChildBottom - 子オブジェクトの相対座標。 ChildLeft と ChildTop は常に 0。 ChildRight = Width - SpacingLeft - SpacingRight - PaddingLeft - PaddingRight - BordersLeft - BordersRight</para><para>Width、Height - オブジェクトのサイズ。</para><para>ChildWidth、ChildHeight - 子オブジェクトのサイズ。例：ChildWidth は Width - （SpacingLeft + BorderLeft + PaddingLeft） - （SpacingRight + BorderRight + PaddingRight）。</para>
      </summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.None">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Left">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Top">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Right">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Bottom">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.RelLeft">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.RelTop">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.RelRight">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.RelBottom">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.ChildLeft">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.ChildTop">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.ChildRight">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.ChildBottom">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Width">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Height">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.ChildWidth">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.ChildHeight">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.SpacingLeft">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.SpacingTop">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.SpacingRight">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.SpacingBottom">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.BorderLeft">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.BorderTop">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.BorderRight">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.BorderBottom">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.PaddingLeft">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.PaddingTop">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.PaddingRight">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.PaddingBottom">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.AutoWidth">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.AutoHeight">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.RadiusX">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.RadiusY">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Borders">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Spacing">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Padding">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Offsets">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.AbsCoord">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.RelCoord">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.ChildCoord">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.LeftCoord">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.TopCoord">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.RightCoord">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.BottomCoord">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Coord">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.Size">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.WidthDim">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="F:C1.C1Preview.RefDim.HeightDim">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="T:C1.C1Preview.UsageInfo">
      <summary>
        ドキュメントが最後に生成または印刷された日付および時刻などの
        <see cref="T:C1.C1Preview.C1PrintDocument" />の使用に関する情報を表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.UsageInfo.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.UsageInfo" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.UsageInfo.AssignFrom(C1.C1Preview.UsageInfo)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.UsageInfo" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.UsageInfo.Clone">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.UsageInfo" />オブジェクトのコピーを作成します。
      </summary>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.UsageInfo" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.UsageInfo.Clear">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.UsageInfo" />に格納されたすべてのデータをクリアします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.UsageInfo.GeneratedDateTime">
      <summary>ドキュメントが生成された日付および時刻を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.UsageInfo.PrintedDateTime">
      <summary>ドキュメントが印刷された日付および時刻を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.UsageInfo.LastPrinterName">
      <summary>ドキュメントが最後に印刷されたプリンタの名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.UsageInfo.LastFileName">
      <summary>ドキュメントの保存またはロードに最後に使用されたファイル名を取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.C1MetafileInfo">
      <summary>
        <para>これは内部使用専用です。</para>
        <see cref="T:C1.C1Preview.C1PrintDocument" />で作成されたメタファイルに関する追加情報を含みます。 メタファイルでは、情報は GDI コメントレコードとして格納されます。 レコードの形式は
        <see cref="T:C1.Util.Win.Win32.EMR_C1_METAFILE_INFO" />構造体で記述されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfo.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.C1MetafileInfo" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfo.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
      <summary>
        <see cref="T:C1.C1Preview.C1MetafileInfo" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="widthMm">メタファイルの幅（mm）。</param>
      <param name="heightMm">メタファイルの高さ（mm）。</param>
      <param name="dpiX">水平解像度（DPI）。</param>
      <param name="dpiY">垂直解像度（DPI）。</param>
      <param name="isPrinter">メタファイルがプリンタ DC 上で作成されたかどうかを示します。</param>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfo.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <see cref="T:C1.C1Preview.C1MetafileInfo" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="widthMm">メタファイルの幅（mm）。</param>
      <param name="heightMm">メタファイルの高さ（mm）。</param>
      <param name="dpiX">水平解像度（DPI）。</param>
      <param name="dpiY">垂直解像度（DPI）。</param>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfo.FromMetafileTag(System.String)">
      <summary>
        文字列としてシリアル化されたオブジェクトから
        <see cref="T:C1.C1Preview.C1MetafileInfo" />の新しいインスタンスを作成します。
      </summary>
      <param name="tag">
        前にシリアル化された
        <see cref="T:C1.C1Preview.C1MetafileInfo" />オブジェクト。
      </param>
      <returns>
        新しく作成された
        <see cref="T:C1.C1Preview.C1MetafileInfo" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfo.ToMetafileTag">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.C1MetafileInfo" />オブジェクトを文字列にシリアル化します。
      </summary>
      <returns>
        現在の
        <see cref="T:C1.C1Preview.C1MetafileInfo" />オブジェクトを表す文字列。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfo.WriteToMetafile(System.Drawing.Graphics)">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.C1MetafileInfo" />オブジェクトをメタファイルの
        <see cref="T:System.Drawing.Graphics" />に書き込みます。
      </summary>
      <param name="graphics">
        <see cref="T:System.Drawing.Imaging.Metafile" />から作成されるグラフィックス。
      </param>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfo.WriteToMetafile(System.IntPtr)">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.C1MetafileInfo" />オブジェクトをメタファイルのデバイスコンテキストに書き込みます。
      </summary>
      <param name="hdc">
        <see cref="T:System.Drawing.Imaging.Metafile" />から作成される DC。
      </param>
    </member>
    <member name="P:C1.C1Preview.C1MetafileInfo.WidthMm">
      <summary>メタファイルの幅を mm 単位で取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1MetafileInfo.HeightMm">
      <summary>メタファイルの高さを mm 単位で取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1MetafileInfo.DpiX">
      <summary>メタファイルの水平解像度（DPI）を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1MetafileInfo.DpiY">
      <summary>メタファイルの垂直解像度（DPI）を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1MetafileInfo.IsPrinter">
      <summary>メタファイルがプリンタ DC 上に作成されたかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1MetafileInfo.WidthPx">
      <summary>メタファイルの幅をデバイスピクセル単位で取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1MetafileInfo.HeightPx">
      <summary>メタファイルの高さをデバイスピクセル単位で取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1MetafileInfo.WidthPoints">
      <summary>メタファイルの幅をポイント単位で取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.C1MetafileInfo.HeightPoints">
      <summary>メタファイルの高さをポイント単位で取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Preview.C1MetafileInfoReader">
      <summary>
        <para>これは内部使用専用です。</para>メタファイルから
        <see cref="T:C1.C1Preview.C1MetafileInfo" />を読み取ることができるリーダを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfoReader.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.C1MetafileInfoReader" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfoReader.ReadMetafileInfo(System.Drawing.Imaging.Metafile)">
      <summary>
        前にシリアル化された
        <see cref="T:C1.C1Preview.C1MetafileInfo" />オブジェクトを含む GDI コメントレコードを検索するメタファイルを列挙します。このようなレコードが見つからない場合は、 新しい
        <see cref="T:C1.C1Preview.C1MetafileInfo" />オブジェクトを作成して、 このレコードをそのオブジェクトに逆シリアル化して返します。
      </summary>
      <param name="metafile">
        列挙する
        <see cref="T:System.Drawing.Imaging.Metafile" />。
      </param>
      <returns>
        逆シリアル化された
        <see cref="T:C1.C1Preview.C1MetafileInfo" />オブジェクト。見つからなかった場合は null。
      </returns>
    </member>
    <member name="M:C1.C1Preview.C1MetafileInfoReader.Dispose">
      <summary>現在のオブジェクトを破棄します。</summary>
    </member>
    <member name="T:C1.C1Preview.DocumentFont">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />で使用されるフォントを記述します （
        <see cref="P:C1.C1Preview.C1PrintDocument.FontHandling" />を参照）。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DocumentFont.AssignFrom(C1.C1Preview.DocumentFont)">
      <summary>
        別の
        <see cref="T:C1.C1Preview.DocumentFont" />からのプロパティを現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のソースオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.DocumentFont.Owner">
      <summary>
        現在のオブジェクトを含む
        <see cref="T:C1.C1Preview.DocumentFontCollection" />を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentFont.HasGlyphs">
      <summary>
        <see cref="P:C1.C1Preview.DocumentFont.Glyphs" />コレクションが空でないかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentFont.Glyphs">
      <summary>現在のフォントを使用してレンダリングされたグリフの配列を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.DocumentFont.HasCodeRanges">
      <summary>
        <see cref="P:C1.C1Preview.DocumentFont.CodeRanges" />コレクションが空でないかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentFont.CodeRanges">
      <summary>
        現在のフォントを使用してレンダリングされたグリフを定義する
        <see cref="P:C1.C1Preview.DocumentFont.CodeRanges" />コレクションを取得します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.DocumentFont.FontName">
      <summary>
        ユーザーによって指定されたフォント名を取得します。
        <para>フォントの置換によって自動的に作成されたフォントの場合、 これはまだ元の指定されたフォントの名前であり、 置換フォントの名前ではありません。</para>
      </summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.FontHandling" />
    </member>
    <member name="P:C1.C1Preview.DocumentFont.FontFileName">
      <summary>グリフのレンダリングに実際に使用される、システムにインストールされたか ドキュメントに埋め込まれているフォントファイルの名前を取得します。</summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.FontHandling" />
    </member>
    <member name="P:C1.C1Preview.DocumentFont.FontFamilyName">
      <summary>
        実際のフォントファミリ名を取得します。この名前は API 呼び出しで使って、 対応するフォントを作成できます。
        <para>
          <see cref="P:C1.C1Preview.C1PrintDocument.FontHandling" />が
          <see cref="F:C1.C1Preview.FontHandling.BuildActualDocumentFonts" />または
          <see cref="F:C1.C1Preview.FontHandling.EmbedActualFonts" />に設定されている場合、 この名前は
          <see cref="P:C1.C1Preview.DocumentFont.FontName" />と異なる場合があります。
        </para>
      </summary>
      <seealso cref="P:C1.C1Preview.C1PrintDocument.FontHandling" />
    </member>
    <member name="P:C1.C1Preview.DocumentFont.Bold">
      <summary>現在のフォントが太字かどうかを示す値を取得します。</summary>
      <seealso cref="P:C1.C1Preview.DocumentFont.Italic" />
      <seealso cref="P:C1.C1Preview.DocumentFont.FontStyle" />
      <seealso cref="P:C1.C1Preview.DocumentFont.CoreFontBold" />
    </member>
    <member name="P:C1.C1Preview.DocumentFont.Italic">
      <summary>現在のフォントが斜体かどうかを示す値を取得します。</summary>
      <seealso cref="P:C1.C1Preview.DocumentFont.Bold" />
      <seealso cref="P:C1.C1Preview.DocumentFont.FontStyle" />
      <seealso cref="P:C1.C1Preview.DocumentFont.CoreFontItalic" />
    </member>
    <member name="P:C1.C1Preview.DocumentFont.CoreFontBold">
      <summary>基底の物理的なフォントが太字かどうかを示す値を取得します。</summary>
      <seealso cref="P:C1.C1Preview.DocumentFont.Bold" />
    </member>
    <member name="P:C1.C1Preview.DocumentFont.CoreFontItalic">
      <summary>基底の物理的なフォントが斜体かどうかを示す値を取得します。</summary>
      <seealso cref="P:C1.C1Preview.DocumentFont.Italic" />
    </member>
    <member name="P:C1.C1Preview.DocumentFont.FontStyle">
      <summary>
        現在のフォントの
        <see cref="T:System.Drawing.FontStyle" />を取得します。
      </summary>
      <seealso cref="P:C1.C1Preview.DocumentFont.Bold" />
      <seealso cref="P:C1.C1Preview.DocumentFont.Italic" />
    </member>
    <member name="T:C1.C1Preview.DocumentFontCollection">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />で使用されるフォントを記述する
        <see cref="T:C1.C1Preview.DocumentFont" />オブジェクトのコレクションを表します。
        <para>
          このコレクションにフォントが読み込まれる時点と方法についての詳細は、
          <see cref="P:C1.C1Preview.C1PrintDocument.FontHandling" />を参照してください。
        </para>
      </summary>
    </member>
    <member name="M:C1.C1Preview.DocumentFontCollection.FindByName(System.String,System.Boolean,System.Boolean)">
      <summary>
        <see cref="P:C1.C1Preview.DocumentFont.FontName" />、
        <see cref="P:C1.C1Preview.DocumentFont.Bold" />、 および
        <see cref="P:C1.C1Preview.DocumentFont.Italic" />プロパティの 指定した値を持つコレクション内のフォントを検索します。
      </summary>
      <param name="fontName">
        検索する
        <see cref="P:C1.C1Preview.DocumentFont.FontName" />。
      </param>
      <param name="bold">
        検索する
        <see cref="P:C1.C1Preview.DocumentFont.Bold" />値。
      </param>
      <param name="italic">
        検索する
        <see cref="P:C1.C1Preview.DocumentFont.Italic" />値。
      </param>
      <returns>
        指定したプロパティを持つフォント、または
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DocumentFontCollection.FindByFamilyName(System.String,System.Boolean,System.Boolean)">
      <summary>
        <see cref="P:C1.C1Preview.DocumentFont.FontFamilyName" />、
        <see cref="P:C1.C1Preview.DocumentFont.Bold" />、 および
        <see cref="P:C1.C1Preview.DocumentFont.Italic" />プロパティの 指定した値を持つコレクション内のフォントを検索します。
      </summary>
      <param name="fontFamilyName">
        検索する
        <see cref="P:C1.C1Preview.DocumentFont.FontFamilyName" />。
      </param>
      <param name="bold">
        検索する
        <see cref="P:C1.C1Preview.DocumentFont.Bold" />値。
      </param>
      <param name="italic">
        検索する
        <see cref="P:C1.C1Preview.DocumentFont.Italic" />値。
      </param>
      <returns>
        指定したプロパティを持つフォント、または
        <b>null</b>。
      </returns>
    </member>
    <member name="P:C1.C1Preview.DocumentFontCollection.Item(System.Int32)">
      <summary>
        インデックスによって、現在のコレクションの
        <see cref="T:C1.C1Preview.DocumentFont" />を取得または設定します。
      </summary>
      <param name="index">
        現在のコレクション内の
        <see cref="T:C1.C1Preview.DocumentFont" />のインデックス。
      </param>
      <returns>
        指定したインデックスを持つ
        <see cref="T:C1.C1Preview.DocumentFont" />。
      </returns>
    </member>
    <member name="T:C1.C1Preview.DrawingUtil">
      <summary>
        <para>これは内部使用専用です。</para>静的描画関連のユーティリティメソッドを提供します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.CenterRect(System.Drawing.Size,System.Drawing.Rectangle)">
      <summary>
        指定したサイズを持ち、別の矩形内に中央揃えされた
        <see cref="T:System.Drawing.Rectangle" />を作成します。
      </summary>
      <param name="inner">
        <paramref name="outer" />内に中央揃えされる矩形の
        <see cref="T:System.Drawing.Size" />。
      </param>
      <param name="outer">
        新しい矩形を中央揃えする外側の
        <see cref="T:System.Drawing.Rectangle" />。
      </param>
      <returns>
        新しく作成されて中央揃えされた
        <see cref="T:System.Drawing.Rectangle" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.CenterRect(System.Drawing.SizeF,System.Drawing.RectangleF)">
      <summary>
        指定したサイズを持ち、別の矩形内に中央揃えされた
        <see cref="T:System.Drawing.RectangleF" />を作成します。
      </summary>
      <param name="inner">
        <paramref name="outer" />内に中央揃えされる矩形の
        <see cref="T:System.Drawing.SizeF" />。
      </param>
      <param name="outer">
        新しい矩形を中央揃えする外側の
        <see cref="T:System.Drawing.RectangleF" />。
      </param>
      <returns>
        新しく作成されて中央揃えされた
        <see cref="T:System.Drawing.RectangleF" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.RectCorner(System.Drawing.Rectangle,System.Int32)">
      <summary>
        <see cref="T:System.Drawing.Rectangle" />の指定した隅を表す
        <see cref="T:System.Drawing.Point" />を返します。
      </summary>
      <param name="r">ターゲット矩形。</param>
      <param name="corner">
        返す隅を識別する整数：
        <b>0</b>（左上）、
        <b>1</b>（右上）、
        <b>2</b>（右下）、
        <b>3</b>（左下）。
      </param>
      <returns>
        指定した隅を表す
        <see cref="T:System.Drawing.Point" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.RectangleToRectangleF(System.Drawing.Rectangle)">
      <summary>
        <see cref="T:System.Drawing.Rectangle" />を
        <see cref="T:System.Drawing.RectangleF" />に変換します。
      </summary>
      <param name="r">
        変換する
        <see cref="T:System.Drawing.Rectangle" />。
      </param>
      <returns>
        変換された
        <see cref="T:System.Drawing.RectangleF" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.ZoomRect(System.Drawing.Rectangle,System.Double)">
      <summary>
        ズーム係数によって指定された
        <see cref="T:System.Drawing.Rectangle" />をズーム（スケール）します。
      </summary>
      <param name="r">
        ズームする
        <see cref="T:System.Drawing.Rectangle" />。
      </param>
      <param name="zoomFactor">ズーム係数。</param>
      <returns>
        スケールされた
        <see cref="T:System.Drawing.RectangleF" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.ZoomRect(System.Drawing.RectangleF,System.Double)">
      <summary>
        ズーム係数によって指定された
        <see cref="T:System.Drawing.RectangleF" />をズーム（スケール）します。
      </summary>
      <param name="r">
        ズームする
        <see cref="T:System.Drawing.RectangleF" />。
      </param>
      <param name="zoomFactor">ズーム係数。</param>
      <returns>
        スケールされた
        <see cref="T:System.Drawing.RectangleF" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.ZoomRect(System.Drawing.RectangleF,System.Double,System.Double)">
      <summary>
        水平および垂直ズーム係数によって指定された
        <see cref="T:System.Drawing.RectangleF" />をズーム（スケール）します。
      </summary>
      <param name="r">
        ズームする
        <see cref="T:System.Drawing.RectangleF" />。
      </param>
      <param name="zoomX">水平ズーム係数。</param>
      <param name="zoomY">垂直ズーム係数。</param>
      <returns>
        スケールされた
        <see cref="T:System.Drawing.RectangleF" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.ZoomSize(System.Drawing.SizeF,System.Double)">
      <summary>
        ズーム係数によって指定された
        <see cref="T:System.Drawing.SizeF" />をズーム（スケール）します。
      </summary>
      <param name="s">
        ズームする
        <see cref="T:System.Drawing.SizeF" />。
      </param>
      <param name="zoomFactor">ズーム係数。</param>
      <returns>
        スケールされた
        <see cref="T:System.Drawing.SizeF" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.ZoomSize(System.Drawing.SizeF,System.Double,System.Double)">
      <summary>
        水平および垂直ズーム係数によって指定された
        <see cref="T:System.Drawing.SizeF" />をズーム（スケール）します。
      </summary>
      <param name="s">
        ズームする
        <see cref="T:System.Drawing.SizeF" />。
      </param>
      <param name="zoomX">水平ズーム係数。</param>
      <param name="zoomY">垂直ズーム係数。</param>
      <returns>
        スケールされた
        <see cref="T:System.Drawing.SizeF" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.PointFToPoint(System.Drawing.PointF)">
      <summary>
        <see cref="T:System.Drawing.PointF" />を
        <see cref="T:System.Drawing.Point" />に変換します。
      </summary>
      <param name="p">
        変換する
        <see cref="T:System.Drawing.PointF" />。
      </param>
      <returns>
        変換された
        <see cref="T:System.Drawing.Point" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.RectFromCorners(System.Drawing.Point,System.Drawing.Point)">
      <summary>
        ２つの対角の隅から新しい
        <see cref="T:System.Drawing.Rectangle" />を作成します。
      </summary>
      <param name="p1">
        ２つの対角の隅の一方を識別する
        <see cref="T:System.Drawing.Point" />。
      </param>
      <param name="p2">
        ２つの対角の隅の他方を識別する
        <see cref="T:System.Drawing.Point" />。
      </param>
      <returns>
        新しく作成された
        <see cref="T:System.Drawing.Rectangle" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.RectFromCorners(System.Drawing.PointF,System.Drawing.PointF)">
      <summary>
        ２つの対角の隅から新しい
        <see cref="T:System.Drawing.RectangleF" />を作成します。
      </summary>
      <param name="p1">
        ２つの対角の隅の一方を識別する
        <see cref="T:System.Drawing.PointF" />。
      </param>
      <param name="p2">
        ２つの対角の隅の他方を識別する
        <see cref="T:System.Drawing.PointF" />。
      </param>
      <returns>
        新しく作成された
        <see cref="T:System.Drawing.RectangleF" />。
      </returns>
    </member>
    <member name="M:C1.C1Preview.DrawingUtil.RotateSize(System.Drawing.SizeF)">
      <summary>
        <see cref="T:System.Drawing.Size" />構造体の幅と高さを交換します（90度回転します）。
      </summary>
      <param name="s">
        回転する
        <see cref="T:System.Drawing.Size" />。
      </param>
      <returns>
        交換された幅と高さで新しく作成された
        <see cref="T:System.Drawing.Size" />。
      </returns>
    </member>
    <member name="T:C1.C1Preview.Util.FontInfo">
      <summary>特定の True Type フォントに関する情報を含みます。</summary>
    </member>
    <member name="M:C1.C1Preview.Util.FontInfo.#ctor(C1.C1Preview.EmbeddedFont)">
      <summary>
        指定した
        <see cref="T:C1.C1Preview.EmbeddedFont" />の FontInfo の新しいインスタンスを作成します。
      </summary>
      <param name="ef">情報を取得するフォント。</param>
    </member>
    <member name="M:C1.C1Preview.Util.FontInfo.#ctor(System.Drawing.Font)">
      <summary>
        指定した
        <see cref="T:System.Drawing.Font" />の FontInfo の新しいインスタンスを作成します。
      </summary>
      <param name="font">情報を取得するフォント。</param>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.EmSize">
      <summary>フォントの em サイズをフォント設計単位で取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.SubscriptSize">
      <summary>フォントの下付き文字サイズをフォントの設計単位で取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.SuperscriptSize">
      <summary>フォントの上付き文字サイズをフォントの設計単位で取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.SubscriptQuotient">
      <summary>下付き文字のサイズ係数を取得します。 フォントのサイズをこの値で乗算して、下付き文字サイズを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.SuperscriptQuotient">
      <summary>上付き文字のサイズ係数を取得します。 フォントのサイズをこの値で乗算して、上付き文字サイズを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.StrikeoutPosition">
      <summary>ベースラインに相対的な取り消し線位置を設計単位で取得します。 正の値の場合はベースラインより上、負の値の場合は下です。</summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.UnderscorePosition">
      <summary>ベースラインに相対的な下線位置を設計単位で取得します。 正の値の場合はベースラインより上、負の値の場合は下です。</summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.UnderscoreThickness">
      <summary>下線の太さを設計単位で取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.CanEmbed">
      <summary>フォントライセンスが埋め込みを許可するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.MustObfuscate">
      <summary>XPS への埋め込み時にフォントライセンスが隠蔽を要求するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.ShouldObfuscate">
      <summary>フォントが XPS への埋め込み時に隠蔽されるかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.CanSubset">
      <summary>フォントライセンスがサブ設定を許可するかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Util.FontInfo.MustRestrict">
      <summary>フォントライセンスがフォントを読み取り専用に制限するかどうかを示す値を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.IMetafilePainter">
      <summary>
        <para>これは内部使用専用です。</para>このインタフェースは、
        <see cref="M:C1.C1Preview.GraphicsUtils.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.RectangleF,C1.C1Preview.IImageAlign,C1.C1Preview.IMetafilePainter,System.Boolean)" />メソッドで、メタファイルの描画をカスタマイズする必要がある クラスによって実装されます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IMetafilePainter.DrawMetafile(System.Drawing.Graphics,System.Drawing.Imaging.Metafile,System.Single,System.Single,System.Single,System.Single)">
      <summary>この実装はメタファイルを描画する必要があります。</summary>
      <param name="graphics">
        描画先の
        <see cref="T:System.Drawing.Graphics" />。
      </param>
      <param name="metafile">
        描画する
        <see cref="T:System.Drawing.Imaging.Metafile" />。
      </param>
      <param name="x">描画される画像の左上端の X 座標。</param>
      <param name="y">描画される画像の左上端の Y 座標。</param>
      <param name="width">描画される画像の幅。</param>
      <param name="height">描画される画像の高さ。</param>
    </member>
    <member name="T:C1.C1Preview.C1MetafileCreator">
      <summary>
        <para>これは内部使用専用です。</para>メタファイルの作成者を識別します。
      </summary>
    </member>
    <member name="F:C1.C1Preview.C1MetafileCreator.Unknown">
      <summary>メタファイルの作成者は不明です。</summary>
    </member>
    <member name="F:C1.C1Preview.C1MetafileCreator.C1PrintDocument">
      <summary>
        メタファイルの作成者は
        <see cref="F:C1.C1Preview.C1MetafileCreator.C1PrintDocument" />です。
      </summary>
    </member>
    <member name="T:C1.C1Preview.MetafileInfo">
      <summary>
        <para>これは内部使用専用です。</para>メタファイルに関する情報を含みます。
      </summary>
    </member>
    <member name="F:C1.C1Preview.MetafileInfo.IsPrinter">
      <summary>メタファイルがプリンタ DC から作成されるかどうかを示します。</summary>
    </member>
    <member name="F:C1.C1Preview.MetafileInfo.Creator">
      <summary>
        メタファイルの
        <see cref="T:C1.C1Preview.C1MetafileCreator" />を取得します。
      </summary>
    </member>
    <member name="F:C1.C1Preview.MetafileInfo.MetafileDpi">
      <summary>メタファイルの解像度を取得します。</summary>
    </member>
    <member name="F:C1.C1Preview.MetafileInfo.ReferenceGraphicsDpi">
      <summary>メタファイル作成中に使用された参照グラフィックスの DPI を取得します。</summary>
    </member>
    <member name="F:C1.C1Preview.MetafileInfo.MetafileSizePoints">
      <summary>
        <see cref="F:C1.C1Preview.MetafileInfo.MetafileDpi" />を使って計算されるメタファイルのサイズを取得します。
      </summary>
    </member>
    <member name="F:C1.C1Preview.MetafileInfo.ReferenceGraphicsSizePoints">
      <summary>
        <see cref="F:C1.C1Preview.MetafileInfo.ReferenceGraphicsDpi" />を使って計算されるメタファイルのサイズを取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Util.TextRunInfo">
      <summary>これは内部使用専用です。 テキストランについての情報を表します。 ランのすべての文字の書式が統一されている必要があります。また、 改行を含むことはできません。</summary>
    </member>
    <member name="M:C1.C1Preview.Util.TextRunInfo.#ctor(System.String,C1.C1Preview.RectangleD)">
      <summary>
        <see cref="T:C1.C1Preview.Util.TextRunInfo" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="text">テキストラン文字列。</param>
      <param name="rc">テキストラン矩形。</param>
    </member>
    <member name="P:C1.C1Preview.Util.TextRunInfo.Text">
      <summary>テキストラン文字列を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Util.TextRunInfo.Rectangle">
      <summary>テキストラン矩形を取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.Util.TextWordsRunInfo">
      <summary>これは内部使用専用です。 テキストランについての情報を表します。 ランのすべての文字の書式が統一されている必要があります。また、 改行を含むことはできません。</summary>
    </member>
    <member name="M:C1.C1Preview.Util.TextWordsRunInfo.#ctor(System.String,C1.C1Preview.RectangleD)">
      <summary>
        <see cref="T:C1.C1Preview.Util.TextRunInfo" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="text">テキストラン文字列。</param>
      <param name="rc">テキストラン矩形。</param>
    </member>
    <member name="P:C1.C1Preview.Util.TextWordsRunInfo.Words">
      <summary>このテキストラン内の単語のコレクションを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.Util.TextWordsRunInfo.WordInfo">
      <summary>オーナーテキストラン内の単語を記述します。</summary>
    </member>
    <member name="F:C1.C1Preview.Util.TextWordsRunInfo.WordInfo.Offset">
      <summary>オーナーの左境界を基準としたこの単語のオフセット。</summary>
    </member>
    <member name="F:C1.C1Preview.Util.TextWordsRunInfo.WordInfo.Position">
      <summary>
        オーナーの
        <see cref="P:C1.C1Preview.Util.TextRunInfo.Text" />におけるこの単語の最初の文字の位置。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Util.FoundTextEntry">
      <summary>見つかったテキストのインスタンスを表します。</summary>
    </member>
    <member name="M:C1.C1Preview.Util.FoundTextEntry.#ctor">
      <summary>これは内部使用専用です。</summary>
    </member>
    <member name="M:C1.C1Preview.Util.FoundTextEntry.AddRun(C1.C1Preview.RectangleD,System.String)">
      <summary>これは内部使用専用です。</summary>
      <param name="rc"></param>
      <param name="text"></param>
    </member>
    <member name="M:C1.C1Preview.Util.FoundTextEntry.GetRuns">
      <summary>これは内部使用専用です。</summary>
      <returns></returns>
    </member>
    <member name="T:C1.C1Preview.IDesignerSettingPersistService">
      <summary>外部コードがデザイナ設定を維持できるようにするサービスインタフェースを示します。</summary>
    </member>
    <member name="M:C1.C1Preview.IDesignerSettingPersistService.Save(System.String,System.String)">
      <summary>任意の名前で文字列値を保存します。</summary>
      <param name="name">名前。</param>
      <param name="value">値。</param>
    </member>
    <member name="M:C1.C1Preview.IDesignerSettingPersistService.Load(System.String)">
      <summary>任意の名前の文字列値をロードします。</summary>
      <param name="name">名前。</param>
      <returns>値。</returns>
    </member>
    <member name="T:C1.C1Preview.ServiceBag">
      <summary>単純なサービスコンテナ／プロバイダを示します。</summary>
    </member>
    <member name="M:C1.C1Preview.ServiceBag.AddService(System.Type,System.Object)">
      <summary>サービスを追加（登録）します。</summary>
      <param name="serviceType">サービスタイプ。</param>
      <param name="service">サービスインスタンス。</param>
    </member>
    <member name="M:C1.C1Preview.ServiceBag.RemoveService(System.Type)">
      <summary>サービスを削除（登録解除）します。</summary>
      <param name="serviceType">サービスタイプ。</param>
    </member>
    <member name="M:C1.C1Preview.ServiceBag.GetService(System.Type)">
      <summary>登録済みのサービスを取得します。</summary>
      <param name="serviceType">サービスタイプ。</param>
      <returns>サービスインスタンス。</returns>
    </member>
    <member name="T:C1.C1Preview.Warning">
      <summary>競合の解決が必要な状況を記述します。</summary>
    </member>
    <member name="M:C1.C1Preview.Warning.#ctor(C1.C1Preview.GenerateErrorEnum,System.String,System.Object)">
      <summary>
        <see cref="T:C1.C1Preview.Warning" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="code">問題を識別するコード。</param>
      <param name="description">人間に判読可能な問題の記述。</param>
      <param name="source">問題を発生させたオブジェクト。</param>
    </member>
    <member name="P:C1.C1Preview.Warning.Code">
      <summary>エラーのカテゴリを取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Warning.Description">
      <summary>エラーの詳細な説明を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Warning.Source">
      <summary>エラーを発生したオブジェクトを取得します。</summary>
    </member>
    <member name="T:C1.C1Preview.WarningCollection">
      <summary>
        <see cref="T:C1.C1Preview.Warning" />オブジェクトのコレクションを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.WarningCollection.Add(C1.C1Preview.Warning)">
      <summary>オブジェクトをコレクションに追加します。</summary>
      <param name="item">追加するオブジェクト。</param>
      <returns>コレクションに追加されたオブジェクトのインデックスを返します。</returns>
    </member>
    <member name="P:C1.C1Preview.WarningCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスのオブジェクトを取得します。</summary>
      <param name="index">オブジェクトのインデックス。</param>
      <returns>指定したインデックスの要素。</returns>
    </member>
    <member name="T:C1.C1Preview.ZoomSliderScale">
      <summary>ズーム係数値のスライダコントロールの使用を可能にするヘルパークラス。 ズーム係数 1（ズームなし）をスライダコントロールの中央に設定します。</summary>
      <remarks>
        ズーム値を 0.1～10（10％～1000％）の範囲に設定するために使用される 長さ２cm のスライダを考えてみます。
        <see cref="T:C1.C1Preview.ZoomSliderScale" />を使用した場合、 スライダの最初の１cm 目は 10%～100% のズーム値に対応し、 ２cm 目は 100%～1000% のズーム値に対応します。 他方、単純なリニアスライダが使用された場合、 10%～100% のすべてのズーム値がスライダの最初の２mm に圧搾されているため、 それらの値を設定するのが非常に難しくなります。
      </remarks>
    </member>
    <member name="M:C1.C1Preview.ZoomSliderScale.#ctor(System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
        <see cref="T:C1.C1Preview.ZoomSliderScale" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="minZoom">最小許容ズーム係数（1 より小さいこと。1 はズームなしを意味します）。</param>
      <param name="maxZoom">最大許容ズーム係数（1 より大きいこと。1 はズームなしを意味します）。</param>
      <param name="minSlider">設定可能な最小スライダ値。</param>
      <param name="maxSlider">設定可能な最大スライダ値。</param>
    </member>
    <member name="M:C1.C1Preview.ZoomSliderScale.SliderValue(System.Double)">
      <summary>ズーム係数を対応するスライダ値に変換します。</summary>
      <param name="zoomFactor">ズーム係数（1 はズームなしを意味します）。</param>
      <returns>スライダ値。</returns>
    </member>
    <member name="M:C1.C1Preview.ZoomSliderScale.ZoomFactor(System.Int32)">
      <summary>スライダ値を対応するズーム係数に変換します。</summary>
      <param name="sliderValue">変換するスライダ値。</param>
      <returns>ズーム係数（1 はズームなしを意味します）。</returns>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Ansi39">
      <summary>ANSI 3 of 9（Code 39）は、大文字、数字、- , * $ / + % を使用します。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Ansi39x">
      <summary>ANSI Extended 3 of 9（Extended Code 39）は、ASCII 文字セット全体を使用します。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code39x">
      <summary>Extended Code 39 は、ASCII 文字セット全体を使用します。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code93x">
      <summary>Extended Code 93 は、ASCII 文字セット全体を使用します。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code_128_A">
      <summary>Code 128 A は、制御文字、数字、句読点、大文字を使用します。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code_128_B">
      <summary>Code 128 B は、数字、句読点、大文字、小文字を使用します。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code_128_C">
      <summary>Code 128 C は数字だけを使用します。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code_128auto">
      <summary>Code 128 Auto は、ASCII 文字セット全体を使用します。 最小のバーコードになるように、Code 128 A、B、および C から 1 つが自動的に選択されます。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code_2_of_5">
      <summary>Code 2 of 5 は数字だけを使用します。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code25intlv">
      <summary>Interleaved 2 of 5 は数字だけを使用します。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Matrix_2_of_5">
      <summary>Matrix 2 of 5 は、3 本の黒バーと 2 本の白バーから成る比較的高密度のバーコードです。 Matrix_2_of_5 は数字だけを使用します。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.MSI">
      <summary>MSI Code は数字だけを使用します。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.EAN_13">
      <summary>EAN-13 は、数字（12 個の数字とチェックデジット）だけを使用します。 文字列内に数字が 12 個だけある場合は、チェックサムを計算し、それを 13 番目の位置に付加します。 13 個の数字がある場合は、チェックサムを検証し、それが正しくない場合はエラーを生成します。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.EAN_8">
      <summary>EAN-8 は、数字（7 個の数字とチェックデジット）だけを使用します。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.UPC_A">
      <summary>UPC-A は、数字（11 個の数字とチェックデジット）だけを使用します。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.UPC_E0">
      <summary>UPC-E0 は数字だけを使用します。 Zero Suppression の UPC シンボルに使用されます。 Caption プロパティには、6 桁の UPC-E コードまたは完全な 11 桁（必須のコードタイプ 0 を含む）の UPC-A コードを入力する必要があります。 11 桁のコードが入力された場合、バーコードコントロールは、可能であればそれを 6 桁の UPC-E コードに変換します。 11 桁のコードを 6 桁のコードに変換できない場合は、何も表示されません。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.UPC_E1">
      <summary>UPC-E1 は数字だけを使用します。主に小売業界で在庫ラベルに使用されます。 UPC-E1 の入力文字列の長さは数字 6 個です。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.RM4SCC">
      <summary>Royal Mail RM4SCC は、文字と数字（チェックデジット付き）だけを使用します。 これは、イギリスのロイヤルメールで使用されるバーコードです。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.UCCEAN128">
      <summary>UCC/EAN –128 は、ASCII 文字セット全体を使用します。 HIBC アプリケーションで使用される特殊な Code 128 です。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.QRCode">
      <summary>QRCode は、英数字やバイトデータに加えて、日本語の漢字やかな文字も扱うことができる 2 次元バーコードです。 このバーコードは最大 7,366 文字をエンコードできます。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Code49">
      <summary>Code 49 は、2 次元高密度スタック型バーコードです。ASCII 文字セット全体をエンコードします。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.JapanesePostal">
      <summary>これは、日本の郵便制度で使用されるバーコードです。 18 桁の英数字をエンコードします。これには、7 桁の郵便番号の後に、必要に応じて番地や部屋番号などの情報が含まれます。 エンコードするデータにはハイフンを含めることができます。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.Pdf417">
      <summary>Pdf417 は、よく使用されている 2 次元高密度バーコードです。最大 1,108 バイトの情報をエンコードできます。 このバーコードは、小さなバーコードを積み重ねて構成されます。 ASCII 文字セット全体をエンコードします。 最大 2,725 データ文字をエンコードできます。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.EAN128FNC1">
      <summary>EAN128FNC1 は UCC/EAN-128（EAN128）バーコードタイプの 1 つで、任意の場所に FNC1 文字を挿入したり、バーサイズを調整することができるなど、UCC/EAN-128 にはない機能をサポートしています。 FNC1 文字を挿入するには、実行時に Text プロパティに "\n"（C# の場合）または "vbLf"（VB の場合）を設定します。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.RSS14">
      <summary>RSS14 は、コンポジットコンポーネント（CC）で拡張された EAN および UPC 情報を小さなスペースにエンコードできる省スペースシンボル（Reduced Space Symbology：RSS）の 1 つです。 このバージョンは、全方向型 POS スキャナと共に使用される 14 桁の EAN.UCC 品目識別用です。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.RSS14Truncated">
      <summary>RSS14Truncated は、コンポジットコンポーネント（CC）で拡張された EAN および UPC 情報を小さなスペースにエンコードできる省スペースシンボル（Reduced Space Symbology：RSS）の 1 つです。 このバージョンは、小さな品目に使用される、インジケータデジット付きの 14 桁の EAN.UCC 品目識別用です。POS スキャナ用ではありません。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.RSS14Stacked">
      <summary>RSS14Stacked は、コンポジットコンポーネント（CC）で拡張された EAN および UPC 情報を小さなスペースにエンコードできる省スペースシンボル（Reduced Space Symbology：RSS）の 1 つです。 このバージョンは、RSS14Truncated では広すぎる場合に 2 段に積み重ねられること以外は、RSS14Truncated と同じです。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.RSS14StackedOmnidirectional">
      <summary>RSS14StackedOmnidirectional は、コンポジットコンポーネント（CC）で拡張された EAN および UPC 情報を小さなスペースにエンコードできる省スペースシンボル（Reduced Space Symbology：RSS）の 1 つです。 このバージョンは、RSS14 では広すぎる場合に 2 段に積み重ねられること以外は、RSS14 と同じです。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.RSSExpanded">
      <summary>RSSExpanded は、コンポジットコンポーネント（CC）で拡張された EAN および UPC 情報を小さなスペースにエンコードできる省スペースシンボル（Reduced Space Symbology：RSS）の 1 つです。 このバージョンは、全方向型 POS スキャナと共に使用される、AI 要素文字列（有効期限、重量など）付きの 14 桁の EAN.UCC 品目識別用です。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.RSSExpandedStacked">
      <summary>RSSExpandedStacked は、コンポジットコンポーネント（CC）で拡張された EAN および UPC 情報を小さなスペースにエンコードできる省スペースシンボル（Reduced Space Symbology：RSS）の 1 つです。 このバージョンは、RSSExpanded では広すぎる場合に 2 段に積み重ねられること以外は、RSSExpanded と同じです。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.RSSLimited">
      <summary>RSS Limited は、コンポジットコンポーネント（CC）で拡張された EAN および UPC 情報を小さなスペースにエンコードできる省スペースシンボル（Reduced Space Symbology：RSS）の 1 つです。 このバージョンは、0 または 1 のインジケータデジット付きの 14 桁の EAN.UCC 品目識別用です。POS スキャナでスキャンされない小さなシンボルに使用されます。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.DataMatrix">
      <summary>Data Matrix は、正方形または長方形のマトリックスパターンに並べられた正方形モジュールから成る 2 次元高密度バーコードです。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.MicroPDF417">
      <summary>MicroPDF417 は、PDF417 から派生された 2 次元多段バーコードです。 Micro-PDF417 は、データをできる限り小さなサイズの 2 次元シンボル（最大 150 バイト、英数字 250 文字、数字 366 桁）にエンコードする必要があるアプリケーション用に設計されています。</summary>
    </member>
    <member name="F:C1.C1Report.BarCodeEnum.IntelligentMail">
      <summary>Intelligent Mail（以前の 4-State Customer Barcode）は、米国内の郵便に使用される 65 本のバーコードです。</summary>
    </member>
    <member name="P:C1.C1Report.Field.BarcodeOptions">
      <summary>フィールドをバーコード形式でレンダリングできます。</summary>
      <seealso cref="T:C1.C1Report.BarCodeEnum" />
    </member>
    <member name="T:C1.C1Preview.RenderBarCodeEx">
      <summary>
        <see cref="T:C1.C1Preview.C1PrintDocument" />内のバーコードを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeEx.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.RenderBarCode" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeEx.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="T:C1.C1Preview.C1PrintDocument" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderBarCode" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderBarCode" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeEx.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        プロパティを別の
        <see cref="T:C1.C1Preview.RenderObject" />から現在のオブジェクトに割り当てます（コピーします）。 基本クラスの
        <see cref="M:C1.C1Preview.RenderObject.AssignFrom(C1.C1Preview.RenderObject,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />メソッドを呼び出します。
        <paramref name="source" />が
        <see cref="T:C1.C1Preview.RenderBarCodeEx" />の場合は、
        <see cref="T:C1.C1Preview.RenderBarCodeEx" />固有のプロパティもコピーします。
      </summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
      <param name="assignDataBinding">
        <see cref="N:C1.C1Preview.DataBinding" />プロパティをコピーするかどうかを示します。
      </param>
      <param name="assignChildren">
        <see cref="P:C1.C1Preview.RenderObject.Children" />コレクションの要素をコピーするかどうかを示します。
      </param>
      <param name="assignAnchors">
        <see cref="P:C1.C1Preview.RenderObject.Anchors" />コレクションの要素をコピーするかどうかを示します。
      </param>
      <param name="assignHyperlink">
        <see cref="P:C1.C1Preview.RenderObject.Hyperlink" />プロパティをコピーするかどうかを示します。
      </param>
      <param name="assignName">
        <see cref="P:C1.C1Preview.RenderObject.Name" />プロパティをコピーするかどうかを示します。
      </param>
      <param name="assignStyle">
        <see cref="T:C1.C1Preview.Style" />プロパティをコピーするかどうかを示します。
      </param>
    </member>
    <member name="P:C1.C1Preview.RenderBarCodeEx.Text">
      <summary>バーコード画像としてエンコードされる値を取得または設定します。</summary>
      <remarks>
        <para>
          一部のエンコーディングは任意の長さの英数字値をサポートします。その他の エンコーディングは、数値または特定の文字セットに制限されます。 詳細については、
          <see cref="!:BarCodeStyle" />列挙を 参照してください。
        </para>
        <para>現在のエンコーディングに対して無効な文字を使用すると、 オブジェクトには空白の画像が表示されます。</para>
      </remarks>
      <example>
        次のサンプルは、Text プロパティを使用して、 値「123456」を Code39 エンコーディングバーコードにエンコードする方法を示します。
        <code>
          <![CDATA[
          RenderBarCode rbc = new RenderBarCode();
          rbc.BarCodeType = BarCodeType.Code39;
          rbc.Text = "123456";
          doc.Body.Children.Add(rbc);
          ]]>
        </code>
      </example>
    </member>
    <member name="T:C1.C1Preview.RenderBarCodeExFragment">
      <summary>
        <see cref="T:C1.C1Preview.RenderBarCode" />オブジェクトのフラグメントを表します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeExFragment.CreateSame">
      <summary>
        現在のオブジェクトと同じ
        <see cref="P:C1.C1Preview.RenderBarCodeExFragment.RenderObject" />にリンクされた新しい空の
        <see cref="T:C1.C1Preview.RenderBarCodeFragment" />オブジェクトを作成します。
      </summary>
      <returns>
        新しい
        <see cref="T:C1.C1Preview.RenderBarCodeFragment" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeExFragment.GetDrawingFlags(System.Boolean)">
      <summary>これは内部使用専用です。</summary>
      <param name="renderInputControls"></param>
      <returns></returns>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeExFragment.InternalDraw(System.Drawing.Graphics,C1.C1Preview.DrawParams)">
      <summary>これは内部使用専用です。</summary>
      <param name="graphics"></param>
      <param name="drawParams"></param>
    </member>
    <member name="P:C1.C1Preview.RenderBarCodeExFragment.RenderObject">
      <summary>
        現在のフラグメントを生成した
        <see cref="T:C1.C1Preview.RenderBarCode" />を取得します。
      </summary>
    </member>
    <member name="T:C1.C1Preview.Serialization.C1IgnoreTypeConverterAttribute">
      <summary>これは内部使用専用です。 プロパティのシリアライズ中にシリアライザが TypeConverter を使用しないようにします。</summary>
    </member>
    <member name="F:C1.C1Preview.Utils.DipPerInch">
      <summary>1 インチあたりの DIP（デバイス非依存ピクセル。1/96 インチ）数（double 値）。</summary>
    </member>
    <member name="T:C1.C1Preview.BarcodeSizeMode">
      <summary>バーコードサイズ変更モードを指定します。</summary>
    </member>
    <member name="F:C1.C1Preview.BarcodeSizeMode.Normal">
      <summary>バーコード画像のサイズは、BarcodeSizeOptions.NarrowBarWidth、BarcodeSizeOptions.NarrowWideRatio などのプロパティによって決定されます。</summary>
    </member>
    <member name="F:C1.C1Preview.BarcodeSizeMode.Scale">
      <summary>
        バーコード画像は、
        <see cref="T:C1.C1Report.Field" />領域に収まるように拡大縮小されます。
      </summary>
    </member>
    <member name="T:C1.C1Preview.BarcodeSizeOptions">
      <summary>狭いバーの幅、狭いバーの広いバーに対する比率など、バーコードのサイズに影響するオプションを指定します。</summary>
    </member>
    <member name="M:C1.C1Preview.BarcodeSizeOptions.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.BarcodeSizeOptions" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.BarcodeSizeOptions.Equals(System.Object)">
      <summary>
        この
        <see cref="T:C1.C1Preview.BarcodeSizeOptions" />を指定されたオブジェクトと比較して、2 つが等しいかどうかを決定します。
      </summary>
      <param name="obj">現在の BarcodeSizeOptions と比較するオブジェクト。</param>
      <returns>2 つのオブジェクトが同じオプションを指定している場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.C1Preview.BarcodeSizeOptions.Clone">
      <summary>現在のオブジェクトのコピーを作成します。</summary>
    </member>
    <member name="M:C1.C1Preview.BarcodeSizeOptions.AssignFrom(C1.BarCode.BarCodeOptionsBase)">
      <summary>
        プロパティを別の
        <see cref="T:C1.BarCode.BarCodeOptionsBase" />から現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.BarcodeSizeOptions.GetHashCode">
      <summary>指定されたオプションの現在の値に基づいて、ハッシュコードを計算および取得します。</summary>
      <returns>現在のオブジェクトのハッシュコード。</returns>
    </member>
    <member name="P:C1.C1Preview.BarcodeSizeOptions.ModuleSize">
      <summary>
        バーコードモジュールのサイズ（ツイップ単位）を取得または設定します。
        <para>0 は、デフォルト値を意味します。デフォルト値は、バーコードタイプによって異なります。</para><list type="bullet">
          <item>シンプルな「バー」バーコードの場合は、15 ツイップです。</item>
          <item>マトリックスバーコード（QRCode、DataMatrix）の場合は、75 ツイップです。</item>
          <item>RSS スタック型バーコード（RSSStacked、RSSExpandedStacked）の場合は、45 ツイップです。</item>
          <item>合成バーコードの場合は、45 ツイップです。</item>
        </list>
      </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeSizeOptions.NarrowWideRatio">
      <summary>狭いバーと広いバーの比率を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeSizeOptions.SizeMode">
      <summary>バーコードサイズ変更モードを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeSizeOptions.BarHeight">
      <summary>バーの高さ（ツイップ単位）を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeSizeOptions.SupplementSpacing">
      <summary>メインバーコードと補助バーコードの間の間隔（ツイップ単位）を取得または設定します。</summary>
    </member>
    <member name="M:C1.C1Preview.BarcodeOptions.#ctor">
      <summary>
        <see cref="T:C1.C1Preview.BarcodeOptions" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.BarcodeOptions.AssignFrom(C1.C1Preview.BarcodeOptions)">
      <summary>
        プロパティを別の
        <see cref="T:C1.C1Preview.BarcodeOptions" />から現在のオブジェクトに割り当てます（コピーします）。
      </summary>
      <param name="source">プロパティのコピー元のオブジェクト。</param>
    </member>
    <member name="M:C1.C1Preview.BarcodeOptions.Clone">
      <summary>現在のオブジェクトのクローンを作成します。</summary>
      <returns>クローンオブジェクト。</returns>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.SizeOptions">
      <summary>
        バーコードのサイズに影響するオプションを指定する
        <see cref="T:C1.C1Preview.BarcodeSizeOptions" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.CaptionGrouping">
      <summary>キャプションテキストを、それをサポートするバーコードタイプに応じて複数のグループに分割するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.CaptionPosition">
      <summary>バーコードに対するキャプションの相対的な垂直位置を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.CheckSumEnabled">
      <summary>適切な場合にバーコードのチェックサムを計算してバーコードに含めるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.SupplementNumber">
      <summary>バーコードデータの補助コードを取得または設定します。補助コードは、EAN/UPC シンボルの場合、2 桁または 5 桁です。</summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.TextAlign">
      <summary>キャプションテキストの配置を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.Code49">
      <summary>
        Code49 バーコードの追加オプションを指定する
        <see cref="T:C1.BarCode.Code49Options" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.QRCode">
      <summary>
        QR バーコードの追加オプションを指定する
        <see cref="T:C1.BarCode.QRCodeOptions" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.PDF417">
      <summary>
        PDF417 バーコードの追加オプションを指定する
        <see cref="T:C1.BarCode.PDF417Options" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.MicroPDF417">
      <summary>
        MicroPDF417 バーコードの追加オプションを指定する
        <see cref="T:C1.BarCode.MicroPDF417Options" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.GS1Composite">
      <summary>
        合成バーコードの追加オプションを指定する
        <see cref="T:C1.BarCode.GS1CompositeOptions" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.RssExpandedStacked">
      <summary>
        RSS Expanded Stacked バーコードの追加オプションを指定する
        <see cref="T:C1.BarCode.RssExpandedStackedOptions" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.DataMatrix">
      <summary>
        DataMatrix バーコードの追加オプションを指定する
        <see cref="T:C1.BarCode.DataMatrixOptions" />オブジェクトを取得または設定します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeEx.#ctor(C1.C1Report.BarCodeEnum)">
      <summary>
        <see cref="T:C1.C1Preview.RenderBarCodeEx" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="barCodeType">バーコードのエンコーディングタイプ。</param>
    </member>
    <member name="P:C1.C1Preview.RenderBarCodeEx.BarCodeType">
      <summary>
        バーコードの生成時に使用するエンコーディングのタイプを取得または設定します。
        <para>BarCodeType.None は、このプロパティの有効な値ではありません。</para>
      </summary>
      <remarks>
        選択されたエンコーディングが
        <see cref="P:C1.C1Preview.RenderBarCodeEx.Text" />プロパティに保存された値に適用されて、 オブジェクトに表示されるバーコード画像が生成されます。
      </remarks>
      <example>
        次のサンプルは、BarCodeType プロパティを使用して、 値「123456」を Code39 エンコーディングバーコードにエンコードする方法を示します。
        <code>
          <![CDATA[
          RenderBarCode rbc = new RenderBarCode();
          rbc.BarCodeType = BarCodeType.Code39;
          rbc.Text = "123456";
          doc.Body.Children.Add(rbc);
          ]]>
        </code>
      </example>
    </member>
    <member name="P:C1.C1Preview.RenderBarCodeEx.Options">
      <summary>
        追加のバーコードオプションを定義する
        <see cref="T:C1.C1Preview.BarcodeOptions" />オブジェクトを取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeExFragment.GetContentAutoSize(System.Double@,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeExFragment.GetContentAutoWidth(System.Double,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="M:C1.C1Preview.RenderBarCodeExFragment.GetContentAutoHeight(System.Double,System.Double@)">
      <summary>これは内部使用専用です。</summary>
      <param name="width"></param>
      <param name="height"></param>
    </member>
    <member name="P:C1.C1Preview.BarcodeOptions.BarDirection">
      <summary>バーコードの方向を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Scripting.ScriptingOptions.TempPath">
      <summary>スクリプトのコンパイル中に生成される一時ファイルの保存に使用されるディレクトリを取得または設定します。</summary>
    </member>
    <member name="T:C1.C1Pdf.PdfDocumentInfo">
      <summary>ドキュメントに関する情報を含みます。この情報には、 ドキュメントの作成者、タイトル、キーワードなどがあります。</summary>
      <remarks>
        <para>この情報の指定は必須ではありません。オプションです。この情報を指定すると、 ドキュメントと共に保存され、リーダーアプリケーションで利用されます。</para>
        <para>ユーザーが作成者、主題、またはキーワードに基づいてドキュメントを検索できる リーダーアプリケーションもあります。</para>
        <para>Adobe Acrobat Reader 5 はこのような検索メカニズムを提供していませんが、 ユーザーはドキュメント情報を表示することができます。</para>
      </remarks>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.Title">
      <summary>PDF ドキュメントのタイトルを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.Creator">
      <summary>元のドキュメントを作成したアプリケーションの名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.Producer">
      <summary>PDF ドキュメントを作成したアプリケーションの名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.Author">
      <summary>PDF ドキュメントを作成した人の名前を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.Subject">
      <summary>PDF ドキュメントの主題を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.Keywords">
      <summary>PDF ドキュメントに関連付けられたキーワードを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Pdf.PdfDocumentInfo.CreationDate">
      <summary>PDF ドキュメントの作成日時を取得または設定します。</summary>
      <remarks>
        <para>
          このプロパティのデフォルト値は
          <b>DateTime.MinValue</b>です。 その場合、
          <see cref="T:C1.C1Pdf.C1PdfDocument" />は、ドキュメントが保存された日時を 作成日として使用します。
        </para>
      </remarks>
    </member>
    <member name="M:C1.Util.FontSubSet.GetFontSubSet(System.Drawing.Font)">
      <summary>
        フォント名とスタイルを使用して
        <see cref="T:C1.Util.FontSubSet" />オブジェクトを作成します。
      </summary>
      <param name="font">フォントオブジェクト。</param>
      <returns>
        <see cref="T:C1.Util.FontSubSet" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetFontSubSet(System.String,System.Boolean,System.Boolean)">
      <summary>
        フォント名とスタイルを使用して
        <see cref="T:C1.Util.FontSubSet" />オブジェクトを作成します。
      </summary>
      <param name="fontName">フォント名。</param>
      <param name="bold">フォントの太字フラグ。</param>
      <param name="italic">フォントの斜体フラグ。</param>
      <returns>
        <see cref="T:C1.Util.FontSubSet" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetFontSubSet(C1.Util.FontKey)">
      <summary>
        フォント名とスタイルを使用して
        <see cref="T:C1.Util.FontSubSet" />オブジェクトを作成します。
      </summary>
      <param name="fk">フォントキーオブジェクト。</param>
      <returns>
        <see cref="T:C1.Util.FontSubSet" />オブジェクト。
      </returns>
    </member>
    <member name="M:C1.Util.FontSubSet.SetFontSubSet(C1.Util.FontSubSet)">
      <summary>
        既存の
        <see cref="T:C1.Util.FontSubSet" />オブジェクトをキャッシュするように設定します。
      </summary>
      <param name="fss">
        既存の
        <see cref="T:C1.Util.FontSubSet" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.Util.FontSubSet.SetFontSubSet(C1.Util.FontKey,C1.Util.FontSubSet)">
      <summary>
        既存の
        <see cref="T:C1.Util.FontSubSet" />オブジェクトをキャッシュするように設定します。
      </summary>
      <param name="fk">
        既存の
        <see cref="T:C1.Util.FontKey" />オブジェクト。
      </param>
      <param name="fss">
        既存の
        <see cref="T:C1.Util.FontSubSet" />オブジェクト。
      </param>
    </member>
    <member name="M:C1.C1Preview.IImageAlign.ResetAlignHorz">
      <summary>
        <see cref="P:C1.C1Preview.IImageAlign.AlignHorz" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.HasAlignHorz">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IImageAlign.AlignHorz" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IImageAlign.ResetAlignVert">
      <summary>
        <see cref="P:C1.C1Preview.IImageAlign.AlignVert" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.HasAlignVert">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IImageAlign.AlignVert" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IImageAlign.ResetStretchHorz">
      <summary>
        <see cref="P:C1.C1Preview.IImageAlign.StretchHorz" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.HasStretchHorz">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IImageAlign.StretchHorz" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IImageAlign.ResetStretchVert">
      <summary>
        <see cref="P:C1.C1Preview.IImageAlign.StretchVert" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.HasStretchVert">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IImageAlign.StretchVert" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IImageAlign.ResetKeepAspectRatio">
      <summary>
        <see cref="P:C1.C1Preview.IImageAlign.KeepAspectRatio" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.HasKeepAspectRatio">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IImageAlign.KeepAspectRatio" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IImageAlign.ResetTileHorz">
      <summary>
        <see cref="P:C1.C1Preview.IImageAlign.TileHorz" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.HasTileHorz">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.IImageAlign.TileHorz" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IImageAlign.ResetTileVert">
      <summary>
        <see cref="P:C1.C1Preview.IImageAlign.TileVert" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IImageAlign.HasTileVert">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.IImageAlign.TileVert" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IImageAlign.ResetAll">
      <summary>すべてのプロパティを未定義状態にリセットします。</summary>
    </member>
    <member name="M:C1.C1Preview.IOffsets.ResetLeft">
      <summary>
        <see cref="P:C1.C1Preview.IOffsets.Left" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.HasLeft">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IOffsets.Left" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IOffsets.ResetTop">
      <summary>
        <see cref="P:C1.C1Preview.IOffsets.Top" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.HasTop">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IOffsets.Top" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IOffsets.ResetRight">
      <summary>
        <see cref="P:C1.C1Preview.IOffsets.Right" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.HasRight">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IOffsets.Right" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IOffsets.ResetBottom">
      <summary>
        <see cref="P:C1.C1Preview.IOffsets.Bottom" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IOffsets.HasBottom">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IOffsets.Bottom" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IOffsets.ResetAll">
      <summary>すべてのプロパティを未定義状態にリセットします。</summary>
    </member>
    <member name="M:C1.C1Preview.IBorders.ResetLeft">
      <summary>
        <see cref="P:C1.C1Preview.IBorders.Left" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.HasLeft">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IBorders.Left" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IBorders.ResetTop">
      <summary>
        <see cref="P:C1.C1Preview.IBorders.Top" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.HasTop">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IBorders.Top" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IBorders.ResetRight">
      <summary>
        <see cref="P:C1.C1Preview.IBorders.Right" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.HasRight">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IBorders.Right" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IBorders.ResetBottom">
      <summary>
        <see cref="P:C1.C1Preview.IBorders.Bottom" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.HasBottom">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IBorders.Bottom" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IBorders.ResetRadiusX">
      <summary>
        <see cref="P:C1.C1Preview.IBorders.RadiusX" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.HasRadiusX">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IBorders.RadiusX" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IBorders.ResetRadiusY">
      <summary>
        <see cref="P:C1.C1Preview.IBorders.RadiusY" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IBorders.HasRadiusY">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IBorders.RadiusY" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IBorders.ResetAll">
      <summary>すべてのプロパティを未定義状態にリセットします。</summary>
    </member>
    <member name="M:C1.C1Preview.IGridLines.ResetLeft">
      <summary>
        <see cref="P:C1.C1Preview.IGridLines.Left" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.HasLeft">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IGridLines.Left" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IGridLines.ResetTop">
      <summary>
        <see cref="P:C1.C1Preview.IGridLines.Top" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.HasTop">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IGridLines.Top" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IGridLines.ResetRight">
      <summary>
        <see cref="P:C1.C1Preview.IGridLines.Right" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.HasRight">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IGridLines.Right" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IGridLines.ResetBottom">
      <summary>
        <see cref="P:C1.C1Preview.IGridLines.Bottom" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.HasBottom">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IGridLines.Bottom" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IGridLines.ResetVert">
      <summary>
        <see cref="P:C1.C1Preview.IGridLines.Vert" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.HasVert">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IGridLines.Vert" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IGridLines.ResetHorz">
      <summary>
        <see cref="P:C1.C1Preview.IGridLines.Horz" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IGridLines.HasHorz">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IGridLines.Horz" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IGridLines.ResetAll">
      <summary>すべてのプロパティを未定義状態にリセットします。</summary>
    </member>
    <member name="M:C1.C1Preview.IShadow.ResetTransparency">
      <summary>
        <see cref="P:C1.C1Preview.IShadow.Transparency" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.HasTransparency">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IShadow.Transparency" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IShadow.ResetSize">
      <summary>
        <see cref="P:C1.C1Preview.IShadow.Size" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.HasSize">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IShadow.Size" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IShadow.ResetDistance">
      <summary>
        <see cref="P:C1.C1Preview.IShadow.Distance" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.HasDistance">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IShadow.Distance" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IShadow.ResetAngle">
      <summary>
        <see cref="P:C1.C1Preview.IShadow.Angle" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.HasAngle">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IShadow.Angle" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IShadow.ResetColor">
      <summary>
        <see cref="P:C1.C1Preview.IShadow.Color" />プロパティの値をリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.IShadow.HasColor">
      <summary>
        現在のオブジェクトの
        <see cref="P:C1.C1Preview.IShadow.Color" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.IShadow.ResetAll">
      <summary>すべてのプロパティを未定義状態にリセットします。</summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetBackgroundImage">
      <summary>
        <see cref="P:C1.C1Preview.Style.BackgroundImage" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasBackgroundImage">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.BackgroundImage" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetBrush">
      <summary>
        <see cref="P:C1.C1Preview.Style.Brush" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasBrush">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.Brush" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetTextColor">
      <summary>
        <see cref="P:C1.C1Preview.Style.TextColor" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasTextColor">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.TextColor" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetTextAngle">
      <summary>
        <see cref="P:C1.C1Preview.Style.TextAngle" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasTextAngle">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.TextAngle" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetTextAlignHorz">
      <summary>
        <see cref="P:C1.C1Preview.Style.TextAlignHorz" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasTextAlignHorz">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.TextAlignHorz" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetTextAlignVert">
      <summary>
        <see cref="P:C1.C1Preview.Style.TextAlignVert" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasTextAlignVert">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.TextAlignVert" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetLineSpacing">
      <summary>
        <see cref="P:C1.C1Preview.Style.LineSpacing" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasLineSpacing">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.LineSpacing" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetWordWrap">
      <summary>
        <see cref="P:C1.C1Preview.Style.WordWrap" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasWordWrap">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.WordWrap" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetTextPosition">
      <summary>
        <see cref="P:C1.C1Preview.Style.TextPosition" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasTextPosition">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.TextPosition" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetHyperlinkAttrs">
      <summary>
        <see cref="P:C1.C1Preview.Style.HyperlinkAttrs" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasHyperlinkAttrs">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.HyperlinkAttrs" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetVisitedHyperlinkAttrs">
      <summary>
        <see cref="P:C1.C1Preview.Style.VisitedHyperlinkAttrs" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasVisitedHyperlinkAttrs">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.VisitedHyperlinkAttrs" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetHoverHyperlinkAttrs">
      <summary>
        <see cref="P:C1.C1Preview.Style.HoverHyperlinkAttrs" />プロパティの値をリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasHoverHyperlinkAttrs">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.Style" />オブジェクトの
        <see cref="P:C1.C1Preview.Style.HoverHyperlinkAttrs" />プロパティが指定されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetActiveHyperlinkAttrs">
      <summary>
        <see cref="P:C1.C1Preview.Style.ActiveHyperlinkAttrs" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasActiveHyperlinkAttrs">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.ActiveHyperlinkAttrs" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetMeasureTrailingSpaces">
      <summary>
        <see cref="P:C1.C1Preview.Style.MeasureTrailingSpaces" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasMeasureTrailingSpaces">
      <summary>
        現在のスタイルの
        <see cref="!:MeasureTralingSpaces" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetBackColor">
      <summary>
        <see cref="P:C1.C1Preview.Style.BackColor" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasBackColor">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.BackColor" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetMinOrphanLines">
      <summary>
        <see cref="P:C1.C1Preview.Style.MinOrphanLines" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasMinOrphanLines">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.MinOrphanLines" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetClientAreaOnly">
      <summary>
        <see cref="P:C1.C1Preview.Style.ClientAreaOnly" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasClientAreaOnly">
      <summary>
        現在のスタイルの
        <see cref="!:ClietAreaOnly" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetShapeFillBrush">
      <summary>
        <see cref="P:C1.C1Preview.Style.ShapeFillBrush" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasShapeFillBrush">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.ShapeFillBrush" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetShapeFillColor">
      <summary>
        <see cref="P:C1.C1Preview.Style.ShapeFillColor" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasShapeFillColor">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.ShapeFillColor" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetShapeLine">
      <summary>
        <see cref="P:C1.C1Preview.Style.ShapeLine" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasShapeLine">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.ShapeLine" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetFlowAlign">
      <summary>
        <see cref="P:C1.C1Preview.Style.FlowAlign" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasFlowAlign">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.FlowAlign" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetFlowAlignChildren">
      <summary>
        <see cref="P:C1.C1Preview.Style.FlowAlignChildren" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasFlowAlignChildren">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.FlowAlignChildren" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetTextIndent">
      <summary>
        <see cref="P:C1.C1Preview.Style.TextIndent" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasTextIndent">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.TextIndent" />プロパティが定義されているかどうかを 示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetCharSpacing">
      <summary>
        <see cref="P:C1.C1Preview.Style.CharSpacing" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasCharSpacing">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.CharSpacing" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetCharWidth">
      <summary>
        <see cref="P:C1.C1Preview.Style.CharWidth" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasCharWidth">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.CharWidth" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetJustifyLastLine">
      <summary>
        <see cref="P:C1.C1Preview.Style.JustifyLastLine" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasJustifyLastLine">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.JustifyLastLine" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetJustifyEndOfLines">
      <summary>
        <see cref="P:C1.C1Preview.Style.JustifyEndOfLines" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasJustifyEndOfLines">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.JustifyEndOfLines" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetWordWrapMode">
      <summary>
        <see cref="P:C1.C1Preview.Style.WordWrapMode" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasWordWrapMode">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.WordWrapMode" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.RightToLeft">
      <summary>右から左へのテキストレンダリングルールを使用する必要があるかどうかを示す値を取得または設定します。</summary>
      <remarks>
        このプロパティは、
        <b>アンビエント</b>です（明示的に設定されていない場合は、現在のスタイルのオーナーを包含するオブジェクトのスタイルから継承されます）。
        <para>
          デフォルトは
          <b>true</b>です。
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Preview.Style.ResetRightToLeft">
      <summary>
        <see cref="P:C1.C1Preview.Style.RightToLeft" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasRightToLeft">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.RightToLeft" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetFont">
      <summary>
        <see cref="P:C1.C1Preview.Style.Font" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasFont">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.Font" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetFontName">
      <summary>
        <see cref="P:C1.C1Preview.Style.FontName" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasFontName">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.FontName" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetFontSize">
      <summary>
        <see cref="P:C1.C1Preview.Style.FontSize" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasFontSize">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.FontSize" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetFontBold">
      <summary>
        <see cref="P:C1.C1Preview.Style.FontBold" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasFontBold">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.FontBold" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetFontItalic">
      <summary>
        <see cref="P:C1.C1Preview.Style.FontItalic" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasFontItalic">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.FontItalic" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetFontUnderline">
      <summary>
        <see cref="P:C1.C1Preview.Style.FontUnderline" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasFontUnderline">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.FontUnderline" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="M:C1.C1Preview.Style.ResetFontStrikeout">
      <summary>
        <see cref="P:C1.C1Preview.Style.FontStrikeout" />プロパティを未定義状態にリセットします。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Style.HasFontStrikeout">
      <summary>
        現在のスタイルの
        <see cref="P:C1.C1Preview.Style.FontStrikeout" />プロパティが定義されているかどうかを 示す値を取得します。 false の場合は、親（コンテナ）オブジェクトのスタイルからこのプロパティの 実際の値がフェッチされます。
      </summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfOptionsForm.PdfACompatible">
      <summary>PDF/A 互換ドキュメントを生成するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.PdfExporter.PdfACompatible">
      <summary>PDF/A 互換ドキュメントを生成するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.PdfFilter.PdfACompatible">
      <summary>PDF/A 互換ドキュメントを生成するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Report.Field.RightToLeft">
      <summary>
        右から左へのテキストレンダリングルールを使用する必要があるかどうかを示す値を取得または設定します。 null（デフォルト）の場合は、レポートで定義されたプロパティ
        <see cref="P:C1.C1Report.C1Report.RightToLeft" />が使用されます。
      </summary>
    </member>
    <member name="P:C1.C1Report.Field.ActualRightToLeft">
      <summary>
        使用されている実際の右から左ルールの値を取得します。 フィールド自体の
        <see cref="P:C1.C1Report.Field.RightToLeft" />が null でない場合は、その値が返されます。 そうでない場合は、レポートで定義された
        <see cref="P:C1.C1Report.Field.ActualRightToLeft" />が返されます。
      </summary>
    </member>
    <member name="F:C1.C1Report.FileFormatEnum.PDFA">
      <summary>Adobe PDF 形式、PDF/A（レベル 2B）互換。</summary>
    </member>
    <member name="P:C1.C1Report.C1Report.DefaultRightToLeft">
      <summary>
        <see cref="P:C1.C1Report.C1Report.RightToLeft" />プロパティのデフォルトとして使用される値を取得または設定します。
      </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.RightToLeft">
      <summary>
        レポートのフィールドがテキストを右から左にレンダリングするルールを使用するかどうかを示す値を取得または設定します。
        <para>
          null（デフォルト）の場合は、静的プロパティ
          <see cref="P:C1.C1Report.C1Report.DefaultRightToLeft" />の値が使用されます。
        </para><para>この値は、個々のフィールドでオーバーライドできます。</para>
      </summary>
    </member>
    <member name="P:C1.C1Report.C1Report.ActualRightToLeft">
      <summary>
        使用されている実際の右から左ルールの値を取得します。この値は、次のルールを使用して取得されます。
        <list type="number">
          <item>
            <see cref="P:C1.C1Report.C1Report.RightToLeft" />が null でない場合は、その値が使用されます。
          </item>
          <item>
            現在のレポートがサブレポートの場合は、オーナーサブレポートフィールドの
            <see cref="P:C1.C1Report.C1Report.ActualRightToLeft" />が使用されます。
          </item>
          <item>
            そうでない場合は、
            <see cref="!:C1FlexReport.DefaultRightToLeft" />静的プロパティの値が使用されます。
          </item>
        </list>
      </summary>
    </member>
    <member name="M:C1.C1Preview.GraphicsUtils.GetScreenDpi(System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
      <summary>論理および物理画面の解像度を返します。</summary>
      <param name="logicalDpiX">終了時に、論理水平解像度を保持します。</param>
      <param name="logicalDpiY">終了時に、論理垂直解像度を保持します。</param>
      <param name="physicalDpiX">終了時に、物理水平解像度を保持します。</param>
      <param name="physicalDpiY">終了時に、物理垂直解像度を保持します。</param>
      <param name="realLogicalDpiX">出力：フォントサイズに応じた実際の水平 DPI（96、120、144 など）。</param>
      <param name="readDpiY">出力：フォントサイズに応じた実際の垂直 DPI（96、120、144 など）。</param>
    </member>
    <member name="P:C1.C1Preview.GraphicsUtils.RealScreenDpiX">
      <summary>フォントサイズに応じて画面の実際の論理水平解像度 （96、120、144 など）を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.GraphicsUtils.RealScreenDpiY">
      <summary>フォントサイズに応じて画面の実際の論理垂直解像度 （96、120、144 など）を取得します。</summary>
    </member>
    <member name="P:C1.C1Preview.Export.XlsExporter.DetectFormats">
      <summary>それぞれのテキスト値において Excel フォーマットを検出するかどうかを 示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Util.FontSubSet.FontKey">
      <summary>フォントキー（フォント識別子）を取得または設定します。</summary>
    </member>
    <member name="T:C1.Util.FontSubSet.BigEndianBinaryReader">
      <summary>TTF ファイルはビッグエンディアン形式で保存されます。 特別なリーダー／ライタが必要です。</summary>
    </member>
    <member name="M:C1.C1Preview.C1PageSettings.IsPaperKindKnown(System.Drawing.Printing.PaperKind)">
      <summary>
        指定された PaperKind が既知で、
        <see cref="P:C1.C1Preview.C1PageSettings.PaperKind" />列挙内に 定義されているかどうかを示す値を取得します。
      </summary>
      <param name="paperKind">チェックする値。</param>
      <returns>
        値が既知の場合は
        <b>true</b>、そうでない場合は
        <b>false</b>。
      </returns>
    </member>
    <member name="P:C1.C1Preview.IStyleOwner.HasStyle">
      <summary>
        現在の
        <see cref="T:C1.C1Preview.IStyleOwner" />が
        <see cref="P:C1.C1Preview.IStyleOwner.Style" />プロパティを初期化したかどうかを示す値を取得します。
      </summary>
    </member>
    <member name="M:C1.C1Preview.RenderC1Printable.GetTreeBinary">
      <summary>
        C1PrintableGetTreeBinary メソッドを表す
        <see cref="T:System.Reflection.MethodInfo" />を取得します。
      </summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />または
        <b>null</b>。
      </returns>
    </member>
    <member name="M:C1.Util.CodeRanges.Add(System.Char[])">
      <summary></summary>
      <param name="chars"></param>
    </member>
    <member name="M:C1.Util.CodeRanges.Add(System.String)">
      <summary></summary>
      <param name="s"></param>
    </member>
    <member name="M:C1.Util.CodeRanges.Add(System.Char)">
      <summary></summary>
      <param name="c"></param>
    </member>
    <member name="M:C1.Util.CodeRanges.Add(C1.Util.CodeRange)">
      <summary></summary>
      <param name="cr"></param>
    </member>
    <member name="M:C1.Util.CodeRanges.Add(System.Char,System.Char)">
      <summary></summary>
      <param name="first"></param>
      <param name="last"></param>
    </member>
    <member name="M:C1.Util.CodeRanges.Add(System.Collections.Generic.IEnumerable{C1.Util.CodeRange})">
      <summary></summary>
      <param name="crs"></param>
    </member>
    <member name="M:C1.Util.CodeRanges.Clone">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:C1.Util.CodeRanges.AssignFrom(C1.Util.CodeRanges)">
      <summary></summary>
      <param name="source"></param>
    </member>
    <member name="F:C1.Util.FontKey.c_flgBold">
      <summary>太字定数。</summary>
    </member>
    <member name="F:C1.Util.FontKey.c_flgItalic">
      <summary>斜体定数。</summary>
    </member>
    <member name="M:C1.Util.FontKey.#ctor(System.String,System.Byte)">
      <summary></summary>
      <param name="name"></param>
      <param name="flags"></param>
    </member>
    <member name="M:C1.Util.FontKey.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary></summary>
      <param name="name"></param>
      <param name="bold"></param>
      <param name="italic"></param>
    </member>
    <member name="M:C1.Util.FontKey.GetHashCode">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontKey.Equals(System.Object)">
      <summary></summary>
      <param name="obj"></param>
      <returns></returns>
    </member>
    <member name="P:C1.Util.FontKey.Name">
      <summary>フォントの名前を取得します。</summary>
    </member>
    <member name="P:C1.Util.FontKey.Flags">
      <summary>フォントのフラグを取得します。</summary>
    </member>
    <member name="P:C1.Util.FontKey.Bold">
      <summary>フォントの太字フラグを取得します。</summary>
    </member>
    <member name="P:C1.Util.FontKey.Italic">
      <summary>フォントの斜体フラグを取得します。</summary>
    </member>
    <member name="P:C1.Util.FontKey.Style">
      <summary>フォントのスタイルを取得します。</summary>
    </member>
    <member name="M:C1.Util.FontKey.op_Equality(C1.Util.FontKey,C1.Util.FontKey)">
      <summary></summary>
      <param name="v1"></param>
      <param name="v2"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontKey.op_Inequality(C1.Util.FontKey,C1.Util.FontKey)">
      <summary></summary>
      <param name="v1"></param>
      <param name="v2"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontSubSet.#ctor">
      <summary></summary>
    </member>
    <member name="M:C1.Util.FontSubSet.#ctor(C1.Util.FontKey)">
      <summary></summary>
      <param name="fontKey"></param>
    </member>
    <member name="M:C1.Util.FontSubSet.ReadCMap">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetTableCode(System.String)">
      <summary></summary>
      <param name="tableName"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetPanoseIndex(C1.Util.FontSubSet)">
      <summary></summary>
      <param name="fss"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontSubSet.GetDiffPanoseIndex(C1.Util.FontSubSet)">
      <summary>差異 PANOSE インデックスを計算します。</summary>
      <param name="fss"></param>
      <returns></returns>
    </member>
    <member name="P:C1.Util.FontSubSet.CanEmbed">
      <summary>このフォントをフォントデータとして埋め込むことができることを示すフラグを取得します。</summary>
    </member>
    <member name="P:C1.Util.FontSubSet.MustRestrict">
      <summary>このフォントをフォントデータとして埋め込むことができることを示すフラグを取得します。</summary>
    </member>
    <member name="P:C1.Util.FontSubSet.MustObfuscate">
      <summary>このフォントを難読化する必要があることを示すフラグを取得します。</summary>
    </member>
    <member name="P:C1.Util.FontSubSet.CanSubset">
      <summary>このフォントをフォントデータのサブセットとして使用できることを示すフラグを取得します。</summary>
    </member>
    <member name="P:C1.Util.FontSubSet.IsFontSpecific">
      <summary></summary>
    </member>
    <member name="P:C1.Util.FontSubSet.LocaShortTable">
      <summary></summary>
    </member>
    <member name="P:C1.Util.FontSubSet.NumberOfMetrics">
      <summary></summary>
    </member>
    <member name="P:C1.Util.FontSubSet.Panose">
      <summary></summary>
    </member>
    <member name="P:C1.Util.FontSubSet.ItalicAngle">
      <summary></summary>
    </member>
    <member name="P:C1.Util.FontSubSet.FirstChar">
      <summary></summary>
    </member>
    <member name="P:C1.Util.FontSubSet.LastChar">
      <summary></summary>
    </member>
    <member name="P:C1.Util.FontSubSet.Ascent">
      <summary></summary>
    </member>
    <member name="P:C1.Util.FontSubSet.Descent">
      <summary></summary>
    </member>
    <member name="P:C1.Util.FontSubSet.Height">
      <summary></summary>
    </member>
    <member name="P:C1.Util.FontSubSet.ExternalLeading">
      <summary></summary>
    </member>
    <member name="P:C1.Util.FontSubSet.InternalLeading">
      <summary></summary>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.#ctor(System.IO.Stream)">
      <summary></summary>
      <param name="stream"></param>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary></summary>
      <param name="stream"></param>
      <param name="leaveOpen"></param>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.Dispose(System.Boolean)">
      <summary></summary>
      <param name="disposing"></param>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadInt16">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadInt32">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadInt64">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadUInt16">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadUInt32">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadUInt64">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadChar">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadChars(System.Int32)">
      <summary></summary>
      <param name="count"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadSingle">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryReader.ReadDouble">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="T:C1.Util.FontSubSet.BigEndianBinaryWriter">
      <summary>ビッグエンディアンバイナリライタ。</summary>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryWriter.#ctor(System.IO.Stream)">
      <summary></summary>
      <param name="stream"></param>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary></summary>
      <param name="stream"></param>
      <param name="encoding"></param>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryWriter.Write(System.Int16)">
      <summary></summary>
      <param name="value"></param>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryWriter.Write(System.Int32)">
      <summary></summary>
      <param name="value"></param>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryWriter.Write(System.Int64)">
      <summary></summary>
      <param name="value"></param>
    </member>
    <member name="M:C1.Util.FontSubSet.BigEndianBinaryWriter.Write(System.String)">
      <summary></summary>
      <param name="value"></param>
    </member>
    <member name="F:C1.Util.FontBuilder.s_tableNamesSimple">
      <summary>フォントの名前の単純テーブル。</summary>
    </member>
    <member name="F:C1.Util.FontBuilder.s_tableNamesCMap">
      <summary>フォントの名前の CMAP テーブル。</summary>
    </member>
    <member name="M:C1.Util.FontBuilder.NewLocaGlyphTables">
      <summary></summary>
    </member>
    <member name="M:C1.Util.FontBuilder.GetFontData(C1.Util.FontSubSet,C1.Util.CodeRanges,System.Boolean)">
      <summary></summary>
      <param name="fss"></param>
      <param name="codeRanges"></param>
      <param name="includeCMap"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Util.FontBuilder.GetFontData(C1.Util.FontSubSet,System.Collections.Generic.IEnumerable{C1.Util.GlyphMetrics},System.Boolean)">
      <summary></summary>
      <param name="fss"></param>
      <param name="metrics"></param>
      <param name="includeCMap"></param>
      <returns></returns>
    </member>
    <member name="P:C1.Util.FontBuilder.FullCodeRange">
      <summary>このフォントのコード範囲全体を取得します。</summary>
    </member>
    <member name="T:C1.C1Word.Objects.Strings">
      <summary>デザイナによって使用される UI 文字列を含む静的クラス。</summary>
    </member>
    <member name="T:C1.C1Pdf.PdfFieldType">
      <summary>内部使用専用。</summary>
    </member>
    <member name="F:C1.C1Pdf.PdfFieldType.None">
      <summary>フィールドタイプが無効または見つかりません。</summary>
    </member>
    <member name="F:C1.C1Pdf.PdfFieldType.PushButton">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfFieldType.CheckBox">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfFieldType.RadioButton">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfFieldType.Text">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfFieldType.List">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfFieldType.Combo">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfFieldType.Signature">
      <summary></summary>
    </member>
    <member name="T:C1.C1Pdf.PdfAcrofieldFlags">
      <summary>内部使用専用。</summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.ReadOnly">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.Required">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.NoExport">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.Multiline">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.Password">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.NoToggleToOff">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.Radio">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.PushButton">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.Combo">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.Edit">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.Sort">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.FileSelect">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.Multiselect">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.DoNotSpellCheck">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.DoNotScroll">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.Comb">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.RadioSinUnison">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.CommitOnSelChange">
      <summary></summary>
    </member>
    <member name="F:C1.C1Pdf.PdfAcrofieldFlags.RichText">
      <summary></summary>
    </member>
    <member name="T:C1.Util.RawFontSubSet">
      <summary>生（バイナリフォントデータまたはファイルパス名）フォントサブセット。</summary>
    </member>
    <member name="M:C1.Util.RawFontSubSet.#ctor(System.String)">
      <summary>生サブセットを初期化します。</summary>
      <param name="path">生フォントファイルのパス。</param>
    </member>
    <member name="M:C1.Util.RawFontSubSet.#ctor(System.Byte[])">
      <summary>生サブセットを初期化します。</summary>
      <param name="data">生フォントデータ。</param>
    </member>
    <member name="M:C1.Util.RawFontSubSet.GetFontSubSet(System.String)">
      <summary>パスで指定されたフォントファイル名のフォントサブセットを取得します。</summary>
      <param name="path">フォントファイルのパス。</param>
      <returns>フォントサブセットオブジェクト。</returns>
    </member>
    <member name="M:C1.Util.RawFontSubSet.GetFontSubSet(System.Byte[])">
      <summary>生フォントデータのフォントサブセットを取得します。</summary>
      <param name="data">生フォントデータ。</param>
      <returns>フォントサブセットオブジェクト。</returns>
    </member>
    <member name="M:C1.Util.RawFontSubSet.Init">
      <summary>初期化フィールド。</summary>
    </member>
    <member name="M:C1.Util.RawFontSubSet.GetFontTableStream(System.String)">
      <summary>名前に基づいてフォントテーブルブロックのストリームを取得します。</summary>
      <param name="name">フォントテーブルブロックの名前。</param>
      <returns>
        フォントテーブルストリームを返します。そうでない場合は
        <b>null</b>。
      </returns>
    </member>
    <member name="T:C1.Util.FontShaping">
      <summary>文字の形成（アラビア文字、インド文字など）をサポートするためのクラス。</summary>
    </member>
  </members>
</doc>