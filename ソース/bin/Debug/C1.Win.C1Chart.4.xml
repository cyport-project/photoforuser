<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>C1.Win.C1Chart.4</name>
  </assembly>
  <members>
    <member name="M:C1.Win.C1ChartBase.baseChart.BeginUpdate">
      <summary>バッチ処理の更新を開始します。変更後グラフは即時更新されません。 更新を行うには、EndUpdate() メソッドを呼び出す必要があります。</summary>
    </member>
    <member name="M:C1.Win.C1ChartBase.baseChart.EndUpdate">
      <summary>バッチ処理を終了します。このメソッドによって、通常の更新処理に戻ります。</summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChart.Visible">
      <summary>コントロールを表示するかどうかを決定します。</summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChart.BackColor">
      <summary>コントロール内のテキストとグラフィックの背景色を指定します。</summary>
      <remarks>背景色を変更すると、グラフのスタイルオブジェクトの背景色も同時に変更されます。 逆に、グラフのスタイルオブジェクトの背景色を変更すると、本プロパティの値も変更されます。</remarks>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChart.ForeColor">
      <summary>コントロールのテキストとグラフィックの前景色を指定します。</summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChart.BackgroundImage">
      <summary>コントロールに表示される背景イメージを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChart.Font">
      <summary>コントロールに表示されるテキストのフォントを指定します。</summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChart.UseAntiAlias">
      <summary>グラフを描画する際、アンチエイリアスを使用するかどうか取得または設定します。 このプロパティは古い形式です。その代わり、テキストとグラフィックのアンチエイリアス機能を設定するために、 それぞれ UseAntiAliasedText プロパティおよび UseAntiAliasedGraphics プロパティが提供されています。</summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChart.UseAntiAliasedText">
      <summary>グラフのテキストを描画する際、アンチエイリアス機能を使用するかどうかを示す値を取得または設定します(テキストのみ)。</summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChart.UseAntiAliasedGraphics">
      <summary>グラフのグラフィックスを描画する際、アンチエイリアス機能を使用するかどうかを示す値を取得または設定します(グラフィックスのみ)。</summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChart.UseGrayscale">
      <summary>指定された色の代わりにグレースケールでグラフを描画するかどうかを示す値を取得または設定します。</summary>
      <remarks>グレースケールは、白黒デバイスへの出力をプレビューすることを目的としています。 これは、内部のスタイルブラシやペンの色に影響しません。出力デバイスへのグラフのレンダリングにのみ影響します。 グレースケールを使用すると、暗黙的にダブルバッファリング出力が使用されます。</remarks>
    </member>
    <member name="E:C1.Win.C1ChartBase.baseChart.LayoutLabels">
      <summary>ラベルを描画する前に発生します。本イベントにて、ラベルがグラフの他の要素またはデータマッピングにより、再配置されます。</summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChartRect.Location">
      <summary>グラフコントロールのクライアント座標でグラフ要素の位置を取得または設定します。</summary>
      <remarks>Location プロパティは、要素の配置が手動によるか、自動的に行われるかにかかわらず、常に描画するグラフ要素の左上隅の実際の位置を返します。 この値を変更すると LocationDefault プロパティの値が変わります。</remarks>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChartRect.Size">
      <summary>グラフコントロールのクライアント座標で、グラフ要素のサイズを取得または設定します。</summary>
      <remarks>Size プロパティは、要素が自動的に配置されるか、手動で配置されるかにかかわらず、 常に描画するグラフ要素の実際のサイズを返します。 この値を変更すると SizeDefault プロパティの値が変わります。</remarks>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChartRect.LocationDefault">
      <summary>グラフコントロールのクライアント座標で、要素のデフォルトの位置を取得または設定します。</summary>
      <remarks>LocationDefault プロパティは、描画するグラフ要素の左上隅の位置を指定します。 正の値は、グラフ要素を配置するグラフのクライアント座標の明示的な位置を示します。 負の値は、自動配置が有効であることを示します。</remarks>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChartRect.SizeDefault">
      <summary>要素のデフォルトサイズを取得または設定します。</summary>
      <remarks>SizeDefault プロパティは、描画するグラフ要素のサイズを指定します。 正の値は、グラフ要素を配置するグラフのクライアント座標の明示的な幅と高さを示します。 負の値は、自動配置が有効であることを示します。</remarks>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChartRect.Text">
      <summary>要素のテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.baseChartRect.Visible">
      <summary>要素を表示するかどうかをを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1ChartBase.AutoLabelArrangement.MaxIterations">
      <summary>繰り返しの最大数を取得または設定します。</summary>
      <remarks>AutoLabelArrangementMethodEnum.FindingOptimum の場合にのみ有効になります。</remarks>
    </member>
    <member name="P:C1.Win.C1ChartBase.AutoLabelArrangement.Offset">
      <summary>関連付けられた点からの最大の相対距離をピクセル単位で取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartRegionEnum">
      <summary>この列挙体のメンバを使用して、C1Chart の ChartRegionFromCoord メソッドの戻り値を取得します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.None">
      <summary>座標はC1Chart コントロール上にはありません。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.Control">
      <summary>座標はコントロールの領域内に位置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.Header">
      <summary>座標はヘッダタイトル上に位置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.Footer">
      <summary>座標はヘッダタイトル上に位置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.Legend">
      <summary>座標は凡例上に位置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.ChartArea">
      <summary>座標はグラフ領域内の軸の外側に位置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.XAxis">
      <summary>座標は X 軸上に位置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.YAxis">
      <summary>座標は Y 軸上に位置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.Y2Axis">
      <summary>座標は Y2 軸上に位置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.PlotArea">
      <summary>座標は軸の内側のプロット領域内に位置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ChartRegionEnum.ChartLabel">
      <summary>座標はグラフの近くの任意の場所に配置できるグラフラベル上に位置します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.LinePatternEnum">
      <summary>この列挙体のメンバを使用して、ChartGridStyle クラスと ChartLineStyle クラスの Pattern プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LinePatternEnum.Solid">
      <summary>実線。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LinePatternEnum.Dash">
      <summary>破線。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LinePatternEnum.Dot">
      <summary>点線。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LinePatternEnum.DashDot">
      <summary>１点鎖線。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LinePatternEnum.DashDotDot">
      <summary>２点鎖線。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LinePatternEnum.None">
      <summary>なし。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.DesignerDialogEnum">
      <summary>
        この列挙体のメンバを使用して、
        <see cref="T:C1.Win.C1Chart.C1Chart" />クラスの
        <see cref="M:C1.Win.C1Chart.C1Chart.ShowProperties" />メソッドと
        <see cref="M:C1.Win.C1Chart.C1Chart.ShowWizard" />メソッドの値を 設定します。
      </summary>
    </member>
    <member name="F:C1.Win.C1Chart.DesignerDialogEnum.Default">
      <summary>デフォルトダイアログ。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DesignerDialogEnum.V1">
      <summary>古いダイアログ（1.0.20042.14060 以前）。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DesignerDialogEnum.V2">
      <summary>新しいダイアログ（1.0.20042.14060 以降）。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartLineStyle">
      <summary>グラフの線のスタイルを定義します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartLineStyle.Thickness">
      <summary>線の太さをピクセル単位で取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartLineStyle.Color">
      <summary>線の色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartLineStyle.Pattern">
      <summary>線のパターンを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartLineStyle.LineJoin">
      <summary>グラフのラインが折り返す際の接合スタイルを取得または設定します。</summary>
      <remarks>詳細については、System.Drawing.Pen インスタンスの LineJoin プロパティと LineJoin 列挙体の説明を参照してください。通常はデフォルト値による描画で 問題無いですが、グラフのラインが太い場合には、MiterLimit の値の 引き下げや LineJoin.Round によって、折り返し部分のはみ出しを抑制できます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartLineStyle.MiterLimit">
      <summary>グラフのラインが折り返す際の接合部の長さを指定する値を取得または設定します。</summary>
      <remarks>詳細については、System.Drawing.Pen インスタンスの MiterLimit プロパティの 説明を参照してください。通常はデフォルト値による描画で問題ないですが、 グラフのラインが太い場合には、値の引き下げによって、折り返し部分のはみ出しを抑制できます。</remarks>
    </member>
    <member name="T:C1.Win.C1Chart.ChartSymbolStyle">
      <summary>グラフのシンボルのスタイルを定義します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartSymbolStyle.Size">
      <summary>データ点のシンボルのサイズを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartSymbolStyle.OutlineWidth">
      <summary>データ点のシンボルの輪郭線の幅を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartSymbolStyle.Color">
      <summary>データ点のシンボルの色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartSymbolStyle.OutlineColor">
      <summary>データ点のシンボルの輪郭線の色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartSymbolStyle.Shape">
      <summary>データ点シンボルの形状を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.C1Chart">
      <summary>C1Chart コントロールのクラスを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.Reset">
      <summary>グラフ全体のデータと設定をクリアします。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
      <summary>指定した表面上にグラフを描画します。</summary>
      <param name="g"></param>
      <param name="r"></param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ChartRegionFromCoord(System.Int32,System.Int32)">
      <summary>指定した座標での領域を示している ChartRegionEnum の値を返します。</summary>
      <param name="XCoord">x 座標</param>
      <param name="YCoord">y 座標</param>
      <returns>グラフ領域</returns>
      <remarks>グラフ上に描画されているグラフ、ヘッダ、フッタ、凡例、グラフ領域、プロット領域の各要素は、本メソッドの戻り値により識別可能になります。本メソッドでマウスの座標を設定して、マウス下の領域を識別できます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.Dispose">
      <summary>ガベージコレクション用のグラフのオブジェクトを準備します。</summary>
      <remarks>Dispose メソッドの呼び出し後、グラフを参照しないでください。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.GetImage(System.Drawing.Size)">
      <summary>指定したサイズを使用して、現在のグラフイメージを取得します。</summary>
      <param name="sz">イメージサイズ</param>
      <returns>現在表示されているグラフのイメージを表示します。</returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.GetImage">
      <summary>現在のグラフイメージを取得します。</summary>
      <returns>グラフの拡張メタファイルによって作成されたグラフイメージ。</returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.GetImage(System.Drawing.Imaging.ImageFormat,System.Drawing.Size)">
      <summary>指定した形式とサイズを使用して、現在のグラフイメージを取得します。</summary>
      <param name="imgfmt">イメージ形式。</param>
      <param name="sz">イメージサイズ</param>///
      <returns>現在のグラフ表示のイメージ。</returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.GetImage(System.Drawing.Imaging.ImageFormat)">
      <summary>指定した形式を使用して、現在のグラフイメージを取得します。</summary>
      <param name="imgfmt">イメージ形式。</param>
      <returns>現在のグラフ表示のイメージ。</returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.GetMetafile(System.Drawing.Size,System.Drawing.Imaging.EmfType)">
      <summary>指定したサイズと形式を使用して、現在のグラフ表示のメタファイルを取得します。</summary>
      <param name="sz">メタファイルのイメージサイズ。</param>
      <param name="emfType">メタファイル形式。</param>
      <returns>現在のグラフ表示のメタファイル。</returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.GetMetafile(System.Drawing.Size)">
      <summary>指定したサイズを使用して、現在のグラフ表示のメタファイルを取得します。</summary>
      <param name="sz">メタファイルのイメージサイズ。</param>
      <returns>現在のグラフ表示のメタファイル。</returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.GetMetafile">
      <summary>指定したサイズを使用して、現在のグラフ表示のメタファイルを取得します。</summary>
      <returns>現在のグラフ表示のメタファイル。</returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveChartToFile(System.String)">
      <summary>グラフ設定情報（データを含む）を指定されたファイルに保存します。</summary>
      <param name="Filename">ファイル名。</param>
      <remarks>このメソッドは、グラフの情報を指定されたファイルに XML 形式で保存します。ファイルの作成時や保存時にエラーが発生する場合は、その原因を説明する例外が表示されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveChartAndImagesToFile(System.String)">
      <summary>データを含むコントロールの内容すべてを指定のファイルに保存します。</summary>
      <param name="Filename">ファイル名</param>
      <remarks>このメソッドは、グラフの内容を指定の XML 形式のファイルに保存します。 ファイルの作成と書き込みの際にエラーが発生した場合は、 対応する例外がスローされ、エラーの原因が示されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveChartTemplateToFile(System.String)">
      <summary>コントロールのすべてのコンテンツ（データを除く）を指定されたファイルに保存します。</summary>
      <param name="Filename">ファイル名</param>
      <remarks>このメソッドは、指定されたファイルにグラフのコンテンツを XML 形式で保存します。 ファイルの作成時および書き込み時にエラーが発生した場合は、適切な例外が生成され、エラーの原因が示されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveChartTemplateToString">
      <summary>コントロールのすべてのコンテンツ（データを除く）を文字列に保存します。</summary>
      <remarks>このメソッドは、返される文字列にグラフのコンテンツを XML 形式で保存します。 文字列の作成時にエラーが発生した場合は、適切な例外が生成され、エラーの原因が示されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveChartTemplateToString(System.Boolean)">
      <summary>コントロールのすべてのコンテンツ（データを除く）を文字列に保存します。</summary>
      <param name="formatting">返される文字列を読みやいように書式設定およびインデントするかどうかを指定します。</param>
      <remarks>このメソッドは、返される文字列にグラフのコンテンツを XML 形式で保存します。 文字列の作成時にエラーが発生した場合は、適切な例外が生成され、エラーの原因が示されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.LoadChartFromFile(System.String)">
      <summary>グラフのプロパティとデータ設定情報（グラフの説明）をファイルから読み込みます。</summary>
      <param name="Filename">ファイル名。</param>
      <remarks>このメソッドは、指定されたファイルから XML 形式のグラフの情報を読み込みます。 このファイルには、SaveChartToFile メソッドによって出力されている必要があります。 ファイルのオープン、読み込み、およびグラフの描画時にエラーが発生する場合は、その原因を説明する例外が表示されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.LoadChartTemplateFromFile(System.String)">
      <summary>指定されたファイルから、グラフプロパティ、設定（グラフの説明）、および画像を読み込みます。</summary>
      <param name="Filename">ファイル名</param>
      <remarks>このメソッドは、指定された XML 形式のファイルのコンテンツをグラフにロードします。 このファイルには、SaveChartTemplateToFile 呼び出しの出力が含まれている必要があります。 SaveChartTemplateToFile が呼び出されたときにグラフ要素の画像があった場合は、それらの画像も保存された値にリセットされます。 ファイルを開くとき、読み込み時、またはグラフの描画時にエラーが発生した場合は、適切な例外が生成され、エラーの原因が示されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.LoadChartTemplateFromString(System.String)">
      <summary>指定された文字列から、グラフプロパティ、設定（グラフの説明）、および画像を読み込みます。</summary>
      <param name="str">グラフテンプレートを含む文字列</param>
      <remarks>このメソッドは、指定された XML 形式の文字列のコンテンツをグラフにロードします。 この文字列には、SaveChartTemplateToString 呼び出しの出力が含まれている必要があります。 SaveChartTemplateToString が呼び出されたときにグラフ要素の画像があった場合は、それらの画像も保存された値にリセットされます。 読み込み時またはグラフの描画時にエラーが発生した場合は、適切な例外が生成され、エラーの原因が示されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.LoadChartAndImagesFromFile(System.String)">
      <summary>グラフのプロパティとデータ、および背景画像を指定されたファイルから読み取ります。</summary>
      <param name="Filename">ファイル名</param>
      <remarks>このメソッドは、指定された XML 形式のファイルの内容をグラフにロードします。 ファイルは、SaveChartToFile メソッドまたは SaveChartAndImagesToFile メソッドによって出力されている必要があります。 後者のメソッドでが使用された場合は、グラフ要素の画像もすべて保存済みの値で再設定されます。 ファイルのオープン、読み取り、またはグラフの表示の際にエラーが発生した場合は、 対応する例外がスローされ、エラーの原因が示されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveChartToString">
      <summary>グラフの設定情報（データを含む）を指定した文字列に保存します。</summary>
      <returns>グラフの記述を含む文字列。</returns>
      <remarks>このメソッドは、グラフの情報を指定した文字列に XML 形式で保存します。エラー が発生する場合は、その原因を説明する例外が表示されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveChartToString(System.Boolean)">
      <summary>オプションによる書式設定で、グラフ設定情報（データを含む）を指定した文字列に保存します。</summary>
      <param name="formatting">出力文字列の書式を設定するかどうか。</param>
      <returns>グラフの記述を含む文字列。</returns>
      <remarks>このメソッドは、グラフの情報を指定した文字列に XML 形式で保存します。エラー が発生する場合は、その原因を説明する例外が表示されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveChartAndImagesToString(System.Boolean)">
      <summary>データと画像を含むすべてのグラフ情報を、書式設定（オプション）付きで返される文字列に保存します。</summary>
      <param name="formatting">XML 出力で書式設定を使用するかどうか。</param>
      <returns>グラフの説明を含む文字列。</returns>
      <remarks>このメソッドは、グラフの内容を指定の XML 形式の文字列に保存します。 エラーが発生した場合は、対応する例外がスローされ、エラーの原因が示されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.LoadChartFromString(System.String)">
      <summary>グラフのプロパティおよびデータ設定情報（グラフの記述）を指定した文字列から読み込みます。</summary>
      <param name="str">グラフの記述を含む文字列。</param>
      <remarks>このメソッドは、指定された XML 形式の情報をグラフに読み込みます。 この文字列には、SaveChartToFile メソッドによって出力されている必要があります。エラー が発生する場合は、その原因を説明する例外が表示されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.LoadChartAndImagesFromString(System.String)">
      <summary>グラフのプロパティとデータ、および画像を指定された文字列から読み取ります。</summary>
      <param name="str">グラフの説明を含む文字列。</param>
      <remarks>このメソッドは、指定された XML 形式のファイルの内容をグラフにロードします。 ファイルは、SaveChartToFile メソッドまたは SaveChartAndImagesToFile メソッドによって出力されている必要があります。 後者のメソッドでが使用された場合は、グラフ要素の画像もすべて保存済みの値で再設定されます。 ファイルのオープン、読み取り、またはグラフの表示の際にエラーが発生した場合は、 対応する例外がスローされ、エラーの原因が示されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveImage(System.String,System.Drawing.Imaging.ImageFormat,System.Drawing.Size)">
      <summary>グラフのイメージの形式とサイズを設定して、グラフイメージを指定したファイルに保存します。</summary>
      <param name="Filename">イメージのファイル名</param>
      <param name="ImgFmt">イメージの形式</param>
      <param name="sz">イメージのサイズ</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveImage(System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>グラフのイメージの形式を設定して、グラフイメージを指定したファイルに保存します。</summary>
      <param name="Filename">イメージのファイル名</param>
      <param name="ImgFmt">イメージの形式</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat,System.Drawing.Size)">
      <summary>グラフのイメージの形式とサイズを設定して、グラフイメージを指定したストリームに保存します。</summary>
      <param name="stream">イメージ出力の対象となるストリーム</param>
      <param name="ImgFmt">イメージの形式</param>
      <param name="sz">イメージのサイズ</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>グラフのイメージの形式を設定して、グラフイメージを指定したストリームに保存します。</summary>
      <param name="stream">イメージ出力の対象となるストリーム</param>
      <param name="ImgFmt">イメージの形式</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveImage(System.Byte[]@,System.Drawing.Imaging.ImageFormat,System.Drawing.Size)">
      <summary>グラフのイメージの形式とサイズを設定して、グラフイメージを指定したバイト配列に保存します。</summary>
      <param name="ByteArray">イメージ出力の対象となるバイト配列</param>
      <param name="ImgFmt">イメージの形式。</param>
      <param name="sz">イメージのサイズ。</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveImage(System.Byte[]@,System.Drawing.Imaging.ImageFormat)">
      <summary>グラフのイメージの形式を設定して、グラフイメージを指定したバイト配列に保存します。</summary>
      <param name="ByteArray">イメージ出力の対象となるバイト配列。</param>
      <param name="ImgFmt">イメージの形式。</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveImage(System.Drawing.Imaging.ImageFormat,System.Drawing.Size)">
      <summary>グラフのイメージの形式とサイズを設定して、グラフイメージをクリップボードに保存します。</summary>
      <param name="imgfmt">イメージの形式</param>
      <param name="sz">イメージのサイズ</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveImage(System.Drawing.Imaging.ImageFormat)">
      <summary>イメージの表示サイズを使用して、グラフイメージをクリップボードに保存します。</summary>
      <param name="ImgFmt">イメージの形式</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.PrintChart(C1.Win.C1Chart.PrintScaleEnum,System.Drawing.Rectangle,System.Drawing.Printing.PageSettings)">
      <summary>指定したスケーリング、ページ設定、矩形を設定して、コントロールを印刷します。</summary>
      <param name="scaling">グラフのスケーリング</param>
      <param name="r">矩形</param>
      <param name="ps">ページ設定</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.PrintChart(C1.Win.C1Chart.PrintScaleEnum,System.Drawing.Rectangle,System.Drawing.Printing.PageSettings,System.Boolean)">
      <summary>指定したスケーリング、ページ設定、矩形、形式を設定して、コントロールを印刷します。</summary>
      <param name="scaling">グラフのスケーリング。</param>
      <param name="r">矩形。</param>
      <param name="ps">ページ設定。</param>
      <param name="bitmap">ビットマップとして印刷。</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.PrintChart(C1.Win.C1Chart.PrintScaleEnum,System.Drawing.Rectangle)">
      <summary>指定したスケーリングと矩形を設定して、コントロールを印刷します。</summary>
      <param name="scaling">グラフのスケーリング</param>
      <param name="r">矩形</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.PrintChart(C1.Win.C1Chart.PrintScaleEnum)">
      <summary>指定したスケーリングを使用して、コントロールをページの余白範囲内に印刷します。</summary>
      <param name="scaling">グラフのスケーリング</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.PrintChart">
      <summary>デフォルトスケーリングを使用して、コントロールをページの余白範囲内に印刷します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.PageSetup">
      <summary>印刷時にページの設定を指定するために、ページ設定ダイアログボックスを開きます。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.PrintSetup">
      <summary>印刷の設定を指定するために、印刷設定ダイアログボックスを開きます。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ShowWizard">
      <summary>実行時にグラフウィザードダイアログボックスを開きます。</summary>
      <returns>DialogResult 値。</returns>
      <remarks>グラフウィザードのプロパティを使用して、グラフを段階的で論理的に作成・修正できます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ShowProperties">
      <summary>実行時にグラフのプロパティダイアログを開きます。</summary>
      <returns>DialogResult 値。</returns>
      <remarks>プロパティダイアログを使用して、実行時にグラフのプロパティ（データを含む）を変更できます。グラフのすべての設定可能なプロパティが複数タブからアクセスできます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ShowProperties(C1.Win.C1Chart.PropertyPageFlags)">
      <summary>実行時にグラフの指定したプロパティをカスタムダイアログで表示します。</summary>
      <param name="ppf"></param>
      <returns>DialogResult 値。</returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ShowWizard(C1.Win.C1Chart.DesignerDialogEnum)">
      <summary>実行時に指定したダイアログバージョンでグラフウィザードを開きます。</summary>
      <param name="version">ダイアログのバージョン</param>
      <returns>ダイアログの結果。</returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ShowProperties(C1.Win.C1Chart.DesignerDialogEnum)">
      <summary>実行時に指定したダイアログバージョンでプロパティダイアログを開きます。</summary>
      <param name="version">ダイアログのバージョン</param>
      <returns>ダイアログの結果。</returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ShowVisualEffectsEditor">
      <summary>実行時に［VisualEffects エディタ］を起動します。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.GenerateHistogramData(System.Double[],System.Double[],System.Double,System.Double[]@,System.Double[]@,System.Double[]@)">
      <summary>
        ローデータの値の配列と指定した区間の境界の値からヒストグラムデータを生成します。 正規化は正規化の区間幅を指定して行われます。
        <para>グラフコントロールはヒストグラムのグラフ種別も提供していますが、 本メソッドを使用してヒストグラムに類似するグラフを作成することができます。</para>
      </summary>
      <param name="RawData">データ値を格納している Double 型の配列を指定します。</param>
      <param name="Boundaries">ヒストグラム区間の境界を指定します。境界値の配列は内部でソートされ、重複した境界の値が削除されます。</param>
      <param name="NormalizationWidth">正規化に使用される区間の幅を指定します。 ゼロ以下の値を指定した場合は、正規化が行われません。</param>
      <param name="IntervalBounds">整えて並べられたヒストグラム区間の境界値を格納している Double 型配列への参照。 この配列は入力された区間の境界の配列から内部的に生成されます。</param>
      <param name="IntervalCounts">IntervalBounds 配列で指定される区間内のデータ点の数を格納している Double 型配列への参照。 この配列の数は必ず IntervalBounds 配列の数より一つ小さい値になります。</param>
      <param name="BoundaryIntervals">区間の境界の範囲外にあるデータ点の数を格納している要素数２の Double 型配列への参照。 要素０は、区間の境界の最小値より小さい値のデータ点の数を示します。 要素１は、区間の境界の最大値より大きい値のデータ点の数を示します。</param>
      <returns>正常に行われたかどうかを示すブール型の値を返します。</returns>
      <remarks>連続した境界値は区間を示します。区間の数は境界の数より一つ小さい値になります。 例えば、1、3、5、7、9 の境界値の場合は、4つの区間（1-3、3-5、5-7、7-9）が作成されます。 各区間は同じ幅である必要がないことに注意してください。 IntervalBounds 配列に不均等の幅が指定されている場合は、区間数が正規化されます。 言い換えれば、正規化後、他の区間の幅の2倍に設定されて区間の幅が指定されていますが、同じデータ点の数を格納している区間の場合、半分の数が返されます。</remarks>
      <exception cref="T:System.ArgumentNullException">RawData または Boundaries が空きの場合は、発生します。</exception>
      <exception cref="T:System.ArgumentException">RawData または Boundaries 配列は小さいの場合は、発生します。</exception>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.GenerateHistogramData(System.Double[],System.Double,System.Double,System.Int32,System.Double,System.Double[]@,System.Double[]@,System.Double[]@)">
      <summary>開始値、区間の幅、区間の数により指定された区間の境界とローデータの配列からヒストグラムデータを生成します。</summary>
      <param name="RawData">データ値を格納している Double 型の配列を指定します。</param>
      <param name="Start">先頭の区間の開始値を指定します。</param>
      <param name="IncrementalWidth">それぞれの区間の幅を指定します。</param>
      <param name="Count">連続する均等幅の区間の個数を指定します。</param>
      <param name="NormalizationWidth">正規化に使用される区間の幅を指定します。 ゼロ以下の値を指定した場合は、正規化が行われません。</param>
      <param name="IntervalBounds">整えて並べられたヒストグラム区間の境界値を格納している Double 型配列への参照。 この配列は入力された区間の境界の配列から内部的に生成されます。</param>
      <param name="IntervalCounts">IntervalBounds 配列で指定される区間内のデータ点の数を格納している Double 型配列への参照。 この配列の数は必ず IntervalBounds 配列の数より一つ小さい値になります。</param>
      <param name="BoundaryIntervals">区間の境界の範囲外にあるデータ点の数を格納している要素数２の Double 型配列への参照。 要素０は、区間の境界の最小値より小さい値のデータ点の数を示します。 要素１は、区間の境界の最大値より大きい値のデータ点の数を示します。</param>
      <returns>正常に行われたかどうかを示すブール型の値を返します。</returns>
      <remarks>
        連続した境界値は区間を示します。区間の数は境界の数より一つ小さい値になります。 例えば、Start = 1、IncrementalWidth = 2 および Count= 4 の場合は、1、3、5、7、9 の境界値の4つの区間（1-3、3-5、5-7、7-9）が作成されます。
        <para>一つだけデーセットを使用する場合は、すべての区間の幅が均等なので、区間数の正規化が必要ではありません。 しかしながら、複数のデータセットを使用して異なる区間の幅が設定されている場合は、正規化を行うとより一貫した結果が返されます。</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">RawData が null のときにスローされます。</exception>
      <exception cref="T:System.ArgumentException">RawData 配列が短過ぎるときにスローされます。</exception>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveLocalizations(System.String)">
      <summary>現在のローカライズを指定のファイルにすべて書き込みます。</summary>
      <param name="LocalizationFile">ローカライズが書き込まれているファイルを指定します。</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveLocalizations(System.IO.Stream)">
      <summary>現在のローカライズを指定のストリームにすべて書き込みます。</summary>
      <param name="stream">ローカライズが書き込まれているストリームを指定します。</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.SaveLocalizations(System.Byte[]@)">
      <summary>現在のローカライズを指定のバイト配列にすべて書き込みます。</summary>
      <param name="byteArray">ローカライズが書き込まれているバイト配列を指定します。</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.LoadLocalizations(System.String)">
      <summary>指定のファイルからローカライズをすべて読み取り、それらを実行時にローカルに使用します。</summary>
      <param name="LocalizationFile">ローカライズが書き込まれているファイルを指定します。</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.LoadLocalizations(System.IO.Stream)">
      <summary>指定のストリームからローカライズをすべて読み取り、それらを実行時にローカルに使用します。</summary>
      <param name="stream">ローカライズが書き込まれているストリームを指定します。</param>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.LoadLocalizations(System.Byte[])">
      <summary>指定のバイト配列からローカライズをすべて読み取り、 それらを実行時にローカルに使用します。</summary>
      <param name="byteArray">ローカライズが書き込まれているバイト配列を指定します。</param>
    </member>
    <member name="E:C1.Win.C1Chart.C1Chart.DataSourceChanged">
      <summary>DataSource プロパティが変更されたときに発生します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.Repaint">
      <summary>プロパティが変更されたときにグラフを自動的に再描画するかどうかを示す値を取得または設定します。</summary>
      <remarks>Repaint プロパティが False の場合、グラフのプロパティが変更されたときのグラフの再描画の回数を最小にします。これは、イベント内で何度もグラフのプロパティが変更されたときの再描画の 繰り返しに伴うちらつきを抑える場合に便利です。 プロパティの変更が完了したら、Repaint を True に設定する必要があることに注意してください。 True に設定しないと、グラフが再描画しなくなる可能性があります。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.Style">
      <summary>グラフのスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.Header">
      <summary>コントロールの Header オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.Footer">
      <summary>コントロールの Footer オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.ChartArea">
      <summary>コントロールの Chart Area オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.ChartLabels">
      <summary>コントロールのグラフラベルのオブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.ChartGroups">
      <summary>コントロールのグラフグループのオブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.Legend">
      <summary>コントロールの Legend オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.PrintDialogUsage">
      <summary>PrintChart メソッドを呼び出すときに印刷ダイアログがポップアップされるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.AssemblyFileVersionString">
      <summary>コントロールのアセンブリファイルバージョンを文字列として取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.AssemblyVersionString">
      <summary>コントロールのアセンブリバージョンを文字列として取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.Interaction">
      <summary>コントロールのインタラクションオブジェクトを取得します。</summary>
      <remarks>インタラクションオブジェクトは、マウスによる回転、スケール、移動、ズームを含む、グラフの自動化したインタラクティブ機能を制御します。</remarks>
    </member>
    <member name="E:C1.Win.C1Chart.C1Chart.Transform">
      <summary>グラフがインタラクティブに変更されているときに発生します。本イベントにて、ユーザインタラクティブ操作のパラメータについて追加の制御を許可します。軸範囲の変更、変更の停止などの操作も設定可能です。</summary>
    </member>
    <member name="E:C1.Win.C1Chart.C1Chart.DrawDataSeries">
      <summary>データセットが描画されるときに発生します。 このイベントでは、データのプロットに使用されるブラシを変更（ハッチング、グラデーション、テクスチャを含む）することができます。</summary>
    </member>
    <member name="E:C1.Win.C1Chart.C1Chart.DrawLegendEntry">
      <summary>凡例項目を描画するときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Chart.C1Chart.PaintPlotArea">
      <summary>プロット領域を描画するときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Chart.C1Chart.AxisScroll">
      <summary>軸スクロールバーのスクロール位置が変化すると必ず発生します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.DataSource">
      <summary>グラフにバウンドするデータソースオブジェクトを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.ToolTip">
      <summary>ChartTooltip オブジェクトを取得します。</summary>
      <remarks>ChartTooltip オブジェクトはツールチップオプションを制御します。</remarks>
    </member>
    <member name="E:C1.Win.C1Chart.C1Chart.ShowTooltip">
      <summary>ツールチップが表示されるときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Chart.C1Chart.HighlightChanged">
      <summary>ハイライトされるデータ要素が変更されたときに発生します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.UseAntiAliasedText">
      <summary>グラフのテキストを描画する際にアンチエイリアスを使用するかどうかを示す値を取得または設定します（テキストのみ）。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.UseAntiAliasedGraphics">
      <summary>グラフのグラフィックスを描画する際にアンチエイリアスを使用するかどうかを示す値を取得または設定します（グラフィックのみ）。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.UseGrayscale">
      <summary>指定された色の代わりにグレースケールでグラフを描画するかどうかを示す値を取得または設定します。</summary>
      <remarks>グレースケールは、白黒デバイスへの出力をプレビューすることを目的としています。 これは、内部のスタイルブラシやペンの色に影響しません。出力デバイスおよび画像へのグラフのレンダリングにのみ影響します。 グレースケールを使用すると、暗黙的にダブルバッファリング出力が使用されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.ColorGeneration">
      <summary>特定のテーマに基づいて、自動的な色生成を指定する値を取得または設定します。</summary>
      <remarks>
        デフォルト値は ColorGeneration.Custom です。これは、C1Chart の標準の色生成方法を 指定します。その他のオプションは、Microsoft Office のカラーテーマに 類似しています。
        <para>このプロパティの特別な設定として、ColorGeneration.CopyToCustom があります。 ColorGeneration プロパティを CopyToCustom 値に設定すると、現在の色が Custom 色生成にコピーされ、このプロパティは自動的に ColorGeneration.Custom に設定されて、 詳細なカスタマイズを行うことができます。チャートデータが文字列、ファイル、 またはデザイナによってロードされると、必ずこの操作が自動的に 実行されます。色のカスタマイズは各 ChartDataSeries の LineStyle と SymbolStyle に対して行われるため、これらのカスタマイズは 現在の状態値と Custom 状態値の両方に影響します。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.C1Chart.VisualEffects">
      <summary>VisualEffects オブジェクトを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.AlarmZoneShapeEnum">
      <summary>この列挙体のメンバを使用して、AlarmZone オブジェクトの Shape プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlarmZoneShapeEnum.Rectangle">
      <summary>アラームゾーンの限度のデータ座標で指定した矩形。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlarmZoneShapeEnum.Ellipse">
      <summary>アラームゾーンの限度を示すデータ座標で指定した枠で境界した楕円。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlarmZoneShapeEnum.Polygon">
      <summary>XY 軸、およびアラームゾーンの限度のデータ座標で指定した枠範囲を持つポリゴン。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.PolygonSourceEnum">
      <summary>この列挙体のメンバを使用して、PolygonData オブジェクトの PolygonSource プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PolygonSourceEnum.Arrays">
      <summary>Polygon データは、ChartCoordArray オブジェクトから指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PolygonSourceEnum.DataSeries">
      <summary>ポリゴンデータは、親オブジェクトの ChartGroup に関連付けられた 指定したデータセットによって指定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.AlarmZone">
      <summary>アラームゾーンを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.AlarmZone.IsInsideZone(System.Int32,System.Int32)">
      <summary>指定したクライアント座標がアラームゾーン内に存在する場合は、True を返します。</summary>
      <remarks>AlarmZone の上に別の AlarmZone が重なる場合があります。 指定された座標で別の AlarmZone がこの AlarmZone に重なっているか どうかに関係なく、座標がこの AlarmZone の範囲内にある限り、 このメソッドは true を返します。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.Name">
      <summary>アラームゾーンの名前を取得または設定します。</summary>
      <remarks>名前はインデックスとして使用したり、識別を簡単にするために使用します。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.BackColor">
      <summary>アラームゾーンの背景色を取得または設定します。</summary>
      <remarks>PlotArea から継承されます。アラームゾーンは指定したゾーンに常に背景色を表示します。 パターンを使用する場合、ForeColor プロパティはパターン線の描画にも使用されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.ForeColor">
      <summary>AlarmZone の前景色を取得または設定します。</summary>
      <remarks>PlotArea から継承されます。アラームゾーンは指定したゾーンに常に背景色を表示します。 パターンを使用する場合、ForeColor プロパティはパターン線の描画にも使用されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.PatternVisible">
      <summary>指定した PatternStyle プロパティを使用して、アラームゾーンの背景を描画するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.PatternStyle">
      <summary>PatternVisible プロパティが True の場合に使用するパターンのスタイルを取得または設定します。</summary>
      <remarks>PatternStyle はアラームゾーンの ForeColor で指定した色で描画されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.Visible">
      <summary>アラームゾーンを表示するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.NearExtent">
      <summary>アラームゾーンの X 軸のデータ座標の左方向の限度を取得または設定します。</summary>
      <remarks>NearExtent は常に、アラームゾーンの X 軸のデータ座標の下限値を示します。FarExtent プロパティと NearExtent プロパティが０に設定されている場合は、X 軸の Max プロパティと Min プロパティの値として指定されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.FarExtent">
      <summary>アラームゾーンの X 軸のデータ座標の右方向の限度を取得または設定します。</summary>
      <remarks>FarExtent は常に、アラームゾーンの X 軸のデータ座標の上限値を示します。FarExtent プロパティと NearExtent プロパティが０に設定されている場合は、X 軸の Max プロパティと Min プロパティの値として指定されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.LowerExtent">
      <summary>アラームゾーンの Y 軸のデータ座標の下限を取得または設定します。</summary>
      <remarks>LowerExtent は常に、アラームゾーンの Y 軸のデータ座標の下限値を示します。UpperExtent プロパティと LowerExtent プロパティが０に設定されている場合は、Y 軸の Max プロパティと Min プロパティの値として指定されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.UpperExtent">
      <summary>アラームゾーンの Y 軸のデータ座標の上限を取得または設定します。</summary>
      <remarks>UpperExtent は常に、アラームゾーンの Y 軸のデータ座標の上限値を示します。UpperExtent プロパティと LowerExtent プロパティが０に設定されている場合は、Y 軸の Max プロパティと Min プロパティの値として指定されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.Shape">
      <summary>アラームゾーンの形状を取得または設定します。</summary>
      <remarks>矩形のアラームゾーンはアラームゾーンの限度のデータ座標で指定した枠範囲を示します。 楕円のアラームゾーンはアラームゾーンの限度のデータ座標で指定した枠範囲を示します。 ポリゴンのアラームゾーンは、XY 軸およびアラームゾーンの限度のデータ座標で指定した枠範囲を示します。 直交座標グラフの場合にのみ適用されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.GroupIndex">
      <summary>アラームゾーンのデータグループのインデックスを取得または設定します。</summary>
      <remarks>グループインデックスは、アラームゾーンのデータ座標を指定する ChartGroup を示します。グループインデックスで指定された ChartGroup が存在しない場合、アラームゾーンは表示されません。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.MinWidth">
      <summary>アラームゾーンの最小の幅をピクセル単位で取得または設定します。</summary>
      <remarks>アラームゾーンの幅が指定されたピクセル値の幅より小さい場合、アラームゾーンは本プロパティで指定された幅で描画されます。このプロパティは、直交座標グラフで、矩形および楕円の形状のアラームゾーンの場合にのみ適用されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.MinHeight">
      <summary>アラームゾーンの最小の高さをピクセル単位で取得または設定します。</summary>
      <remarks>アラームゾーンの高さが指定されたピクセル値の高さより小さい場合、アラームゾーンは本プロパティで指定された高さで描画されます。このプロパティは、直交座標グラフで、矩形および楕円の形状のアラームゾーンの場合にのみ適用されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZone.PolygonData">
      <summary>PolygonData オブジェクトを取得または設定します。</summary>
      <remarks>ポリゴン形状のアラームゾーンの場合、このオブジェクトはデータセットまたはデータ配列を使用してポリゴンの座標を指定するために使用されます。本プロパティは、直交座標グラフで、ポリゴン形状のアラームゾーンの場合にのみ適用されます。</remarks>
    </member>
    <member name="T:C1.Win.C1Chart.PolygonData">
      <summary>デカルトグラフ内の多角形オブジェクトと多角形の アラームゾーンのデータを提供します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartCoordHolder">
      <summary>ChartCoordArray オブジェクトのデータを管理します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordHolder.IsHole(System.Double)">
      <summary>指定した値がデータ欠損として解釈される場合は、True を返します。</summary>
      <param name="x"></param>
      <returns></returns>
    </member>
    <member name="P:C1.Win.C1Chart.ChartCoordHolder.Length">
      <summary>ChartCoordArray 内のデータ点数を取得します。</summary>
      <remarks>Length プロパティはデータ配列に指定した実際のデータ点数を返します。各 ChartCoorArray オブジェクトの要素の最大数を示しています。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartCoordHolder.PointData">
      <summary>ポイントデータ（X データ値と Y データ値）を制御する ChartCoordArray オブジェ クトを取得します。</summary>
      <remarks>PointData プロパティによって参照される ChartCoordArray オブジェクトにより制御されるデータは、X プロパティおよび Y プロパティの ChartCoordArray オブジェクトによって制御されるのと同じデータです。本プロパティは、取得したデータを Point または PointF データ値として処理するときに利用すると便利です。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartCoordHolder.X">
      <summary>X データ値の ChartCoordArray オブジェクトを取得します。</summary>
      <remarks>X プロパティは、データセットの X データ値を単独で扱うことを可能にします。 X プロパティによって返される ChartCoordArray オブジェクトによって制御されるデータは、PointData プロパティ内で制御されるのと同じデータです。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartCoordHolder.Y">
      <summary>Y データ値の ChartCoordArray オブジェクトを取得します。</summary>
      <remarks>Y プロパティは、データセットの Y データ値を単独で扱うことを可能にします。 Y プロパティによって返される ChartCoordArray オブジェクトによって制御されるデータは、PointData プロパティ内で制御されるのと同じデータです。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartCoordHolder.Hole">
      <summary>親オブジェクトに指定した現在のデータ欠損値を取得します。</summary>
      <remarks>このプロパティはデータ欠損値を倍精度実数値で指定するために使用できます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.PolygonData.PolygonCoords">
      <summary>現在の PolygonData オブジェクトを取得します。本プロパティはプロパティブラウザから利用することを意図しており、コード上では有用ではありません。</summary>
      <remarks>
        <para>利便性のため、X、Y 両方の座標配列は、PolygonCoords プロパティを編集することにより、プロパティブラウザ内で同時に編集することができます。編集は、X、Y それぞれの DataType として適切なフォーマットで実行されます。</para>
        <para>PolygonCoords プロパティは、エディタを呼び出すためのプレースホルダとして、プロパティブラウザ内でのみ使用されることを意図しています。戻り値は部分的なオブジェクトです。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.PolygonData.PolygonSource">
      <summary>多角形データのソースが ChartCoordArray であるか、指定したデータセットであるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.PolygonData.SeriesIndex">
      <summary>多角形が定義されているデータを取得するための ChartDataSeries のインデックスを取得または設定します。</summary>
      <remarks>データセットが属する ChartGroupは、PolygonData オブジェクトが格納されている親オブジェクトによって指定されます。</remarks>
    </member>
    <member name="T:C1.Win.C1Chart.AlarmZonesCollection">
      <summary>アラームゾーンのコレクションを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.AlarmZonesCollection.Add(C1.Win.C1Chart.AlarmZone)">
      <summary>指定したアラームゾーンをコレクションに追加します。</summary>
      <param name="azone"></param>
      <returns>アラームゾーンが追加されたコレクションのインデックスを示す整数値。</returns>
    </member>
    <member name="M:C1.Win.C1Chart.AlarmZonesCollection.Insert(System.Int32,C1.Win.C1Chart.AlarmZone)">
      <summary>指定したアラームゾーンをコレクションの指定したインデックスに挿入します。</summary>
      <param name="index"></param>
      <param name="azone"></param>
    </member>
    <member name="M:C1.Win.C1Chart.AlarmZonesCollection.AddNewZone">
      <summary>新しいアラームゾーンを作成して、コレクションに追加します。</summary>
      <returns>新しいアラームゾーンへの参照。</returns>
      <remarks>新しいアラームゾーンを返します。 コレクションに特有の名前が、追加されたアラームゾーンに提供されます。 AlarmZoneオブジェクトに戻り値を設定して、新しいアラームゾーンを問題なく初期化します。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.AlarmZonesCollection.InsertNewZone(System.Int32)">
      <summary>新しいアラームゾーンを作成して、コレクションの指定したインデックスに挿入します。</summary>
      <param name="index"></param>
      <returns>新しいアラームゾーンへの参照。</returns>
      <remarks>新しい AlarmZone を返します。 このAlarmZoneに、コレクションの他のアラームゾーンが使用されていない、特定の名前を設定します。 AlarmZone オブジェクトに戻り値を設定することにより、新たに追加したアラームゾーンの初期化を容易に行えます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.AlarmZonesCollection.AlarmZoneAtCoord(System.Int32,System.Int32)">
      <summary>指定した座標にある先頭のアラームゾーンへの参照を取得します。</summary>
      <param name="XCoord">テスト対象となるXクライアント座標</param>
      <param name="YCoord">テスト対象となるYクライアント座標</param>
      <returns>指定した座標にある先頭のアラームゾーンへの参照</returns>
      <remarks>アラームゾーンは、プロット領域内の同じ場所に重ね合わせることができます。複数のアラームゾーンが指定された座標に存在する場合、このメソッドは先頭の（前面の）先頭のアラームゾーンへの参照を返します。 指定された座標に存在するアラームゾーンを取得するには、コレクション内のすべてのアラームゾーンを列挙し、IsInsideZone メソッドを使用して確認してください。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZonesCollection.Item(System.Int32)">
      <summary>インデックス値によって指定されたアラームゾーンをコレクションから取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AlarmZonesCollection.Item(System.String)">
      <summary>名前によって指定されたアラームゾーンをコレクションから取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.AnnotationMethodEnum">
      <summary>この列挙体のメンバを使用して、Axis クラスの ValueLabels コレクションの状態を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AnnotationMethodEnum.Values">
      <summary>グラフによって自動的に軸ラベルを添付します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AnnotationMethodEnum.ValueLabels">
      <summary>ValueLabelsCollection の値に基づいて軸ラベルを添付します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AnnotationMethodEnum.Mixed">
      <summary>自動的な軸ラベル（数値目盛形式の軸ラベル）とテキスト目盛形式の軸ラベルの両方を表示します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.AxisIdEnum">
      <summary>この列挙体のメンバを使用して、X、Y、Y2 の各軸を参照します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisIdEnum.X">
      <summary>X 軸を参照します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisIdEnum.Y">
      <summary>Y 軸を参照します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisIdEnum.Y2">
      <summary>Y2 軸を参照します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.TickMarksEnum">
      <summary>この列挙体のメンバを使用して、Axis クラスの TickMajor プロパティと TickMinor プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.TickMarksEnum.None">
      <summary>目盛を表示しません。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.TickMarksEnum.Inside">
      <summary>軸の内側に目盛を表示します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.TickMarksEnum.Outside">
      <summary>軸の外側に目盛を表示します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.TickMarksEnum.Cross">
      <summary>軸を交差する目盛を表示します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.TickLabelsEnum">
      <summary>この列挙体のメンバを使用して、軸ラベルの位置を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.TickLabelsEnum.None">
      <summary>軸ラベルはありません。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.TickLabelsEnum.High">
      <summary>垂直軸の最大値の近くに軸ラベルを描画します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.TickLabelsEnum.Low">
      <summary>垂直軸の最小値の近くに軸ラベルを描画します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.TickLabelsEnum.NextToAxis">
      <summary>軸の横に軸ラベルを描画します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.FormatEnum">
      <summary>この列挙体のメンバを使用して、Axis クラスの AnnoFormat プロパティの値を設定します。</summary>
      <remarks>詳細は、.NET Framework 開発者ガイドの「カスタム DateTime 書式指定文字列」と「カスタム数値書式指定文字列」を参照してください。</remarks>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.NumericManual">
      <summary>.NET の数値書式のカスタマイズを指定する、Axis オブジェクトの AnnoFormatString プロパティと共に使用します（.NET Framework 開発者ガイドの 「カスタム数値書式指定文字列」を参照）。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.NumericCurrency">
      <summary>通貨書式。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.NumericGeneral">
      <summary>一般的な数値書式。固定記数法または科学的記数法を使用して、 最も簡潔な 10 進数形式で書式設定されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.NumericExponential">
      <summary>"-d.ddd…E+ddd" または "-d.ddd…e+ddd" 形式の科学的（指数）書式。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.NumericPercentage">
      <summary>百分率書式。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.NumericRoundtrip">
      <summary>変換された後の数値が、変換前と同一の数値として 返されるように設定された書式。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.NumericHexadecimal">
      <summary>16 進数書式。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateManual">
      <summary>.NET の日付と時刻の書式のカスタマイズを指定する、Axis オブジェクトの AnnoFormatString プロパティと共に使用します（.NET Framework 開発者ガイドの 「カスタム DateTime 書式指定文字列」を参照）。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateShort">
      <summary>短い日付書式。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateLong">
      <summary>長い日付書式。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateFullShortTime">
      <summary>短い日付と時刻の両方を使用する完全な書式。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateFull">
      <summary>完全な日付書式。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateGeneralShortTime">
      <summary>短い時刻書式を使用する一般的な日付書式。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateGeneral">
      <summary>一般的な日付書式。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateMonth">
      <summary>月書式。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateRFC1123">
      <summary>IETF RFC 1123 規格に基づく日付書式。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateSortable">
      <summary>並べ替え可能な日付書式。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateShortTime">
      <summary>短い時刻書式。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateLongTime">
      <summary>長い時刻書式。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateUniversalSortable">
      <summary>世界時刻による並べ替え可能な日付書式。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateUniversal">
      <summary>世界時刻による日付書式。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FormatEnum.DateYear">
      <summary>年書式。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartGridStyle">
      <summary>グラフのグリッド線の外観を制御するすべてのプロパティを含みます。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartGridStyle.Visible">
      <summary>グリッド線を表示するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartGridStyle.Spacing">
      <summary>グリッド線の間隔をデータの座標単位で取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartGridStyle.AutoSpace">
      <summary>グリッド線の間隔を自動的に計算するかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartGridStyle.Color">
      <summary>線の色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartGridStyle.Pattern">
      <summary>線のパターンを取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ValueLabelAppearanceEnum">
      <summary>この列挙体のメンバを使用して、ValueLabel クラスの Appearance プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ValueLabelAppearanceEnum.Label">
      <summary>テキストラベルのみ。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ValueLabelAppearanceEnum.TriangleMarker">
      <summary>三角形マーカーを付けたラベル。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ValueLabelAppearanceEnum.ArrowMarker">
      <summary>矢印マーカーを付けたラベル。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ValueLabelAppearanceEnum.CustomMarker">
      <summary>カスタムマーカーを付けたラベル。マーカーは DrawMarker イベントで描画する必要があります。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ValueLabel">
      <summary>特定の軸座標で定義されたテキストの表示に使用される 軸ラベルを定義します。</summary>
    </member>
    <member name="E:C1.Win.C1Chart.ValueLabel.DrawMarker">
      <summary>軸ラベルのマーカーが描画されるときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Chart.ValueLabel.ValueChanged">
      <summary>軸ラベルの位置が変更されたときに発生します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.Appearance">
      <summary>軸ラベルの外観を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.MarkerSize">
      <summary>軸ラベルのマーカーのサイズを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.Moveable">
      <summary>軸ラベルをエンドユーザーがドラッグできるようにするかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.GridLine">
      <summary>軸ラベルでグリッド線を描画するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.Rectangle">
      <summary>軸ラベルのテキストが占める矩形領域を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.MarkerRectangle">
      <summary>軸ラベルのマーカーの矩形領域を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.BackColor">
      <summary>軸ラベルの背景色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.Color">
      <summary>軸ラベルの色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.Text">
      <summary>軸ラベルのテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.NumericValue">
      <summary>暗黙的に Double 型に変換可能な数値によって、軸ラベルに置き換える軸の値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.DateTimeValue">
      <summary>日付型の値によって、軸ラベルに置き換える軸の値を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ValueLabelsCollection">
      <summary>ChartArea の X、Y、Y2 の各オブジェクトについて、ValueLabels の外観の定義に使用される ValueLabels オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.ValueLabelsCollection.AddNewLabel">
      <summary>新しい空のラベルを ValueLabels コレクションに追加します。</summary>
      <returns>追加された軸ラベル。</returns>
    </member>
    <member name="M:C1.Win.C1Chart.ValueLabelsCollection.Add(C1.Win.C1Chart.ValueLabel)">
      <summary>指定したラベルを ValueLabels コレクションに追加します。</summary>
      <param name="label"></param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Chart.ValueLabelsCollection.Add(System.Object,System.String)">
      <summary>新しいラベルを追加して、初期化引数を設定します。</summary>
      <param name="val">置き換える軸の値。</param>
      <param name="text">軸のラベルに置き換える文字列。</param>
      <returns>新しいラベルのインデックス。</returns>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabelsCollection.Count">
      <summary>コレクション内の ValueLabels の数を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabelsCollection.Item(System.Int32)">
      <summary>インデックスによって、コレクションから指定したラベルを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabelsCollection.Item(System.Double)">
      <summary>数値のマッチングによって、コレクションから指定した値ラベルを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabelsCollection.Item(System.DateTime)">
      <summary>DateTime 値のマッチングによって、コレクションから指定した値ラベルを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabelsCollection.Item(System.String)">
      <summary>テキストのマッチングによって、コレクションから指定した値ラベルを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.AxesCollection">
      <summary>Axes オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxesCollection.Item(System.Int32)">
      <summary>インデックスによって、コレクションから指定した軸を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxesCollection.Item(System.String)">
      <summary>名前によって、コレクションから指定した軸を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ScrollBarAppearanceEnum">
      <summary>ScrollBarAppearanceEnum 列挙体は、軸スクロールバーのスタイルと外観を選択するために使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ScrollBarAppearanceEnum.Normal">
      <summary>標準または通常システムのスタイルが設定されたスクロールバーが使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ScrollBarAppearanceEnum.Flat">
      <summary>3D 効果を伴わない、フラットなスタイルが設定されたスクロールバーが使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ScrollBarAppearanceEnum.XP">
      <summary>スタイルが設定されたスクロールバーは、現在の Windows テーマと一致します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.AxisScrollEventArgs">
      <summary>組み込み軸スクロールバーで値が変更されたときに必ず発生する AxisScrollEvent のデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollEventArgs.OldValue">
      <summary>イベント前の軸スクロールバーの値を取得します。軸スクロールバーの値は、 最小値と最大値の間の端数を示します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollEventArgs.AxisId">
      <summary>スクロールされる軸を特定する値を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollEventArgs.ScrollOrientation">
      <summary>軸スクロールバーの向きを示す値を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollEventArgs.ScrollEventType">
      <summary>スクロールイベントのタイプを示す値を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollEventArgs.NewValue">
      <summary>イベント完了後の軸スクロールバーの値を取得または設定します。 軸スクロールバーの値は、最小値と最大値の間の端数を示します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.AxisScrollBar">
      <summary>ScrollBar クラスの概要の説明です。</summary>
    </member>
    <member name="E:C1.Win.C1Chart.AxisScrollBar.AxisScroll">
      <summary>スクロールバーのスクロール位置が変化すると必ず発生します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Anchored">
      <summary>スクロールバーの位置を PlotArea 境界上に固定したままにするかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Buttons">
      <summary>スクロールバーのボタンを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Size">
      <summary>スクロールバーのサイズを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Appearance">
      <summary>スクロールバーの外観を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Value">
      <summary>スクロールバー上のスクロールボックスの現在の相対位置を表す値を 取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Scale">
      <summary>スクロールバーのスケールを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Step">
      <summary>スクロールバー位置の変更の単位を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Min">
      <summary>スクロールバー位置の最小値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Max">
      <summary>スクロールバー位置の最大値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.ScaleMenu">
      <summary>ユーザーがスケールボタンをクリックしたときに表示するカスタムコンテキストメニューを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.ScaleMenuItems">
      <summary>ScaleMenuItem のコレクションを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Alignment">
      <summary>プロット領域に対するスクロールバーの配置を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.Visible">
      <summary>スクロールバーの表示状態を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.ScrollKeys">
      <summary>スクロールバーが反応するキーを取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.AxisScrollBar.ScaleMenuItem">
      <summary>AxisScrollBar.ScaleMenuItem は、AxisScrollBar の ScaleMenuItem を記述します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.ScaleMenuItem.Scale">
      <summary>メニュー項目に対応するスケールを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.ScaleMenuItem.Text">
      <summary>メニュー項目のテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AxisScrollBar.ScaleMenuItem.Value">
      <summary>メニュー項目に対応する値を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.Chart2DLayoutEnum">
      <summary>この列挙体のメンバを使用して、ChartData クラスの Layout プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DLayoutEnum.ArrayLayout">
      <summary>配列のデータレイアウト。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DLayoutEnum.GeneralLayout">
      <summary>一般的なデータレイアウト。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.FitTypeEnum">
      <summary>この列挙体のメンバを使用して、ChartDataSeries クラスの FitType プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FitTypeEnum.Line">
      <summary>個々のデータ点は直線で結ばれます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FitTypeEnum.Spline">
      <summary>曲線は個々のデータ点を通る滑らかな線となり、とがった角や、 曲線の張りの急な変化はありません。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FitTypeEnum.Beziers">
      <summary>曲線はすべてのデータ点を通りませんが、データ点が磁石のように作用して、 特定方向に曲線を引っ張り、曲線の曲がり方に影響を与えます。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.SeriesDisplayEnum">
      <summary>この列挙体のメンバを使用して、ChartDataSeries クラスの Display プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SeriesDisplayEnum.Show">
      <summary>データセットを表示します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SeriesDisplayEnum.Hide">
      <summary>データセットを含めますが、表示しません。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SeriesDisplayEnum.Exclude">
      <summary>データセットを除外し、表示しません。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SeriesDisplayEnum.ExcludeHoles">
      <summary>データセットを表示しますが、データ欠損は無視されます。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.StatisticalData">
      <summary>このクラスは、統計ロジックを提供して、そのプロパティによって 計算値を返します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.Confidence">
      <summary>関連付けられたデータの信頼区間をレポートするオブジェクトを取得します。</summary>
      <remarks>返される ConfidenceInterval オブジェクトにより、 区間のレポートに加え、希望する確率レベルの 信頼区間を指定できます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.DataStatus">
      <summary>データを統計計算に使用できるかどうかを示す文字列を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.N">
      <summary>統計計算に使用するデータ要素の数を取得します。</summary>
      <remarks>データ欠損は、計算から除外されます。そのため、このプロパティは データ要素の実際の数より少なくなる場合があります。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.PropertyGridEnabled">
      <summary>統計計算をプロパティグリッドでかつリフレクションによってレポートするかどうかを取得または設定します。</summary>
      <remarks>デフォルトでは、このプロパティは常に False で、維持されません。このプロパティは、 データのプロパティを検索するときに不必要で無用な時間のかかる計算を制限するために提供されています。 コード化されたプロパティへのアクセスには、このプロパティを使用できません。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.Mean">
      <summary>関連付けられたデータの平均値を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.Median">
      <summary>関連付けられたデータの中央値を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.Rsq">
      <summary>関連付けられた XY データの R２乗統計値を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.StdDev">
      <summary>関連付けられたデータの標準偏差を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.Variance">
      <summary>関連付けられたデータの分散を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.StatisticalData.ConfidenceInterval">
      <summary>指定した信頼レベルの信頼区間をレポートするオブジェクトを示します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.ConfidenceInterval.Probability">
      <summary>関連付けられたデータの信頼区間を計算するために、希望する確立レベルを取得または設定します。</summary>
      <remarks>Probability プロパティを明示的に変更されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.StatisticalData.ConfidenceInterval.Interval">
      <summary>指定した確立レベルに関連付けられたデータの信頼区間を取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartDataArray">
      <summary>データ配列のコンテナオブジェクト。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.IsHole(System.Object)">
      <summary>指定した値がデータ欠損として解釈されるかどうかを決定します。</summary>
      <param name="value"></param>
      <returns>指定した値がデータ欠損として解釈されるかどうかを示すブール値。</returns>
      <remarks>値は、指定した値のデータ型に基づいて、自動的に内部データ型に変換されます。 値は、格納されているデータ欠損値に比較されます。NaN などの無効な 浮動小数点データ値は欠損値として処理されることに注意してください。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.CopyDataIn(System.Object)">
      <summary>データを ChartDataArray にコピーして、すべての既存のデータを置き換えます。</summary>
      <param name="o"></param>
      <returns>データが ChartDataArray に適切にコピーされたかどうかを示すブール値。</returns>
      <remarks>
        <para>渡される DataArray はオブジェクトですが、基本的なデータ型は Single、Double、 Integer、Int16、Int64、Decimal、DateTime（VBの場合）、または float、 double、int、Int16、Int64、decimal、DateTime（C# の場合）である必要があります。 オブジェクトの配列は受け入れられません。PointData が ChartDataArray によって 管理される場合は、PointF オブジェクトの配列も渡すことができます。</para>
        <para>すべての値は、Double（VB の場合）または double（C# の場合）データ型として内部に格納されることに注意してください。 適切な入力データ型となるように、自動的にデータ変換が行われます。 たとえば、データ要素を DateTime 値（2002 年1月1日など）に設定すると、内部的には OLE の日付型として 格納され、その後で Double/double 型として 37257 に変換されます。</para>
        <para>さらに、コピーされた配列の長さは、ChartDataArray の長さを定義し、 Length プロパティが新しい値を返します。</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.CopyDataOut">
      <summary>デフォルトデータ型を使用し、ChartDataArray からデータをコピーします。</summary>
      <returns>内部的に、Double（VB の場合）または double（C# の場合）値に適切に変換された、 デフォルトデータ型の配列を含むオブジェクト。</returns>
      <remarks>
        <para>渡される配列はオブジェクトですが、基本的なデータ型は Single、Double、Integer、 Int16、Int64、Decimal、DateTime（VB の場合）、または float、double、int、 Int16、Int64、decimal、DateTime (C# の場合)です。PointData が ChartDataArray によって 管理される場合は、PointF オブジェクトの配列も返すことができます。</para>Visual Basic では、戻り値を明示的に変換する必要はありません。 ただし、C# の強い型付けでは明示的な変換が必要です。
        <para>すべての値は、Double（VB の場合）または double（C# の場合）データ型として内部に格納されることに注意してください。 適切なデフォルトデータ型となるように、自動的にデータ変換が行われます。</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.CopyDataOut(System.Type)">
      <summary>指定したデータ型を使用し、ChartDataArray からデータをコピーします。</summary>
      <param name="t">データ型</param>
      <returns>内部的に、Double（VB の場合）または double（C# の場合）値に適切に変換された、 指定したデータ型の配列を含むオブジェクト。</returns>
      <remarks>
        <para>渡される配列はオブジェクトですが、基本的なデータ型は Single、Double、Integer、 Int16、Int64、Decimal、DateTime（VB の場合）、または float、double、int、 Int16、Int64、decimal、DateTime (C# の場合)です。PointData が ChartDataArray によって 管理される場合は、PointF オブジェクトの配列も返すことができます。</para>Visual Basic では、戻り値を明示的に変換する必要はありません。 ただし、C# の強い型付けでは明示的な変換が必要です。
        <para>すべての値は、Double（VB の場合）または double（C# の場合）データ型として内部に格納されることに注意してください。 指定したデータ型に応じて、データ変換が自動的に行われます。</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.Add(System.Object)">
      <summary>新しい値を ChartArrayArray の末尾に追加します。</summary>
      <param name="value">新しいデータ値。</param>
      <returns>ChartDataArray 内の新しい値のインデックスを示す整数。新しいインデックスは常に、 新しい値を追加する前の ChartDataArray の Length です。</returns>
      <remarks>Add メソッドは、ChartDataArray の長さを１つ拡張し、 新規作成した要素に新しい値を追加します。 値は、自動的に内部ストレージデータ型に変換されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.Clear">
      <summary>すべての値を ChartDataArray から削除します。</summary>
      <remarks>ChartDataArray のすべての要素を削除して、Length を０に設定します。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.Contains(System.Object)">
      <summary>値が ChartDataArray 内にあるかどうかを決定します。</summary>
      <param name="value"></param>
      <returns>指定した値が ChartDataArray の要素の１つに 存在するかどうかを示すブール値。</returns>
      <remarks>値は、指定した値のデータ型に基づいて、自動的に内部データ型に 変換されます。変換された結果を使用して、値と ChartDataArray の要素が比較されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.IndexOf(System.Object)">
      <summary>ChartDataArray 内の指定した値の現在のインデックスを取得します。</summary>
      <param name="value"></param>
      <returns>ChartDataArray 内の指定した値の要素を示す整数を返します。 値が見つからない場合、戻り値は –１です。</returns>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.Insert(System.Int32,System.Object)">
      <summary>新しい値を ChartDataArray の指定したインデックスに挿入します。</summary>
      <param name="index">新しい値のインデックス。</param>
      <param name="value">新しいデータ値。</param>
      <remarks>値は、指定した位置に挿入され、ChartDataArray の長さは １だけ大きくなります。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.Remove(System.Object)">
      <summary>指定した値の最初の出現を ChartDataArray から削除します。</summary>
      <param name="value">削除する値。</param>
      <remarks>値は、指定した値のデータ型に基づいて、自動的に内部データ型に 変換されます。変換された結果を使用して、値と ChartDataArray の要素が比較されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataArray.RemoveAt(System.Int32)">
      <summary>指定したインデックスの要素を ChartDataArray から削除します。</summary>
      <param name="index">削除するデータ値のインデックス。</param>
      <remarks>ChartDataArray の要素は削除され、ChartDataArray の長さは １だけ小さくなります。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataArray.DataType">
      <summary>データのデフォルトのデータ型を取得または設定します。</summary>
      <remarks>CopyDataOut メソッドで使用されるデフォルトのデータ型を指定します。 デフォルトの DataType プロパティが明示的に設定されない場合、返されるデータ型は Item プロパティの CopyDataIn メソッドを使用して最後に入力されたデータ型になります。 受け入れ可能な入力データ型には、Single、Double、Integer、Int16、Int64、Decimal、DateTime（VB の場合）、 および float、double、int、Int16、Int64、decimal、DateTime（C# の場合）が含まれます。 PointData が ChartDataArray によって管理される場合は、PointF オブジェクトも使用されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataArray.Length">
      <summary>データ配列の長さを取得または設定します。</summary>
      <remarks>既存の配列の長さを拡大する場合、新しく作成される要素には データ欠損値が入力されます。配列の長さを短縮する場合、 切り捨てられた要素は破棄されます。Item プロパティによって 値を設定する前に、配列の長さを拡大する必要があります。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataArray.Hole">
      <summary>ChartDataArray.DataType プロパティで指定したデータ型に 変換された ChartData.Hole 値を持つ Object を返します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataArray.Statistics">
      <summary>この ChartDataArray のデータの統計を提供するオブジェクトを取得します。</summary>
      <remarks>戻り値の StatisticalData オブジェクトは、データの平均値、中央値、 標準偏差、分散、および信頼区間をレポートする複数の読み取り専用の プロパティを含んでいます。PointData の ChartDataArrays は、XY データの R２乗の統計値も含みます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataArray.Item(System.Int32)">
      <summary>インデックスによって、データ要素の値を取得または設定します。</summary>
      <remarks>
        <para>このプロパティは、数値インデックスによって特定のデータエントリにアクセスするために使用します。 Visual Basic では、変換処理は必要ありません。C# は、戻り値を適切なデータ型に変換する 必要があります。すべての値は、Double（VB の場合）または double（C# の場合）データ型として 内部に格納されることに注意してください。適切な入力データ型となるように、 自動的にデータ変換が行われます。たとえば、データ要素を DateTime 値 （2002 年1月1日など）に設定すると、内部的には OLE の日付型として格納され、 その後で Double/double 型として 37257 に変換されます。</para>
        <para>受け入れ可能な入力データ型には、Single、Double、Integer、Int16、Int64、Decimal、DateTime（VB の場合）、 および float、double、int、Int16、Int64、decimal、DateTime（C# の場合）が含まれます。 PointData が ChartDataArray によって管理される場合は、PointF オブジェクトも使用されます。</para>
        <para>インデックスは、０～配列の Length の間（両端を含む）とすることに注意してください。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataArray.DataField">
      <summary>ChartDataArray にバインドするデータフィールド名を取得または設定します</summary>
      <remarks>データフィールド名は DataSource 内に存在する必要があります。</remarks>
    </member>
    <member name="T:C1.Win.C1Chart.IntervalMethodEnum">
      <summary>この列挙のメンバを使用して、ChartHistogram クラスの IntervalCreationMethod プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.IntervalMethodEnum.Automatic">
      <summary>区間の境界と幅をデータ値によって計算します。区間数はオプションです。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.IntervalMethodEnum.SemiAutomatic">
      <summary>IntervalStart、IntervalWidth、IntervalNumber の各プロパティを使用して、区間の境界を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.IntervalMethodEnum.XDataBoundaries">
      <summary>X 値を使用して、区間の境界を指定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.DisplayTypeEnum">
      <summary>この列挙のメンバを使用して、ChartHistogram クラスの DisplayType プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DisplayTypeEnum.Histogram">
      <summary>区間と区間数をヒストグラムとして表示します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DisplayTypeEnum.FrequencyGraph">
      <summary>区間と区間数を度数グラフとして表示します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DisplayTypeEnum.SteppedFrequencyGraph">
      <summary>区間と区間数をステップ型度数グラフとして表示します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartHistogram">
      <summary>ChartHistogram クラスを表します。 ChartHistogram クラスにはヒストグラム固有のプロパティがあります。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartHistogram.DisplayType">
      <summary>頻度データを表示するために使用する方法を取得または設定します。</summary>
      <remarks>各データセットの頻度データは異なる方法で表示可能であることから、単一のグラフグループ内で表示方法を組み合わせることができます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartHistogram.IntervalCreationMethod">
      <summary>ヒストグラム区間を指定するために使用される方法を取得または設定します。</summary>
      <remarks>
        区間の境界は以下のいずれかの方法で設定可能になります。
        <para>Automatic メソッドを使用する場合、グラフは、データの最大値と最小値を使用して、区間をデータ平均の３つの標準偏差内に分布するよ うに制限することによって、区間の上限値と下限値を計算します。区間数はオプションです。区間の境界は均等に計算します。</para><para>SemiAutomatic メソッドを使用する場合、区間の上限値と下限値、および区間数を指定します。区間の境界は均等に計算します。</para><para>XDataBoundaries メソッドを使用する場合、データセットの X 値を使用して各区間の境界を明示的に設定します。X 値をソートして、重複値を削除します。結果の各昇順値を使用して、次の区間の境界を決定します。したがって、１番目と２番目の結果の X 値は先頭の区間を定義し、次に続く各 X 値は次の区間の最後を指定します。N 個の区間を指定するには N+1 個の一意の X 値が必要であることに注意してください。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartHistogram.IntervalNumber">
      <summary>ヒストグラムの区関数を取得または設定します。</summary>
      <remarks>IntervalNumber プロパティは、Automatic または SemiAutomatic メソッドを使用して作成されたヒストグラムの場合にのみ適用されます。XDataBoundaries メソッドを使用する場合、区関数は任意の X 値が指定する数より１つ少ないとして定義されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartHistogram.IntervalStart">
      <summary>最初の区間の開始位置を示す数値を取得または設定します。</summary>
      <remarks>SemiAutomatic メソッドの場合にのみ適用されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartHistogram.IntervalWidth">
      <summary>それぞれの区間の幅を示す数値を取得または設定します。</summary>
      <remarks>SemiAutomatic メソッドの場合にのみ適用されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartHistogram.BelowIntervalCount">
      <summary>最初の区間より小さい値の個数を取得します。</summary>
      <remarks>グラフのデータ分布は、指定したヒストグラムの区間数に存在しない値を格納しているケースがあります。 BelowIntervalCount プロパティによって返される最初の区間の開始値より小さい値の個数です。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartHistogram.IntervalBounds">
      <summary>ヒストグラムで使用されるそれぞれの区間の境界値を取得します。</summary>
      <remarks>IntervalBounds プロパティは、IntervalCreationMethod プロパティがヒストグラムの生成に使用されたかどうかに関わらず、ヒストグラム区間の境界の昇順値を格納している Double 型の配列を返します。 配列内の要素の数は、区間範囲の数より必ず１つ多くなります。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartHistogram.IntervalCounts">
      <summary>それぞれの区間の個数を取得します。</summary>
      <remarks>IntervalCounts プロパティは指定した区間内の値を格納している Double 型の配列を返します。この配列の要素は 区間範囲の数より一つ小さい値を示しています。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartHistogram.AboveIntervalCount">
      <summary>最後の区間より大きい値の個数を取得します。</summary>
      <remarks>グラフのデータ分布は、指定したヒストグラムの区間数に存在しない値を格納しているケースがあります。 AboveIntervalCount プロパティによって返される最後の区間の終了値より大きい値の個数です。</remarks>
    </member>
    <member name="T:C1.Win.C1Chart.PostDrawSeriesEventArgs">
      <summary>ChartDataSeries クラスの PostDrawSeries イベントに対するデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.PostDrawSeriesEventArgs.Graphics">
      <summary>描画に使用する Graphics オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.PostDrawSeriesEventArgs.Series">
      <summary>イベントを発生させる ChartDataSeries オブジェクトを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.DrawSeriesEventArgs">
      <summary>ChartDataSeries クラスの DrawSeries イベントに対するデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.DrawSeriesEventArgs.Cancel">
      <summary>通常のデータセットの描画をキャンセルする必要があるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.DrawSeriesEventHandler">
      <summary>ChartDataSeries クラスの DrawSeries イベントを処理するメソッドを表します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.PostDrawSeriesEventHandler">
      <summary>ChartDataSeries クラスの PostDrawSeries イベントを処理するメソッドを表します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.PlotFilterMethodEnum">
      <summary>この列挙体のメンバを使用して、ChartDataSeries クラスの PlotFilterMethod プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PlotFilterMethodEnum.None">
      <summary>データ値をフィルタしません。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PlotFilterMethodEnum.Default">
      <summary>デフォルトデータフィルタアルゴリズムは大容量データ配列のプロットを最適化します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PlotFilterMethodEnum.Alternative">
      <summary>代替データフィルタアルゴリズムは、１方向（X または Y）に 大容量データ配列のプロットを最適化します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartDataSeries">
      <summary>ChartDataSeries は、グラフ化するデータと共に、グラフデータの外観を記述するために使用する プロパティとスタイルオブジェクトが含まれています。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataSeries.IsHole(System.Double)">
      <summary>渡された値がデータ欠損値の場合に True を返します。</summary>
      <param name="x"></param>
      <returns></returns>
      <remarks>このメソッドは、親の ChartData オブジェクトの同じメソッドと同一の値を返します。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataSeries.Clone">
      <summary>現在のデータセットをコピーして新しいデータセットを作成します。新しいデータセットはデータを含みません。</summary>
      <returns>新しい ChartDataSeries を含むオブジェクト。</returns>
      <remarks>新しい ChartDataSeries オブジェクトは自動的にグラフに追加されません。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.DataLabel">
      <summary>データの Label オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.PlotFilter">
      <summary>大容量のデータ配列のプロットを最適化するプロットフィルタ値を取得または設定します。 プロットフィルタ値は、直前のデータ点からの最小距離をピクセル単位で表します。 距離が PlotFilter の値より小さい場合、データ点をプロットしません。 XY プロットのみ。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.PlotFilterMethod">
      <summary>PlotFilter メソッドを取得または設定します。このプロパティは、大容量の データ配列をプロットするときの最適化のメソッドを指定します。 XY プロットのみ。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.FillStyle">
      <summary>データセットの塗りつぶしスタイルを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.TooltipText">
      <summary>ツールチップテキストを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ChartDataSeries" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.TooltipTextLegend">
      <summary>凡例のツールチップテキストを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ChartDataSeries" />
    </member>
    <member name="E:C1.Win.C1Chart.ChartDataSeries.Draw">
      <summary>データセットを描画しているときに発生します。</summary>
    </member>
    <member name="E:C1.Win.C1Chart.ChartDataSeries.PostDraw">
      <summary>データセットを描画した後に発生します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Group">
      <summary>グラフグループを取得します。</summary>
      <remarks></remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Label">
      <summary>データセットのラベルを取得または設定します。</summary>
      <remarks>データセットのラベルは、データセットのデータの表示に使用する適切な線と シンボルスタイルと共に、グラフの凡例要素に表示されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Offset">
      <summary>グラフの種類に応じて、データセットのオフセットを取得または設定します。</summary>
      <remarks>データセットのオフセット（ある場合）の意味は、グラフの種類によって異なります。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Length">
      <summary>データセットのデータ点の数を取得します。</summary>
      <remarks>Length プロパティは、データセットのデータ点の実際の数を返します。 長さは、データセットに関連する各 ChartDataArray オブジェクト内の要素の最大数です。 データセットの ChartDataArray オブジェクトは、オブジェクトが現在の グラフ種を表示する場合にだけ関連性があるとみなされます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.SeriesData">
      <summary>現在の ChartDataSeries オブジェクトを取得します。このプロパティは、プロパティブラウザでのみ使用するようになっています。コードでの使用は実用的ではありません。</summary>
      <remarks>
        <para>便利に使用できるように、SeriesData プロパティを編集することで、該当する すべてのグラフのデータセットのデータ配列をプロパティブラウザで同時編集できます。 現在のグラフの種類を表示するために配列が使用される場合にだけ、データ配列は関連性があるとみなされます。</para>
        <para>たとえば、XY プロットグラフの SeriesData を編集する場合、X データ配列と Y データ配列を含む データエディタが起動します。ローソク足チャートの SeriesData を編集する場合は、 X、Y、Y1、Y2、および Y3 データ配列を含むデータエディタが起動します。</para>
        <para>SeriesData プロパティは、プロパティブラウザ内でのみ使用するようになっています。 このプロパティは、単にエディタの起動を可能にするためのプレースホルダにすぎません。 戻り値は、オブジェクトの一部となるオブジェクトです。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.PointData">
      <summary>PointF（X 軸と Y 軸のデータの組み合わせ）を管理する ChartDataArray オブジェクトを取得します。</summary>
      <remarks>PointData プロパティに参照される ChartDataArray オブジェクトが管理するデータは、 X プロパティと Y プロパティの ChartDataArray オブジェクトが管理するデータと まったく同じです。このプロパティは、Point または PointF 値として取得される データの操作を便利にするために用意されています。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.X">
      <summary>X 軸のデータを管理する ChartDataArray オブジェクトを取得します。</summary>
      <remarks>X プロパティは、データセットの X 軸のデータだけを操作できるようにします。 X プロパティが返す ChartDataArray に X 軸のデータは、PointData プロパティと SeriesData プロパティで管理されるデータと同じです。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Y">
      <summary>Y 軸のデータを管理する ChartDataArray オブジェクトを取得します。</summary>
      <remarks>Y プロパティは、データセットの Y 軸のデータだけを操作できるようにします。 Y プロパティが返す ChartDataArray によって管理される Y 軸のデータは、 PointData プロパティと SeriesData プロパティで管理されるデータと同じです。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Y1">
      <summary>Y1 軸のデータを管理する ChartDataArray オブジェクトを取得します。</summary>
      <remarks>
        <para>Y1 軸のデータは、HiLo チャート、HiLoOpenClose チャート、ローソク足チャート、およびバブルチャートで使用されます。</para>
        <para>Y1 プロパティが返す ChartDataArray によって管理される Y1 軸のデータは、 SeriesData プロパティで管理されるデータと同じです。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Y2">
      <summary>Y2 軸のデータを管理する ChartDataArray オブジェクトを取得します。</summary>
      <remarks>
        <para>Y2 軸のデータは、HiLoOpenClose チャートとローソク足チャートで使用されます。</para>
        <para>Y2 プロパティが返す ChartDataArray によって管理される Y2 軸のデータは、 SeriesData プロパティで管理されるデータと同じです。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Y3">
      <summary>Y3 軸のデータを管理する ChartDataArray オブジェクトを取得します。</summary>
      <remarks>
        <para>Y3 軸のデータは、HiLoOpenClose チャートとローソク足チャートで使用されます。</para>
        <para>Y3 プロパティが返す ChartDataArray によって管理される Y3 軸のデータは、SeriesData プロパティで管理されるデータと同じです。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.MaxX">
      <summary>データセットのデータの X 軸の最大値を返します。</summary>
      <remarks>このプロパティは、呼び出されるたびにデータセットの X 軸の 最大値（データ欠損を除く）を検索します。 値をループ内で繰り返し使用する場合は、値をローカル変数に キャッシュする必要があります。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.MinX">
      <summary>データセットのデータ点配列の X 軸の最小値を返します。</summary>
      <remarks>このプロパティは、呼び出されるたびにデータセットの X 軸の最小値 （データ欠損を除く）を検索します。値をループ内で繰り返し使用する場合は、 値をローカル変数にキャッシュする必要があります。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.MaxY">
      <summary>データセットのデータの Y 軸の最大値を返します。</summary>
      <remarks>
        <para>このプロパティは、呼び出されるたびにデータセットの Y 軸の最大値 （データ欠損を除く）を検索します。値をループ内で繰り返し使用する場合は、 値をローカル変数にキャッシュする必要があります。</para>
        <para>Y、Y1、Y2、Y3 データ配列を含む、すべての Y 軸のデータ配列が検索されることに注意してください。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.MinY">
      <summary>データセットのデータ点配列の Y 軸の最小値を返します。</summary>
      <remarks>
        <para>このプロパティは、呼び出されるたびにデータセットの Y 軸の最小値 （データ欠損を除く）を検索します。値をループ内で繰り返し使用する場合は、 値をローカル変数にキャッシュする必要があります。</para>
        <para>Y、Y1、Y2、Y3 データ配列を含む、すべての Y 軸のデータ配列が検索されることに注意してください。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.LineStyle">
      <summary>色、太さ、パターンなど、データセットの線のスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.SymbolStyle">
      <summary>色、サイズ、形状など、データセットのシンボルスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.FitType">
      <summary>曲線の形式を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Display">
      <summary>データセットの表示方法を取得または設定します。</summary>
      <remarks>このプロパティは、データセットのグラフの表示、隠し表示、または消去表示を設定するために使用します。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.LegendEntry">
      <summary>データセットのラベルを凡例に表示するかどうかを取得または設定します。</summary>
      <remarks>ときには、凡例にデータセットを表示せずに描画した方が良い場合があります。 LegendEntry プロパティを False に設定して、凡例のデータセットを非表示にすることができます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.Tag">
      <summary>ユーザーデータを ChartDataSeries に関連付ける Tag プロパティを取得または設定します。</summary>
      <remarks>ChartDataSeries に関するデータを含むオブジェクト。デフォルトは、Null（Visual Basic では Nothing）参照です。 Object クラスから派生した任意のデータ型をこのプロパティに割り当てることができます。 Windows フォームデザイナから Tag プロパティを設定する場合、テキストのみを割り当てることができます。 Tag プロパティの一般的な使用方法は、データセットに緊密に関連付けられたデータを格納することです。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeries.AutoEnumerate">
      <summary>データセットの X 値をインデックス値に自動的に設定するかどうかを取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartDataSeriesCollection">
      <summary>C1Chart2DDataSeriesList クラスの概要の説明です。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataSeriesCollection.Remove(C1.Win.C1Chart.ChartDataSeries)">
      <summary>指定した ChartDataSeries をコレクションから削除します。</summary>
      <param name="s">削除するデータセット。</param>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataSeriesCollection.RemoveAll">
      <summary>コレクションからすべての ChartDataSeries を削除します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataSeriesCollection.Add(C1.Win.C1Chart.ChartDataSeries)">
      <summary>指定した ChartDataSeries をコレクションに追加します。</summary>
      <param name="Series">追加するデータセット。</param>
      <returns></returns>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataSeriesCollection.Insert(System.Int32,C1.Win.C1Chart.ChartDataSeries)">
      <summary>コレクション内の指定した ChartDataSeries を指定したインデックスに挿入します。</summary>
      <param name="index"></param>
      <param name="Series"></param>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataSeriesCollection.AddNewSeries">
      <summary>新しい ChartDataSeries を作成してコレクションに追加します。</summary>
      <returns></returns>
      <remarks>新しい ChartDataSeries への参照が返されます。 このメソッドは、新しいデータセットの初期化に戻り値を使用できるので、 ChartData オブジェクトに新しいデータセットを追加する場合に便利です。 特に With-With End ステートメントのオブジェクトになることができる Visual Basic で役立ちます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataSeriesCollection.InsertNewSeries(System.Int32)">
      <summary>新しい ChartDataSeries を作成して、指定したインデックスでコレクションに挿入します。</summary>
      <param name="index"></param>
      <returns></returns>
      <remarks>新しい ChartDataSeries への参照が返されます。このメソッドでは、戻り値を新しいデータセットの初期化に 使用できるので、ChartData オブジェクトに新しいデータセットを追加する場合に便利です。 特に Visual Basic では With-With End ステートメントのオブジェクトになれるので大変役に立ちます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartDataSeriesCollection.OnInsert(System.Int32,System.Object)">
      <summary>ChartDataSeries がコレクションに追加されたときに必ず呼び出されます。</summary>
      <param name="index"></param>
      <param name="value"></param>
      <remarks>このメソッドに渡される値は、挿入された ChartDataSeries オブジェクトです。値は変更できます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartDataSeriesCollection.Item(System.Int32)">
      <summary>数値インデックスによって、指定した ChartDataSeries をコレクションから取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartDataEventArgs">
      <summary>C1Chart2DData クラスの概要の説明です。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartData">
      <summary>ChartData オブジェクトを取得します。 ChartDataオブジェクトには、各データセットの情報をグラフ化して表示する数値データセットが含まれています。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartData.IsHole(System.Single)">
      <summary>渡された値がデータ欠損として解釈された場合に True を返します。</summary>
      <param name="x"></param>
      <returns></returns>
      <remarks>値は、指定した値のデータ型に基づいて、自動的に内部データ型に変換されます。 値は、格納されているデータ欠損値と比較されます。無限値や NaN などの無効な浮動小数点データ値は欠損値として処理されることに注意してください。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartData.IsHole(System.Double)">
      <summary>渡された値がデータ欠損として解釈された場合に True を返します。</summary>
      <param name="x"></param>
      <returns></returns>
      <remarks>値は、指定した値のデータ型に基づいて、自動的に内部データ型に変換されます。 値は、格納されているデータ欠損値と比較されます。無限値や NaN などの無効な浮動小数点データ値は欠損値として処理されることに注意してください。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartData.IsHole(System.Object)">
      <summary>渡された値がデータ欠損として解釈された場合に True を返します。</summary>
      <param name="o"></param>
      <returns></returns>
      <remarks>値は、指定した値のデータ型に基づいて、自動的に内部データ型に変換されます。 値は、格納されているデータ欠損値と比較されます。無限値や NaN などの無効な浮動小数点データ値は欠損値として処理されることに注意してください。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartData.SetHole(System.Object)">
      <summary>データ欠損値を設定し、渡されたオブジェクトから内部的な Double 型の保存値への適切な変換を行います。</summary>
      <param name="o"></param>
      <remarks>本メソッドは、適切なデータ型の値を渡してデータ欠損値を設定します。渡されたオブジェクトは、内部の格納データ値（Double型）に変換されます。欠損値は、Hole プロパティを使用しても設定可できますが、この場合は Double 型の値のみが許可されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartData.SaveDataToFile(System.String)">
      <summary>ポイントデータ、欠損値、線およびシンボルスタイルデータを含め、現在の ChartData オブジェクトの内容を、指定したファイルに XML 形式で保存します。</summary>
      <param name="Filename"></param>
      <remarks>このメソッドは、ChartData オブジェクトの内容を指定されたファイルに XML 形式で保存します。ファイルの作成時や保存時にエラーが発生する場合は、その原因を説明する例外が表示されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartData.LoadDataFromFile(System.String)">
      <summary>ポイントデータ、欠損値、線およびシンボルスタイルデータを含め、現在の ChartData オブジェクトの内容を、指定したファイルから XML 形式で読み込みます。</summary>
      <param name="Filename"></param>
      <remarks>このメソッドは、ChartData オブジェクトの内容を指定したファイルから XML 形式で 読み込みます。このファイルには、SaveDataToFile メソッドの呼び出によって出力されたデータが保存されていなければなりません。ファイルの作成時や保存時にエラーが発生する場合は、その原因を説明する例外が表示されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.HighLight">
      <summary>データの強調表示を制御する DataHighlight オブジェクトを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.TrendsList">
      <summary>現在の ChartData オブジェクトに関連付けられた TrendLinesCollection オブジェクトを取得します。</summary>
      <remarks>本コレクションは、この ChartData オブジェクトの近似曲線を格納しています。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.FunctionsList">
      <summary>現在の ChartData オブジェクトに関連付けられた FunctionLinesCollection オブジェクトを取得します。</summary>
      <remarks>本コレクションには、プロットされる関数が格納されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.PointStylesList">
      <summary>現在の ChartData オブジェクトに関連付けられた PointStylesCollection オブジェクトを取得します。</summary>
      <remarks>本コレクションは、指定されたデータ点に適用可能なスタイルが含まれています。</remarks>
    </member>
    <member name="E:C1.Win.C1Chart.ChartData.DataChanged">
      <summary>データの要素が変更されたときに発生します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.Hole">
      <summary>データ欠損値を取得または設定します。</summary>
      <remarks>データ欠損値は、この場合データが利用できないが常にデータ点が存在することを示すプレースホルダとして利用されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.SeriesList">
      <summary>現在の ChartData オブジェクトに関連付けられた ChartDataSeriesCollection オブジェクトを取得します。</summary>
      <remarks>本コレクションの ChartDataSeries は、線やシンボルのスタイルをはじめ、データセットの外観を記述するために使用するその他のプロパティとともに、グラフを生成するためのデータが含まれています。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.MaxX">
      <summary>すべてのデータセットの X 値の最大値を取得します。</summary>
      <remarks>本プロパティを使用すると、すべてのデータセットから X 値の最大値 (データ欠損値を除く)を検索します。この値をループ内で使用する場合は、ローカル変数にキャッシュしなければなりません。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.MinX">
      <summary>すべてのデータセットの X 値の最小値を取得します。</summary>
      <remarks>本プロパティを使用すると、すべてのデータセットから X 値の最小値 (データ欠損値を除く)を検索します。この値をループ内で使用する場合は、ローカル変数にキャッシュしなければなりません。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.MaxY">
      <summary>すべてのデータセットの Y 値の最大値を取得します。</summary>
      <remarks>
        <para>本プロパティを使用すると、すべてのデータセットから Y 値の最大値 (データ欠損値を除く)を検索します。この値をループ内で使用する場合は、ローカル変数にキャッシュしなければなりません。</para>
        <para>Y、Y1、Y2、Y3 を含む、すべての Y データ配列が検索されることに注意してください。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.MinY">
      <summary>すべてのデータセットの Y 値の最小値を取得します。</summary>
      <remarks>
        <para>本プロパティを使用すると、すべてのデータセットから Y 値の最小値 (データ欠損値を除く)を検索します。この値をループ内で使用する場合は、ローカル変数にキャッシュしなければなりません。</para>
        <para>Y、Y1、Y2、Y3 を含む、すべての Y データ配列が検索されることに注意してください。</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.SeriesWidth">
      <summary>3D 効果を持つグラフの各 Series を描画する幅のパーセンテージを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartData.Item(System.Int32)">
      <summary>数値インデックスによって、指定した ChartDataSeries を取得します。</summary>
      <remarks>ChartData オブジェクトはコレクションオブジェクトではありませんが、本オブジェクト内に含まれる ChartDataSeriesCollection の要素に直接インデックスを付けることを許可します。この機能はプログラミングの上での利便性のために用意されています。</remarks>
    </member>
    <member name="T:C1.Win.C1Chart.Chart2DTypeEnum">
      <summary>この列挙体のメンバを使用して、ChartGroup クラスの ChartType プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.XYPlot">
      <summary>プロットグラフ。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Pie">
      <summary>円グラフ。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Bar">
      <summary>棒グラフ。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Area">
      <summary>エリアグラフ。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Polar">
      <summary>ポーラチャート。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Radar">
      <summary>レーダーチャート。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Bubble">
      <summary>バブルチャート。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.HiLo">
      <summary>HiLo チャート。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.HiLoOpenClose">
      <summary>HiLoOpenClose チャート。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Candle">
      <summary>ローソク足チャート。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Gantt">
      <summary>ガントチャート。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Step">
      <summary>ステップチャート。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.Chart2DTypeEnum.Histogram">
      <summary>ヒストグラム。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.BubbleMethodEnum">
      <summary>この列挙体のメンバを使用して、Bubble クラスの EncodingMethod プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BubbleMethodEnum.Diameter">
      <summary>直径を基準にしてシンボルの大きさを変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BubbleMethodEnum.Area">
      <summary>面積を基準にしてシンボルの大きさを変更します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.c1SpecialData">
      <summary>棒、バブル、ガント、Hilo、ヒストグラム、円の各グラフに使用される特有のプロパティを提供します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.Pie">
      <summary>Pie オブジェクトには円グラフ固有のプロパティがあります。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.Pie.Start">
      <summary>１番目の円グラフのセグメントの表示開始角度を取得または設定します。</summary>
      <remarks>角度は、度で計測されます。左回りに計測された場合の、１番目のセグメントの最も右回りの辺と、円の右側の水平半径との間の円弧を表します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Pie" />
    </member>
    <member name="P:C1.Win.C1Chart.Pie.OtherOffset">
      <summary>グラフ領域内の円グラフの直径を変えるために使用するオフセット値を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Pie" />
    </member>
    <member name="P:C1.Win.C1Chart.Pie.InnerRadius">
      <summary>ドーナツチャートに使用する内側半径を取得または設定します。０より大きい値は、 ドーナツの穴に使用する完全円の半径の百分率を指定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Pie" />
    </member>
    <member name="P:C1.Win.C1Chart.Pie.Clockwise">
      <summary>各データセットを時計回りに表示するかどうかを示す値を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Pie" />
    </member>
    <member name="T:C1.Win.C1Chart.Bar">
      <summary>Bar オブジェクトには棒グラフ固有のプロパティがあります。</summary>
      <remarks>Bar クラスとそのプロパティは棒グラフに対してのみ有効です。ChartGroup の Bar プロパティによって返されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.Bar.ClusterOverlap">
      <summary>同じクラスタにある棒の要素が重なり合う割合を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Bar" />
    </member>
    <member name="P:C1.Win.C1Chart.Bar.ClusterWidth">
      <summary>それぞれの棒がクラスタ内で占有する割合を取得または設定します。</summary>
      <remarks>割合は、最も近接したクラスタに対して適用されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Bar" />
    </member>
    <member name="P:C1.Win.C1Chart.Bar.Appearance">
      <summary>棒グラフの外観を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.Bar.MultiRow">
      <summary>複数行を使用して 3D 棒グラフをプロットするかどうかを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.Bar.BarLines">
      <summary>積層型棒グラフで棒と棒の間を結ぶ区分線を表示するかどうかを示す値を取得または設定します。 この機能は、グラフに3D効果を設定している場合には使用できません。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.Bar.BarLineColor">
      <summary>BarLines プロパティで指定した区分線の色を取得または設定します。</summary>
      <remarks>積層型棒グラフにのみ適用されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.Bar.BarLineThickness">
      <summary>BarLines プロパティで指定した区分線の太さをピクセル単位で取得または設定します。</summary>
      <remarks>積層型棒グラフにのみ適用されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.Bar.MixedStacking">
      <summary>正の値と負の値が混在する棒グラフで、各ポイントに正負の両方を積み重ねて表示するかどうかを取得または設定します。3D 棒グラフでは常に True です。</summary>
      <remarks>True の場合は、正の値は原点の上側に、負の値は原点の下側に積み重ねられます。 False の場合は、値は系列の順序で単純に加算して積み重ねられます。</remarks>
    </member>
    <member name="T:C1.Win.C1Chart.BarAppearanceEnum">
      <summary>棒グラフの外観を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BarAppearanceEnum.Default">
      <summary>デフォルト（四角柱）の外観を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BarAppearanceEnum.Cylinder">
      <summary>円柱の外観を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BarAppearanceEnum.Cone">
      <summary>円錐の外観を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BarAppearanceEnum.Pyramid">
      <summary>四角錘の外観を指定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.AxisLabelsSourceEnum">
      <summary>この列挙体のメンバを使用して、Gantt クラスの AxisLabelsSource プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisLabelsSourceEnum.SeriesLabels">
      <summary>データセットのラベルが軸ラベルとして使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisLabelsSourceEnum.XValues">
      <summary>X データ値が軸ラベルとして使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisLabelsSourceEnum.None">
      <summary>軸ラベルはありません。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.Gantt">
      <summary>Gantt クラスにはガントチャート固有のプロパティがあります。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.Gantt.Width">
      <summary>それぞれの棒が占有する割合を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Gantt" />
    </member>
    <member name="P:C1.Win.C1Chart.Gantt.AxisLabelsSource">
      <summary>ガントチャートの X 軸ラベルのソースを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Gantt" />
    </member>
    <member name="P:C1.Win.C1Chart.Gantt.ShowSymbols">
      <summary>ガントチャートにシンボルを表示するかどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Gantt" />
    </member>
    <member name="T:C1.Win.C1Chart.HiLoData">
      <summary>HiLo クラスには、HiLo チャート、HiLoOpenClose チャート、ローソク足チャート固有のプロパティがあります。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.HiLoData.ShowOpen">
      <summary>HiLoOpenClose チャートに始値を表示するかどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.HiLoData" />
    </member>
    <member name="P:C1.Win.C1Chart.HiLoData.ShowClose">
      <summary>HiLoOpenClose チャートに終値を表示するかどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.HiLoData" />
    </member>
    <member name="P:C1.Win.C1Chart.HiLoData.FullWidth">
      <summary>HiLoOpenClose チャートの始値と終値を、高値-安値の棒の両側に横方向の線で表示するかどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.HiLoData" />
    </member>
    <member name="P:C1.Win.C1Chart.HiLoData.FillTransparent">
      <summary>中空のローソク足を透明（True）にするか、またはデータセットのシンボルの色で塗りつぶす（False）かを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.HiLoData" />
    </member>
    <member name="P:C1.Win.C1Chart.HiLoData.FillFalling">
      <summary>塗りつぶしたローソク足が上昇値（True）を表すか、下降値（False）を表すかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.HiLoData" />
    </member>
    <member name="T:C1.Win.C1Chart.Bubble">
      <summary>Bubble クラスにはバブルチャート固有のプロパティがあります。</summary>
      <remarks>Bubble クラスとそのプロパティはバブルチャートに対してのみ使用されます。ChartGroup の Bubble プロパティによって返されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.Bubble.EncodingMethod">
      <summary>バブルチャートのバブルのサイズの計算に使用するメソッドを取得または設定します。</summary>
      <remarks>
        <para>バブルサイズの最大値と最小値は、EncodingMethod プロパティの値に応じて、 プロット領域の直径または面積に対する割合として表されます。</para>
        <para>現時点では、Bubble メソッドは常に直径を基準にしています。</para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Bubble" />
    </member>
    <member name="P:C1.Win.C1Chart.Bubble.MinimumSize">
      <summary>バブルチャートのバブルの最小サイズを取得または設定します。</summary>
      <remarks>バブルの最小サイズは、プロット領域の直径（または面積）の割合で表されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Bubble" />
    </member>
    <member name="P:C1.Win.C1Chart.Bubble.MaximumSize">
      <summary>バブルチャートのバブルの最大サイズを取得または設定します。</summary>
      <remarks>バブルの最大サイズは、プロット領域の直径（または面積）の割合で表されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Bubble" />
    </member>
    <member name="T:C1.Win.C1Chart.Circular">
      <summary>ポーラチャートとレーダーチャートの円の設定を定義します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.Circular.Start">
      <summary>ポーラチャートとレーダーチャートの表示開始角度を取得または設定します。</summary>
      <remarks>この角度は、Degrees プロパティを True に設定すると度で表され、それ以外の場合はラジアンで表示されます。開始角度は、12 時から反時計回りに計算されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.Circular.Degrees">
      <summary>ポーラチャートとレーダーチャートで、Start プロパティの値を度単位(true)で表すかラジアン(false)で表すかを取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.Polar">
      <summary>Polar クラスにはポーラチャート固有のプロパティがあります。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.Polar.PiRatioAnnotations">
      <summary>ラジアンで表されるポーラチャートにπ比の軸ラベルを表示するかどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Polar" />
    </member>
    <member name="T:C1.Win.C1Chart.Radar">
      <summary>Radar クラスにはレーダーチャート固有のプロパティがあります。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.Radar.Filled">
      <summary>レーダーチャートを塗りつぶすかどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Radar" />
    </member>
    <member name="P:C1.Win.C1Chart.Radar.FlatGridLines">
      <summary>レーダーチャートで Y 軸のグリッド線を多角形で表示するかどうかを示す値を取得または設定します。 デフォルトでは、Y 軸のグリッド線は円形で表示されます。</summary>
      <seealso cref="T:C1.Win.C1Chart.Radar" />
    </member>
    <member name="T:C1.Win.C1Chart.NormalCurve">
      <summary>ヒストグラムの正規曲線の外観の定義に役立つ すべてのプロパティを含みます。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.NormalCurve.ForegroundDisplay">
      <summary>正規分布（ガウス分布）曲線をグラフデータの前面に描画するかどうかを取得または設定します。</summary>
      <remarks>デフォルトでは、正規分布（ガウス分布）曲線はグラフデータの背景に描画されています。ForegroundDisplay プロパティを True に設定して、正規分布曲線をグラフデータの前面に描画するように設定できます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.NormalCurve.LineStyle">
      <summary>正規分布（ガウス分布）曲線の ChartLineStyle オブジェクトを取得または設定します。</summary>
      <remarks>LineStyle プロパティは正規曲線を示している線の外観を制御します。FillStyle プロパティは正規曲線の領域の外観を制御します。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.NormalCurve.FillStyle">
      <summary>正規分布（ガウス分布）曲線の FillStyle オブジェクトを取得または設定します。</summary>
      <remarks>FillStyle プロパティは正規曲線の領域の外観を制御します。LineStyle プロパティは正規曲線を示している線の外観を制御します。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.NormalCurve.UseAntiAlias">
      <summary>正規分布（ガウス分布）曲線を描画するとき、アンチエイリアス機能を使用するかどうかを取得または設定します。</summary>
      <remarks>デフォルトでは、正規曲線を描画するときにアンチエイリアス機能が使用されます。UseAntiAlias プロパティが False に設定されている場合は、本機能がオーバーライドされます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.NormalCurve.Visible">
      <summary>正規分布（ガウス分布）曲線を描画するかどうかを取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.Histogram">
      <summary>ChartHistogram クラスには、柱状グラフに固有のプロパティが含まれます。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.Histogram.Normalized">
      <summary>それぞれのヒストグラムデータセット区間を正規化するかどうかを取得または設定します。</summary>
      <remarks>不均等な区間によるヒストグラムを生成するとき、各区間はそれぞれの高さが単位幅あたりの頻度と同じになるように典型的に正規化されます。その結果、適切なヒストグラム形状が保持されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.Histogram.NormalizationInterval">
      <summary>正規化の区間の幅を取得または設定します。</summary>
      <remarks>不均等な区間によるヒストグラムを生成するとき、各区間はそれぞれの高さが単位幅あたりの頻度と同じになるように典型的に正規化されます。その結果、適切なヒストグラム形状が保持されます。 NormalizationInterval プロパティの幅は、他のすべて の区間が正規化される幅を示しています。正規化の幅と同じ幅の区間が存在する場合、 区間の高さは実際の値を示しています。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.Histogram.NormalDisplay">
      <summary>正規分布（ガウス分布）曲線の表示方法を設定するオブジェクトを取得します。</summary>
      <remarks>ヒストグラムと度数グラフはデータ値の分布を表示します。データ分布は正規分布と比較される場合もあります。NormalCurve オブジェクトのプロパティは、比較を目的とした組み込みの正規分布（ガウス分布）曲線の表示方法を制御します。正規分布曲線はデータとは無関係です。</remarks>
    </member>
    <member name="T:C1.Win.C1Chart.ChartGroup">
      <summary>ChartGroup に関連付けられたグラフ種別を定義します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.CoordToDataCoord(System.Int32,System.Int32,System.Single@,System.Single@)">
      <summary>クライアントが指定されている場合、プロット領域内の点のデータ座標を計算します。</summary>
      <param name="XCoord">X データ座標。</param>
      <param name="YCoord">Y データ座標。</param>
      <param name="XDataCoord">クライアント X 座標。</param>
      <param name="YDataCoord">クライアント Y 座標。</param>
      <returns>正常に行われた場合の計算結果。</returns>
      <remarks>クライアント座標引数には、マウス座標が記載されています。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.CoordToDataCoord(System.Int32,System.Int32,System.Double@,System.Double@)">
      <summary>クライアントが指定されている場合、プロット領域内の点のデータ座標を計算します。</summary>
      <param name="XCoord">X データ座標。</param>
      <param name="YCoord">Y データ座標。</param>
      <param name="XDataCoord">クライアント X 座標。</param>
      <param name="YDataCoord">クライアント Y 座標。</param>
      <returns>正常に行われた場合の計算結果。</returns>
      <remarks>クライアント座標引数には、マウス座標が記載されています。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.DataCoordToCoord(System.Double,System.Double,System.Int32@,System.Int32@)">
      <summary>データ座標が指定されている場合、プロット領域内の点のクライアント座標を計算します。</summary>
      <param name="XDataCoord">X データ座標。</param>
      <param name="YDataCoord">Y データ座標。</param>
      <param name="XCoord">クライアント X 座標。</param>
      <param name="YCoord">クライアント Y 座標。</param>
      <returns>正常に行われた場合の計算結果。</returns>
      <remarks>クライアント座標引数には、マウス座標が記載されています。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.DataCoordToCoord(System.Double,System.Double,System.Single@,System.Single@)">
      <summary>データ座標が指定されている場合、プロット領域内の点のクライアント座標を計算します。</summary>
      <param name="XDataCoord">X データ座標。</param>
      <param name="YDataCoord">Y データ座標。</param>
      <param name="XCoord">クライアント X 座標。</param>
      <param name="YCoord">クライアント Y 座標。</param>
      <returns>正常に行われた場合の計算結果。</returns>
      <remarks>クライアント座標引数には、マウス座標が記載されています。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.CoordToDataIndex(System.Int32,System.Int32,C1.Win.C1Chart.CoordinateFocusEnum,System.Int32@,System.Int32@,System.Int32@)">
      <summary>グループのクライアント座標が指定されている場合、最も近いデータ点のデータセット、インデックス、およびこのデータ点からの距離を返します。</summary>
      <param name="XCoord">クライアント X 座標。</param>
      <param name="YCoord">クライアント Y 座標。</param>
      <param name="focus">使用される座標を指定します。</param>
      <param name="SeriesIndex">最も近いデータ点のデータセットインデックス。</param>
      <param name="PointIndex">最も近いデータ点のデータ点インデックス。</param>
      <param name="Distance">最も近いデータ点からの距離。</param>
      <returns>正常に行われた場合の計算結果。</returns>
      <remarks>クライアント座標引数には、マウス座標が記載されています。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.DataIndexToCoord(System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>指定したデータ点のクライアント座標を返します。</summary>
      <param name="SeriesIndex">データ点のデータセットインデックス</param>
      <param name="PointIndex">データ点のポイントインデックス。</param>
      <param name="XCoord">クライアント X 座標。</param>
      <param name="YCoord">クライアント Y 座標。</param>
      <returns>正常に行われた場合の計算結果。</returns>
      <remarks>クライアント座標引数には、マウス座標が記載されています。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.DataIndexToRect(System.Int32,System.Int32)">
      <summary>指定したデータ点を囲む最小限の矩形を返します。</summary>
      <param name="SeriesIndex">データ点のデータセットインデックス。</param>
      <param name="PointIndex">データ点のポイントインデックス。</param>
      <returns>正常に行われた場合の計算結果。</returns>
      <remarks>DataIndexToRect メソッドはデータ点のシンボルを囲む最小限の矩形を返します。 本メソッドはすべてのグラフ種類に適用できるわけではないことにご注意ください。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.ResetOutlineColor">
      <summary>枠線の色をデフォルト値にリセットして、PlotArea の ForeColor を使用できるようにします。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.CoordToSeriesIndex(System.Int32,System.Int32,C1.Win.C1Chart.PlotElementEnum,System.Int32@,System.Int32@)">
      <summary>クライアント座標が設定されている場合、指定したグループの最も近いデータ要素のデータセットインデックスおよび距離を返します。</summary>
      <param name="XCoord">クライアント X 座標。</param>
      <param name="YCoord">クライアント Y 座標。</param>
      <param name="element">使用されるプロット要素。</param>
      <param name="SeriesIndex">データセットインデックス。</param>
      <param name="Distance">最も近いデータ点からの距離。</param>
      <returns>正常に行われた場合の計算結果。</returns>
      <remarks>クライアント座標引数には、マウス座標が記載されています。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="M:C1.Win.C1Chart.ChartGroup.CoordToPointIndex(System.Int32,System.Int32,C1.Win.C1Chart.PlotElementEnum,System.Int32,System.Int32@,System.Int32@)">
      <summary>クライアント座標が設定されている場合、指定したグループの最も近いデータ要素のデータ点インデックスおよび距離を返します。</summary>
      <param name="XCoord">クライアント X 座標。</param>
      <param name="YCoord">クライアント Y 座標。</param>
      <param name="element">使用されるプロット要素。</param>
      <param name="SeriesIndex">データセットインデックス。</param>
      <param name="PointIndex">最も近いデータ点のデータ点インデックス。</param>
      <param name="Distance">最も近いデータ点からの距離。</param>
      <returns>正常に行われた場合の計算結果。</returns>
      <remarks>クライアント座標引数には、マウス座標が記載されています。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Name">
      <summary>ChartGroup の名前を取得または設定します。</summary>
      <remarks>索引付けと識別を行うために使用します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Stacked">
      <summary>グラフのデータを積層型にするかどうかを取得または設定します（適用できるグラフのみ）。</summary>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Is100Percent">
      <summary>積層型の ChartGroup が百分率グラフであるかどうかを取得または設定します。棒グラフとエリアグラフの場合にのみ適用されます。</summary>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.ChartType">
      <summary>表示するグラフの種類を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Use3D">
      <summary>ChartGroup 内のデータのグラフ化に 3D 効果を使用するかどうか取得または設定します。</summary>
      <remarks>View3D オブジェクトの Depth、Elevation、Rotation の各プロパティが０以外に設定されている場合、 エリアグラフ、棒グラフ、円グラフ、および XY プロッ トグラフの 3D 効果を作り出します。しかしながら、ChartGroup の Use3D プロパティは 3D 効果の使用をオーバーライドできるので、グループごとに 3D 効果を適用するかどうかを指定することが可能です。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Visible">
      <summary>グラフグループを表示するかどうか取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.ChartData">
      <summary>ChartData オブジェクトを取得します。</summary>
      <remarks>ChartData オブジェクトには、各データセットの情報をグラフ化して表示する数値データセットが含まれています。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Pie">
      <summary>Pie オブジェクトを取得または設定します。</summary>
      <remarks>Pie オブジェクトには、円グラフ固有のプロパティが含まれます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Bar">
      <summary>Bar オブジェクトを取得または設定します。</summary>
      <remarks>Bar オブジェクトには、棒グラフ固有のプロパティが含まれます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Histogram">
      <summary>Histogram オブジェクトを取得または設定します。</summary>
      <remarks>Histogram オブジェクトにはヒストグラム固有のプロパティがあります。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Gantt">
      <summary>Gantt オブジェクトを取得します。</summary>
      <remarks>Gantt オブジェクトには、ガントチャート固有のプロパティが含まれます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.HiLoData">
      <summary>HiLoData オブジェクトを取得または設定します。</summary>
      <remarks>HiLoData オブジェクトには、HiLo チャート、HiLoOpenClose チャート、およびローソク足チャートを含む HiLo チャートの種類に固有のプロパティが含まれます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Bubble">
      <summary>Bubble オブジェクトを取得または設定します。</summary>
      <remarks>Bubble オブジェクトには、バブルチャート固有のプロパティが含まれます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Polar">
      <summary>Polar オブジェクトを取得または設定します。</summary>
      <remarks>Polar オブジェクトには、ポーラチャート固有のプロパティが含まれます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.Radar">
      <summary>Radar オブジェクトを取得または設定します。</summary>
      <remarks>Radar オブジェクトには、レーダーチャート固有のプロパティが含まれます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.DrawingOrder">
      <summary>ChartGroup の描画順序を取得または設定します。</summary>
      <remarks>グループの描画順序は、降順に設定されています。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.ShowOutline">
      <summary>プロット領域の前景色で、描画するグラフの輪郭を描くかどうかを取得または設定します。</summary>
      <remarks>これらのグラフには、棒グラフ、円グラフ、エリアグラフなどが含まれます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.OutlineColor">
      <summary>グラフの枠線の色を取得または設定します。</summary>
      <remarks>この設定が適用されるグラフは、棒グラフ、円グラフ、エリアグラフなどです。 デフォルトでは、枠線は PlotArea の ForeColor で描画されます。 デフォルトの PlotArea の ForeColor を使用するには、このプロパティを Empty 色に設定するか、 ResetOutlineColor() メソッドを呼び出します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroup.LegendReversed">
      <summary>凡例内の各 ChartGroup のデータセットの順序を示す値を決定します。</summary>
      <remarks>凡例内の ChartGroup のデータセットは常にインデックスの順序によって表示されます。LegendReversed プロパティが True に設定されている場合は、データセットの表示順序が反転されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroup" />
    </member>
    <member name="T:C1.Win.C1Chart.PlotElementEnum">
      <summary>PlotElementEnum はグラフの特定のデータ要素を指定するために使用されます。 列挙は、コンテキストによって最も良く定義されたさまざまなグラフのクラスとメソッドで使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PlotElementEnum.Points">
      <summary>個々のデータポイントが示されるよう指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PlotElementEnum.Series">
      <summary>個々のデータ系列が示されるよう指定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartGroups">
      <summary>ChartGroups オブジェクトを取得します。各 ChartGroup には データ値に関連する情報と外観に関連する情報が含まれています。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroups.ChartGroupsCollection">
      <summary>ChartGroupsCollection オブジェクトを取得します。</summary>
      <remarks>ChartGroupsCollection はループ内ですべての ChartGroups の列挙を許可するために提供されています。 このコレクションには、Group0 および Group1 プロパティで参照されるのと同じ ChartGroup が含まれます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroups" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroups.Item(System.Int32)">
      <summary>数値インデックスによって、指定した ChartGroup を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ChartGroups" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroups.Count">
      <summary>ChartGroups の数を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ChartGroups" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroups.Group0">
      <summary>コレクションから前面の ChartGroup オブジェクトを取得します。</summary>
      <remarks>Group0（またはデフォルトの前面グループ）は ChartGroups コレクションの最初のグラフグループです。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroups" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroups.Group1">
      <summary>コレクションから背景の ChartGroup オブジェクトを取得します。</summary>
      <remarks>Group1（またはデフォルトの背景グループ）は ChartGroups コレクションの最後のグラフグループです。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartGroups" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroups.ReversedDraw">
      <summary>ChartGroups の通常の描画順序を逆にするかどうかを取得または設定します。</summary>
      <remarks>通常、ChartGroups は、ChartGroupsCollection 内に現れる順序で描画されます。 ReversedDraw が true の場合、ChartGroups は、ChartGroupsCollection 内に現れる順序の昇順で描画されます。</remarks>
    </member>
    <member name="T:C1.Win.C1Chart.ChartGroupsCollection">
      <summary>ChartGroups を格納します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartGroupsCollection.Item(System.Int32)">
      <summary>数値インデックスによって、指定した ChartGroup を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ChartGroupsCollection" />
    </member>
    <member name="T:C1.Win.C1Chart.AxisFlagEnum">
      <summary>この列挙体のメンバを使用して、Action クラスの Axis プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisFlagEnum.AxisX">
      <summary>X 軸を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisFlagEnum.AxisY">
      <summary>Y 軸を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisFlagEnum.AxesXY">
      <summary>X 軸と Y 軸を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisFlagEnum.AxisY2">
      <summary>Y2 軸を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisFlagEnum.AxesXY2">
      <summary>X 軸と Y2 軸を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisFlagEnum.AxesYY2">
      <summary>Y 軸と Y2 軸を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AxisFlagEnum.AxesAll">
      <summary>すべての軸（X 軸、Y 軸、Y2 軸）を使用します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.InteractionAppearance">
      <summary>この列挙のメンバを使用して、Interaction クラスの Appearance プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.InteractionAppearance.Default">
      <summary>デフォルト表示。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.InteractionAppearance.FillSelectionArea">
      <summary>BackColor2 に設定されている色が塗りつぶし色として利用されます。BackColor2 プロパティが設定されていない場合は、透明色が使用されます。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.Interaction">
      <summary>マウスによる回転、スケール、移動、ズームを含む、グラフの自動化した インタラクティブ機能を制御するすべてのプロパティを含みます。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.Interaction.Appearance">
      <summary>インタラクティブ操作時の外観を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.Interaction.Actions">
      <summary>利用可能なインタラクティブアクションのコレクションを取得します。</summary>
      <remarks>
        <para>
          次のアクションが利用可能です。
          <list type="bullet">
            <item>
              <term>Rotate - グラフ（3D 効果を持つグラフのみ）を回転します。</term>
            </item>
            <item>
              <term>Scale - グラフのスケールを変更します。</term>
            </item>
            <item>
              <term>Translate - グラフをスクロールします。</term>
            </item>
            <item>
              <term>Zoom - 表示するグラフの枠領域を選択します。</term>
            </item>
          </list>
        </para>
        <para>スケール、移動、ズームの各アクションは、直交座標を持つグラフに利用できます。 各アクションは、指定したキーボード修飾子（［Alt］キー、［Ctrl］キー、［Shift］キー）を押しながら、 ユーザーがマウスをプロット領域の上でドラッグすると呼び出されます。</para>
        <para>
          デフォルトアクションマップには、次のアクションが含まれます。
          <list type="bullet">
            <item>
              <term>rotate - 左マウスボタン。</term>
            </item>
            <item>
              <term>scale - ［Ctrl］ + 左マウスボタン。</term>
            </item>
            <item>
              <term>translate - ［Shift］ + 左マウスボタン。</term>
            </item>
            <item>
              <term>zoom - [Alt］ + 左マウスボタン。</term>
            </item>
          </list>
        </para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Interaction" />
    </member>
    <member name="P:C1.Win.C1Chart.Interaction.Enabled">
      <summary>グラフのインタラクティブ操作が使用可能かどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Interaction" />
    </member>
    <member name="P:C1.Win.C1Chart.Interaction.IsDefault">
      <summary>インタラクティブ操作の設定がデフォルトのインタラクティブ操作設定と同じかどうかを取得または設定します。</summary>
      <remarks>
        <para>インタラクティブ操作設定がデフォルト値に設定されている場合、IsDefault は True を返します。 インタラクティブ操作設定がデフォルト値に設定されていない場合、IsDefault は False を返します。</para>
        <para>IsDefault が明示的に True に設定されている場合、インタラクティブ操作の設定はデフォルト値にリセットされます。</para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Interaction" />
    </member>
    <member name="T:C1.Win.C1Chart.Action">
      <summary>インタラクティブアクションを表します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.Action.Name">
      <summary>アクションの名前を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Action" />
    </member>
    <member name="P:C1.Win.C1Chart.Action.MouseButton">
      <summary>アクションの開始に使用するマウスボタンを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Action" />
    </member>
    <member name="P:C1.Win.C1Chart.Action.Modifier">
      <summary>アクションの開始に使用するキー修飾子を取得または設定します。</summary>
      <remarks>このプロパティは、[Shift］、［Ctrl］、［Alt］の各キーのビット単位の組み合わせを有効にします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Action" />
    </member>
    <member name="P:C1.Win.C1Chart.Action.Axis">
      <summary>変換アクションに使用する軸（複数可）を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Action" />
    </member>
    <member name="T:C1.Win.C1Chart.ActionCollection">
      <summary>アクションオブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.ActionCollection.Contains(C1.Win.C1Chart.Action)">
      <summary>指定したアクションがコレクション内に存在するかどうかを決定します。</summary>
      <param name="a"></param>
      <returns>指定したアクションがコレクション内に含まれているかどうかを示すブール値。</returns>
      <seealso cref="T:C1.Win.C1Chart.ActionCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.ActionCollection.CopyTo(C1.Win.C1Chart.Action[],System.Int32)">
      <summary>指定したインデックスから開始するアクションのコレクションを Action オブジェクトの指定した配列にコピーします。</summary>
      <param name="array"></param>
      <param name="index"></param>
      <seealso cref="T:C1.Win.C1Chart.ActionCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.ActionCollection.IndexOf(C1.Win.C1Chart.Action)">
      <summary>コレクション内の指定したアクションの現在のインデックスを取得します。</summary>
      <param name="a"></param>
      <returns></returns>
      <remarks>コレクション内の指定したアクションの要素を示す整数を返します。 アクションが見つからない場合、戻り値は –１です。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ActionCollection" />
    </member>
    <member name="P:C1.Win.C1Chart.ActionCollection.Item(System.String)">
      <summary>名前によって、指定したアクションをコレクションから取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ActionCollection" />
    </member>
    <member name="P:C1.Win.C1Chart.ActionCollection.Item(System.Int32)">
      <summary>数値インデックスによって、指定したアクションをコレクションから取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ActionCollection" />
    </member>
    <member name="T:C1.Win.C1Chart.TransformEventArgs">
      <summary>Transform イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.TransformEventArgs.MinX">
      <summary>新しい X 軸の最小値を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.TransformEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.TransformEventArgs.MinY">
      <summary>新しい Y 軸の最小値を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.TransformEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.TransformEventArgs.MinY2">
      <summary>新しい Y2 軸の最小値を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.TransformEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.TransformEventArgs.MaxX">
      <summary>新しい X 軸の最大値を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.TransformEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.TransformEventArgs.MaxY">
      <summary>新しい Y 軸の最大値を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.TransformEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.TransformEventArgs.MaxY2">
      <summary>新しい Y2 軸の最大値を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.TransformEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.TransformEventArgs.Cancel">
      <summary>変換をキャンセルするかどうかを取得または設定します。 変換をキャンセルすると、変換に関連付けられた回転、 スケール、移動、ズームの各アクションを抑制します。</summary>
      <seealso cref="T:C1.Win.C1Chart.TransformEventArgs" />
    </member>
    <member name="T:C1.Win.C1Chart.TransformEventHandler">
      <summary>C1Chart クラスの Transform イベントを処理するメソッドを表します。</summary>
      <remarks>sender オブジェクトは、グラフの Interaction オブジェクトです。</remarks>
    </member>
    <member name="T:C1.Win.C1Chart.DrawDataSeriesEventArgs">
      <summary>DrawDataSeries イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.DrawDataSeriesEventArgs.GroupIndex">
      <summary>グラフグループのインデックスを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.DrawDataSeriesEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.DrawDataSeriesEventArgs.SeriesIndex">
      <summary>描画しようとするデータセットのインデックスを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.DrawDataSeriesEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.DrawDataSeriesEventArgs.Brush">
      <summary>データプロットに使用するブラシを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.DrawDataSeriesEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.DrawDataSeriesEventArgs.DisposeBrush">
      <summary>データセットの描画後に、グラフでブラシを解放するかどうかを取得または設定します。 DisposeBrush が False の場合、グラフでブラシを解放しません。</summary>
      <seealso cref="T:C1.Win.C1Chart.DrawDataSeriesEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.DrawDataSeriesEventArgs.Pen">
      <summary>データプロットに使用するペンを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.DrawDataSeriesEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.DrawDataSeriesEventArgs.DisposePen">
      <summary>データセットの描画後に、グラフでペンを解放するかどうかを取得または設定します。 DisposePen が False の場合、グラフでペンを解放しません。</summary>
      <seealso cref="T:C1.Win.C1Chart.DrawDataSeriesEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.DrawDataSeriesEventArgs.Bounds">
      <summary>データセットをプロットする枠領域を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.DrawDataSeriesEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.DrawDataSeriesEventArgs.IsLegend">
      <summary>現在の領域を凡例内に描画しようとしているかどうかを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.DrawDataSeriesEventArgs" />
    </member>
    <member name="T:C1.Win.C1Chart.DrawDataSeriesEventHandler">
      <summary>C1Chart クラスの DrawDataSeries イベントを処理するメソッドを表します。</summary>
      <remarks>sender オブジェクトは、描画しようとしている ChartDataSeries オブジェクトです。</remarks>
    </member>
    <member name="T:C1.Win.C1Chart.AttachMethodEnum">
      <summary>この列挙体のメンバを使用して、Label クラスの AttachMethod プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AttachMethodEnum.Coordinate">
      <summary>ラベルはグラフの任意の場所に添付されます。グラフの左上隅から グラフラベルまでの距離をピクセル単位で指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AttachMethodEnum.DataCoordinate">
      <summary>ラベルはプロット領域内の任意の場所に添付されます。データの座標を指定します。 このメソッドは、X 軸の軸ラベルにポイントラベルを使用する円グラフでは使用できません。 グラフラベルの一部がグラフ領域の外にはみだす場合、その部分は切り取られます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AttachMethodEnum.DataIndex">
      <summary>ラベルはグラフの特定のデータ点に添付されます。 データセットインデックス、ポイントインデックス、およびグラフグループを指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AttachMethodEnum.DataIndexY">
      <summary>ラベルは特定のデータ点の上部または下部の離れた場所に添付されます。 データセットインデックス、ポイントインデックス、グラフグループ、および Y 座標を 指定します。このメンバは、棒グラフと積層型棒グラフで最も有用です。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.LabelCompassEnum">
      <summary>この列挙体のメンバを使用して、Label クラスの Compass プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.North">
      <summary>ラベルを北（上側）に配置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.NorthEast">
      <summary>ラベルを北東（右上側）に配置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.East">
      <summary>ラベルを東（右側）に配置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.SouthEast">
      <summary>ラベルを南東（右下側）に配置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.South">
      <summary>ラベルを南（下側）に配置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.SouthWest">
      <summary>ラベルを南西（左下側）に配置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.West">
      <summary>ラベルを西（左側）に配置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.NorthWest">
      <summary>ラベルを北西（左上側）に配置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.Radial">
      <summary>円グラフで、ラベルをグラフの中心から外側に放射状に配置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.Orthogonal">
      <summary>ラベルをグラフの図形線から垂直方向に配置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.Auto">
      <summary>ラベルを自動配置します。自動配置の引数は、ChartLabels クラスの AutoArrangment プロパティで指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LabelCompassEnum.RadialText">
      <summary>ラベルをプロット線から離れたところに垂直に配置し、テキストの向きをその線に合わせます。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.AttachMethodData">
      <summary>AttachMethodData クラスは、Label をグラフに配置 または添付する方法を識別するために、Label オブジェクトの AttachMethod プロパティと共に、 グラフの Label オブジェクトによって使用されます。AttachMethodData オブジェクトの各プロパティは、Label の AttachMethod プロパティ値の内容に基づいて参照されます。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AttachMethodData.GroupIndex">
      <summary>Label の AttachMethod プロパティを DataIndex に設定した場合、 ラベルを添付するデータ点のグループインデックスを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.AttachMethodData" />
    </member>
    <member name="P:C1.Win.C1Chart.AttachMethodData.SeriesIndex">
      <summary>Label の AttachMethod プロパティを DataIndex に設定した場合、 ラベルを添付するデータ点のデータセットのインデックスを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.AttachMethodData" />
    </member>
    <member name="P:C1.Win.C1Chart.AttachMethodData.PointIndex">
      <summary>Label の AttachMethod プロパティを DataIndex に設定した場合、 ラベルを添付するデータ点のポイントインデックスを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.AttachMethodData" />
    </member>
    <member name="P:C1.Win.C1Chart.AttachMethodData.X">
      <summary>Label の AttachMethod プロパティを Coordinate または DataCoordinate に設定した場合、データまたはクライアントの X 座標を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.AttachMethodData" />
    </member>
    <member name="P:C1.Win.C1Chart.AttachMethodData.Y">
      <summary>Label の AttachMethod プロパティを Coordinate または DataCoordinate に設定した場合、データまたはクライアントの Y 座標を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.AttachMethodData" />
    </member>
    <member name="T:C1.Win.C1Chart.Label">
      <summary>グラフラベルの定義や配置に役立つすべてのプロパティを含みます。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.Label.Dispose">
      <summary>ガベージコレクション用のグラフのオブジェクトを準備します。</summary>
      <remarks>ガベージコレクション用の Label オブジェクトを準備します。 Dispose メソッドの呼び出し後、ラベルを参照しないでください。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="M:C1.Win.C1Chart.Label.ShouldSerializeStyle">
      <summary>ラベルの Style プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="M:C1.Win.C1Chart.Label.ResetStyle">
      <summary>ラベルのスタイルの継承状態をリセットします。</summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="M:C1.Win.C1Chart.Label.ShouldSerializeSizeDefault">
      <summary>ラベルの SizeDefault プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態は SizeDefault.Width = -1、SizeDefault.Height = -1 で、ラベルを自動サイズ変更します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="M:C1.Win.C1Chart.Label.ResetSizeDefault">
      <summary>ラベルのサイズをリセットして、自動的に計算します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.AttachMethodData">
      <summary>ラベルの添付データを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.AttachMethod">
      <summary>ラベルの添付方法を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.Connected">
      <summary>関連するデータ点を結んだ線を描画するかどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.Offset">
      <summary>関連するデータ点からのオフセットの距離をピクセル単位で取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.RotationOverride">
      <summary>回転角度をラベルの度単位で取得または設定し、スタイルで設定された回転値をオーバーライドします。 Radial および RadialText 以外の Compass 値を持つラベルにのみ適用されます。 ゼロ以外の値のみ適用されます。</summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.Compass">
      <summary>指定した位置に対してラベルの位置を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.Style">
      <summary>ラベルの Style オブジェクトを取得します。</summary>
      <remarks>DefaultLabelStyle プロパティから継承されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.Location">
      <summary>グラフコントロールのクライアント座標で、ラベルの位置を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.Size">
      <summary>グラフコントロールのクライアント座標で、ラベルのサイズを取得または設定します。</summary>
      <remarks>この値を変更すると SizeDefault が更新されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.SizeDefault">
      <summary>オブジェクトのデフォルトのサイズを取得または設定します。</summary>
      <remarks>負数の場合、自動的にサイズを設定します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.Text">
      <summary>ラベルのテキストを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.Name">
      <summary>ラベル名を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.Visible">
      <summary>ラベルを表示するかどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.Label.TooltipText">
      <summary>ツールチップテキストを取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.LabelsCollection">
      <summary>特定のグラフ向けに定義されたグラフラベルをすべて含みます。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.LabelsCollection.AddNewLabel">
      <summary>新しいラベルを作成してコレクションに追加します。</summary>
      <returns>新しいラベルへの参照。</returns>
      <seealso cref="T:C1.Win.C1Chart.LabelsCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.LabelsCollection.InsertNewLabel(System.Int32)">
      <summary>新しいラベルを作成して、指定したインデックスでコレクションに挿入します。</summary>
      <param name="index"></param>
      <returns>新しいラベルへの参照。</returns>
      <seealso cref="T:C1.Win.C1Chart.LabelsCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.LabelsCollection.Remove(C1.Win.C1Chart.Label)">
      <summary>指定したラベルを削除します。</summary>
      <param name="label">削除するラベル。</param>
      <seealso cref="T:C1.Win.C1Chart.LabelsCollection" />
    </member>
    <member name="P:C1.Win.C1Chart.LabelsCollection.Item(System.Int32)">
      <summary>コレクションから指定したラベルのインデックスを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.LabelsCollection" />
    </member>
    <member name="P:C1.Win.C1Chart.LabelsCollection.Item(System.String)">
      <summary>コレクションから指定したラベル名を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.LabelsCollection" />
    </member>
    <member name="T:C1.Win.C1Chart.ChartLabels">
      <summary>ChartLabels オブジェクトを取得します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartLabels.LabelFromCoord(System.Int32,System.Int32,System.Int32@)">
      <summary>指定した座標にラベルインデックスを取得します。</summary>
      <param name="XCoord">クライアント X 座標。</param>
      <param name="YCoord">クライアント Y 座標。</param>
      <param name="LabelIndex">ラベルインデックス。</param>
      <returns>このメソッドは、ラベルが指定した座標に存在する場合、True を返します。</returns>
      <seealso cref="T:C1.Win.C1Chart.ChartLabels" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartLabels.DefaultLabelStyle">
      <summary>デフォルトのラベルスタイルを取得します。</summary>
      <remarks>すべてのラベルがデフォルトスタイルを継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ChartLabels" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartLabels.LabelsCollection">
      <summary>ラベルコレクションを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ChartLabels" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartLabels.Item(System.Int32)">
      <summary>コレクションから指定したラベルのインデックスを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ChartLabels" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartLabels.Item(System.String)">
      <summary>コレクションから指定したラベル名を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ChartLabels" />
    </member>
    <member name="P:C1.Win.C1Chart.ChartLabels.AutoArrangement">
      <summary>ラベルの配置を制御する AutoLabelArrangement オブジェクトを取得します。</summary>
      <remarks>LabelCompassEnum がAutoに設定されている場合にのみ AutoArrangement プロパティが適用されます。</remarks>
    </member>
    <member name="T:C1.Win.C1Chart.AutoLabelArrangementOptions">
      <summary>この列挙体のメンバを使用して、AutoLabelArrangement オブジェクトの Options プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.Default">
      <summary>任意のラベル位置を有効にします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.Top">
      <summary>上のラベル位置を有効にします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.Left">
      <summary>左のラベル位置を有効にします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.Bottom">
      <summary>下のラベル位置を有効にします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.Right">
      <summary>右のラベル位置を有効にします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.TopRight">
      <summary>右上のラベル位置を有効にします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.BottomRight">
      <summary>右下のラベル位置を有効にします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.BottomLeft">
      <summary>左下のラベル位置を有効にします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.TopLeft">
      <summary>左上のラベル位置を有効にします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementOptions.UseDataPoints">
      <summary>ラベルはデータ点に重ね描きできません。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.AutoLabelArrangementMethodEnum">
      <summary>この列挙体のメンバを使用して、AutoLabelArrangement オブジェクトの Method プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementMethodEnum.Decimation">
      <summary>このメソッドは、重ならないよう配置できないラベルを削除します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AutoLabelArrangementMethodEnum.FindingOptimum">
      <summary>このメソッドは、重ならないようラベルを配置しようと試みます。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.AutoLabelArrangement">
      <summary>ラベルの自動配列の設定を表します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.AutoLabelArrangement.Options">
      <summary>ラベル配置のオプションを取得または設定します。</summary>
      <remarks>オプションは、AutoLabelArrangementOptions 列挙体の各要素のビット単位の組み合わせです。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.AutoLabelArrangement.Method">
      <summary>ラベル配置のメソッドを取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.DataLabel">
      <summary>データ値のテキストラベルを表します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.DataLabel.Dispose">
      <summary>ガベージコレクション用のグラフのオブジェクトを準備します。</summary>
      <remarks>ガベージコレクション用の Label オブジェクトを準備します。 Dispose メソッドの呼び出し後、ラベルを参照しないでください。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.DataLabel.Connected">
      <summary>関連するデータ点を結んだ線を描画するかどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.DataLabel.Offset">
      <summary>関連するデータ点からのオフセットの距離をピクセル単位で取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.DataLabel.Compass">
      <summary>指定した位置を基準にしたラベルの位置を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.DataLabel.Style">
      <summary>ラベルの Style オブジェクトを取得します。</summary>
      <remarks>ChartLabels.DefaultLabelStyle プロパティを継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.DataLabel.Text">
      <summary>ラベルのテキストを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.DataLabel.Visible">
      <summary>ラベルの表示／非表示を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Label" />
    </member>
    <member name="P:C1.Win.C1Chart.DataLabel.Filter">
      <summary>データラベルのフィルタ値を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.DataLabel" />
      <remarks>filter = 1 の場合、各データ点にラベルを付けます。filter = 2 の場合、２番目のデータ点にラベルを付けます。</remarks>
    </member>
    <member name="T:C1.Win.C1Chart.DrawLegendEntryEventArgs">
      <summary>DrawLegendEntry イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.DrawLegendEntryEventArgs.Entry">
      <summary>凡例エントリであるオブジェクトを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.DrawLegendEntryEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.DrawLegendEntryEventArgs.TextColor">
      <summary>凡例エントリのテキストの色を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.DrawLegendEntryEventArgs" />
    </member>
    <member name="T:C1.Win.C1Chart.PointStyleSelectionEnum">
      <summary>この列挙体のメンバを使用して、PointStyle クラスの PointStyle.Selection プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.Index">
      <summary>PointStyle は、PointIndex と SeriesIndex で定義されたデータ点に適用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.DataMaxX">
      <summary>PointStyle は、ChartData のすべてのデータセットの中で最大 X 値を持つデータ点に適用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.DataMinX">
      <summary>PointStyle は、ChartData のすべてのデータセットの中で最小 X 値を持つデータ点に適用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.DataMaxY">
      <summary>PointStyle は、ChartData のすべてのデータセットの中で最大 Y 値を持つデータ点に適用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.DataMinY">
      <summary>PointStyle は、ChartData のすべてのデータセットの中で最小 Y 値を持つデータ点に適用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.SeriesMaxX">
      <summary>PointStyle は、PointStyle の SeriesIndex プロパティで定義されたデータセットの最大 X 値を持つデータ点に適用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.SeriesMinX">
      <summary>PointStyle は、PointStyle の SeriesIndex プロパティで定義されたデータセットの最小 X 値を持つデータ点に適用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.SeriesMaxY">
      <summary>PointStyle は、PointStyle の SeriesIndex プロパティで定義されたデータセットの最大 Y 値を持つデータ点に適用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.SeriesMinY">
      <summary>PointStyle は、PointStyle の SeriesIndex プロパティで定義されたデータセットの最小 Y 値を持つデータ点に適用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PointStyleSelectionEnum.Custom">
      <summary>PointStyle は、ユーザー定義の Select イベントハンドラで選択されます。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.PointStyleSelectEventHandler">
      <summary>PointStyle の Select イベントのデリゲート。</summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyleSelectEventArgs" />
    </member>
    <member name="T:C1.Win.C1Chart.PointStyleSelectEventArgs">
      <summary>PointStyleSelectEventArgs クラスは、PointStyleSelectEventHandler のイベント引数を含みます。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.PointStyleSelectEventArgs.SeriesIndex">
      <summary>イベントがカスタマイズを提供しているデータ点のデータセットインデックスを取得します。 PointIndex プロパティ値は、SeriesIndex プロパティ値と共に使用して、 PointStyle のカスタマイズを適用する特定のデータ点を示します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.PointStyleSelectEventArgs.PointIndex">
      <summary>イベントがカスタマイズを提供しているデータ点の点インデックスを取得します。 PointIndex プロパティ値は、SeriesIndex プロパティ値と共に使用して、 PointStyle のカスタマイズを適用する特定のデータ点を示します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.PointStyleSelectEventArgs.Selected">
      <summary>この点スタイルを SeriesIndex プロパティと PointIndex プロパティで定義された データ点に適用するかどうかを取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.PointStyle">
      <summary>PointStyle を使用して、同じデータセット内の他のデータ点と異なる外観を持つ データ点を記述します。PointStyle オブジェクトの各プロパティは、 特定のデータ点に適用された場合、そのデータ点を含むデータセットで 指定されたプロパティに優先します。各グラフの種類に応じてこれらの プロパティの完全な意味を理解するには、各データセットに関連付けられた スタイルプロパティの内容を参照してください。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.PointStyle.FillStyle">
      <summary>PointStyle の塗りつぶしスタイルを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="E:C1.Win.C1Chart.PointStyle.Select">
      <summary>PointStyle の選択内容を実行するときに発生します。PointStyle の Selection プロパティを Custom に設定した場合にのみ発生します。</summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="P:C1.Win.C1Chart.PointStyle.SeriesIndex">
      <summary>PointStyle のデータセットインデックスを取得または設定します。 SeriesIndex プロパティ値は、PointIndex プロパティ値と共に 使用して、PointStyle を適用する特定のデータ点を示します。</summary>
      <remarks>このプロパティは、Selection プロパティで指定した Selection メソッドがすべてのデータセット （DataMaxX、DataMaxY、DataMinX、DataMinY など）を含む場合は使用されません。</remarks>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="P:C1.Win.C1Chart.PointStyle.PointIndex">
      <summary>PointStyle のデータ点インデックスを取得または設定します。 PointIndex プロパティ値は、SeriesIndex プロパティ値と共に 使用して、PointStyle を適用する特定のデータ点を示します。</summary>
      <remarks>Selection が Index の場合にのみ有効です。</remarks>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="P:C1.Win.C1Chart.PointStyle.SymbolStyle">
      <summary>PointStyle のシンボルスタイルを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="P:C1.Win.C1Chart.PointStyle.LineStyle">
      <summary>PointStyle の線スタイルを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="P:C1.Win.C1Chart.PointStyle.Offset">
      <summary>PointStyle のオフセットを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="P:C1.Win.C1Chart.PointStyle.Selection">
      <summary>PointStyle の Selection メソッドを取得または設定します。 Selection メソッドのオプションについては、PointStyleSelectionEnum を参照してください。</summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="P:C1.Win.C1Chart.PointStyle.LegendEntry">
      <summary>凡例に PointStyle を表示するかどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="P:C1.Win.C1Chart.PointStyle.Label">
      <summary>PointStyle のラベルを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.PointStyle" />
    </member>
    <member name="T:C1.Win.C1Chart.PointStylesCollection">
      <summary>点スタイルを格納します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.PointStylesCollection.Add(C1.Win.C1Chart.PointStyle)">
      <summary>指定した PointStyle をコレクションに追加します。</summary>
      <param name="ps">PointStyle</param>
      <returns>点スタイルのインデックス。</returns>
      <seealso cref="T:C1.Win.C1Chart.PointStylesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.PointStylesCollection.AddNewPointStyle">
      <summary>新しい PointStyle を作成してコレクションに追加します。</summary>
      <returns>新しい PointStyle。</returns>
      <seealso cref="T:C1.Win.C1Chart.PointStylesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.PointStylesCollection.Insert(System.Int32,C1.Win.C1Chart.PointStyle)">
      <summary>指定した PointStyle をコレクション内の指定したインデックスに挿入します。</summary>
      <param name="index">インデックス。</param>
      <param name="ps">PointStyle。</param>
      <seealso cref="T:C1.Win.C1Chart.PointStylesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.PointStylesCollection.Remove(C1.Win.C1Chart.PointStyle)">
      <summary>指定した PointStyle をコレクションから削除します。</summary>
      <param name="ps">PointStylesCollection から削除する PointStyle。</param>
      <seealso cref="T:C1.Win.C1Chart.PointStylesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.PointStylesCollection.Contains(C1.Win.C1Chart.PointStyle)">
      <summary>指定した PointStyle がコレクション内に存在するかどうかを決定します。</summary>
      <param name="ps">PointStylesCollection 内で探す PointStyle。</param>
      <returns>指定した PointStyle がコレクション内に含まれているかどうかを示すブール値。</returns>
      <seealso cref="T:C1.Win.C1Chart.PointStylesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.PointStylesCollection.CopyTo(C1.Win.C1Chart.PointStyle[],System.Int32)">
      <summary>指定したインデックスから開始する PointStyles のコレクションを PointStylesCollection オブジェクトの指定した配列にコピーします。</summary>
      <param name="array">PointStylesCollection からコピーした要素のコピー先の配列。</param>
      <param name="index">コピーを開始する配列内のゼロベースインデックス。</param>
      <seealso cref="T:C1.Win.C1Chart.PointStylesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.PointStylesCollection.IndexOf(C1.Win.C1Chart.PointStyle)">
      <summary>コレクションの指定した PointStyle の現在のインデックスを取得します。</summary>
      <param name="ps">コレクション内で探す PointStyle。</param>
      <returns>コレクション内の指定した PointStyle の要素を示す整数を返します。 PointStyle が見つからない場合、戻り値は –１です。</returns>
      <seealso cref="T:C1.Win.C1Chart.PointStylesCollection" />
    </member>
    <member name="P:C1.Win.C1Chart.PointStylesCollection.Item(System.Int32)">
      <summary>数値インデックスによって、指定した PointStyle をコレクションから取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.PointStylesCollection" />
    </member>
    <member name="T:C1.Win.C1Chart.ShadingEnum">
      <summary>3D 効果を持つグラフを描画する場合に、グラフの 3D 領域の色に使用する影付けの種類を設定します。 この列挙体のメンバを使用して、View3D クラスの Shading プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ShadingEnum.None">
      <summary>3D 領域に特別な色を適用しません。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ShadingEnum.ColorLight">
      <summary>3D 領域の色を前景の色より明るくします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ShadingEnum.ColorDark">
      <summary>3D 領域の色を前景の色より暗くします。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.View3D">
      <summary>View3D クラスは、グラフの 3D 表示形式を定義します。 これらのプロパティをグラフグループの Use3D プロパティと共に使用して、 エリアグラフ、棒グラフ、円グラフ、および XY プロットグラフの 3D 効果を作り出します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.View3D.Elevation">
      <summary>X 軸に対して上向きに見上げる角度（仰角）を設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.View3D" />
    </member>
    <member name="P:C1.Win.C1Chart.View3D.Rotation">
      <summary>Y 軸に対して右向きに傾いて見える回転角度を設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.View3D" />
    </member>
    <member name="P:C1.Win.C1Chart.View3D.Depth">
      <summary>グラフの奥行きをグラフ幅全体に対する割合で設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.View3D" />
    </member>
    <member name="P:C1.Win.C1Chart.View3D.Shading">
      <summary>グラフの 3D 領域に適用する影付けの種類を指定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.View3D" />
    </member>
    <member name="T:C1.Win.C1Chart.ChartCoordArray">
      <summary>データ配列のコンテナオブジェクト。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.IsHole(System.Object)">
      <summary>指定した値がデータ欠損として解釈されるかどうかを決定します。</summary>
      <param name="value"></param>
      <returns>指定した値がデータ欠損として解釈されるかどうかを示すブール値。</returns>
      <remarks>値は、指定した値のデータ型に基づいて、自動的に内部データ型に変換されます。 値は、格納されているデータ欠損値に比較されます。NaN などの無効な 浮動小数点データ値は欠損値として処理されることに注意してください。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.CopyDataIn(System.Object)">
      <summary>データを ChartCoordArray にコピーして、既存のすべてのデータを置き換えます。</summary>
      <param name="o"></param>
      <returns>データが ChartCoordArray に適切にコピーされたかどうかを示すブール値。</returns>
      <remarks>
        <para>渡されるデータ配列はオブジェクトですが、基本的なデータ型は Single、Double、 Integer、Int16、Int64、Decimal、DateTime（VB の場合）、または float、double、 int、Int16、Int64、decimal、DateTime (C# の場合)とする必要があります。 オブジェクトの配列は受け入れられません。PointData が ChartCoordArray によって 管理される場合は、PointF オブジェクトの配列も渡されます。</para>
        <para>すべての値は、Double（VB の場合）または double（C# の場合）データ型として内部に格納されることに注意してください。 適切な入力データ型となるように、自動的にデータ変換が行われます。 たとえば、データ要素を DateTime 値（2002 年1月1日など）に設定すると、内部的には OLE の日付型として格納され、その後で Double/double 型として 37257 に変換されます。</para>
        <para>さらに、コピーされた配列の長さは、ChartCoordArray の長さを定義し、 Length プロパティが新しい値を返します。</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.CopyDataOut">
      <summary>デフォルトデータ型を使用して、ChartCoordArray からデータをコピーします。</summary>
      <returns>内部的に、Double（VB の場合）または double（C# の場合）値に適切に変換された、 デフォルトデータ型の配列を含むオブジェクト。</returns>
      <remarks>
        <para>渡される配列はオブジェクトですが、基本的なデータ型は Single、Double、Integer、 Int16、Int64、Decimal、DateTime（VB の場合）、または float、double、int、 Int16、Int64、decimal、DateTime (C# の場合)です。PointData が ChartCoordArray によって 管理される場合は、PointF オブジェクトの配列も返されます。</para>Visual Basic では、戻り値を明示的に変換する必要はありませんが、 C# では、戻り値を適切なデータ型に変換する必要があります。
        <para>すべての値は、Double（VB の場合）または double（C# の場合）データ型として内部に格納されることに注意してください。 適切なデフォルトデータ型となるように、自動的にデータ変換が行われます。</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.CopyDataOut(System.Type)">
      <summary>指定したデータ型を使用して、ChartCoordArray からデータをコピーします。</summary>
      <param name="t">データ型</param>
      <returns>内部的に、Double（VB の場合）または double（C# の場合）値に適切に変換された、 指定したデータ型の配列を含むオブジェクト。</returns>
      <remarks>
        <para>渡される配列はオブジェクトですが、基本的なデータ型は Single、Double、Integer、 Int16、Int64、Decimal、DateTime（VB の場合）、または float、double、int、 Int16、Int64、decimal、DateTime (C# の場合)です。PointData が ChartCoordArray によって 管理される場合は、PointF オブジェクトの配列も返されます。</para>Visual Basic では、戻り値を明示的に変換する必要はありませんが、 C# では、戻り値を適切なデータ型に変換する必要があります。
        <para>すべての値は、Double（VB の場合）または double（C# の場合）データ型として内部に格納されることに注意してください。 指定したデータ型に応じて、データ変換が自動的に行われます。</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.Add(System.Object)">
      <summary>新しい値を ChartCoordArray の末尾に追加します。</summary>
      <param name="value">新しいデータ値。</param>
      <returns>ChartCoordArray 内の新しい値のインデックスを示す整数。 新しいインデックスは常に、新しい値を追加する前の ChartCoordArray の Length です。</returns>
      <remarks>Add メソッドは、ChartDataArray の長さを １だけ拡張して、 新しい値を新しく作成した要素に追加します。 値は、自動的に内部ストレージデータ型に変換されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.Clear">
      <summary>すべての値を ChartCoordArray から削除します。</summary>
      <remarks>ChartCoordArray のすべての要素を削除して、Length を０に設定します。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.Contains(System.Object)">
      <summary>値が ChartCoordArray 内にあるかどうかを決定します。</summary>
      <param name="value"></param>
      <returns>指定した値が ChartCoordArray の要素の１つに存在するかどうかを示す ブール値。</returns>
      <remarks>値は、指定した値のデータ型に基づいて、自動的に内部データ型に 変換されます。変換された結果を使用して、値と ChartCoordArray の要素が比較されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.IndexOf(System.Object)">
      <summary>ChartCoordArray 内の指定した値の現在のインデックスを取得します。</summary>
      <param name="value"></param>
      <returns>ChartCoordArray 内の指定した値の要素を示す整数を返します。 値が見つからない場合、戻り値は –１です。</returns>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.Insert(System.Int32,System.Object)">
      <summary>新しい値を ChartCoordArray の指定したインデックスに挿入します。</summary>
      <param name="index">新しい値のインデックス。</param>
      <param name="value">新しいデータ値。</param>
      <remarks>値は、指定した位置に挿入され、ChartCoordArray の長さは 1 増大します。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.Remove(System.Object)">
      <summary>指定した値の最初の出現を ChartCoordArray から削除します。</summary>
      <param name="value">削除する値。</param>
      <remarks>値は、指定した値のデータ型に基づいて、自動的に内部データ型に 変換されます。変換された結果を使用して、値と ChartCoordArray の要素が比較されます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ChartCoordArray.RemoveAt(System.Int32)">
      <summary>指定したインデックスの要素を ChartCoordArray から削除します。</summary>
      <param name="index">削除するデータ値のインデックス。</param>
      <remarks>ChartCoordArray の要素は削除され、ChartCoordArray の長さは １減少します。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartCoordArray.DataType">
      <summary>座標のデフォルトデータ型を取得または設定します。</summary>
      <remarks>CopyDataOut メソッドで使用されるデフォルトのデータ型を指定します。 デフォルトの DataType プロパティが明示的に設定されない場合、返されるデータ型は Item プロパティの CopyDataIn メソッドを使用して最後に入力されたデータ型になります。 受け入れ可能な入力データ型には、Single、Double、Integer、Int16、Int64、Decimal、DateTime（VB の場合）、 および float、double、int、Int16、Int64、decimal、DateTime（C# の場合）が含まれます。 PointData が ChartCoordArray によって管理される場合は、PointF オブジェクトも使用されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartCoordArray.Length">
      <summary>座標配列の長さを取得または設定します。</summary>
      <remarks>既存の配列の長さを拡大する場合、新しく作成される要素には データ欠損値が入力されます。配列の長さを短縮する場合、 切り捨てられた要素は破棄されます。 Item プロパティによって値を設定する前に、配列の長さを 拡大する必要があります。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.ChartCoordArray.Hole">
      <summary>ChartCoordArray.DataType プロパティで指定したデータ型に変換される 現在のデータ欠損を持つ Object を返します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartCoordArray.Item(System.Int32)">
      <summary>インデックスによって、データ要素の値を取得または設定します。</summary>
      <remarks>
        <para>このプロパティは、数値インデックスによって特定のデータエントリにアクセスするために使用します。 Visual Basic では、変換処理は必要ありませんが、C# では、戻り値を 適切なデータ型に変換する必要があります。すべての値は、Double（VB の場合） または double（C# の場合）データ型として内部に格納されることに注意してください。 適切な入力データ型となるように、自動的にデータ変換が行われます。 たとえば、データ要素を DateTime 値（2002 年1月1日など）に設定すると、内部的には OLE の日付型として格納され、その後で Double/double 型として 37257 に変換されます。</para>
        <para>受け入れ可能な入力データ型には、Single、Double、Integer、Int16、Int64、Decimal、DateTime（VB の場合）、 および float、double、int、Int16、Int64、decimal、DateTime（C# の場合）が含まれます。 PointData が ChartCoordArray によって管理される場合は、PointF オブジェクトも使用されます。</para>
        <para>インデックスは、０～配列の Length の間（両端を含む）とすることに注意してください。</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Chart.FillTypeEnum">
      <summary>データのシェイプを塗りつぶす方法を指定するために、FillTypeEnum 列挙体が使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FillTypeEnum.SolidColor">
      <summary>Color1 を使用する塗りつぶしには実線が使用されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FillTypeEnum.Gradient">
      <summary>
        塗りつぶしには、
        <see cref="T:C1.Win.C1Chart.GradientStyleEnum" />によって列挙されたパターンを含む Color1 と Color2 を使用して、２色のグラデーションが使用されます。
      </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FillTypeEnum.Hatch">
      <summary>
        塗りつぶしには、
        <see cref="T:C1.Win.C1Chart.HatchStyleEnum" />によって列挙されたパターンを含む Color1 と Color2 を使用して、２色のハッチングパターンが使用されます。
      </summary>
    </member>
    <member name="F:C1.Win.C1Chart.FillTypeEnum.Texture">
      <summary>FillStyle の指定された画像を並べて表示することにより、テクスチャが作成されます。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.FillStyle">
      <summary>FillStyle クラスは、グラフ自体、グラフ領域、凡例、ヘッダ、 フッタ、ラベルなど、グラフのさまざまな要素に使用できる 各種の塗りつぶしスタイルを記述するために使用します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.FillStyle.ResetOutlineColor">
      <summary>枠線の色をデフォルト値にリセットして、PlotArea の ForeColor を使用できるようにします。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.FillStyle.Color1">
      <summary>塗りつぶし色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.FillStyle.Color2">
      <summary>２番目の塗りつぶし色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.FillStyle.OutlineColor">
      <summary>塗りつぶし領域の枠線の色を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.FillStyle.OutlineThickness">
      <summary>塗りつぶし領域の枠線の太さを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.FillStyle.FillType">
      <summary>塗りつぶしの形式を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.FillStyle.GradientStyle">
      <summary>塗りつぶし時のグラデーションを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.FillStyle.HatchStyle">
      <summary>塗りつぶし時のハッチスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.FillStyle.Image">
      <summary>塗りつぶしのイメージを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.FillStyle.Alpha">
      <summary>塗りつぶし色の透過量を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.SelectActionEnum">
      <summary>この列挙体のメンバを使用して、ChartTooltip オブジェクトの SelectAction プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SelectActionEnum.MouseOver">
      <summary>マウスがグラフ要素の上に置かれたときツールチップを表示します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SelectActionEnum.Click">
      <summary>ユーザーがグラフ要素をクリックしたときにツールチップを表示します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ShowTooltipEventArgs">
      <summary>ShowTooltip イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ShowTooltipEventArgs.TooltipText">
      <summary>ツールチップテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ShowTooltipEventArgs.GroupIndex">
      <summary>グラフグループのインデックスを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ShowTooltipEventArgs.SeriesIndex">
      <summary>データセットのインデックスを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ShowTooltipEventArgs.PointIndex">
      <summary>データ点のインデックスを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ShowTooltipEventHandler">
      <summary>C1Chart クラスの ShowTooltip イベントを処理するメソッドを表します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ChartToolTip">
      <summary>グラフ要素のツールチップの外観を制御します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartToolTip.SelectAction">
      <summary>ツールチップに関連付けられたアクションを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartToolTip.PlotElement">
      <summary>プロット要素を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartToolTip.Enabled">
      <summary>ツールチップが有効かどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartToolTip.AutomaticDelay">
      <summary>ツールチップの自動遅延を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartToolTip.AutoPopDelay">
      <summary>指定したツールチップテキストを含む領域内でマウスポインタが静止状態にある場合に、ツールチップを表示したままにする時間を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartToolTip.InitialDelay">
      <summary>ツールチップを表示するまでに経過する時間を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ChartToolTip.ReshowDelay">
      <summary>マウスポインタがある領域から別の領域に移動されたとき、それに続いてツールチップウィンドウを表示するまでの所要時間の長さを取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.DataAppearanceEnum">
      <summary>この列挙体のメンバを使用して、DataHighlight オブジェクトの Appearance プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.None">
      <summary>外観を変更しません。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.Symbol">
      <summary>シンボルスタイルを変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.Line">
      <summary>線スタイルを変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.Fill">
      <summary>塗りつぶしスタイルを変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.SymbolShape">
      <summary>シンボル形状を変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.SymbolSize">
      <summary>シンボルサイズを変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.SymbolColor">
      <summary>シンボルの色を変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.SymbolOutlineColor">
      <summary>シンボルの輪郭の色を変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.SymbolOutlineWidth">
      <summary>シンボルの輪郭の幅を変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.LineColor">
      <summary>線の色を変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.LinePattern">
      <summary>線パターンを変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.LineThickness">
      <summary>線の太さを変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.FillAlpha">
      <summary>塗りつぶしのアルファ値を変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.FillColor1">
      <summary>塗りつぶしの色１を変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.FillColor2">
      <summary>塗りつぶしの色２を変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.FillType">
      <summary>塗りつぶしの種類を変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.FillGradientStyle">
      <summary>グラデーションスタイルの塗りつぶしを変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.FillHatchStyle">
      <summary>ハッチスタイルの塗りつぶしを変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.FillImage">
      <summary>塗りつぶしのイメージを変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.Offset">
      <summary>データセットのオフセットを変更します（円グラフの場合のみ）。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.LineMiterLimit">
      <summary>線の MiterLimit を変更します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataAppearanceEnum.LineLineJoin">
      <summary>線の LineJoin を変更します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.HighlightActivationEnum">
      <summary>この列挙体のメンバを使用して、DataHighlight オブジェクトの Activation プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HighlightActivationEnum.Disabled">
      <summary>ハイライト表示を無効にします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HighlightActivationEnum.Custom">
      <summary>ユーザーがアクティブなデータセットとデータ点を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HighlightActivationEnum.MouseOver">
      <summary>ユーザーがプロットされたデータの上にマウスを移動したときにハイライト表示をアクティブ化します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HighlightActivationEnum.Click">
      <summary>ユーザーがプロットされたデータをクリックしたときにハイライト表示をアクティブ化します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.HighlightChangedEventArgs">
      <summary>HighlightChanged イベントのデータを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.HighlightChangedEventArgs.Group">
      <summary>グラフグループを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.HighlightChangedEventArgs.Series">
      <summary>データセットを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.HighlightChangedEventArgs.SeriesIndex">
      <summary>データセットのインデックスを取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.HighlightChangedEventArgs.PointIndex">
      <summary>データ点のインデックスを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.HighlightChangedEventHandler">
      <summary>C1Chart クラスの HighlightChanged イベントを処理するメソッドを表します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.DataHighlight">
      <summary>データのハイライト表示を制御します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.DataHighlight.Activation">
      <summary>ハイライト表示の Activation メソッドを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.DataHighlight.Appearance">
      <summary>ハイライト表示の外観を取得または設定します。外観は、ハイライト表示するデータに適用する 視覚属性の組み合わせです。属性の正確な値は、対応する DataHighlight オブジェクト （FillStyle、LineStyle、SymbolStyle）から取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.DataHighlight.SymbolStyle">
      <summary>ハイライト表示するシンボルスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.DataHighlight.LineStyle">
      <summary>ハイライト表示の線スタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.DataHighlight.FillStyle">
      <summary>ハイライト表示の塗りつぶしスタイルを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.DataHighlight.SeriesIndex">
      <summary>ハイライト表示するデータセットのインデックスを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.DataHighlight.PointIndex">
      <summary>ハイライト表示するデータ点のインデックスを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.DataHighlight.PlotElement">
      <summary>ハイライト表示に使用するプロット要素を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.AlignImageEnum">
      <summary>この列挙体のメンバを使用して、Style クラスの ImageAlignment プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignImageEnum.Hide">
      <summary>イメージを隠し表示にします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignImageEnum.Left">
      <summary>イメージを左揃えにします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignImageEnum.Right">
      <summary>イメージを右揃えにします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignImageEnum.Top">
      <summary>イメージを上揃えにします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignImageEnum.Bottom">
      <summary>イメージを下揃えにします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignImageEnum.Center">
      <summary>イメージを中央揃えにします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignImageEnum.Scale">
      <summary>イメージを拡大／縮小してイメージ領域に合わせます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignImageEnum.Stretch">
      <summary>イメージを引き伸ばしてイメージ領域に合わせます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignImageEnum.Tile">
      <summary>イメージをイメージ領域全体にタイル表示します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.AlignHorzEnum">
      <summary>この列挙体のメンバを使用して、Style クラスの HorizontalAlignment プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignHorzEnum.General">
      <summary>テキストを左側に、数字は右側に揃えます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignHorzEnum.Near">
      <summary>テキストを左側に揃えます（左から右に使用する形式の場合）。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignHorzEnum.Center">
      <summary>テキストを中央揃えにします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignHorzEnum.Far">
      <summary>セルのテキストを右側に揃えます（左から右に使用する形式の場合）。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignHorzEnum.Justify">
      <summary>テキストを領域全体に広げます。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.AlignVertEnum">
      <summary>この列挙体のメンバを使用して、Style クラスの VerticalAlignment プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignVertEnum.Top">
      <summary>テキストを上揃えにします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignVertEnum.Center">
      <summary>テキストを中央揃えにします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.AlignVertEnum.Bottom">
      <summary>テキストを下揃えにします。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.RotationEnum">
      <summary>この列挙体のメンバを使用して、Axis および Style クラスの Axis.Rotation プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.RotationEnum.Rotate0">
      <summary>回転しません。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.RotationEnum.Rotate90">
      <summary>オブジェクトを 90 度回転させます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.RotationEnum.Rotate180">
      <summary>オブジェクトを 180 度回転または反転させます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.RotationEnum.Rotate270">
      <summary>オブジェクトを 270 度回転させます。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.BorderStyleEnum">
      <summary>この列挙体のメンバを使用して、Border クラスの BorderStyle プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.NotSet">
      <summary>枠線スタイルを設定せず、C1Chart クラスから継承します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.None">
      <summary>枠線なし。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.Empty">
      <summary>空の枠線。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.Solid">
      <summary>実線の枠線。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.Raised">
      <summary>システムカラーを使って描画した、浮き出し 3D 枠線。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.Inset">
      <summary>システムカラーを使って描画した、くぼみ 3D 枠線。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.RaisedBevel">
      <summary>浮き出しベベル付き 3D 枠線。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.InsetBevel">
      <summary>くぼみベベル付き 3D 枠線。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.Groove">
      <summary>複合枠線（くぼみ + 浮き出し）。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.Fillet">
      <summary>複合枠線（浮き出し + くぼみ）。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.Double">
      <summary>二重実線の枠線。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.Dashed">
      <summary>破線の枠線。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.BorderStyleEnum.Opaque">
      <summary>実線の境界がアンチエイリアス処理されずに描画されました。 不透明な境界は丸みを無視し、透明な画像として描画されるアンチエイリアス処理されたグラフに最適です。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.CompassEnum">
      <summary>この列挙体のメンバを使用して、Axis、Label、および Legend クラスの Compass プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.CompassEnum.North">
      <summary>オブジェクトを北（上側）に配置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.CompassEnum.South">
      <summary>オブジェクトを南（下側）に配置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.CompassEnum.East">
      <summary>オブジェクトを東（右側）に配置します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.CompassEnum.West">
      <summary>オブジェクトを西（左側）配置します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.SymbolShapeEnum">
      <summary>この列挙体のメンバを使用して、ChartSymbolStyle クラスの Shape プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.None">
      <summary>データ点にシンボルを使用しません。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.Box">
      <summary>塗りつぶした小さな四角形でデータ点を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.Dot">
      <summary>塗りつぶした円でデータ点を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.Tri">
      <summary>塗りつぶした三角形でデータ点を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.Diamond">
      <summary>塗りつぶした小さなひし形でデータ点を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.InvertedTri">
      <summary>塗りつぶした下向きの三角形でデータ点を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.Star">
      <summary>塗りつぶした星形でデータ点を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.VerticalLine">
      <summary>短い垂直線でデータ点を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.HorizontalLine">
      <summary>短い水平線でデータ点を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.Cross">
      <summary>水平線と垂直線のクロスでデータ点を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.DiagCross">
      <summary>斜めにクロスする線でデータ点を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.Circle">
      <summary>塗りつぶした大きな円でデータ点を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.Square">
      <summary>塗りつぶした大きな四角形でデータ点を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.OpenTri">
      <summary>小さな三角形（塗りつぶしなし）でデータ点を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.OpenDiamond">
      <summary>ひし形（塗りつぶしなし）でデータ点を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.SymbolShapeEnum.OpenInvertedTri">
      <summary>下向きの三角形（塗りつぶしなし）でデータ点を表します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.PrintScaleEnum">
      <summary>この列挙体のメンバを使用して、PrintChart メソッドの 伸縮のプロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PrintScaleEnum.ScaleNone">
      <summary>原寸大で印刷します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PrintScaleEnum.ScaleToFit">
      <summary>実際の比率を変えずに既存のウィンドウ（高さと幅が最小値）へ伸縮して印刷します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PrintScaleEnum.ScaleToHeight">
      <summary>実際の比率を変えずに特定の高さへ伸縮して印刷します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PrintScaleEnum.ScaleToMax">
      <summary>ページサイズに拡大して印刷します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PrintScaleEnum.ScaleToWidth">
      <summary>実際の比率を変えずに特定の幅へ伸縮して印刷します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.GradientStyleEnum">
      <summary>この列挙体のメンバを使用して、Style クラスの GradientStyle プロパティ、および PlotArea クラスの .PlotArea.GradientStyle プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.None">
      <summary>グラデーション塗りつぶしを行いません。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.Horizontal">
      <summary>左から右方向にグラデーション塗りつぶしを行います。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.HorizontalCenter">
      <summary>中央から左右方向にグラデーション塗りつぶしを行います。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.Vertical">
      <summary>上から下方向にグラデーション塗りつぶしを行います。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.VerticalCenter">
      <summary>中央から上下方向にグラデーション塗りつぶしを行います。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.Diagonal">
      <summary>左下から右上方向へグラデーション塗りつぶしを行います。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.DiagonalCenter">
      <summary>中央から左下方向と右上方向へグラデーション塗りつぶしを行います。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.DiagonalBack">
      <summary>左上から右下方向へグラデーション塗りつぶしを行います。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.DiagonalBackCenter">
      <summary>中央から左上方向と右下方向へグラデーション塗りつぶしを行います。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.Radial">
      <summary>中心から放射状にコーナー方向へグラデーション塗りつぶしを行います。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.GradientStyleEnum.FromCenter">
      <summary>中心からコーナー方向へグラデーション塗りつぶしを行います。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.HatchStyleEnum">
      <summary>この列挙体のメンバを使用してStyle クラスの HatchStyle プロパティ、および PlotArea クラスの HatchStyle プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.None">
      <summary>パターンなし。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Horizontal">
      <summary>水平線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Vertical">
      <summary>垂直線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.ForwardDiagonal">
      <summary>左上から右下への対角線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.BackwardDiagonal">
      <summary>右上から左下への対角線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Cross">
      <summary>交差する水平および垂直線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DiagonalCross">
      <summary>交差する右上がりと左上がりの対角線のパターン。線はアンチエイリアス処理されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent05">
      <summary>５パーセントのハッチパターン。前景色と背景色の割合は 5:100。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent10">
      <summary>10 パーセントのハッチパターン。前景色と背景色の割合は 10:100。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent20">
      <summary>20 パーセントのハッチパターン。前景色と背景色の割合は 20:100。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent25">
      <summary>25 パーセントのハッチパターン。前景色と背景色の割合は 25:100。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent30">
      <summary>30 パーセントのハッチパターン。前景色と背景色の割合は 30:100。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent40">
      <summary>40 パーセントのハッチパターン。前景色と背景色の割合は 40:100。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent50">
      <summary>50 パーセントのハッチパターン。前景色と背景色の割合は 50:100。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent60">
      <summary>60 パーセントのハッチパターン。前景色と背景色の割合は 60:100。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent70">
      <summary>70 パーセントのハッチパターン。前景色と背景色の割合は 70:100。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent75">
      <summary>75 パーセントのハッチパターン。前景色と背景色の割合は 75:100。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent80">
      <summary>80 パーセントのハッチパターン。前景色と背景色の割合は 80:100。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Percent90">
      <summary>90 パーセントのハッチパターン。前景色と背景色の割合は 90:100。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.LightDownwardDiagonal">
      <summary>上の点から下の点へ左に傾斜し、ForwardDiagonal よりも間隔が 50 パーセント狭く、 アンチエイリアス処理されない対角線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.LightUpwardDiagonal">
      <summary>上の点から下の点へ左に傾斜し、BackwardDiagonal よりも間隔が 50 パーセント狭く、 アンチエイリアス処理されない対角線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DarkDownwardDiagonal">
      <summary>上の点から下の点へ右に傾斜し、ForwardDiagonal よりも間隔が 50 パーセント狭く、幅が２倍で、アンチエイリアス処理されない 対角線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DarkUpwardDiagonal">
      <summary>上の点から下の点へ左に傾斜し、BackwardDiagonal よりも間隔が 50 パーセント狭く、幅が２倍で、アンチエイリアス処理されない 対角線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.WideDownwardDiagonal">
      <summary>上の点から下の点へ右に傾斜し、ForwardDiagonal と間隔が等しく、 幅が３倍で、アンチエイリアス処理されない対角線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.WideUpwardDiagonal">
      <summary>上の点から下の点へ左に傾斜し、BackwardDiagonal と間隔が等しく、 幅が３倍で、アンチエイリアス処理されない対角線のlパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.LightVertical">
      <summary>間隔が Vertical よりも 50 パーセント狭い垂直線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.LightHorizontal">
      <summary>間隔が Horizontal よりも 50 パーセント狭い水平線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.NarrowVertical">
      <summary>間隔が Vertical よりも 75 パーセント狭い（または LightVertical よりも 25 パーセント狭い）垂直線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.NarrowHorizontal">
      <summary>間隔が Horizontal よりも 75 パーセント狭い（または LightHorizontal よりも 25 パーセント狭い）水平線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DarkVertical">
      <summary>Vertical よりも間隔が 50 パーセント狭く、幅が２倍の垂直線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DarkHorizontal">
      <summary>Horizontal よりも 間隔が 50 パーセント狭く、幅が２倍の水平線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DashedDownwardDiagonal">
      <summary>上の点から下の点へ右に傾斜した、破線の対角線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DashedUpwardDiagonal">
      <summary>上の点から下の点へ左に傾斜した、破線の対角線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DashedHorizontal">
      <summary>破線の水平線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DashedVertical">
      <summary>破線の垂直線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.SmallConfetti">
      <summary>紙吹雪のような外観のハッチパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.LargeConfetti">
      <summary>SmallConfetti よりも大きいピースから構成される、 紙吹雪のような外観のハッチパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.ZigZag">
      <summary>ジグザグに構成された水平線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Wave">
      <summary>チルダで構成された水平線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DiagonalBrick">
      <summary>上の点から下の点へ左に傾斜した、積み重ねたレンガ状の ハッチパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.HorizontalBrick">
      <summary>レンガを水平に積み上げたような外観のハッチパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Weave">
      <summary>織物のような外観のハッチパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Plaid">
      <summary>格子柄の生地のような外観のハッチのパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Divot">
      <summary>芝生のような外観のハッチパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DottedGrid">
      <summary>それぞれドットで構成されていて、交差する水平線と垂直線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.DottedDiamond">
      <summary>それぞれドットで構成されていて、交差する右上がりと左上がりの対角線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Shingle">
      <summary>上の点から下の点へ右に傾斜した、対角線状に積み重ねた 板屋根のような外観のハッチパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Trellis">
      <summary>四目格子のような外観のハッチパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.Sphere">
      <summary>交互に並べた球体のような外観のハッチパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.SmallGrid">
      <summary>間隔が Cross よりも 50 パーセント狭い、交差する 水平線と垂直線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.SmallCheckerBoard">
      <summary>チェッカーボードのような外観のハッチパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.LargeCheckerBoard">
      <summary>SmallCheckerBoard の２倍のサイズの正方形による、 チェッカーボードのような外観のハッチパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.OutlinedDiamond">
      <summary>交差する右上がりと左上がりの線で、アンチエイリアス処理されない対角線のパターン。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.HatchStyleEnum.SolidDiamond">
      <summary>斜めに配置されたチェッカーボードのような外観のハッチパターン。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.LegendOrientationEnum">
      <summary>この列挙体のメンバを使用して、Legend クラスの Orientation プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LegendOrientationEnum.Auto">
      <summary>Compass プロパティの値が North あるいは South に設定されている場合は凡例を水平方向に表示し、 East あるいは West に設定されている場合は凡例を垂直方向に表示します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LegendOrientationEnum.Vertical">
      <summary>凡例の幅の許容される範囲で、凡例の表示項目を横方向に並べて追加します。 凡例の幅が十分にない場合は、凡例の行が追加されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LegendOrientationEnum.Horizontal">
      <summary>凡例の高さの許容される範囲で、凡例の表示項目を垂直に積み重ねて表示します。 凡例の高さが十分にない場合、凡例の列が追加されます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LegendOrientationEnum.HorizontalVariableItemWidth">
      <summary>Horozontal と同じですが、各エントリはその内容に応じて異なる幅を持つことができます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LegendOrientationEnum.VerticalVariableItemHeight">
      <summary>Vertical と同じですが、各エントリはその内容に応じて異なる高さを持つことができます。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.Border">
      <summary>Border クラスは、C1Chart コントロール、グラフ領域、凡例、ヘッダ、フッタ、 およびラベルなど、さまざまなグラフ要素の枠線の外観を記述するために使用します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.Border.ShouldSerializeColor">
      <summary>Border の Color プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、Color.Transparent を使用して、親スタイルの BackColor を枠線の色の基本として使用します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Border" />
    </member>
    <member name="P:C1.Win.C1Chart.Border.BorderStyle">
      <summary>枠線のスタイルを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Border" />
    </member>
    <member name="P:C1.Win.C1Chart.Border.Color">
      <summary>枠線の色を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Border" />
    </member>
    <member name="P:C1.Win.C1Chart.Border.Thickness">
      <summary>枠線の太さを取得または設定します。</summary>
      <remarks>枠線のスタイルの一部は太さが固定されています。この場合、Thickness プロパティは無効です。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Border" />
    </member>
    <member name="P:C1.Win.C1Chart.Border.Rounding">
      <summary>角の丸みを制御する Rounding オブジェクトを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Border" />
    </member>
    <member name="T:C1.Win.C1Chart.Rounding">
      <summary>枠線の角の丸みを記述するプロパティセットを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.Rounding.All">
      <summary>枠のそれぞれの角の丸みの半径を取得または設定します。</summary>
      <remarks>このプロパティを設定すると、LeftTop、LeftBottom、RightTop、RightBottom の各プロパティの値が変更されて、 各角が変更されます。All プロパティの設定後にこれらのプロパティをリセットした場合、 各角は異なる半径を持つことができます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Rounding" />
    </member>
    <member name="P:C1.Win.C1Chart.Rounding.LeftTop">
      <summary>枠の左上角の丸みの半径を取得または設定します。</summary>
      <remarks>このプロパティを設定すると、枠線の左上領域の All プロパティ値をオーバーライドします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Rounding" />
    </member>
    <member name="P:C1.Win.C1Chart.Rounding.LeftBottom">
      <summary>枠の左下角の丸みの半径を取得または設定します。</summary>
      <remarks>このプロパティを設定すると、枠線の左下領域の All プロパティ値をオーバーライドします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Rounding" />
    </member>
    <member name="P:C1.Win.C1Chart.Rounding.RightTop">
      <summary>枠の右上角の丸みの半径を取得または設定します。</summary>
      <remarks>このプロパティを設定すると、枠線の右上領域の All プロパティ値をオーバーライドします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Rounding" />
    </member>
    <member name="P:C1.Win.C1Chart.Rounding.RightBottom">
      <summary>枠の右下角の丸みの半径を取得または設定します。</summary>
      <remarks>このプロパティの設定は、枠線の右下領域の All プロパティ値をオーバーライドします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Rounding" />
    </member>
    <member name="T:C1.Win.C1Chart.Style">
      <summary>Style クラスは、C1Chart コントロール、グラフ領域、凡例、ヘッダ、フッタ、およびラベルなどを含め、 グラフにおけるさまざまな要素の外観を記述するために使用します。通常、オブジェクトの スタイルまたはそのプロパティ（あるいはその両方）は、オブジェクトの親スタイル またはデフォルトのスタイルを継承します。すべての Style プロパティは、 スタイルプロパティの継承状態を復元する Reset メソッドと関連付けられています。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeBackColor">
      <summary>Style の BackColor プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、BackColor を親オブジェクトのスタイルから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetBackColor">
      <summary>要素の背景色の継承状態をリセットします。</summary>
      <remarks>このメソッドは、要素の背景色の継承状態をリセットします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeForeColor">
      <summary>Style の ForeColor プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、ForeColor を親オブジェクトのスタイルから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetForeColor">
      <summary>要素の前景色の継承状態をリセットします。</summary>
      <remarks>このメソッドは、要素の前景色の継承状態をリセットします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeFont">
      <summary>Style の Font プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、Font を親オブジェクトのスタイルから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetFont">
      <summary>要素のフォントの継承状態をリセットします。</summary>
      <remarks>このメソッドは、要素のフォントの継承状態をリセットします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeOpaque">
      <summary>Style の Opaque プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、Opaque を親オブジェクトのスタイルから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetOpaque">
      <summary>要素の不透明度の継承状態をリセットします。</summary>
      <remarks>このメソッドは、要素の不透明度の継承状態をリセットします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeHorizontalAlignment">
      <summary>Style の HorizontalAlignment プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、HorizontalAlignment を親オブジェクトのスタイルから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetHorizontalAlignment">
      <summary>要素のテキストの水平配置の継承状態をリセットします。</summary>
      <remarks>このメソッドは、要素のテキストの水平配置の継承状態をリセットします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeVerticalAlignment">
      <summary>Style の VerticalAlignment プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、VerticalAlignment を親オブジェクトのスタイルから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetVerticalAlignment">
      <summary>要素のテキストの垂直配置の継承状態をリセットします。</summary>
      <remarks>このメソッドは、要素のテキストの垂直配置の継承状態をリセットします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeImageAlignment">
      <summary>Style の ImageAlignment プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、ImageAlignment を親オブジェクトのスタイルから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetImageAlignment">
      <summary>要素のイメージ配置の継承状態をリセットします。</summary>
      <remarks>このメソッドは、要素のイメージ配置の継承状態をリセットします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeRotation">
      <summary>Style の Rotation プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、Rotation を親オブジェクトのスタイルから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetRotation">
      <summary>要素のテキストの回転の継承状態をリセットします。</summary>
      <remarks>このメソッドは、要素のテキストの回転の継承状態をリセットします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeBorder">
      <summary>Style の Style.Border プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、Border を親オブジェクトのスタイルから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetBorder">
      <summary>要素の枠線の継承状態をリセットします。</summary>
      <remarks>このメソッドは、要素の枠線の継承状態をリセットします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeBackColor2">
      <summary>Style の BackColor2 プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、BackColor2 を親オブジェクトのスタイルから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeAutowrap">
      <summary>Style の Autowrap プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、Autowrap を親オブジェクトのスタイルから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetAutowrap">
      <summary>スタイルの Autowrap の継承状態をリセットします。</summary>
      <remarks>このメソッドは、Style の Autowrap の継承状態をリセットします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ShouldSerializeVerticalText">
      <summary>Style の VerticalText プロパティがデフォルト状態にある場合、false を返します。</summary>
      <returns>ブール。</returns>
      <remarks>デフォルト状態では、VerticalText を親オブジェクトのスタイルから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="M:C1.Win.C1Chart.Style.ResetVerticalText">
      <summary>スタイル VerticalText の継承状態をリセットします。</summary>
      <remarks>このメソッドは、スタイル VerticalText の継承状態をリセットします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.BackColor">
      <summary>背景色を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.ForeColor">
      <summary>前景色を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.Font">
      <summary>フォントオブジェクトを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.Opaque">
      <summary>背景の不透明度を取得または設定します。</summary>
      <remarks>オブジェクトの Opaque プロパティが True の場合は、前景が描画される前に、 オブジェクトの背景に背景色でブラシがかけられます。オブジェクトの Opaque プロパティが False の場合は、 背景にはブラシがかけられず、オブジェクトの前景だけが描画されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.HorizontalAlignment">
      <summary>テキストの水平方向の配置を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.VerticalAlignment">
      <summary>テキストの垂直方向の配置を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.ImageAlignment">
      <summary>イメージの配置を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.Rotation">
      <summary>テキストの回転方向を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.Border">
      <summary>Border オブジェクトを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.BackColor2">
      <summary>グラデーションパターンまたはハッチパターンで使用する背景色を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.GradientStyle">
      <summary>背景のグラデーション塗りつぶしスタイルを定義します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.HatchStyle">
      <summary>背景のハッチパターンによる塗りつぶしスタイルを定義します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.Autowrap">
      <summary>テキストの自動折り返しを行うかどうかを取得または設定します。</summary>
      <remarks>C1Chart 内のオブジェクトを含むテキストの大部分は、ヘッダ、フッタ、軸タイトル、ラベル、 および凡例（タイトルのみ、データセット名は含まない）を含むテキストを自動的に折り返します。 ただし、これらのすべてのオブジェクトは自動的にサイズ処理されます。サイズの自動処理は、 常にテキストの単一行をベースに行われます（可能な場合）。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="P:C1.Win.C1Chart.Style.VerticalText">
      <summary>テキストを縦書き表示するかどうかを取得または設定します。</summary>
      <remarks>VerticalText を利用すれば、２バイト文字を縦書き表示できます。 １バイト文字の場合は、時計回りに 90°回転したテキストとして表示されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Style" />
    </member>
    <member name="T:C1.Win.C1Chart.Title">
      <summary>Title クラスは、ヘッダとフッタの外観を記述するために使用します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.Title.ShouldSerializeLocationDefault">
      <summary>Title の LocationDefault プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態は LocationDefault.Width = -1、LocationDefault.Height = -1で、 Compass プロパティに基づいて Title を自動配置します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="M:C1.Win.C1Chart.Title.ResetLocationDefault">
      <summary>タイトル配置をリセットして自動計算します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="M:C1.Win.C1Chart.Title.ShouldSerializeSizeDefault">
      <summary>Title の SizeDefault プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態は SizeDefault.Width = -1、SizeDefault.Height = -1 で、 タイトルを自動サイズ変更します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="M:C1.Win.C1Chart.Title.ResetSizeDefault">
      <summary>タイトルのサイズをリセットして自動的に計算します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="M:C1.Win.C1Chart.Title.ShouldSerializeStyle">
      <summary>Title の Style プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、Style を C1Chart の Style プロパティから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="M:C1.Win.C1Chart.Title.ResetStyle">
      <summary>タイトルのスタイルの継承状態をリセットします。</summary>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="M:C1.Win.C1Chart.Title.AppendRtfText(System.String,System.Drawing.Color)">
      <summary>指定した色とオブジェクトのデフォルトフォントを使用して、 指定したテキストを RTF 文字列に付加します。 RTF 描画では透明な色を使用できません。</summary>
      <param name="Text">既存の RTF に付加されるテキスト文字列。</param>
      <param name="Color">付加されたテキストの ForeColor。</param>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="M:C1.Win.C1Chart.Title.AppendRtfText(System.String,System.Drawing.Font)">
      <summary>ForeColor オブジェクトと指定したフォントを使用して、 指定したテキストを RTF 文字列に付加します。 RTF 描画では透明な色を使用できません。</summary>
      <param name="Text">既存の RTF に付加されるテキスト文字列。</param>
      <param name="Font">付加されたテキストのフォント。</param>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="M:C1.Win.C1Chart.Title.AppendRtfText(System.String,System.Drawing.Color,System.Drawing.Font)">
      <summary>指定した色とフォントを使用して、指定したテキストを RTF 文字列に付加します。RTF 描画では透明な色を 使用できません。</summary>
      <param name="Text">既存の RTF に付加されるテキスト文字列。</param>
      <param name="Color">付加されたテキストの ForeColor。</param>
      <param name="Font">付加されたテキストのフォント。</param>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="M:C1.Win.C1Chart.Title.AppendRtfText(System.String,System.Drawing.Color,System.Drawing.Font,System.Windows.Forms.HorizontalAlignment)">
      <summary>指定した色、フォント、配置を使用して、指定したテキストを RTF 文字列に付加します。RTF 描画では透明な色を 使用できません。</summary>
      <param name="Text">既存の RTF に付加されるテキスト文字列。</param>
      <param name="Color">付加されたテキストの ForeColor。</param>
      <param name="Font">付加されたテキストのフォント。</param>
      <param name="Align">付加されたテキストの配置。</param>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="P:C1.Win.C1Chart.Title.Compass">
      <summary>タイトルの一般的な位置を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="P:C1.Win.C1Chart.Title.Location">
      <summary>グラフコントロールのクライアント座標で、タイトルの位置を取得または設定します。</summary>
      <remarks>Location プロパティは、要素の配置が手動によるか、自動的に行われるかにかかわらず、 常に描画するグラフ要素の左上隅の実際の位置を返します。この値を変更すると LocationDefault プロパティの値が変わります。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="P:C1.Win.C1Chart.Title.Size">
      <summary>グラフコントロールのクライアント座標で、タイトルのサイズを取得または設定します。</summary>
      <remarks>Size プロパティは、要素が自動的に配置されるか、手動で配置されるかにかかわらず、 常に描画するグラフ要素の実際のサイズを返します。この値を変更すると SizeDefault プロパティの値が変わります。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="P:C1.Win.C1Chart.Title.LocationDefault">
      <summary>タイトルのデフォルトの位置を取得または設定します。</summary>
      <remarks>LocationDefault プロパティは、描画するグラフ要素の左上隅の位置を 指定します。ゼロまたは正の値は、グラフ要素を配置するグラフの クライアント座標の明示的な位置を示します。 負の値は、自動配置が有効であることを示します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="P:C1.Win.C1Chart.Title.SizeDefault">
      <summary>タイトルのデフォルトのサイズを取得または設定します。</summary>
      <remarks>SizeDefault プロパティは、描画するグラフ要素のサイズを指定します。 ゼロまたは正の値は、グラフ要素を配置するグラフのクライアント座標の明示的な 幅と高さを示します。負の値は、自動配置が有効であることを示します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="P:C1.Win.C1Chart.Title.Text">
      <summary>タイトルのテキストを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="P:C1.Win.C1Chart.Title.Style">
      <summary>タイトルのスタイルを取得します。</summary>
      <remarks>C1Chart の Style オブジェクトから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="P:C1.Win.C1Chart.Title.Visible">
      <summary>タイトルの表示／非表示を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Title" />
    </member>
    <member name="P:C1.Win.C1Chart.Title.TooltipText">
      <summary>ツールチップテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.Title.Rtf">
      <summary>書式付きテキストを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.Title.Image">
      <summary>イメージを取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.Legend">
      <summary>Legend クラスは、凡例の外観を記述するために使用します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.Legend.SeriesFromCoord(System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>指定した座標に最も近い凡例のデータセットエントリのインデックスを取得します。マウスの座標はクライアント座標で指定されます。</summary>
      <param name="XCoord">クライアント X 座標。</param>
      <param name="YCoord">クライアント Y 座標。</param>
      <param name="GroupIndex">グループインデックス。</param>
      <param name="SeriesIndex">データセットインデックス。</param>
      <returns>このメソッドは、凡例のデータセットエントリが指定した座標に存在する場合、Trueを返します。</returns>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="M:C1.Win.C1Chart.Legend.RectFromSeries(System.Int32,System.Int32)">
      <summary>凡例内の指定したデータセットエントリを囲む最小の枠を返します。</summary>
      <param name="GroupIndex">グループインデックス。</param>
      <param name="SeriesIndex">データセットインデックス。</param>
      <returns>凡例内の指定したデータセットのエントリを囲む最小の矩形を返します。</returns>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="M:C1.Win.C1Chart.Legend.ShouldSerializeLocationDefault">
      <summary>Legend の LocationDefault プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態は LocationDefault.Width = -1、LocationDefault.Height = -1 で、 凡例を自動配置します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="M:C1.Win.C1Chart.Legend.ResetLocationDefault">
      <summary>凡例の配置をリセットして自動計算します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="M:C1.Win.C1Chart.Legend.ShouldSerializeSizeDefault">
      <summary>凡例の SizeDefault プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態は SizeDefault.Width = -1、SizeDefault.Height = -1 で、 凡例を自動サイズ変更します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="M:C1.Win.C1Chart.Legend.ResetSizeDefault">
      <summary>凡例のサイズをリセットして自動的に計算します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="M:C1.Win.C1Chart.Legend.ShouldSerializeStyle">
      <summary>凡例の Legend.Style プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、Style を C1Chart の Style プロパティから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="M:C1.Win.C1Chart.Legend.ResetStyle">
      <summary>凡例のスタイルの継承状態をリセットします。</summary>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.Compass">
      <summary>凡例の一般的な位置を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.Location">
      <summary>グラフコントロールのクライアント座標で、凡例の位置を取得または設定します。</summary>
      <remarks>この値を変更すると LocationDefault プロパティの値が変わります。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.Size">
      <summary>グラフコントロールのクライアント座標で、凡例のサイズを取得または設定します。</summary>
      <remarks>この値を変更すると SizeDefault プロパティの値が変わります。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.LocationDefault">
      <summary>凡例のデフォルトの位置を取得または設定します。</summary>
      <remarks>負の値は、自動配置が有効であることを示します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.SizeDefault">
      <summary>凡例のデフォルトのサイズを取得または設定します。</summary>
      <remarks>負の値は、自動配置が有効であることを示します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.Text">
      <summary>凡例のテキストを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.Style">
      <summary>凡例のスタイルを取得します。</summary>
      <remarks>凡例のスタイルは、C1Chart の Style オブジェクトから継承されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.Visible">
      <summary>凡例の表示／非表示を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.Orientation">
      <summary>凡例の表示方向を取得または設定します。</summary>
      <remarks>
        <para>凡例の表示は、垂直または水平方向のいずれにも配置できます。</para>
        <para>垂直方向とは、凡例の高さの範囲内で、凡例の表示項目が縦方向に 積み重ねられるということを示します。その凡例の高さではすべての項目を 表示できなくても、凡例自体でサイズ変更できるのであれば、 列が凡例に追加されて、表示項目を積み重ねることができます。</para>
        <para>水平方向とは、凡例の幅の範囲内で、表示項目が横方向に並べて配置されるということを示します。 その凡例の幅ではすべての項目を表示できなくても、凡例自体でサイズ変更できるのであれば、 行が凡例に追加されて、表示項目を横に配置することができます。</para>
        <para>凡例の表示方向の自動設定では、凡例の Compass プロパティに基づいて適切な凡例の表示方向が選択されます。 Compass プロパティの値が East（右側）または West（左側）の場合、垂直方向の表示が使用されます。 Compass プロパティの値が North（上側）または South（下側）の場合、水平方向の表示が使用されます。</para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.Reversed">
      <summary>凡例内の ChartGroups の順序を決定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="P:C1.Win.C1Chart.Legend.TooltipText">
      <summary>ツールチップテキストを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="T:C1.Win.C1Chart.Axis">
      <summary>Axis クラスは、グラフの軸を記述します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.Axis.ShouldSerializeForeColor">
      <summary>軸の ForeColor プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、ForeColor を ChartArea オブジェクトから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="M:C1.Win.C1Chart.Axis.ResetForeColor">
      <summary>軸の前景色の継承状態をリセットします。</summary>
      <remarks>このメソッドは、軸の前景色の継承状態をリセットします。 デフォルトは継承状態で、ChartArea オブジェクトの前景色の設定が 軸の前景色に反映されます。ただし、軸の前景色が明示的に変更された場合は、 ChartArea オブジェクトの前景色を変更しても軸のスタイルに影響しません。 ResetForecolor() を呼び出すことで再び継承状態となり、軸に使用する前景色は ChartArea オブジェクトの前景色と同じになります。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="M:C1.Win.C1Chart.Axis.ShouldSerializeFont">
      <summary>軸の Font プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、フォントを ChartArea オブジェクトから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="M:C1.Win.C1Chart.Axis.ResetFont">
      <summary>軸のフォントの継承状態をリセットします。</summary>
      <remarks>このメソッドは、軸のフォントの継承状態をリセットします。 デフォルトは継承状態で、ChartArea オブジェクトのフォント設定が 軸のフォントに反映されます。ただし、軸のフォントが明示的に変更された場合は、 ChartArea オブジェクトのフォントを変更しても軸のスタイルに影響しません。 ResetFont() を呼び出すことで再び継承状態となり、軸に使用するフォントは ChartArea オブジェクトのフォントと同じになります。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="M:C1.Win.C1Chart.Axis.SetMinMax(System.Object,System.Object)">
      <summary>軸の Min プロパティと Max プロパティのいずれかまたは両方を同時に設定します。 指定した最小値が指定した最大値より小さい場合、２つの値を入れ替えます。</summary>
      <param name="newMin">新しい軸の最小値。</param>
      <param name="newMax">新しい軸の最大値。</param>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="M:C1.Win.C1Chart.Axis.GetMin">
      <summary>Axis の Min プロパティの現在の値をオブジェクトとして取得します。</summary>
      <returns>軸の最小値の現在の値。</returns>
      <remarks>このメソッドは、値を最初のデータセットの適切な座標データと同じ型の オブジェクトとして取得します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="M:C1.Win.C1Chart.Axis.GetMin(System.Type)">
      <summary>Axis の Min プロパティの現在の値をオブジェクトとして取得します。</summary>
      <param name="t">データ型。</param>
      <returns></returns>
      <remarks>このメソッドは、値を指定したデータ型のオブジェクトとして取得します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="M:C1.Win.C1Chart.Axis.GetMax">
      <summary>Axis の Max プロパティの現在の値をオブジェクトとして取得します。</summary>
      <returns>軸の最大値の現在の値。</returns>
      <remarks>このメソッドは、値を最初のデータセットの適切な座標データと同じ型の オブジェクトとして取得します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="M:C1.Win.C1Chart.Axis.GetMax(System.Type)">
      <summary>Axis の Max プロパティの現在の値をオブジェクトとして取得します。</summary>
      <param name="t">データ型。</param>
      <returns>軸の最大値の現在の値。</returns>
      <remarks>このメソッドは、値を指定したデータ型のオブジェクトとして取得します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.ForeColor">
      <summary>前景色を取得または設定します。</summary>
      <remarks>
        <para>ChartArea から継承します。ForeColor プロパティは、軸の線と軸ラベルの色を設定するために使用されます。</para>
        <para>ResetForeColor() メソッドが、ForeColor プロパティに関連付けられています。 このメソッドは軸の前景色の継承状態を復元します。 軸に対して前景色を明示的に設定すると、ChartArea オブジェクトから前景色が継承されなくなります。 このため、ChartArea オブジェクトの前景色を変更しても、軸の値に影響を与えたり、 軸の値が変更されたりすることはありません。ResetForecolor () を呼び出すことで、継承状態が復元され、 ChartArea オブジェクトの前景色が変更されると軸の前景色も同時に変更されます。</para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Font">
      <summary>フォントオブジェクトを取得または設定します。</summary>
      <remarks>
        <para>ChartArea から継承します。</para>
        <para>ResetFont() メソッドが、Font プロパティに関連付けられています。 このメソッドは軸のフォントの継承状態を復元します。 軸に対してフォントを明示的に設定すると、ChartArea オブジェクト からフォントが継承されなくなります。 このため、ChartArea オブジェクトのフォントを変更しても、軸の値に影響を与えたり、軸の値が 変更されたりすることはありません。ResetFont() を呼び出すことで、継承状態が復元され、 ChartArea オブジェクトのフォントが変更されると軸のフォントも同時に変更されます。</para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Alignment">
      <summary>軸の表示内のテキストの配置を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Rotation">
      <summary>軸のテキストキャプションの回転角度を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Text">
      <summary>軸のテキストキャプションを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Max">
      <summary>軸の最大値を取得または設定します。</summary>
      <remarks>Max プロパティを設定すると、AutoMax は自動的に False に変更されます。最大値を Min プロパティの 現在の値より小さい新しい値に設定すると、Min プロパティも、現在の 最大値と最小値の同じ差を維持する新しい値にリセットされます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Min">
      <summary>軸の最小値を取得または設定します。</summary>
      <remarks>Min プロパティを設定すると、AutoMin は自動的に False に変更されます。最小値を Max プロパティの 現在の値より大きい新しい値に設定すると、Max プロパティも、現在の 最大値と最小値の同じ差を維持する新しい値にリセットされます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Name">
      <summary>軸の名前を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AnnotationRotation">
      <summary>軸ラベルの右回りの回転角度を取得または設定します。</summary>
      <remarks>回転角度は必ず度で指定します。大量のラベルが必要な場合、 X 軸ラベルの回転角度は +/- 30～+/- 60 度が理想的です。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AnnoFormat">
      <summary>軸ラベルの書式を取得または設定します。</summary>
      <remarks>
        <para>AnnoFormat プロパティにより、列挙値を使用して軸ラベルの書式を指定することができます。</para>
        <para>
          数値の場合、各列挙体は Currency、General、Exponential、Percentage、Roundtrip および Hexadecimal など、 .NET の
          <see cref="T:System.Globalization.NumberFormatInfo" />クラスによって指定される 書式に類似した書式を指定します。NumericManual は、AnnoFormatString プロパティと組み合わせて、 カスタム書式文字列を指定するために使用されます。
        </para>
        <para>
          日付／時刻値の場合、各列挙体は長い形式あるいは短い形式の日付・時刻の組み合わせ、および世界時刻表示など、 .NET の
          <see cref="T:System.Globalization.DateTimeFormatInfo" />クラスによって指定される 書式に類似した書式を指定します。DateManual は、AnnoFormatString プロパティと組み合わせて、 カスタム書式文字列を指定するために使用されます。
        </para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AnnoFormatString">
      <summary>手動による書式設定で使用して、軸ラベルの書式文字列を取得または設定します。</summary>
      <remarks>
        <para>AnnoFormat プロパティが、NumericManual または DateManual の場合にのみ使用されます。AnnoFormatString プロパティは、軸に沿った軸ラベルの書式設定のカスタム文字列を指定します。</para>
        <para>AnnoFormat プロパティが NumericManual の場合、.NET の double.ToString(AnnoFormatString) メソッド呼び出しの 記述のような書式文字列を AnnoFormatString プロパティに設定することができます。 詳細は、.NET Framework 開発者ガイドの「カスタム数値書式指定文字列」を参照してください。 AnnoFormatString プロパティが空の場合、“g” または General が使用されます。</para>
        <para>AnnoFormat プロパティが DateManual の場合、.NET の DateTime.ToString(AnnoFormatSTring) メソッド呼び出しに 記述された文字列の書式設定を行うために、AnnoFormatString プロパティを設定することができます。 使用できるカスタム日付書式指定文字列は、.NET Framework 開発者ガイドの 「カスタム DateTime 書式指定文字列」を参照してください。AnnoFormatString プロパティが空の場合、 C1Chart は、軸の最大値と最小値によって定義される時間の範囲に基づいて適切な書式文字列を選択します。</para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AnnoVerticalText">
      <summary>軸ラベルのテキストを縦書き表示するかどうかを取得または設定します。</summary>
      <remarks>AnnoVerticalText を利用すれば、２バイト文字を縦書き表示できます。 １バイト文字の場合は、時計回りに 90°回転したテキストとして表示されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.VerticalText">
      <summary>ラベルのテキストを縦書き表示するかどうかを取得または設定します。</summary>
      <remarks>VerticalText を利用すれば、２バイト文字を縦書き表示できます。 １バイト文字の場合は、時計回りに 90°回転したテキストとして表示されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Thickness">
      <summary>軸の線の太さをピクセル単位で取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Reversed">
      <summary>軸の表示を反転（昇順または降順）するかどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.UnitMajor">
      <summary>主目盛の単位を取得または設定します。</summary>
      <remarks>この値を設定すると、AutoMajor は自動的に False に変わります。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.UnitMinor">
      <summary>副目盛の単位を取得または設定します。</summary>
      <remarks>この値を設定すると、AutoMinor は自動的に False に変わります。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AutoMajor">
      <summary>主目盛の値を自動的に計算するかどうかを取得または設定します。</summary>
      <remarks>UnitMajor プロパティを設定すると、AutoMajor は自動的に False に設定されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AutoMinor">
      <summary>副目盛の値を自動的に計算するかどうかを取得または設定します。</summary>
      <remarks>UnitMinor プロパティを設定すると、AutoMinor は自動的に False に設定されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AutoMax">
      <summary>軸の最大値を自動的に計算するかどうかを取得または設定します。</summary>
      <remarks>Max プロパティを設定すると、AutoMax は自動的に False に設定されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AutoMin">
      <summary>軸の最小値を自動的に計算するかどうかを取得または設定します。</summary>
      <remarks>Min プロパティを設定すると、AutoMin は自動的に False に設定されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.TickMajor">
      <summary>主目盛のスタイルを取得または設定します。</summary>
      <remarks>目盛線は、軸線の一方の側または両側に配置できます。 TickMajor プロパティが None に設定されている場合、主目盛が表示されないことに注意してください。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.TickMinor">
      <summary>副目盛のスタイルを取得または設定します。</summary>
      <remarks>目盛線は、軸線の一方の側または両側に配置できます。 TickMinor プロパティが None に設定されている場合、 副目盛が表示されないことに注意してください。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.TickFactorMajor">
      <summary>主目盛マークの長さを指定する係数を取得または設定します。</summary>
      <remarks>主目盛マークのサイズは、軸のThicknessとTickFactorMajorの値に基づいて調整されます。 TickFactorMajorを２倍にすると、主目盛マークの長さは２倍になります。 TickFactorMajorに設定する値は 1 ～ 20 の整数に限られ、この範囲に含まれない値は無視されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.TickFactorMinor">
      <summary>副目盛マークの長さを指定する係数を取得または設定します。</summary>
      <remarks>副目盛マークのサイズは、軸のThicknessとTickFactorMinorの値に基づいて調整されます。 TickFactorMinorを２倍にすると、副目盛マークの長さは２倍になります。 TickFactorMinorに設定する値は 1 ～ 20 の整数に限られ、この範囲に含まれない値は無視されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.TickGauge">
      <summary>補助目盛マークで区切られる区画数を指定する整数を取得または設定します。</summary>
      <remarks>補助目盛マークは、いくつかの副目盛マークを強調して読みやすくするために使用されます。 使用しない場合（デフォルト）は０を、自動設定の場合は１を設定します。 １より大きい整数を設定した場合は、主目盛間で補助目盛によって区切られるおおよその区画数が決定されます。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.Axis.NoAnnoOverlap">
      <summary>軸ラベルの重なりを許可するかどうかを取得または設定します。</summary>
      <remarks>NoAnnoOverlap を設定すると、重なりの原因にかかわらず、 表示済みのラベルと重なる軸ラベルは表示されなくなります。このプロパティによって、 主目盛マークと補助目盛マークのスケール設定や生成が変わることはありません。 AutoMajor が true に設定されたアプリケーションには、通常、 このプロパティを使用する必要はありません。</remarks>
    </member>
    <member name="P:C1.Win.C1Chart.Axis.TickLabels">
      <summary>軸ラベルの位置を取得または設定します。</summary>
      <remarks>軸ラベルは、グラフ上のいくつかの位置に配置できます。まったく表示させないこともできます。 詳細は、TickLabelsEnum 列挙体を参照してください。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.GridMajor">
      <summary>主グリッド線のオブジェクトを取得または設定します。</summary>
      <remarks>主グリッド線は、UnitMajor プロパティで設定した間隔に基づき、主目盛マークと同じ位置に配置されます。 GridMajor プロパティを使用して、グリッド線の外観を設定します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.GridMinor">
      <summary>副グリッド線のオブジェクトを取得または設定します。</summary>
      <remarks>副グリッド線は、UnitMinor で設定した間隔に基づき、副目盛マークと同じ位置に配置されます。 GridMinor プロパティを使用して、グリッド線の外観を設定します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AnnoMethod">
      <summary>使用する軸ラベルの添付方法を取得または設定します。</summary>
      <remarks>AnnotationMethodEnum 列挙体は、ValueLabels、Values、および Mixed のいずれかの値を取ることができます。 Values 軸ラベルは、任意のインスタンスの任意のグラフの種類で使用することができます。 ValueLablels 軸ラベルは、円グラフ、レーダーチャート、レーダー面チャートの X 軸、および円グラフの Y 軸では使用できません。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.ValueLabels">
      <summary>ValueLabelsCollection を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.OnTop">
      <summary>軸とグリッド線をグラフイメージ上に表示するかどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Compass">
      <summary>軸の一般的な位置を取得または設定します。</summary>
      <remarks>X 軸は北／南（上下）に、Y 軸と Y2 軸は東／西（左右）に設定されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Visible">
      <summary>軸を表示するかどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.IsLogarithmic">
      <summary>軸を対数表示にするかどうかを取得または設定します。</summary>
      <remarks>軸目盛の対数表示は、値がゼロ以下の場合は数学的に意味がありません。 このため、IsLogarithmic プロパティを True に設定した軸に対しては、負の値またはゼロは描画されません。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.Origin">
      <summary>軸の起点を取得または設定します。起点は、垂直軸の描画の始点となる軸上の値です。</summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.AutoOrigin">
      <summary>軸の起点を自動的に選択するかどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.LogarithmicBase">
      <summary>使用する対数目盛の底を取得または設定します。</summary>
      <remarks>１以下の場合、自然対数を指定します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="P:C1.Win.C1Chart.Axis.ScrollBar">
      <summary>軸のスクロールバーを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Axis" />
    </member>
    <member name="T:C1.Win.C1Chart.PlotArea">
      <summary>PlotArea クラスは、グラフのプロット領域を記述します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.PlotArea.ShouldSerializeBackColor">
      <summary>PlotArea の BackColor プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、BackColor を ChartArea オブジェクトから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="M:C1.Win.C1Chart.PlotArea.ResetBackColor">
      <summary>PlotArea の BackColor の継承状態をリセットします。</summary>
      <remarks>このメソッドは、PlotArea の BackColor の継承状態をリセットします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="M:C1.Win.C1Chart.PlotArea.ShouldSerializeForeColor">
      <summary>PlotArea の ForeColor プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、ForeColor を ChartArea オブジェクトから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="M:C1.Win.C1Chart.PlotArea.ResetForeColor">
      <summary>PlotArea の ForeColor の継承状態をリセットします。</summary>
      <remarks>このメソッドは、PlotArea の ForeColor の継承状態をリセットします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="M:C1.Win.C1Chart.PlotArea.ShouldSerializeOpaque">
      <summary>PlotArea の Opaque プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、Opaque を ChartArea オブジェクトから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="M:C1.Win.C1Chart.PlotArea.ResetOpaque">
      <summary>PlotArea の Opaque の継承状態をリセットします。</summary>
      <remarks>このメソッドは、PlotArea の Opaque の継承状態をリセットします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="M:C1.Win.C1Chart.PlotArea.ShouldSerializeBackColor2">
      <summary>PlotArea の BackColor2 プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、BackColor2 を ChartArea オブジェクトから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.Location">
      <summary>グラフコントロールのクライアント座標で、プロット領域の位置を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.Size">
      <summary>グラフコントロールのクライアント座標で、プロット領域のサイズを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.LocationDefault">
      <summary>PlotArea のデフォルト位置を取得または設定します。</summary>
      <remarks>LocationDefault プロパティは、描画するグラフ要素の左上隅の位置を指定します。 負でない値は、グラフ要素を配置するグラフのクライアント座標の位置を明示的に指定します。 負の値は自動配置が行えます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.SizeDefault">
      <summary>PlotArea のデフォルトサイズを取得または設定します。</summary>
      <remarks>SizeDefault プロパティは、描画するグラフ要素のサイズを指定します。 負でない値は、グラフ要素を配置するグラフのクライアント座標の幅を明示的に指定します。 負の値は自動配置が行えます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.BackColor">
      <summary>プロット領域の背景色を取得または設定します。</summary>
      <remarks>グラフ領域から継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.ForeColor">
      <summary>プロット領域の前景色を取得または設定します。</summary>
      <remarks>グラフ領域から継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.Opaque">
      <summary>プロット領域の背景を不透明にするかどうかを取得または設定します。</summary>
      <remarks>グラフ領域から継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.Boxed">
      <summary>プロット領域をボックス（実線枠線）で囲むかどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.Visible">
      <summary>プロット領域の表示／非表示を取得または設定します。</summary>
      <remarks>プロット領域が非表示の場合、データは描画されません。</remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.AlarmZones">
      <summary>AlarmZonesCollection オブジェクトを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.BackColor2">
      <summary>グラデーションパターンまたはハッチパターンで使用する背景色を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.GradientStyle">
      <summary>背景のグラデーション塗つぶしスタイルを定義します。</summary>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.View3D">
      <summary>プロット領域の View3D オブジェクトを取得します。</summary>
      <remarks>返される View3D オブジェクトには、3D 効果を持つグラフのプロット領域の 3D 要素の設定に使用するプロパティがあります。</remarks>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.HatchStyle">
      <summary>背景のハッチパターンによる塗つぶしスタイルを定義します。</summary>
      <seealso cref="T:C1.Win.C1Chart.PlotArea" />
    </member>
    <member name="P:C1.Win.C1Chart.PlotArea.UseAntiAlias">
      <summary>チャートのデータを表示する場合、アンチエイリアシングを使用するかどうかを指定する値を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.Margin">
      <summary>グラフ要素のマージンのサイズを取得または設定します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.Margin.SetMargins(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>すべての Margin プロパティを一度に設定します。</summary>
      <param name="left">左マージン。</param>
      <param name="top">上マージン。</param>
      <param name="right">右マージン。</param>
      <param name="bottom">下マージン。</param>
      <seealso cref="T:C1.Win.C1Chart.Margin" />
    </member>
    <member name="P:C1.Win.C1Chart.Margin.Top">
      <summary>グラフ領域の上端からグラフ領域の内容までの距離をピクセル単位で取得または設定します。</summary>
      <remarks>Margin の Top プロパティを –１に設定すると、Top 値が自動的に計算されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Margin" />
    </member>
    <member name="P:C1.Win.C1Chart.Margin.Left">
      <summary>グラフ領域の左端からグラフ領域の内容までの距離をピクセル単位で取得または設定します。</summary>
      <remarks>Margin の Left プロパティを –１に設定すると、Left 値が自動的に計算されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Margin" />
    </member>
    <member name="P:C1.Win.C1Chart.Margin.Bottom">
      <summary>グラフ領域の下端からグラフ領域の内容までの距離をピクセル単位で取得または設定します。</summary>
      <remarks>Margin の Bottom プロパティを –１に設定すると、Bottom 値が自動的に計算されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Margin" />
    </member>
    <member name="P:C1.Win.C1Chart.Margin.Right">
      <summary>グラフ領域の右端からグラフ領域の内容までの距離をピクセル単位で取得または設定します。</summary>
      <remarks>Margin の Right プロパティを –１に設定すると、Right 値が自動的に計算されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Margin" />
    </member>
    <member name="T:C1.Win.C1Chart.Area">
      <summary>Area クラスは、グラフの ChartArea を記述します。</summary>
      <remarks>領域にはすべての軸とグラフデータが含まれます。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.Area.ShouldSerializeMargins">
      <summary>グラフ領域のマージンがデフォルト値に設定されている場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>各マージンのデフォルトは -1（自動配置）です。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="M:C1.Win.C1Chart.Area.ShouldSerializeLocationDefault">
      <summary>グラフ領域の LocationDefault プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態は LocationDefault.X = -1、LocationDefault.Y = -1 で、 グラフ領域を自動配置します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="M:C1.Win.C1Chart.Area.ResetLocationDefault">
      <summary>領域の位置をリセットして自動計算します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="M:C1.Win.C1Chart.Area.ShouldSerializeSizeDefault">
      <summary>グラフ領域の SizeDefault プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態は SizeDefault.Width = -1、SizeDefault.Height = -1 で、 グラフ領域を自動サイズ変更します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="M:C1.Win.C1Chart.Area.ResetSizeDefault">
      <summary>領域のサイズをリセットして自動的に計算します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="M:C1.Win.C1Chart.Area.ShouldSerializeStyle">
      <summary>グラフ領域の Style プロパティがデフォルト状態の場合 False を返します。</summary>
      <returns>ブール型。</returns>
      <remarks>デフォルト状態では、スタイルを親の C1Chart オブジェクトから継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="M:C1.Win.C1Chart.Area.ResetStyle">
      <summary>領域のスタイルの継承状態をリセットします。</summary>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.PlotArea">
      <summary>データをグラフ化する領域を記述する ChartPlot オブジェクトを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.AxisX">
      <summary>X 軸の Axis オブジェクトを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.AxisY">
      <summary>Y 軸の Axis オブジェクトを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.AxisY2">
      <summary>Y2 軸の Axis オブジェクトを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.Axes">
      <summary>軸のコレクションを取得します。</summary>
      <remarks>このコレクションには、X 軸、Y 軸、および Y2 軸があります。Axes コレクションは、 プロパティの設定時に、コレクションの各軸の繰り返しを簡単に行えるようにします。 コレクションの要素は、Area クラスの AxisX、AxisY、および AxisY2 プロパティで示される オブジェクトと同じです。Axes コレクションの要素の数は変更できません。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.Location">
      <summary>グラフコントロールのクライアント座標で、グラフ領域の位置を取得または設定します。</summary>
      <remarks>
        <para>Location プロパティは、要素の配置が手動によるか、自動的に行われるかにかかわらず、 常に描画するグラフ要素の左上隅の実際の位置を返します。</para>
        <para>この値を変更すると LocationDefault プロパティの値が変わります。</para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.Size">
      <summary>グラフコントロールのクライアント座標で、グラフ領域のサイズを取得または設定します。</summary>
      <remarks>
        <para>Size プロパティは、要素が自動的に配置されるか、手動で配置されるかにかかわらず、 常に描画するグラフ要素の実際のサイズを返します。</para>
        <para>この値を変更すると SizeDefault プロパティの値が変わります。</para>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.Margins">
      <summary>グラフ領域のマージンのサイズを取得または設定します。</summary>
      <remarks>C1Chart の Margin オブジェクトには、４種類のマージンの値（Bottom、Top、Left、および Right）があります。 各オブジェクトは整数値を取り、この値を -１に設定するとマージンの自動設定が有効になります。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.LocationDefault">
      <summary>グラフ領域のデフォルトの位置を取得または設定します。</summary>
      <remarks>LocationDefault プロパティは、描画するグラフ要素の左上隅の位置を指定します。 ゼロまたは正の値は、グラフ要素を配置するグラフのクライアント座標の明示的な位置を示します。 負の値は、自動配置が有効であることを示します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.SizeDefault">
      <summary>グラフ領域のデフォルトのサイズを取得または設定します。</summary>
      <remarks>SizeDefault プロパティは、描画するグラフ要素のサイズを指定します。 ゼロまたは正の値は、グラフ要素を配置するグラフのクライアント座標の明示的な幅と高さを示します。 負の値は、自動配置が有効であることを示します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.Style">
      <summary>グラフ領域のスタイルを取得します。</summary>
      <remarks>C1Chart の Style オブジェクトから継承します。軸とプロット領域を含むグラフ領域内のグラフ要素は、 グラフ領域のスタイルからそのスタイルを継承します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.Visible">
      <summary>グラフ領域の表示／非表示を取得または設定します。</summary>
      <remarks>このプロパティを False に設定すると、グラフ領域と軸とプロット領域を含む グラフ領域内のすべてのオブジェクトが非表示になります。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="P:C1.Win.C1Chart.Area.Inverted">
      <summary>グラフ領域の X 軸と Y 軸の位置を反転させるかどうかを取得または設定します。</summary>
      <remarks>このプロパティは、棒グラフの反転に必要です。 グラフ方向を切り替えるには、Inverted を True に設定します。軸の最小値と最大値の表示順序を反転するには、Reversed プロパティを使用します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.Area" />
    </member>
    <member name="T:C1.Win.C1Chart.ColorGeneration">
      <summary>この列挙体は、データセットの色を生成する際に使用する色テーマを指定します。 名前付けされた色テーマは、Custom を除き Microsoft Office のそれに類似しています。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.CopyCurrentToCustom">
      <summary>カスタムグループ内に、現在選択されている色グループをコピーします。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Custom">
      <summary>カスタム色です。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Standard">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Office">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.GrayScale">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Apex">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Aspect">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Civic">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Concourse">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Equity">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Flow">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Foundry">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Median">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Metro">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Module">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Opulent">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Oriel">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Origin">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Paper">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Solstice">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Technic">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Trek">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Urban">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.ColorGeneration.Verve">
      <summary>同じ名前の Office 2007 テーマに類似した色を使用します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.DataBinding.DataBindingForm">
      <summary>DataBindingForm クラスの概要の説明です。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.DataBinding.DataBindingForm.Dispose(System.Boolean)">
      <summary>使用されているリソースをすべてクリーンアップします。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.FunctionCodeLanguageEnum">
      <summary>この列挙体のメンバを使用して、FunctionBase クラスの CodeLanguage プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FunctionCodeLanguageEnum.CSharp">
      <summary>C#。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FunctionCodeLanguageEnum.VB">
      <summary>VB.NET。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.FunctionCodeTypeEnum">
      <summary>この列挙体のメンバを使用して、FunctionBase の CodeType プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FunctionCodeTypeEnum.Formula">
      <summary>コードテキストは式を表します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FunctionCodeTypeEnum.Method">
      <summary>コードテキストはメソッドのボディを表します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.FunctionCodeTypeEnum.Unit">
      <summary>コードテキストはコード単位を表します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ISimpleFunction">
      <summary>y(x) = f(x) の形の単純な１変数関数を定義するインタフェースを提供します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.ISimpleFunction.Calculate(System.Double)">
      <summary>パラメータ値を指定して、関数の値を計算します。</summary>
      <param name="x">パラメータ。</param>
      <returns>Double 型。</returns>
      <seealso cref="T:C1.Win.C1Chart.ISimpleFunction" />
    </member>
    <member name="T:C1.Win.C1Chart.CalculateFunctionEventHandler">
      <summary>関数計算イベントのデリゲート。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.CalculateFunctionEventArgs">
      <summary>CalculateFunctionEventHandler のイベント引数を格納します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.CalculateFunctionEventArgs.Parameter">
      <summary>関数値を計算する関数のパラメータ値を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.CalculateFunctionEventArgs" />
    </member>
    <member name="P:C1.Win.C1Chart.CalculateFunctionEventArgs.Result">
      <summary>関数計算の結果を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.CalculateFunctionEventArgs" />
    </member>
    <member name="T:C1.Win.C1Chart.PlotLinesMethodEnum">
      <summary>この列挙体のメンバを使用して、FunctionBase クラスの PlotLinesMethod プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PlotLinesMethodEnum.Lines">
      <summary>直線で各点を結びます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.PlotLinesMethodEnum.Splines">
      <summary>スプライン曲線で各点を結びます。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.FunctionBase">
      <summary>すべての関数の抽象基本クラス。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.CodeValid">
      <summary>関数が正常にコンパイルするかどうかを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.CodeErrors">
      <summary>コンパイラエラーの文字列記述を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.CodeType">
      <summary>コードのコンパイル方法（数式、メソッド、完全なコンパイル単位のいずれか）を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.CodeLanguage">
      <summary>コンパイルに使用するプログラミング言語（VB または C# ）を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.LineStyle">
      <summary>関数のプロットに使用する線スタイルを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.PlotLinesMethod">
      <summary>関数のプロットに使用するメソッドを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.PlotNumPoints">
      <summary>関数のプロットに使用するデータ点の数を取得または設定します。</summary>
      <remarks>このプロパティは、関数のプロットの品質を制御します。関数が滑らかでない場合や 詳細に表示されない場合、PlotNumPoints を増加します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.Visible">
      <summary>関数プロットを表示するかどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.LegendEntry">
      <summary>凡例内に関数を表示するかどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.Label">
      <summary>関数のラベルを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionBase.PlotOverData">
      <summary>関数をデータセットのプロットの前面と背面のいずれにプロットするかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionBase" />
    </member>
    <member name="T:C1.Win.C1Chart.YFunction">
      <summary>Yfunction クラスは、y(x) = f(x) の式で明示的に定義される単純な関数を記述するために使用します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.YFunction.#ctor">
      <summary>YFunction クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.YFunction.#ctor(System.Boolean)">
      <summary>YFunction クラスの新しいインスタンスを初期化します。</summary>
      <param name="Disposable">コンパイル済み関数（インメモリアセンブリ）をアンロードできるように YFunction オブジェクトを作成するかどうかを指定します。</param>
      <remarks>Disposable パラメータが true の場合は、インメモリアセンブリが別の AppDomain に作成され、 YFunction オブジェクトがスコープから外れると、アプリケーションから アンロードされます。Disposable パラメータが false の場合は、アプリケーションが終了するまで、 インメモリに作成されたアセンブリはアンロードできません。なお、 AppDomain は、現在のアクセス許可セットが許可する場合にのみ使用されます。Web アプリケーションは、 関数アセンブリを常に現在の AppDomain に作成します。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.YFunction.GetY(System.Double)">
      <summary>X 値を指定して、関数の値を計算します。</summary>
      <param name="x">パラメータ。</param>
      <returns>Double 型。</returns>
      <seealso cref="T:C1.Win.C1Chart.YFunction" />
    </member>
    <member name="M:C1.Win.C1Chart.YFunction.GetYValues(System.Double[])">
      <summary>X 値を指定して、関数の値を計算します。</summary>
      <param name="x">パラメータ。</param>
      <returns>Double[]。</returns>
      <seealso cref="T:C1.Win.C1Chart.YFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.YFunction.AutoMax">
      <summary>X 軸の最大値を自動的に計算するかどうかを取得または設定します。</summary>
      <remarks>AutoMax が True の場合 AxisX.Max を使用します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.YFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.YFunction.AutoMin">
      <summary>X 軸の最小値を自動的に計算するかどうかを取得または設定します。</summary>
      <remarks>AutoMin が True の場合 AxisX.Min を最小 X 値 として使用します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.YFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.YFunction.CodeText">
      <summary>関数コードを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.YFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.YFunction.CustomFunction">
      <summary>ユーザー定義のカスタム関数オブジェクトを取得または設定します。</summary>
      <remarks>Yfunction 計算の完全な制御を取得するには、ISimpleFunction から継承するクラスを実装してインスタンス化できます。CustomFunction プロパティをこのクラスオブジェクトの インスタンスに設定すると、グラフは適切なスタイルと凡例エントリを持つユーザー定義の YFunction をプロットします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.YFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.YFunction.MaxX">
      <summary>プロットした関数の X 軸の最大値を取得または設定します。</summary>
      <remarks>MaxX を設定すると、AutoMax の値は False に変わります。</remarks>
      <seealso cref="T:C1.Win.C1Chart.YFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.YFunction.MinX">
      <summary>プロットした関数の X 軸の最小値を取得または設定します。</summary>
      <remarks>MinX を設定すると、AutoMin の値は False に変わります。</remarks>
      <seealso cref="T:C1.Win.C1Chart.YFunction" />
    </member>
    <member name="E:C1.Win.C1Chart.YFunction.CalculateY">
      <summary>関数値を計算するとき常に発生します。</summary>
      <remarks>イベントハンドラは、このイベントに関連したデータを含む CalculateFunctionEventArgs 型の引数を受け取ります。</remarks>
      <seealso cref="T:C1.Win.C1Chart.YFunction" />
    </member>
    <member name="T:C1.Win.C1Chart.ParametricFunction">
      <summary>x(t) = f1(t) と y(t) = f2(t) のペア式（t は独立変数）で 定義される関数を表します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.ParametricFunction.#ctor">
      <summary>ParametricFunction クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.ParametricFunction.#ctor(System.Boolean)">
      <summary>ParametricFunction クラスの新しいインスタンスを初期化します。</summary>
      <param name="Disposable">コンパイル済み関数（インメモリアセンブリ）をアンロードできるように ParametricFunction オブジェクトを作成するかどうかを指定します。</param>
      <remarks>Disposable パラメータが true の場合は、インメモリアセンブリが別の AppDomain に作成され、 ParametricFunction オブジェクトがスコープから外れると、アプリケーションから アンロードされます。Disposable パラメータが false の場合は、アプリケーションが終了するまで、 インメモリに作成されたアセンブリはアンロードできません。なお、 AppDomain は、現在のアクセス許可セットが許可する場合にのみ使用されます。Web アプリケーションは、 関数アセンブリを常に現在の AppDomain に作成します。</remarks>
    </member>
    <member name="M:C1.Win.C1Chart.ParametricFunction.GetX(System.Double)">
      <summary>パラメータ t を指定して、関数の X 値を計算します。</summary>
      <param name="t">パラメータ。</param>
      <returns>Double 型。</returns>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="M:C1.Win.C1Chart.ParametricFunction.GetXValues(System.Double[])">
      <summary>パラメータ t を指定して、関数の X 値を計算します。</summary>
      <param name="t">パラメータ。</param>
      <returns>Double[]。</returns>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="M:C1.Win.C1Chart.ParametricFunction.GetY(System.Double)">
      <summary>パラメータ t を指定して、関数の Y 値を計算します。</summary>
      <param name="t">パラメータ。</param>
      <returns>Double。</returns>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="M:C1.Win.C1Chart.ParametricFunction.GetYValues(System.Double[])">
      <summary>指定された t 値で関数の y 値を計算します。</summary>
      <param name="t">パラメータ。</param>
      <returns>Double[]。</returns>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.ParametricFunction.CodeTextX">
      <summary>X 値計算の関数コードを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.ParametricFunction.CodeTextY">
      <summary>Y 値計算の関数コードを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.ParametricFunction.CodeLinesX">
      <summary>X 値計算の関数コードのマルチライン表示を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.ParametricFunction.CodeLinesY">
      <summary>Y 値計算の関数コードのマルチライン表示を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.ParametricFunction.CustomFunctionX">
      <summary>X 値計算のカスタム関数オブジェクトを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.ParametricFunction.MaxT">
      <summary>関数のプロットするときの最大パラメータ値を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.ParametricFunction.MinT">
      <summary>関数をプロットするときの最小パラメータ値を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="P:C1.Win.C1Chart.ParametricFunction.CustomFunctionY">
      <summary>Y 値計算のカスタム関数オブジェクトを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="E:C1.Win.C1Chart.ParametricFunction.CalculateX">
      <summary>X 値を計算するときに発生します。</summary>
      <remarks>イベントハンドラは、このイベントに関連したデータを含む CalculateFunctionEventArgs 型の引数を受け取ります。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="E:C1.Win.C1Chart.ParametricFunction.CalculateY">
      <summary>Y 値を計算するときに発生します。</summary>
      <remarks>イベントハンドラは、このイベントに関連したデータを含む CalculateFunctionEventArgs 型の引数を受け取ります。</remarks>
      <seealso cref="T:C1.Win.C1Chart.ParametricFunction" />
    </member>
    <member name="T:C1.Win.C1Chart.FunctionsCollection">
      <summary>プロットする関数を格納します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.FunctionsCollection.Add(C1.Win.C1Chart.FunctionBase)">
      <summary>指定した関数をコレクションに追加します。</summary>
      <param name="f">関数。</param>
      <returns>整数インデックス。</returns>
      <seealso cref="T:C1.Win.C1Chart.FunctionsCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.FunctionsCollection.Insert(System.Int32,C1.Win.C1Chart.FunctionBase)">
      <summary>指定した関数をコレクション内の指定したインデックスに挿入します。</summary>
      <param name="index">インデックス。</param>
      <param name="f">関数。</param>
      <seealso cref="T:C1.Win.C1Chart.FunctionsCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.FunctionsCollection.Remove(C1.Win.C1Chart.FunctionBase)">
      <summary>指定した関数をコレクションから削除します。</summary>
      <param name="f">削除する関数。</param>
      <seealso cref="T:C1.Win.C1Chart.FunctionsCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.FunctionsCollection.Contains(C1.Win.C1Chart.FunctionBase)">
      <summary>値が FunctionsCollection 内にあるかどうかを決定します。</summary>
      <param name="f">関数。</param>
      <returns>ブール型。</returns>
      <seealso cref="T:C1.Win.C1Chart.FunctionsCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.FunctionsCollection.CopyTo(C1.Win.C1Chart.FunctionBase[],System.Int32)">
      <summary>データ値を指定したインデックスから開始する指定した配列に FunctionsCollection からコピーします。</summary>
      <param name="array">配列。</param>
      <param name="index">インデックス。</param>
      <seealso cref="T:C1.Win.C1Chart.FunctionsCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.FunctionsCollection.IndexOf(C1.Win.C1Chart.FunctionBase)">
      <summary>FunctionsCollection 内の最初に指定した値のインデックスを取得します。</summary>
      <param name="f">関数。</param>
      <returns>整数インデックス。</returns>
      <seealso cref="T:C1.Win.C1Chart.FunctionsCollection" />
    </member>
    <member name="P:C1.Win.C1Chart.FunctionsCollection.Item(System.Int32)">
      <summary>数値インデックスによって、指定した関数をコレクションから取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.FunctionsCollection" />
    </member>
    <member name="T:C1.Win.C1Chart.RegressionStatistics">
      <summary>回帰近似曲線に関する統計情報を含みます。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.RegressionStatistics.Ssr">
      <summary>回帰に基づく２乗の合計を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.RegressionStatistics" />
    </member>
    <member name="P:C1.Win.C1Chart.RegressionStatistics.Sse">
      <summary>誤差に基づく２乗の合計を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.RegressionStatistics" />
    </member>
    <member name="P:C1.Win.C1Chart.RegressionStatistics.Sey">
      <summary>Y 推定値の標準誤差を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.RegressionStatistics" />
    </member>
    <member name="P:C1.Win.C1Chart.RegressionStatistics.Coeffs">
      <summary>回帰式の計算された係数を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.RegressionStatistics" />
    </member>
    <member name="P:C1.Win.C1Chart.RegressionStatistics.DF">
      <summary>自由度を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.RegressionStatistics" />
    </member>
    <member name="P:C1.Win.C1Chart.RegressionStatistics.Rsq">
      <summary>決定係数（R２乗値）を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.RegressionStatistics" />
    </member>
    <member name="P:C1.Win.C1Chart.RegressionStatistics.F">
      <summary>F 観測（F 統計）値を取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.RegressionStatistics" />
    </member>
    <member name="T:C1.Win.C1Chart.TrendLineTypeEnum">
      <summary>この列挙体のメンバを使用して、TrendLine クラスの TrendLineType プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.TrendLineTypeEnum.Polynom">
      <summary>Y(x) = C0 + C1*x + C2*x2 + … + Cn-1*xn-1 式（n は項数）の回帰式のフィット。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.TrendLineTypeEnum.Exponent">
      <summary>Y(x) = C0 * exp( C1*x) 式の回帰式のフィット。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.TrendLineTypeEnum.Logarithmic">
      <summary>Y(x) = C0 * ln(C1*x) 式の回帰式のフィット。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.TrendLineTypeEnum.Power">
      <summary>Y(x) = C0 * x C1 式の回帰式のフィット。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.TrendLineTypeEnum.Fourier">
      <summary>Y(x) = C0 + C1 * cos(x) + C2 * sin(x) + C3 * cos(2*x) + C4 * sin(2*x) + … 式の回帰式のフィット。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.TrendLineTypeEnum.MovingAverage">
      <summary>Y データ値の移動平均 Yi = ( yi + yi-1 + yi-2 + … + yi-p+1 ) / p（ p は期間を表す）。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.TrendLineTypeEnum.Average">
      <summary>Y データ値の平均。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.TrendLineTypeEnum.Minimum">
      <summary>Y データ値の最小。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.TrendLineTypeEnum.Maximum">
      <summary>Y データ値の最大。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.DataArrayEnum">
      <summary>この列挙体のメンバを使用して、TrendLine クラスの DataArray プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataArrayEnum.Y">
      <summary>ChartDataSeries.Y 配列を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataArrayEnum.Y1">
      <summary>ChartDataSeries.Y1 配列を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataArrayEnum.Y2">
      <summary>ChartDataSeries.Y2 配列を指定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.DataArrayEnum.Y3">
      <summary>ChartDataSeries.Y3 配列を指定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.ICustomTrendLine">
      <summary>ユーザー定義の TrendLine を実装するインタフェースを提供します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.ICustomTrendLine.Calculate(C1.Win.C1Chart.TrendLine,System.Double[],System.Double[])">
      <summary>プロットする TrendLine の点を計算します。X 値と Y 値は GetXValues メソッドと GetYValues メソッドで返す必要があります。</summary>
      <param name="tl">近似曲線。</param>
      <param name="x">X 値。</param>
      <param name="y">Y 値。</param>
      <seealso cref="T:C1.Win.C1Chart.ICustomTrendLine" />
    </member>
    <member name="M:C1.Win.C1Chart.ICustomTrendLine.GetXValues">
      <summary>TrendLine の X 値を含む配列を返します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ICustomTrendLine" />
    </member>
    <member name="M:C1.Win.C1Chart.ICustomTrendLine.GetYValues">
      <summary>TrendLine の Y 値を含む配列を返します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ICustomTrendLine" />
    </member>
    <member name="M:C1.Win.C1Chart.ICustomTrendLine.GetY(System.Double)">
      <summary>X 値を指定して、近似曲線の値を計算します。</summary>
      <param name="x">パラメータ。</param>
      <returns>Double 型。</returns>
      <seealso cref="T:C1.Win.C1Chart.ICustomTrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.ICustomTrendLine.Text">
      <summary>凡例内に表示する TrendLine に関連付けられたテキストを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.ICustomTrendLine" />
    </member>
    <member name="T:C1.Win.C1Chart.TrendLine">
      <summary>TrendLine クラスは、指定したデータセットの回帰分析を実行し、 回帰の統計を提供してその結果をグラフ化します。</summary>
    </member>
    <member name="M:C1.Win.C1Chart.TrendLine.#ctor">
      <summary>
        <see cref="T:C1.Win.C1Chart.TrendLine" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.Win.C1Chart.TrendLine.GetCoefficients">
      <summary>TrendLine の計算された係数を返します。</summary>
      <returns>近似曲線の式を記述する係数の配列。</returns>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="M:C1.Win.C1Chart.TrendLine.GetY(System.Double)">
      <summary>X 値を指定して、近似曲線の値を計算します。</summary>
      <param name="x">X 値。</param>
      <returns>計算された Y 値。</returns>
      <remarks>このメソッドは、回帰を実行する近似曲線タイプにのみ適用されます。</remarks>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.CustomTrendLine">
      <summary>近似曲線のユーザー定義の計算を提供するオブジェクトを取得または設定します。</summary>
      <remarks>近似曲線計算の完全な制御を取得するには、ICustomTrendLine から継承するクラスを実装してインスタンス化できます。CustomTrendLine プロパティを このクラスオブジェクトのインスタンスに設定すると、グラフは適切なスタイルと凡例エントリでユーザー定義の TrendLine をプロットします。</remarks>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.TrendLineType">
      <summary>近似曲線のタイプを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.Period">
      <summary>近似曲線の計算の区間を取得または設定します。</summary>
      <remarks>このプロパティは、移動平均近似曲線の計算にのみ有効です。</remarks>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.LineStyle">
      <summary>近似曲線のプロットに使用する線スタイルを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.ForecastBackward">
      <summary>適切なデータ最小値から X 軸方向に伸びる近似曲線の長さを指定する値を 取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.ForecastForward">
      <summary>適切なデータ最大値から X 軸方向に伸びる近似曲線の長さを指定する値を 取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.PlotOverData">
      <summary>近似曲線をデータの前面と背面のいずれにプロットするかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.LegendEntry">
      <summary>凡例内に近似曲線を表示するかどうかを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.Text">
      <summary>凡例内に表示する近似曲線に関連付けられたテキストを取得または設定します。</summary>
      <remarks>
        Text プロパティは、凡例の描画時に適切な値に置き換えられるキーワードを含みます。 キーワードは角カッコ（［］）に入れる必要があります。
        <list type="table">
          <listheader>
            <term>キーワード</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>#DSLABEL</term>
            <description>適切なデータセットのラベル</description>
          </item>
          <item>
            <term>#TRENDTYPE</term>
            <description>近似曲線のタイプ</description>
          </item>
          <item>
            <term>#SHORTTRENDTYPE</term>
            <description>近似曲線の短いタイプ</description>
          </item>
          <item>
            <term>#NTERMS</term>
            <description>回帰近似曲線の項の数</description>
          </item>
          <item>
            <term>#PERIOD</term>
            <description>移動平均近似曲線の区間</description>
          </item>
          <item>
            <term>#FORMULA</term>
            <description>回帰式の数式</description>
          </item>
        </list>
      </remarks>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.DataArray">
      <summary>近似曲線に使用する Y 値の配列インデックスを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.PlotNumPoints">
      <summary>近似曲線のプロットに使用するデータ点の数を取得または設定します。</summary>
      <remarks>このプロパティは、近似曲線のプロットの品質を制御します。近似曲線が滑らかでない場合や 詳細に表示されない場合、PlotNumPoints を増加します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.PlotLinesMethod">
      <summary>近似曲線のプロットに使用するメソッドを取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.Visible">
      <summary>近似曲線の表示／非表示を取得または設定します。</summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.SeriesIndex">
      <summary>近似曲線の計算に使用するデータセットのインデックスを取得または設定します。</summary>
      <remarks>SeriesIndex 値が特定のデータセットを処理しない場合、近似曲線を表示しません。</remarks>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.SeriesLabel">
      <summary>近似曲線の計算に使用するデータセットのラベルを取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.RegressionStatistics">
      <summary>計算された回帰の統計情報を取得します。</summary>
      <remarks>このプロパティは、多項式、対数、累乗、指数、フーリエ のいずれかの回帰モデルを使用する 近似曲線にのみ有効です。これらの回帰モデルの１つを使用しない近似曲線の場合、 Nothing（VB）または null（C#）を返します。データを指定した回帰モデルに フィットできない場合も、Nothing（VB）または null（C#）を返します。</remarks>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLine.RegressionOptions">
      <summary>回帰の計算のオプションを取得します。</summary>
      <remarks>多項式、対数、累乗、指数、フーリエの各回帰モデルを使用する近似曲線の場合のみ。</remarks>
      <seealso cref="T:C1.Win.C1Chart.TrendLine" />
    </member>
    <member name="T:C1.Win.C1Chart.TrendLinesCollection">
      <summary>
        TrendLinesCollection クラスは、
        <see cref="T:C1.Win.C1Chart.ChartData" />オブジェクトに関連付けられた近似曲線を含みます。
      </summary>
    </member>
    <member name="M:C1.Win.C1Chart.TrendLinesCollection.AddNewTrendLine">
      <summary>新しい近似曲線を作成してコレクションに追加します。</summary>
      <returns>新しい近似曲線。</returns>
      <seealso cref="T:C1.Win.C1Chart.TrendLinesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.TrendLinesCollection.Add(C1.Win.C1Chart.TrendLine)">
      <summary>指定した近似曲線をコレクションに追加します。</summary>
      <param name="tl">近似曲線。</param>
      <returns>整数インデックス。</returns>
      <seealso cref="T:C1.Win.C1Chart.TrendLinesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.TrendLinesCollection.Insert(System.Int32,C1.Win.C1Chart.TrendLine)">
      <summary>指定した近似曲線をコレクション内の指定したインデックスに挿入します。</summary>
      <param name="index">インデックス。</param>
      <param name="tl">近似曲線。</param>
      <seealso cref="T:C1.Win.C1Chart.TrendLinesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.TrendLinesCollection.Remove(C1.Win.C1Chart.TrendLine)">
      <summary>指定した近似曲線をコレクションから削除します。</summary>
      <param name="tl">削除する近似曲線。</param>
      <seealso cref="T:C1.Win.C1Chart.TrendLinesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.TrendLinesCollection.Contains(C1.Win.C1Chart.TrendLine)">
      <summary>指定した近似曲線がコレクション内に存在するかどうかを決定します。</summary>
      <param name="tl">近似曲線。</param>
      <returns>指定した近似曲線がコレクション内に含まれているかどうかを示すブール値。</returns>
      <seealso cref="T:C1.Win.C1Chart.TrendLinesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.TrendLinesCollection.CopyTo(C1.Win.C1Chart.TrendLine[],System.Int32)">
      <summary>指定したインデックスから開始する近似曲線のコレクションを TrendLinesCollection オブジェクトの指定した配列にコピーします。</summary>
      <param name="array">配列。</param>
      <param name="index">インデックス。</param>
      <seealso cref="T:C1.Win.C1Chart.TrendLinesCollection" />
    </member>
    <member name="M:C1.Win.C1Chart.TrendLinesCollection.IndexOf(C1.Win.C1Chart.TrendLine)">
      <summary>コレクションの指定した近似曲線の現在のインデックスを取得します。</summary>
      <param name="tl">探す近似曲線。</param>
      <returns>インデックス。</returns>
      <remarks>コレクション内の指定した近似曲線の要素を示す整数を返します。 近似曲線が見つからない場合、戻り値は –１です。</remarks>
      <seealso cref="T:C1.Win.C1Chart.TrendLinesCollection" />
    </member>
    <member name="P:C1.Win.C1Chart.TrendLinesCollection.Item(System.Int32)">
      <summary>数値インデックスによって、指定した近似曲線をコレクションから取得します。</summary>
      <seealso cref="T:C1.Win.C1Chart.TrendLinesCollection" />
    </member>
    <member name="T:C1.Win.C1Chart.RegressionOptions">
      <summary>回帰モデルのオプションを含みます。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.RegressionOptions.NumTerms">
      <summary>回帰式の項の数を取得または設定します。多項式回帰の場合、項の数は多項式の順序数を示します。 すなわち、NumTerms = order + 1。 したがって、線形回帰は NumTerms = 2 の値を持ちます。</summary>
      <remarks>多項式とフーリエ近似曲線のみ。</remarks>
      <seealso cref="T:C1.Win.C1Chart.RegressionOptions" />
    </member>
    <member name="P:C1.Win.C1Chart.RegressionOptions.UseYIntercept">
      <summary>近似曲線が YIntercept プロパティを使用するかどうかを取得または設定します。</summary>
      <remarks>多項式近似曲線のみ。</remarks>
      <seealso cref="T:C1.Win.C1Chart.RegressionOptions" />
    </member>
    <member name="P:C1.Win.C1Chart.RegressionOptions.YIntercept">
      <summary>X = 0 のとき近似曲線の Y 値を取得または設定します。</summary>
      <remarks>多項式近似曲線のみ。</remarks>
      <seealso cref="T:C1.Win.C1Chart.RegressionOptions" />
    </member>
    <member name="T:C1.Win.C1Chart.LightShapeEnum">
      <summary>この列挙体のメンバを使用して、VisualEffectsStyle.LightStyle クラスの Shape プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LightShapeEnum.Rectangle">
      <summary>ライトグラデーション効果は、オブジェクトの一方のエッジから他方の エッジに向かって進みます。LightStyle の Scale プロパティを使用し、 オブジェクト内のグラデーションの周期の長さを調整できます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LightShapeEnum.Ellipse">
      <summary>ライトグラデーション効果は、オブジェクトの中心から外側の エッジに向かって進みます。LightStyle の Shift プロパティと Size プロパティを使用し、 楕円の中心とサイズを調整できます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LightShapeEnum.Edge">
      <summary>ライト効果は、オブジェクトのエッジ近くで曲がります。 LightGradient は常にこの形状で楕円形になります。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.LightGradientEnum">
      <summary>この列挙体のメンバを使用して、VisualEffectsStyle.LightStyle クラスの Gradient プロパティの値を設定します。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LightGradientEnum.Simple">
      <summary>ライトグラデーション効果は、形状に基づいてオブジェクトを通して線形になります。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LightGradientEnum.Triangle">
      <summary>ライトグラデーション効果は、色から、ライト、色へと進みます。</summary>
    </member>
    <member name="F:C1.Win.C1Chart.LightGradientEnum.SigmeBell">
      <summary>ライトグラデーション効果は、中央重点の配光によって、 色から、ライト、色へと進みます。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.VisualEffects">
      <summary>スケール、ライト、影など、グラフ要素で使用できる 各種の視覚エフェクトを定義します。</summary>
    </member>
    <member name="M:C1.Util.VisualEffects.SmartPainter.GetNumberOfPresets">
      <summary>組み込みプリセットの数を取得します。</summary>
      <returns></returns>
    </member>
    <member name="M:C1.Util.VisualEffects.SmartPainter.LoadPreset(System.String,System.Int32)">
      <summary>組み込みプリセットを指定した要素にロードします。</summary>
      <param name="elementName"></param>
      <param name="nPreset"></param>
    </member>
    <member name="M:C1.Util.VisualEffects.SmartPainter.LoadFromString(System.String)">
      <summary>指定した文字列から SmartPainter の設定情報をロードします。</summary>
      <param name="s">SmartPainter 設定情報を格納している文字列。</param>
    </member>
    <member name="M:C1.Util.VisualEffects.SmartPainter.SaveToString">
      <summary>SmartPainter の設定情報を文字列に保存します。</summary>
      <returns>SmartPainter 設定情報を格納している文字列。</returns>
    </member>
    <member name="M:C1.Util.VisualEffects.SmartPainter.Reset(System.String)">
      <summary>指定した要素のカスタム設定をリセットします。</summary>
      <param name="elementName">要素の名前</param>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffects.Styles">
      <summary>VisualEffectsStyle のコレクションを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.VisualEffectsStyleCollection">
      <summary>VisualEffects を格納します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.VisualEffectsStyle">
      <summary>効果パラメータへのアクセスを提供します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.Name">
      <summary>スタイル名を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.Enabled">
      <summary>効果を有効にします。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.Scalable">
      <summary>要素のサイズがコントロールのサイズによって決まるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.ScaleEffect">
      <summary>Scalable プロパティが Ｔrue のとき要素をスケールするために使用するスケール係数を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.GroupElements">
      <summary>描画時にグラフィック要素をグループ化できるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.Angle">
      <summary>描画時に使用する角度を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.Shadow">
      <summary>スタイルの影設定を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.Light">
      <summary>スタイルのライト設定を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.Edge">
      <summary>スタイルのエッジ設定を取得します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.Colors">
      <summary>スタイルの色オプションを取得します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.VisualEffectsStyle.ShadowStyle">
      <summary>影の設定を示します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.ShadowStyle.Offset">
      <summary>影のオフセット値を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.ShadowStyle.Transparency">
      <summary>影の透過率を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.ShadowStyle.Soft">
      <summary>影の輪郭をぼかすかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.VisualEffectsStyle.LightStyle">
      <summary>ライトの設定を示します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.LightStyle.Intensity">
      <summary>ライトの強さを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.LightStyle.Shape">
      <summary>ライトの形状を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.LightStyle.Scale">
      <summary>ライトのスケールを取得または設定します。スケールが1より小さい場合、ライトパターンは要素内で繰り返されます。本プロパティは、LightShapeEnum.Rectangle の場合にのみ使用されます。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.LightStyle.Focus">
      <summary>ライトのフォーカスを取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.LightStyle.Shift">
      <summary>ライトのシフト位置を取得または設定します。 本プロパティは、LightShapeEnum.Ellipse の場合にのみ使用されます。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.LightStyle.Size">
      <summary>ライトのスポットのサイズを取得または設定します。本プロパティは、LightShapeEnum.Ellipse の場合にのみ使用されます。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.LightStyle.Gradient">
      <summary>ライトのグラデーションの種類を取得または設定します。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.VisualEffectsStyle.EdgeStyle">
      <summary>境界の設定を示します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.EdgeStyle.Width">
      <summary>要素の境界の幅を取得または設定します。Scalable プロパティが True の場合は相対的な単位で計測され、False の場合はピクセル値となります。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.EdgeStyle.Rounding">
      <summary>矩形要素の角丸の半径を取得または設定します。Scalable プロパティが True の場合は相対的な単位で計測され、False の場合はピクセル値となります。</summary>
    </member>
    <member name="T:C1.Win.C1Chart.VisualEffectsStyle.ColorOptions">
      <summary>色オプションを示します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.ColorOptions.Brightness">
      <summary>-100 から 100 の間で輝度を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.ColorOptions.Saturation">
      <summary>-100 から 100 の間で彩度を取得または設定します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.VisualEffectsStyle.ColorOptions.HueShift">
      <summary>0 から 359 の間色相を取得または設定します。</summary>
    </member>
    <member name="E:C1.Win.C1Chart.ValueLabel.ValueChanging">
      <summary>マーカーのドラッグによって ValueLabel の位置が変化した場合に発生します。</summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.MovingNumericValue">
      <summary>
        ドラッグ操作中に、移動中の ValueLabel の新しい ValueLabel 数値を取得します。
        <remarks>この値は、マウスによって ValueLabel がドラッグされている間だけ NumericValue プロパティの値と異なるので、 ValueLabel.ValueChanging イベントで非常に便利です。</remarks>
      </summary>
    </member>
    <member name="P:C1.Win.C1Chart.ValueLabel.MovingDateTimeValue">
      <summary>
        ドラッグ操作中に、移動中の ValueLabel の新しい ValueLabel DateTimeValue を取得します。
        <remarks>この値は、マウスによって ValueLabel がドラッグされている間だけ DateTimeValue プロパティの値と異なるので、 ValueLabel.ValueChanging イベントで非常に便利です。</remarks>
      </summary>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ShowProperties(System.Drawing.Rectangle@)">
      <summary>実行時に、グラフプロパティダイアログを表示します。</summary>
      <param name="rect">
        <para>スクリーン座標内のプロパティダイアログの位置を提供して返す Rectangle 参照を指定します。</para>空の四角形を指定すると、プロパティダイアログがグラフの親ウィンドウの中心に配置されます。
      </param>
      <returns>DialogResult</returns>
      <remarks>
        <para>プロパティダイアログを使用すると、実行時に、グラフプロパティ（データを含む） を変更できます。有効なすべてのプロパティが複数のタブに表示されます。</para>
        <para>プロパティダイアログは、常に最小サイズで表示されます。</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ShowProperties(C1.Win.C1Chart.PropertyPageFlags,System.Drawing.Rectangle@)">
      <summary>実行時に、カスタマイズされたグラフプロパティダイアログを表示します。</summary>
      <param name="ppf">使用できるプロパティを制限する PropertyPageFlags の組み合わせを指定します。</param>
      <param name="rect">
        <para>スクリーン座標内のプロパティダイアログの位置を提供して返す Rectangle 参照を指定します。</para>空の四角形を指定すると、プロパティダイアログがグラフの親ウィンドウの中心に配置されます。
      </param>
      <remarks>
        <para>プロパティダイアログを使用すると、実行時に、グラフプロパティ（データを含む）を変更できます。 有効なすべてのプロパティが複数のタブに表示されます。</para>
        <para>プロパティダイアログは、常に最小サイズで表示されます。</para>
      </remarks>
      <returns>DialogResult</returns>
    </member>
    <member name="M:C1.Win.C1Chart.C1Chart.ShowVisualEffectsEditor(System.Drawing.Rectangle@)">
      <summary>実行時に VisualEffects エディタダイアログを表示します。</summary>
      <param name="rect">
        <para>スクリーン座標内の VisualEffects エディタの位置を提供して返す Rectangle 参照を指定します。</para>空の四角形を指定すると、編集中のグラフの端にエディタが配置されます。エディタのサイズは固定されます。
      </param>
      <returns>DialogResult</returns>
    </member>
    <member name="M:C1.Win.C1Chart.Legend.TrendLinesFromCoord(System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>指定されたクライアント座標に最も近い凡例エントリのグループと傾向線のインデックスを取得します。マウス座標は、クライアント座標で指定されます。</summary>
      <param name="XCoord">X クライアント座標。</param>
      <param name="YCoord">Y クライアント座標。</param>
      <param name="GroupIndex">グループインデックス。</param>
      <param name="TrendLineIndex">傾向線インデックス。</param>
      <returns>戻り値は、計算が成功したことを示します。</returns>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
    <member name="M:C1.Win.C1Chart.Legend.FunctionsFromCoord(System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>指定されたクライアント座標に最も近い凡例エントリのグループと関数のインデックスを取得します。マウス座標は、クライアント座標で指定されます。</summary>
      <param name="XCoord">X クライアント座標。</param>
      <param name="YCoord">Y クライアント座標。</param>
      <param name="GroupIndex">グループインデックス。</param>
      <param name="FunctionIndex">系列インデックス。</param>
      <returns>戻り値は、計算が成功したことを示します。</returns>
      <seealso cref="T:C1.Win.C1Chart.Legend" />
    </member>
  </members>
</doc>